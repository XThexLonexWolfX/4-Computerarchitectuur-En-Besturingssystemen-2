
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fe  00802000  00002f68  00002ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004289  008020fe  008020fe  000030fa  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000030fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008ff7  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003db8  00000000  00000000  0000c65f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000373e  00000000  00000000  00010417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  00013b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039d1  00000000  00000000  00014848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004af4  00000000  00000000  00018219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  0001cd0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__ctors_end>
       4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
       8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
       c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      10:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      14:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      18:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      20:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      24:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      28:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      2c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      30:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      34:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      38:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_14>
      3c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      40:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      44:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      48:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      4c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      50:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__vector_20>
      54:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      58:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      5c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      60:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      64:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      68:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      6c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      70:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      74:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      78:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      7c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      80:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      84:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      88:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      8c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      90:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      94:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      98:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      9c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      ac:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b8:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_46>
      bc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      cc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      dc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      ec:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      fc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     100:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     104:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     108:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     10c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     110:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     114:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     118:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     11c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     120:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     124:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     128:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     12c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     130:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     134:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     138:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     13c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     140:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     144:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     148:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     14c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     150:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     154:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     158:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     15c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     160:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     164:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     168:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     16c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     170:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     174:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     178:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     17c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     180:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     184:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     188:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     18c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     190:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     194:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     198:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     19c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1ac:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1bc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1cc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1dc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1ec:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <prvIdleTask>
     200:	0c 94 b1 02 	jmp	0x562	; 0x562 <stdio_putchar>
     204:	0c 94 bd 02 	jmp	0x57a	; 0x57a <stdio_getchar>
     208:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <WorkerLooplicht>
     20c:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <WorkerTerminal>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__c.2474>:
     312:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000031e <__ctors_end>:
     31e:	11 24       	eor	r1, r1
     320:	1f be       	out	0x3f, r1	; 63
     322:	cf ef       	ldi	r28, 0xFF	; 255
     324:	cd bf       	out	0x3d, r28	; 61
     326:	df e9       	ldi	r29, 0x9F	; 159
     328:	de bf       	out	0x3e, r29	; 62
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	0c bf       	out	0x3c, r16	; 60

0000032e <__do_copy_data>:
     32e:	10 e2       	ldi	r17, 0x20	; 32
     330:	a0 e0       	ldi	r26, 0x00	; 0
     332:	b0 e2       	ldi	r27, 0x20	; 32
     334:	e8 e6       	ldi	r30, 0x68	; 104
     336:	ff e2       	ldi	r31, 0x2F	; 47
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	0b bf       	out	0x3b, r16	; 59
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__do_copy_data+0x14>
     33e:	07 90       	elpm	r0, Z+
     340:	0d 92       	st	X+, r0
     342:	ae 3f       	cpi	r26, 0xFE	; 254
     344:	b1 07       	cpc	r27, r17
     346:	d9 f7       	brne	.-10     	; 0x33e <__do_copy_data+0x10>

00000348 <__do_clear_bss>:
     348:	23 e6       	ldi	r18, 0x63	; 99
     34a:	ae ef       	ldi	r26, 0xFE	; 254
     34c:	b0 e2       	ldi	r27, 0x20	; 32
     34e:	01 c0       	rjmp	.+2      	; 0x352 <.do_clear_bss_start>

00000350 <.do_clear_bss_loop>:
     350:	1d 92       	st	X+, r1

00000352 <.do_clear_bss_start>:
     352:	a7 38       	cpi	r26, 0x87	; 135
     354:	b2 07       	cpc	r27, r18
     356:	e1 f7       	brne	.-8      	; 0x350 <.do_clear_bss_loop>
     358:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <main>
     35c:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <_exit>

00000360 <__bad_interrupt>:
     360:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000364 <DriverAdcInit>:
#include "DriverAdc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void DriverAdcInit(void)
{
     364:	08 95       	ret

00000366 <DriverCursorstickInit>:
#include "DriverCursorstick.h"

void DriverCursorstickInit(void)
{
     366:	08 95       	ret

00000368 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     368:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     36a:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     36e:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     372:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     376:	90 81       	ld	r25, Z
     378:	99 23       	and	r25, r25
     37a:	69 f0       	breq	.+26     	; 0x396 <DbgPrint+0x2e>
     37c:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     37e:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     380:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     384:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     388:	96 ff       	sbrs	r25, 6
     38a:	fc cf       	rjmp	.-8      	; 0x384 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     38c:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     390:	91 91       	ld	r25, Z+
     392:	91 11       	cpse	r25, r1
     394:	f5 cf       	rjmp	.-22     	; 0x380 <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     396:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     39a:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     39e:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     3a2:	08 95       	ret

000003a4 <DriverLedInit>:
#include "DriverLed.h"

void DriverLedInit(void)
{
	PORTB.DIRSET=0b00000111; // PB0-2 als uitgang zetten
     3a4:	e0 e2       	ldi	r30, 0x20	; 32
     3a6:	f6 e0       	ldi	r31, 0x06	; 6
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	81 83       	std	Z+1, r24	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTB.PIN0CTRL=0b01000000;
     3ac:	80 e4       	ldi	r24, 0x40	; 64
     3ae:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL=0b01000000;
     3b0:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL=0b01000000;
     3b2:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTA.DIRSET=0b10000000; // PA7 als uitgang zetten
     3b4:	e0 e0       	ldi	r30, 0x00	; 0
     3b6:	f6 e0       	ldi	r31, 0x06	; 6
     3b8:	90 e8       	ldi	r25, 0x80	; 128
     3ba:	91 83       	std	Z+1, r25	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTA.PIN7CTRL=0b01000000;
     3bc:	87 8b       	std	Z+23, r24	; 0x17
     3be:	08 95       	ret

000003c0 <DriverLedWrite>:
}

void DriverLedWrite(uint8_t LedData)
{
	PORTB.OUT = LedData & 0b00000111;	// Alleen de de waarden van PB0-2 overhouden
     3c0:	98 2f       	mov	r25, r24
     3c2:	97 70       	andi	r25, 0x07	; 7
     3c4:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	LedData = LedData<<4; // 4 nullen langs rechts inschuiven om de 4de bit op plaats 8 te krijgen voor PA7
	PORTA.OUT = LedData & 0b10000000; // Alleen waarde van PA7 overhouden
     3c8:	82 95       	swap	r24
     3ca:	80 78       	andi	r24, 0x80	; 128
     3cc:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
     3d0:	08 95       	ret

000003d2 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     3d2:	8b ec       	ldi	r24, 0xCB	; 203
     3d4:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     3de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3e2:	83 ff       	sbrs	r24, 3
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3e6:	82 ec       	ldi	r24, 0xC2	; 194
     3e8:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3ec:	88 e1       	ldi	r24, 0x18	; 24
     3ee:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3f2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3f6:	84 ff       	sbrs	r24, 4
     3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3fa:	88 ed       	ldi	r24, 0xD8	; 216
     3fc:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret

00000408 <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     408:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <__data_end>
     40c:	e0 e8       	ldi	r30, 0x80	; 128
     40e:	f6 e0       	ldi	r31, 0x06	; 6
     410:	88 e1       	ldi	r24, 0x18	; 24
     412:	80 8b       	std	Z+16, r24	; 0x10
     414:	81 8b       	std	Z+17, r24	; 0x11
     416:	e0 ea       	ldi	r30, 0xA0	; 160
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	88 e7       	ldi	r24, 0x78	; 120
     41c:	81 83       	std	Z+1, r24	; 0x01
     41e:	83 e2       	ldi	r24, 0x23	; 35
     420:	85 83       	std	Z+5, r24	; 0x05
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	84 83       	std	Z+4, r24	; 0x04
     426:	08 95       	ret

00000428 <TWIMWriteHandler>:
     428:	90 91 02 21 	lds	r25, 0x2102	; 0x802102 <Twim_bytesToWrite>
     42c:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <Twim_bytesToRead>
     430:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     434:	84 fd       	sbrc	r24, 4
     436:	08 c0       	rjmp	.+16     	; 0x448 <TWIMWriteHandler+0x20>
     438:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <Twim_bytesWritten>
     43c:	89 17       	cp	r24, r25
     43e:	50 f0       	brcs	.+20     	; 0x454 <TWIMWriteHandler+0x2c>
     440:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <Twim_bytesRead>
     444:	82 17       	cp	r24, r18
     446:	b8 f0       	brcs	.+46     	; 0x476 <TWIMWriteHandler+0x4e>
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     44e:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <__data_end>
     452:	08 95       	ret
     454:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <Twim_bytesWritten>
     458:	e0 91 05 21 	lds	r30, 0x2105	; 0x802105 <Twim_writeData>
     45c:	f0 91 06 21 	lds	r31, 0x2106	; 0x802106 <Twim_writeData+0x1>
     460:	e8 0f       	add	r30, r24
     462:	f1 1d       	adc	r31, r1
     464:	80 81       	ld	r24, Z
     466:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     46a:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <Twim_bytesWritten>
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <Twim_bytesWritten>
     474:	08 95       	ret
     476:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <Twim_address>
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     480:	08 95       	ret

00000482 <TWIMReadHandler>:
     482:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <Twim_bytesRead>
     486:	80 32       	cpi	r24, 0x20	; 32
     488:	e0 f4       	brcc	.+56     	; 0x4c2 <TWIMReadHandler+0x40>
     48a:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     48e:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <Twim_bytesRead>
     492:	e0 91 03 21 	lds	r30, 0x2103	; 0x802103 <Twim_readData>
     496:	f0 91 04 21 	lds	r31, 0x2104	; 0x802104 <Twim_readData+0x1>
     49a:	e9 0f       	add	r30, r25
     49c:	f1 1d       	adc	r31, r1
     49e:	80 83       	st	Z, r24
     4a0:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <Twim_bytesRead>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <Twim_bytesRead>
     4aa:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <Twim_bytesToRead>
     4ae:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <Twim_bytesRead>
     4b2:	89 17       	cp	r24, r25
     4b4:	88 f0       	brcs	.+34     	; 0x4d8 <TWIMReadHandler+0x56>
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4bc:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <__data_end>
     4c0:	08 95       	ret
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4c8:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <__data_end>
     4cc:	90 91 01 21 	lds	r25, 0x2101	; 0x802101 <Twim_bytesToRead>
     4d0:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <Twim_bytesRead>
     4d4:	89 17       	cp	r24, r25
     4d6:	78 f7       	brcc	.-34     	; 0x4b6 <TWIMReadHandler+0x34>
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4de:	08 95       	ret

000004e0 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	0b b6       	in	r0, 0x3b	; 59
     4ec:	0f 92       	push	r0
     4ee:	2f 93       	push	r18
     4f0:	3f 93       	push	r19
     4f2:	4f 93       	push	r20
     4f4:	5f 93       	push	r21
     4f6:	6f 93       	push	r22
     4f8:	7f 93       	push	r23
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
     4fe:	af 93       	push	r26
     500:	bf 93       	push	r27
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     506:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     50a:	98 2f       	mov	r25, r24
     50c:	9c 70       	andi	r25, 0x0C	; 12
     50e:	39 f4       	brne	.+14     	; 0x51e <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     510:	86 fd       	sbrc	r24, 6
     512:	21 c0       	rjmp	.+66     	; 0x556 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     514:	87 fd       	sbrc	r24, 7
     516:	22 c0       	rjmp	.+68     	; 0x55c <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     518:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <__data_end>
     51c:	07 c0       	rjmp	.+14     	; 0x52c <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     51e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     522:	88 60       	ori	r24, 0x08	; 8
     524:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     528:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     52c:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <__data_end>
	{	
	}
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0b be       	out	0x3b, r0	; 59
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     556:	0e 94 14 02 	call	0x428	; 0x428 <TWIMWriteHandler>
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     55c:	0e 94 41 02 	call	0x482	; 0x482 <TWIMReadHandler>
     560:	e5 cf       	rjmp	.-54     	; 0x52c <__vector_46+0x4c>

00000562 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     562:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     566:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     56a:	86 ff       	sbrs	r24, 6
     56c:	fc cf       	rjmp	.-8      	; 0x566 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret

0000057a <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     57a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     57e:	87 ff       	sbrs	r24, 7
     580:	fc cf       	rjmp	.-8      	; 0x57a <stdio_getchar>
	return USART.DATA;
     582:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	08 95       	ret

0000058a <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     58a:	e0 e8       	ldi	r30, 0x80	; 128
     58c:	f6 e0       	ldi	r31, 0x06	; 6
     58e:	88 e0       	ldi	r24, 0x08	; 8
     590:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     596:	e0 ea       	ldi	r30, 0xA0	; 160
     598:	fa e0       	ldi	r31, 0x0A	; 10
     59a:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     59c:	88 e1       	ldi	r24, 0x18	; 24
     59e:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     5a4:	85 ee       	ldi	r24, 0xE5	; 229
     5a6:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     5a8:	8c eb       	ldi	r24, 0xBC	; 188
     5aa:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     5ac:	e1 e8       	ldi	r30, 0x81	; 129
     5ae:	f3 e6       	ldi	r31, 0x63	; 99
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e2       	ldi	r25, 0x20	; 32
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     5b8:	80 83       	st	Z, r24
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	08 95       	ret

000005be <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     5c8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     5cc:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <xHeapHasBeenInitialised.4117>
     5d0:	81 11       	cpse	r24, r1
     5d2:	21 c0       	rjmp	.+66     	; 0x616 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5d4:	82 e1       	ldi	r24, 0x12	; 18
     5d6:	91 e2       	ldi	r25, 0x21	; 33
     5d8:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <xStart>
     5dc:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     5e0:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <xStart+0x2>
     5e4:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	9f e3       	ldi	r25, 0x3F	; 63
     5ec:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <xEnd+0x2>
     5f0:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     5f4:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <xEnd>
     5f8:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     5fc:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <ucHeap+0x3>
     600:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     604:	89 e0       	ldi	r24, 0x09	; 9
     606:	91 e2       	ldi	r25, 0x21	; 33
     608:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <ucHeap+0x1>
     60c:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <xHeapHasBeenInitialised.4117>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     616:	20 97       	sbiw	r28, 0x00	; 0
     618:	09 f4       	brne	.+2      	; 0x61c <pvPortMalloc+0x5e>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     61c:	ae 01       	movw	r20, r28
     61e:	4c 5f       	subi	r20, 0xFC	; 252
     620:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     622:	23 96       	adiw	r28, 0x03	; 3
     624:	ce 3f       	cpi	r28, 0xFE	; 254
     626:	df 43       	sbci	r29, 0x3F	; 63
     628:	08 f0       	brcs	.+2      	; 0x62c <pvPortMalloc+0x6e>
     62a:	5c c0       	rjmp	.+184    	; 0x6e4 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     62c:	e0 91 0d 21 	lds	r30, 0x210D	; 0x80210d <xStart>
     630:	f0 91 0e 21 	lds	r31, 0x210E	; 0x80210e <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     634:	ad e0       	ldi	r26, 0x0D	; 13
     636:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     638:	06 c0       	rjmp	.+12     	; 0x646 <pvPortMalloc+0x88>
     63a:	80 81       	ld	r24, Z
     63c:	91 81       	ldd	r25, Z+1	; 0x01
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	39 f0       	breq	.+14     	; 0x650 <pvPortMalloc+0x92>
     642:	df 01       	movw	r26, r30
     644:	fc 01       	movw	r30, r24
     646:	22 81       	ldd	r18, Z+2	; 0x02
     648:	33 81       	ldd	r19, Z+3	; 0x03
     64a:	24 17       	cp	r18, r20
     64c:	35 07       	cpc	r19, r21
     64e:	a8 f3       	brcs	.-22     	; 0x63a <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     650:	c1 e2       	ldi	r28, 0x21	; 33
     652:	e9 30       	cpi	r30, 0x09	; 9
     654:	fc 07       	cpc	r31, r28
     656:	09 f4       	brne	.+2      	; 0x65a <pvPortMalloc+0x9c>
     658:	45 c0       	rjmp	.+138    	; 0x6e4 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     65a:	cd 91       	ld	r28, X+
     65c:	dc 91       	ld	r29, X
     65e:	11 97       	sbiw	r26, 0x01	; 1
     660:	8e 01       	movw	r16, r28
     662:	0c 5f       	subi	r16, 0xFC	; 252
     664:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	8d 93       	st	X+, r24
     66c:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     66e:	c9 01       	movw	r24, r18
     670:	84 1b       	sub	r24, r20
     672:	95 0b       	sbc	r25, r21
     674:	89 30       	cpi	r24, 0x09	; 9
     676:	91 05       	cpc	r25, r1
     678:	00 f1       	brcs	.+64     	; 0x6ba <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     67a:	bf 01       	movw	r22, r30
     67c:	64 0f       	add	r22, r20
     67e:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     680:	db 01       	movw	r26, r22
     682:	12 96       	adiw	r26, 0x02	; 2
     684:	8d 93       	st	X+, r24
     686:	9c 93       	st	X, r25
     688:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     68a:	42 83       	std	Z+2, r20	; 0x02
     68c:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     68e:	12 96       	adiw	r26, 0x02	; 2
     690:	2d 91       	ld	r18, X+
     692:	3c 91       	ld	r19, X
     694:	13 97       	sbiw	r26, 0x03	; 3
     696:	ad e0       	ldi	r26, 0x0D	; 13
     698:	b1 e2       	ldi	r27, 0x21	; 33
     69a:	01 c0       	rjmp	.+2      	; 0x69e <pvPortMalloc+0xe0>
     69c:	df 01       	movw	r26, r30
     69e:	ed 91       	ld	r30, X+
     6a0:	fc 91       	ld	r31, X
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	93 81       	ldd	r25, Z+3	; 0x03
     6a8:	82 17       	cp	r24, r18
     6aa:	93 07       	cpc	r25, r19
     6ac:	b8 f3       	brcs	.-18     	; 0x69c <pvPortMalloc+0xde>
     6ae:	eb 01       	movw	r28, r22
     6b0:	e8 83       	st	Y, r30
     6b2:	f9 83       	std	Y+1, r31	; 0x01
     6b4:	6d 93       	st	X+, r22
     6b6:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     6b8:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     6ba:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6be:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6c2:	82 1b       	sub	r24, r18
     6c4:	93 0b       	sbc	r25, r19
     6c6:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     6ca:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6ce:	0e 94 c7 09 	call	0x138e	; 0x138e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     6d2:	01 15       	cp	r16, r1
     6d4:	11 05       	cpc	r17, r1
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     6d8:	c8 01       	movw	r24, r16
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6e4:	0e 94 c7 09 	call	0x138e	; 0x138e <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     6e8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vApplicationMallocFailedHook>
     6ec:	00 e0       	ldi	r16, 0x00	; 0
     6ee:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     6f0:	c8 01       	movw	r24, r16
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	08 95       	ret

000006fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	21 f1       	breq	.+72     	; 0x74c <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     704:	ec 01       	movw	r28, r24
     706:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     708:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     70c:	4a 81       	ldd	r20, Y+2	; 0x02
     70e:	5b 81       	ldd	r21, Y+3	; 0x03
     710:	ad e0       	ldi	r26, 0x0D	; 13
     712:	b1 e2       	ldi	r27, 0x21	; 33
     714:	01 c0       	rjmp	.+2      	; 0x718 <vPortFree+0x1c>
     716:	df 01       	movw	r26, r30
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	22 81       	ldd	r18, Z+2	; 0x02
     720:	33 81       	ldd	r19, Z+3	; 0x03
     722:	24 17       	cp	r18, r20
     724:	35 07       	cpc	r19, r21
     726:	b8 f3       	brcs	.-18     	; 0x716 <vPortFree+0x1a>
     728:	e8 83       	st	Y, r30
     72a:	f9 83       	std	Y+1, r31	; 0x01
     72c:	cd 93       	st	X+, r28
     72e:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     730:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     734:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     738:	48 0f       	add	r20, r24
     73a:	59 1f       	adc	r21, r25
     73c:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     740:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     748:	0c 94 c7 09 	jmp	0x138e	; 0x138e <xTaskResumeAll>
	}
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     752:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     754:	03 96       	adiw	r24, 0x03	; 3
     756:	81 83       	std	Z+1, r24	; 0x01
     758:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     75a:	2f ef       	ldi	r18, 0xFF	; 255
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	23 83       	std	Z+3, r18	; 0x03
     760:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     762:	85 83       	std	Z+5, r24	; 0x05
     764:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     766:	87 83       	std	Z+7, r24	; 0x07
     768:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     76a:	10 82       	st	Z, r1
     76c:	08 95       	ret

0000076e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     76e:	fc 01       	movw	r30, r24
     770:	10 86       	std	Z+8, r1	; 0x08
     772:	11 86       	std	Z+9, r1	; 0x09
     774:	08 95       	ret

00000776 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	9c 01       	movw	r18, r24
     77c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     77e:	dc 01       	movw	r26, r24
     780:	11 96       	adiw	r26, 0x01	; 1
     782:	cd 91       	ld	r28, X+
     784:	dc 91       	ld	r29, X
     786:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     788:	c2 83       	std	Z+2, r28	; 0x02
     78a:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     78c:	8c 81       	ldd	r24, Y+4	; 0x04
     78e:	9d 81       	ldd	r25, Y+5	; 0x05
     790:	84 83       	std	Z+4, r24	; 0x04
     792:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     794:	8c 81       	ldd	r24, Y+4	; 0x04
     796:	9d 81       	ldd	r25, Y+5	; 0x05
     798:	dc 01       	movw	r26, r24
     79a:	12 96       	adiw	r26, 0x02	; 2
     79c:	6d 93       	st	X+, r22
     79e:	7c 93       	st	X, r23
     7a0:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     7a2:	6c 83       	std	Y+4, r22	; 0x04
     7a4:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     7a6:	20 87       	std	Z+8, r18	; 0x08
     7a8:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     7aa:	f9 01       	movw	r30, r18
     7ac:	80 81       	ld	r24, Z
     7ae:	8f 5f       	subi	r24, 0xFF	; 255
     7b0:	80 83       	st	Z, r24
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7be:	48 81       	ld	r20, Y
     7c0:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     7c2:	4f 3f       	cpi	r20, 0xFF	; 255
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	52 07       	cpc	r21, r18
     7c8:	01 f1       	breq	.+64     	; 0x80a <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7ca:	dc 01       	movw	r26, r24
     7cc:	13 96       	adiw	r26, 0x03	; 3
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <vListInsert+0x1a>
     7d0:	df 01       	movw	r26, r30
     7d2:	12 96       	adiw	r26, 0x02	; 2
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	13 97       	sbiw	r26, 0x03	; 3
     7da:	20 81       	ld	r18, Z
     7dc:	31 81       	ldd	r19, Z+1	; 0x01
     7de:	42 17       	cp	r20, r18
     7e0:	53 07       	cpc	r21, r19
     7e2:	b0 f7       	brcc	.-20     	; 0x7d0 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     7e4:	ea 83       	std	Y+2, r30	; 0x02
     7e6:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7e8:	c4 83       	std	Z+4, r28	; 0x04
     7ea:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     7ec:	ac 83       	std	Y+4, r26	; 0x04
     7ee:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     7f0:	12 96       	adiw	r26, 0x02	; 2
     7f2:	cd 93       	st	X+, r28
     7f4:	dc 93       	st	X, r29
     7f6:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     7f8:	88 87       	std	Y+8, r24	; 0x08
     7fa:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 81       	ld	r18, Z
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	20 83       	st	Z, r18
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     80a:	fc 01       	movw	r30, r24
     80c:	a7 81       	ldd	r26, Z+7	; 0x07
     80e:	b0 85       	ldd	r27, Z+8	; 0x08
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	ed 91       	ld	r30, X+
     814:	fc 91       	ld	r31, X
     816:	13 97       	sbiw	r26, 0x03	; 3
     818:	e5 cf       	rjmp	.-54     	; 0x7e4 <vListInsert+0x2c>

0000081a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     820:	a0 85       	ldd	r26, Z+8	; 0x08
     822:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     824:	22 81       	ldd	r18, Z+2	; 0x02
     826:	33 81       	ldd	r19, Z+3	; 0x03
     828:	84 81       	ldd	r24, Z+4	; 0x04
     82a:	95 81       	ldd	r25, Z+5	; 0x05
     82c:	e9 01       	movw	r28, r18
     82e:	8c 83       	std	Y+4, r24	; 0x04
     830:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     832:	84 81       	ldd	r24, Z+4	; 0x04
     834:	95 81       	ldd	r25, Z+5	; 0x05
     836:	ec 01       	movw	r28, r24
     838:	2a 83       	std	Y+2, r18	; 0x02
     83a:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     83c:	11 96       	adiw	r26, 0x01	; 1
     83e:	2d 91       	ld	r18, X+
     840:	3c 91       	ld	r19, X
     842:	12 97       	sbiw	r26, 0x02	; 2
     844:	e2 17       	cp	r30, r18
     846:	f3 07       	cpc	r31, r19
     848:	49 f0       	breq	.+18     	; 0x85c <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     84a:	10 86       	std	Z+8, r1	; 0x08
     84c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     84e:	8c 91       	ld	r24, X
     850:	81 50       	subi	r24, 0x01	; 1
     852:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     854:	8c 91       	ld	r24, X
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	8d 93       	st	X+, r24
     860:	9c 93       	st	X, r25
     862:	12 97       	sbiw	r26, 0x02	; 2
     864:	f2 cf       	rjmp	.-28     	; 0x84a <uxListRemove+0x30>

00000866 <pxPortInitialiseStack>:
void vPortYieldISR( void )
{
	portSAVE_CONTEXT();
	vTaskSwitchContext();
	portRESTORE_CONTEXT();
	asm volatile ( "reti" );
     866:	31 e1       	ldi	r19, 0x11	; 17
     868:	fc 01       	movw	r30, r24
     86a:	30 83       	st	Z, r19
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	22 e2       	ldi	r18, 0x22	; 34
     870:	20 83       	st	Z, r18
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	a3 e3       	ldi	r26, 0x33	; 51
     876:	a0 83       	st	Z, r26
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	60 83       	st	Z, r22
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	70 83       	st	Z, r23
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	10 82       	st	Z, r1
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	10 82       	st	Z, r1
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	60 e8       	ldi	r22, 0x80	; 128
     88c:	60 83       	st	Z, r22
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	10 82       	st	Z, r1
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	62 e0       	ldi	r22, 0x02	; 2
     896:	60 83       	st	Z, r22
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	63 e0       	ldi	r22, 0x03	; 3
     89c:	60 83       	st	Z, r22
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	64 e0       	ldi	r22, 0x04	; 4
     8a2:	60 83       	st	Z, r22
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	65 e0       	ldi	r22, 0x05	; 5
     8a8:	60 83       	st	Z, r22
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	66 e0       	ldi	r22, 0x06	; 6
     8ae:	60 83       	st	Z, r22
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	67 e0       	ldi	r22, 0x07	; 7
     8b4:	60 83       	st	Z, r22
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	68 e0       	ldi	r22, 0x08	; 8
     8ba:	60 83       	st	Z, r22
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	69 e0       	ldi	r22, 0x09	; 9
     8c0:	60 83       	st	Z, r22
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	60 e1       	ldi	r22, 0x10	; 16
     8c6:	60 83       	st	Z, r22
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	30 83       	st	Z, r19
     8cc:	31 97       	sbiw	r30, 0x01	; 1
     8ce:	32 e1       	ldi	r19, 0x12	; 18
     8d0:	30 83       	st	Z, r19
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	33 e1       	ldi	r19, 0x13	; 19
     8d6:	30 83       	st	Z, r19
     8d8:	31 97       	sbiw	r30, 0x01	; 1
     8da:	34 e1       	ldi	r19, 0x14	; 20
     8dc:	30 83       	st	Z, r19
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	35 e1       	ldi	r19, 0x15	; 21
     8e2:	30 83       	st	Z, r19
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	36 e1       	ldi	r19, 0x16	; 22
     8e8:	30 83       	st	Z, r19
     8ea:	31 97       	sbiw	r30, 0x01	; 1
     8ec:	37 e1       	ldi	r19, 0x17	; 23
     8ee:	30 83       	st	Z, r19
     8f0:	31 97       	sbiw	r30, 0x01	; 1
     8f2:	38 e1       	ldi	r19, 0x18	; 24
     8f4:	30 83       	st	Z, r19
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	39 e1       	ldi	r19, 0x19	; 25
     8fa:	30 83       	st	Z, r19
     8fc:	31 97       	sbiw	r30, 0x01	; 1
     8fe:	30 e2       	ldi	r19, 0x20	; 32
     900:	30 83       	st	Z, r19
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	31 e2       	ldi	r19, 0x21	; 33
     906:	30 83       	st	Z, r19
     908:	31 97       	sbiw	r30, 0x01	; 1
     90a:	20 83       	st	Z, r18
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	23 e2       	ldi	r18, 0x23	; 35
     910:	20 83       	st	Z, r18
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	40 83       	st	Z, r20
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	50 83       	st	Z, r21
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	26 e2       	ldi	r18, 0x26	; 38
     91e:	20 83       	st	Z, r18
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	27 e2       	ldi	r18, 0x27	; 39
     924:	20 83       	st	Z, r18
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	28 e2       	ldi	r18, 0x28	; 40
     92a:	20 83       	st	Z, r18
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	29 e2       	ldi	r18, 0x29	; 41
     930:	20 83       	st	Z, r18
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	20 e3       	ldi	r18, 0x30	; 48
     936:	20 83       	st	Z, r18
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	21 e3       	ldi	r18, 0x31	; 49
     93c:	20 83       	st	Z, r18
     93e:	87 97       	sbiw	r24, 0x27	; 39
     940:	08 95       	ret

00000942 <xPortStartScheduler>:
     942:	e0 e0       	ldi	r30, 0x00	; 0
     944:	f8 e0       	ldi	r31, 0x08	; 8
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
     94a:	86 83       	std	Z+6, r24	; 0x06
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	9d e7       	ldi	r25, 0x7D	; 125
     950:	86 a3       	std	Z+38, r24	; 0x26
     952:	97 a3       	std	Z+39, r25	; 0x27
     954:	a0 91 79 61 	lds	r26, 0x6179	; 0x806179 <pxCurrentTCB>
     958:	b0 91 7a 61 	lds	r27, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     95c:	cd 91       	ld	r28, X+
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	dd 91       	ld	r29, X+
     962:	de bf       	out	0x3e, r29	; 62
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	1f 90       	pop	r1
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f 90       	pop	r0
     9a8:	08 95       	ret
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	08 95       	ret

000009ae <vPortYield>:
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	0f 92       	push	r0
     9b6:	1f 92       	push	r1
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 92       	push	r2
     9bc:	3f 92       	push	r3
     9be:	4f 92       	push	r4
     9c0:	5f 92       	push	r5
     9c2:	6f 92       	push	r6
     9c4:	7f 92       	push	r7
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
     9f6:	a0 91 79 61 	lds	r26, 0x6179	; 0x806179 <pxCurrentTCB>
     9fa:	b0 91 7a 61 	lds	r27, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     9fe:	0d b6       	in	r0, 0x3d	; 61
     a00:	0d 92       	st	X+, r0
     a02:	0e b6       	in	r0, 0x3e	; 62
     a04:	0d 92       	st	X+, r0
     a06:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vTaskSwitchContext>
     a0a:	a0 91 79 61 	lds	r26, 0x6179	; 0x806179 <pxCurrentTCB>
     a0e:	b0 91 7a 61 	lds	r27, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     a12:	cd 91       	ld	r28, X+
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	dd 91       	ld	r29, X+
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	bf 91       	pop	r27
     a24:	af 91       	pop	r26
     a26:	9f 91       	pop	r25
     a28:	8f 91       	pop	r24
     a2a:	7f 91       	pop	r23
     a2c:	6f 91       	pop	r22
     a2e:	5f 91       	pop	r21
     a30:	4f 91       	pop	r20
     a32:	3f 91       	pop	r19
     a34:	2f 91       	pop	r18
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	8f 90       	pop	r8
     a4a:	7f 90       	pop	r7
     a4c:	6f 90       	pop	r6
     a4e:	5f 90       	pop	r5
     a50:	4f 90       	pop	r4
     a52:	3f 90       	pop	r3
     a54:	2f 90       	pop	r2
     a56:	1f 90       	pop	r1
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	0f 90       	pop	r0
     a5e:	08 95       	ret

00000a60 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     a60:	0f 92       	push	r0
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	0f 92       	push	r0
     a68:	1f 92       	push	r1
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 92       	push	r2
     a6e:	3f 92       	push	r3
     a70:	4f 92       	push	r4
     a72:	5f 92       	push	r5
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	4f 93       	push	r20
     a92:	5f 93       	push	r21
     a94:	6f 93       	push	r22
     a96:	7f 93       	push	r23
     a98:	8f 93       	push	r24
     a9a:	9f 93       	push	r25
     a9c:	af 93       	push	r26
     a9e:	bf 93       	push	r27
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	a0 91 79 61 	lds	r26, 0x6179	; 0x806179 <pxCurrentTCB>
     aac:	b0 91 7a 61 	lds	r27, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     ab0:	0d b6       	in	r0, 0x3d	; 61
     ab2:	0d 92       	st	X+, r0
     ab4:	0e b6       	in	r0, 0x3e	; 62
     ab6:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     ab8:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     abc:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     ac0:	80 91 7b 63 	lds	r24, 0x637B	; 0x80637b <StatsTimer>
     ac4:	90 91 7c 63 	lds	r25, 0x637C	; 0x80637c <StatsTimer+0x1>
     ac8:	a0 91 7d 63 	lds	r26, 0x637D	; 0x80637d <StatsTimer+0x2>
     acc:	b0 91 7e 63 	lds	r27, 0x637E	; 0x80637e <StatsTimer+0x3>
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	a1 1d       	adc	r26, r1
     ad6:	b1 1d       	adc	r27, r1
     ad8:	80 93 7b 63 	sts	0x637B, r24	; 0x80637b <StatsTimer>
     adc:	90 93 7c 63 	sts	0x637C, r25	; 0x80637c <StatsTimer+0x1>
     ae0:	a0 93 7d 63 	sts	0x637D, r26	; 0x80637d <StatsTimer+0x2>
     ae4:	b0 93 7e 63 	sts	0x637E, r27	; 0x80637e <StatsTimer+0x3>
		xTaskIncrementTick();
     ae8:	0e 94 ed 08 	call	0x11da	; 0x11da <xTaskIncrementTick>
		vTaskSwitchContext();
     aec:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     af0:	a0 91 79 61 	lds	r26, 0x6179	; 0x806179 <pxCurrentTCB>
     af4:	b0 91 7a 61 	lds	r27, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     af8:	cd 91       	ld	r28, X+
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	dd 91       	ld	r29, X+
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	7f 90       	pop	r7
     b32:	6f 90       	pop	r6
     b34:	5f 90       	pop	r5
     b36:	4f 90       	pop	r4
     b38:	3f 90       	pop	r3
     b3a:	2f 90       	pop	r2
     b3c:	1f 90       	pop	r1
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0

		asm volatile ( "reti" );
     b44:	18 95       	reti

00000b46 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     b46:	08 95       	ret

00000b48 <__vector_20>:
	//TCC1.CTRLA=0b0111; //DIV1024	
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC1_OVF_vect)
{
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
	//StatsTimer++;
}
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     b5c:	20 c0       	rjmp	.+64     	; 0xb9e <prvIdleTask+0x42>
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	0f 92       	push	r0
     b64:	e0 91 32 61 	lds	r30, 0x6132	; 0x806132 <xTasksWaitingTermination+0x5>
     b68:	f0 91 33 61 	lds	r31, 0x6133	; 0x806133 <xTasksWaitingTermination+0x6>
     b6c:	c6 81       	ldd	r28, Z+6	; 0x06
     b6e:	d7 81       	ldd	r29, Z+7	; 0x07
     b70:	ce 01       	movw	r24, r28
     b72:	02 96       	adiw	r24, 0x02	; 2
     b74:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
     b78:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <uxCurrentNumberOfTasks>
     b82:	80 91 2c 61 	lds	r24, 0x612C	; 0x80612c <uxDeletedTasksWaitingCleanUp>
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <uxDeletedTasksWaitingCleanUp>
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	8f 89       	ldd	r24, Y+23	; 0x17
     b92:	98 8d       	ldd	r25, Y+24	; 0x18
     b94:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
     b98:	ce 01       	movw	r24, r28
     b9a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
     b9e:	80 91 2c 61 	lds	r24, 0x612C	; 0x80612c <uxDeletedTasksWaitingCleanUp>
     ba2:	81 11       	cpse	r24, r1
     ba4:	dc cf       	rjmp	.-72     	; 0xb5e <prvIdleTask+0x2>
     ba6:	80 91 55 61 	lds	r24, 0x6155	; 0x806155 <pxReadyTasksLists>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	10 f0       	brcs	.+4      	; 0xbb2 <prvIdleTask+0x56>
     bae:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vPortYield>
     bb2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vApplicationIdleHook>
     bb6:	f3 cf       	rjmp	.-26     	; 0xb9e <prvIdleTask+0x42>

00000bb8 <prvWriteNameToBuffer>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	ec 01       	movw	r28, r24
     bbe:	0e 94 16 13 	call	0x262c	; 0x262c <strcpy>
     bc2:	fe 01       	movw	r30, r28
     bc4:	01 90       	ld	r0, Z+
     bc6:	00 20       	and	r0, r0
     bc8:	e9 f7       	brne	.-6      	; 0xbc4 <prvWriteNameToBuffer+0xc>
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	ec 1b       	sub	r30, r28
     bce:	fd 0b       	sbc	r31, r29
     bd0:	e7 30       	cpi	r30, 0x07	; 7
     bd2:	f1 05       	cpc	r31, r1
     bd4:	60 f4       	brcc	.+24     	; 0xbee <prvWriteNameToBuffer+0x36>
     bd6:	ec 0f       	add	r30, r28
     bd8:	fd 1f       	adc	r31, r29
     bda:	9e 01       	movw	r18, r28
     bdc:	29 5f       	subi	r18, 0xF9	; 249
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	81 93       	st	Z+, r24
     be4:	e2 17       	cp	r30, r18
     be6:	f3 07       	cpc	r31, r19
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <prvWriteNameToBuffer+0x2a>
     bea:	e7 e0       	ldi	r30, 0x07	; 7
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ce 01       	movw	r24, r28
     bf0:	8e 0f       	add	r24, r30
     bf2:	9f 1f       	adc	r25, r31
     bf4:	fc 01       	movw	r30, r24
     bf6:	10 82       	st	Z, r1
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <prvResetNextTaskUnblockTime.part.0>:
     bfe:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
     c02:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
     c06:	05 80       	ldd	r0, Z+5	; 0x05
     c08:	f6 81       	ldd	r31, Z+6	; 0x06
     c0a:	e0 2d       	mov	r30, r0
     c0c:	06 80       	ldd	r0, Z+6	; 0x06
     c0e:	f7 81       	ldd	r31, Z+7	; 0x07
     c10:	e0 2d       	mov	r30, r0
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <xNextTaskUnblockTime>
     c1a:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <xNextTaskUnblockTime+0x1>
     c1e:	08 95       	ret

00000c20 <prvAddCurrentTaskToDelayedList>:
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	f6 2e       	mov	r15, r22
     c2e:	00 91 20 61 	lds	r16, 0x6120	; 0x806120 <xTickCount>
     c32:	10 91 21 61 	lds	r17, 0x6121	; 0x806121 <xTickCount+0x1>
     c36:	80 91 79 61 	lds	r24, 0x6179	; 0x806179 <pxCurrentTCB>
     c3a:	90 91 7a 61 	lds	r25, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     c3e:	02 96       	adiw	r24, 0x02	; 2
     c40:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
     c44:	cf 3f       	cpi	r28, 0xFF	; 255
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	d8 07       	cpc	r29, r24
     c4a:	a9 f1       	breq	.+106    	; 0xcb6 <prvAddCurrentTaskToDelayedList+0x96>
     c4c:	c0 0f       	add	r28, r16
     c4e:	d1 1f       	adc	r29, r17
     c50:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
     c54:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     c58:	c2 83       	std	Z+2, r28	; 0x02
     c5a:	d3 83       	std	Z+3, r29	; 0x03
     c5c:	60 91 79 61 	lds	r22, 0x6179	; 0x806179 <pxCurrentTCB>
     c60:	70 91 7a 61 	lds	r23, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     c64:	c0 17       	cp	r28, r16
     c66:	d1 07       	cpc	r29, r17
     c68:	c8 f0       	brcs	.+50     	; 0xc9c <prvAddCurrentTaskToDelayedList+0x7c>
     c6a:	80 91 41 61 	lds	r24, 0x6141	; 0x806141 <pxDelayedTaskList>
     c6e:	90 91 42 61 	lds	r25, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
     c72:	6e 5f       	subi	r22, 0xFE	; 254
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <vListInsert>
     c7a:	80 91 18 61 	lds	r24, 0x6118	; 0x806118 <xNextTaskUnblockTime>
     c7e:	90 91 19 61 	lds	r25, 0x6119	; 0x806119 <xNextTaskUnblockTime+0x1>
     c82:	c8 17       	cp	r28, r24
     c84:	d9 07       	cpc	r29, r25
     c86:	20 f4       	brcc	.+8      	; 0xc90 <prvAddCurrentTaskToDelayedList+0x70>
     c88:	c0 93 18 61 	sts	0x6118, r28	; 0x806118 <xNextTaskUnblockTime>
     c8c:	d0 93 19 61 	sts	0x6119, r29	; 0x806119 <xNextTaskUnblockTime+0x1>
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	08 95       	ret
     c9c:	80 91 3f 61 	lds	r24, 0x613F	; 0x80613f <pxOverflowDelayedTaskList>
     ca0:	90 91 40 61 	lds	r25, 0x6140	; 0x806140 <pxOverflowDelayedTaskList+0x1>
     ca4:	6e 5f       	subi	r22, 0xFE	; 254
     ca6:	7f 4f       	sbci	r23, 0xFF	; 255
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <vListInsert>
     cb6:	ff 20       	and	r15, r15
     cb8:	49 f2       	breq	.-110    	; 0xc4c <prvAddCurrentTaskToDelayedList+0x2c>
     cba:	60 91 79 61 	lds	r22, 0x6179	; 0x806179 <pxCurrentTCB>
     cbe:	70 91 7a 61 	lds	r23, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     cc2:	6e 5f       	subi	r22, 0xFE	; 254
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	83 e2       	ldi	r24, 0x23	; 35
     cc8:	91 e6       	ldi	r25, 0x61	; 97
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	0c 94 bb 03 	jmp	0x776	; 0x776 <vListInsertEnd>

00000cd8 <vTaskSwitchContext.part.5>:
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	10 92 1c 61 	sts	0x611C, r1	; 0x80611c <xYieldPending>
     ce2:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     ce6:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     cea:	80 91 7b 63 	lds	r24, 0x637B	; 0x80637b <StatsTimer>
     cee:	90 91 7c 63 	lds	r25, 0x637C	; 0x80637c <StatsTimer+0x1>
     cf2:	a0 91 7d 63 	lds	r26, 0x637D	; 0x80637d <StatsTimer+0x2>
     cf6:	b0 91 7e 63 	lds	r27, 0x637E	; 0x80637e <StatsTimer+0x3>
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	a1 1d       	adc	r26, r1
     d00:	b1 1d       	adc	r27, r1
     d02:	00 91 11 61 	lds	r16, 0x6111	; 0x806111 <ulTaskSwitchedInTime>
     d06:	10 91 12 61 	lds	r17, 0x6112	; 0x806112 <ulTaskSwitchedInTime+0x1>
     d0a:	20 91 13 61 	lds	r18, 0x6113	; 0x806113 <ulTaskSwitchedInTime+0x2>
     d0e:	30 91 14 61 	lds	r19, 0x6114	; 0x806114 <ulTaskSwitchedInTime+0x3>
     d12:	08 17       	cp	r16, r24
     d14:	19 07       	cpc	r17, r25
     d16:	2a 07       	cpc	r18, r26
     d18:	3b 07       	cpc	r19, r27
     d1a:	a0 f4       	brcc	.+40     	; 0xd44 <vTaskSwitchContext.part.5+0x6c>
     d1c:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
     d20:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     d24:	45 a1       	ldd	r20, Z+37	; 0x25
     d26:	56 a1       	ldd	r21, Z+38	; 0x26
     d28:	67 a1       	ldd	r22, Z+39	; 0x27
     d2a:	70 a5       	ldd	r23, Z+40	; 0x28
     d2c:	40 1b       	sub	r20, r16
     d2e:	51 0b       	sbc	r21, r17
     d30:	62 0b       	sbc	r22, r18
     d32:	73 0b       	sbc	r23, r19
     d34:	48 0f       	add	r20, r24
     d36:	59 1f       	adc	r21, r25
     d38:	6a 1f       	adc	r22, r26
     d3a:	7b 1f       	adc	r23, r27
     d3c:	45 a3       	std	Z+37, r20	; 0x25
     d3e:	56 a3       	std	Z+38, r21	; 0x26
     d40:	67 a3       	std	Z+39, r22	; 0x27
     d42:	70 a7       	std	Z+40, r23	; 0x28
     d44:	80 93 11 61 	sts	0x6111, r24	; 0x806111 <ulTaskSwitchedInTime>
     d48:	90 93 12 61 	sts	0x6112, r25	; 0x806112 <ulTaskSwitchedInTime+0x1>
     d4c:	a0 93 13 61 	sts	0x6113, r26	; 0x806113 <ulTaskSwitchedInTime+0x2>
     d50:	b0 93 14 61 	sts	0x6114, r27	; 0x806114 <ulTaskSwitchedInTime+0x3>
     d54:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
     d58:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     d5c:	07 88       	ldd	r0, Z+23	; 0x17
     d5e:	f0 8d       	ldd	r31, Z+24	; 0x18
     d60:	e0 2d       	mov	r30, r0
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	a2 81       	ldd	r26, Z+2	; 0x02
     d68:	b3 81       	ldd	r27, Z+3	; 0x03
     d6a:	85 3a       	cpi	r24, 0xA5	; 165
     d6c:	95 4a       	sbci	r25, 0xA5	; 165
     d6e:	a5 4a       	sbci	r26, 0xA5	; 165
     d70:	b5 4a       	sbci	r27, 0xA5	; 165
     d72:	09 f4       	brne	.+2      	; 0xd76 <vTaskSwitchContext.part.5+0x9e>
     d74:	4c c0       	rjmp	.+152    	; 0xe0e <vTaskSwitchContext.part.5+0x136>
     d76:	60 91 79 61 	lds	r22, 0x6179	; 0x806179 <pxCurrentTCB>
     d7a:	70 91 7a 61 	lds	r23, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     d7e:	80 91 79 61 	lds	r24, 0x6179	; 0x806179 <pxCurrentTCB>
     d82:	90 91 7a 61 	lds	r25, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     d86:	67 5e       	subi	r22, 0xE7	; 231
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <vApplicationStackOverflowHook>
     d8e:	c0 91 1f 61 	lds	r28, 0x611F	; 0x80611f <uxTopReadyPriority>
     d92:	8c 2f       	mov	r24, r28
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9c 01       	movw	r18, r24
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	f9 01       	movw	r30, r18
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	eb 5a       	subi	r30, 0xAB	; 171
     dac:	fe 49       	sbci	r31, 0x9E	; 158
     dae:	40 81       	ld	r20, Z
     db0:	41 11       	cpse	r20, r1
     db2:	0c c0       	rjmp	.+24     	; 0xdcc <vTaskSwitchContext.part.5+0xf4>
     db4:	cc 23       	and	r28, r28
     db6:	11 f0       	breq	.+4      	; 0xdbc <vTaskSwitchContext.part.5+0xe4>
     db8:	c1 50       	subi	r28, 0x01	; 1
     dba:	eb cf       	rjmp	.-42     	; 0xd92 <vTaskSwitchContext.part.5+0xba>
     dbc:	6c e8       	ldi	r22, 0x8C	; 140
     dbe:	7b e0       	ldi	r23, 0x0B	; 11
     dc0:	85 e2       	ldi	r24, 0x25	; 37
     dc2:	90 e2       	ldi	r25, 0x20	; 32
     dc4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
     dc8:	c1 50       	subi	r28, 0x01	; 1
     dca:	e3 cf       	rjmp	.-58     	; 0xd92 <vTaskSwitchContext.part.5+0xba>
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	dc 01       	movw	r26, r24
     dd2:	ab 5a       	subi	r26, 0xAB	; 171
     dd4:	be 49       	sbci	r27, 0x9E	; 158
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	12 97       	sbiw	r26, 0x02	; 2
     dde:	02 80       	ldd	r0, Z+2	; 0x02
     de0:	f3 81       	ldd	r31, Z+3	; 0x03
     de2:	e0 2d       	mov	r30, r0
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	ed 93       	st	X+, r30
     de8:	fc 93       	st	X, r31
     dea:	12 97       	sbiw	r26, 0x02	; 2
     dec:	88 5a       	subi	r24, 0xA8	; 168
     dee:	9e 49       	sbci	r25, 0x9E	; 158
     df0:	e8 17       	cp	r30, r24
     df2:	f9 07       	cpc	r31, r25
     df4:	59 f1       	breq	.+86     	; 0xe4c <vTaskSwitchContext.part.5+0x174>
     df6:	86 81       	ldd	r24, Z+6	; 0x06
     df8:	97 81       	ldd	r25, Z+7	; 0x07
     dfa:	80 93 79 61 	sts	0x6179, r24	; 0x806179 <pxCurrentTCB>
     dfe:	90 93 7a 61 	sts	0x617A, r25	; 0x80617a <pxCurrentTCB+0x1>
     e02:	c0 93 1f 61 	sts	0x611F, r28	; 0x80611f <uxTopReadyPriority>
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret
     e0e:	84 81       	ldd	r24, Z+4	; 0x04
     e10:	95 81       	ldd	r25, Z+5	; 0x05
     e12:	a6 81       	ldd	r26, Z+6	; 0x06
     e14:	b7 81       	ldd	r27, Z+7	; 0x07
     e16:	85 3a       	cpi	r24, 0xA5	; 165
     e18:	95 4a       	sbci	r25, 0xA5	; 165
     e1a:	a5 4a       	sbci	r26, 0xA5	; 165
     e1c:	b5 4a       	sbci	r27, 0xA5	; 165
     e1e:	09 f0       	breq	.+2      	; 0xe22 <vTaskSwitchContext.part.5+0x14a>
     e20:	aa cf       	rjmp	.-172    	; 0xd76 <vTaskSwitchContext.part.5+0x9e>
     e22:	80 85       	ldd	r24, Z+8	; 0x08
     e24:	91 85       	ldd	r25, Z+9	; 0x09
     e26:	a2 85       	ldd	r26, Z+10	; 0x0a
     e28:	b3 85       	ldd	r27, Z+11	; 0x0b
     e2a:	85 3a       	cpi	r24, 0xA5	; 165
     e2c:	95 4a       	sbci	r25, 0xA5	; 165
     e2e:	a5 4a       	sbci	r26, 0xA5	; 165
     e30:	b5 4a       	sbci	r27, 0xA5	; 165
     e32:	09 f0       	breq	.+2      	; 0xe36 <vTaskSwitchContext.part.5+0x15e>
     e34:	a0 cf       	rjmp	.-192    	; 0xd76 <vTaskSwitchContext.part.5+0x9e>
     e36:	84 85       	ldd	r24, Z+12	; 0x0c
     e38:	95 85       	ldd	r25, Z+13	; 0x0d
     e3a:	a6 85       	ldd	r26, Z+14	; 0x0e
     e3c:	b7 85       	ldd	r27, Z+15	; 0x0f
     e3e:	85 3a       	cpi	r24, 0xA5	; 165
     e40:	95 4a       	sbci	r25, 0xA5	; 165
     e42:	a5 4a       	sbci	r26, 0xA5	; 165
     e44:	b5 4a       	sbci	r27, 0xA5	; 165
     e46:	09 f0       	breq	.+2      	; 0xe4a <vTaskSwitchContext.part.5+0x172>
     e48:	96 cf       	rjmp	.-212    	; 0xd76 <vTaskSwitchContext.part.5+0x9e>
     e4a:	a1 cf       	rjmp	.-190    	; 0xd8e <vTaskSwitchContext.part.5+0xb6>
     e4c:	02 80       	ldd	r0, Z+2	; 0x02
     e4e:	f3 81       	ldd	r31, Z+3	; 0x03
     e50:	e0 2d       	mov	r30, r0
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	ed 93       	st	X+, r30
     e56:	fc 93       	st	X, r31
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	cd cf       	rjmp	.-102    	; 0xdf6 <vTaskSwitchContext.part.5+0x11e>

00000e5c <xTaskCreate>:
     e5c:	5f 92       	push	r5
     e5e:	6f 92       	push	r6
     e60:	7f 92       	push	r7
     e62:	8f 92       	push	r8
     e64:	9f 92       	push	r9
     e66:	af 92       	push	r10
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	4c 01       	movw	r8, r24
     e7c:	eb 01       	movw	r28, r22
     e7e:	5a 01       	movw	r10, r20
     e80:	39 01       	movw	r6, r18
     e82:	50 2e       	mov	r5, r16
     e84:	ca 01       	movw	r24, r20
     e86:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
     e8a:	8c 01       	movw	r16, r24
     e8c:	89 2b       	or	r24, r25
     e8e:	09 f4       	brne	.+2      	; 0xe92 <xTaskCreate+0x36>
     e90:	dc c0       	rjmp	.+440    	; 0x104a <xTaskCreate+0x1ee>
     e92:	8e e2       	ldi	r24, 0x2E	; 46
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
     e9a:	6c 01       	movw	r12, r24
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	09 f4       	brne	.+2      	; 0xea2 <xTaskCreate+0x46>
     ea0:	d1 c0       	rjmp	.+418    	; 0x1044 <xTaskCreate+0x1e8>
     ea2:	dc 01       	movw	r26, r24
     ea4:	57 96       	adiw	r26, 0x17	; 23
     ea6:	0d 93       	st	X+, r16
     ea8:	1c 93       	st	X, r17
     eaa:	58 97       	sbiw	r26, 0x18	; 24
     eac:	20 97       	sbiw	r28, 0x00	; 0
     eae:	09 f4       	brne	.+2      	; 0xeb2 <xTaskCreate+0x56>
     eb0:	ce c0       	rjmp	.+412    	; 0x104e <xTaskCreate+0x1f2>
     eb2:	c8 01       	movw	r24, r16
     eb4:	a5 01       	movw	r20, r10
     eb6:	65 ea       	ldi	r22, 0xA5	; 165
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 06 13 	call	0x260c	; 0x260c <memset>
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	af 1a       	sub	r10, r31
     ec2:	b1 08       	sbc	r11, r1
     ec4:	d6 01       	movw	r26, r12
     ec6:	57 96       	adiw	r26, 0x17	; 23
     ec8:	8d 91       	ld	r24, X+
     eca:	9c 91       	ld	r25, X
     ecc:	58 97       	sbiw	r26, 0x18	; 24
     ece:	a8 0e       	add	r10, r24
     ed0:	b9 1e       	adc	r11, r25
     ed2:	f6 01       	movw	r30, r12
     ed4:	79 96       	adiw	r30, 0x19	; 25
     ed6:	9e 01       	movw	r18, r28
     ed8:	28 5f       	subi	r18, 0xF8	; 248
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	de 01       	movw	r26, r28
     ede:	89 91       	ld	r24, Y+
     ee0:	81 93       	st	Z+, r24
     ee2:	8c 91       	ld	r24, X
     ee4:	88 23       	and	r24, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <xTaskCreate+0x92>
     ee8:	c2 17       	cp	r28, r18
     eea:	d3 07       	cpc	r29, r19
     eec:	b9 f7       	brne	.-18     	; 0xedc <xTaskCreate+0x80>
     eee:	f6 01       	movw	r30, r12
     ef0:	10 a2       	std	Z+32, r1	; 0x20
     ef2:	05 2d       	mov	r16, r5
     ef4:	04 30       	cpi	r16, 0x04	; 4
     ef6:	08 f0       	brcs	.+2      	; 0xefa <xTaskCreate+0x9e>
     ef8:	9f c0       	rjmp	.+318    	; 0x1038 <xTaskCreate+0x1dc>
     efa:	d6 01       	movw	r26, r12
     efc:	56 96       	adiw	r26, 0x16	; 22
     efe:	0c 93       	st	X, r16
     f00:	56 97       	sbiw	r26, 0x16	; 22
     f02:	93 96       	adiw	r26, 0x23	; 35
     f04:	0c 93       	st	X, r16
     f06:	93 97       	sbiw	r26, 0x23	; 35
     f08:	94 96       	adiw	r26, 0x24	; 36
     f0a:	1c 92       	st	X, r1
     f0c:	e6 01       	movw	r28, r12
     f0e:	22 96       	adiw	r28, 0x02	; 2
     f10:	ce 01       	movw	r24, r28
     f12:	0e 94 b7 03 	call	0x76e	; 0x76e <vListInitialiseItem>
     f16:	c6 01       	movw	r24, r12
     f18:	0c 96       	adiw	r24, 0x0c	; 12
     f1a:	0e 94 b7 03 	call	0x76e	; 0x76e <vListInitialiseItem>
     f1e:	f6 01       	movw	r30, r12
     f20:	c0 86       	std	Z+8, r12	; 0x08
     f22:	d1 86       	std	Z+9, r13	; 0x09
     f24:	84 e0       	ldi	r24, 0x04	; 4
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	80 1b       	sub	r24, r16
     f2a:	91 09       	sbc	r25, r1
     f2c:	84 87       	std	Z+12, r24	; 0x0c
     f2e:	95 87       	std	Z+13, r25	; 0x0d
     f30:	c2 8a       	std	Z+18, r12	; 0x12
     f32:	d3 8a       	std	Z+19, r13	; 0x13
     f34:	15 a2       	std	Z+37, r1	; 0x25
     f36:	16 a2       	std	Z+38, r1	; 0x26
     f38:	17 a2       	std	Z+39, r1	; 0x27
     f3a:	10 a6       	std	Z+40, r1	; 0x28
     f3c:	11 a6       	std	Z+41, r1	; 0x29
     f3e:	12 a6       	std	Z+42, r1	; 0x2a
     f40:	13 a6       	std	Z+43, r1	; 0x2b
     f42:	14 a6       	std	Z+44, r1	; 0x2c
     f44:	15 a6       	std	Z+45, r1	; 0x2d
     f46:	a3 01       	movw	r20, r6
     f48:	b4 01       	movw	r22, r8
     f4a:	c5 01       	movw	r24, r10
     f4c:	0e 94 33 04 	call	0x866	; 0x866 <pxPortInitialiseStack>
     f50:	d6 01       	movw	r26, r12
     f52:	8d 93       	st	X+, r24
     f54:	9c 93       	st	X, r25
     f56:	e1 14       	cp	r14, r1
     f58:	f1 04       	cpc	r15, r1
     f5a:	19 f0       	breq	.+6      	; 0xf62 <xTaskCreate+0x106>
     f5c:	f7 01       	movw	r30, r14
     f5e:	c0 82       	st	Z, r12
     f60:	d1 82       	std	Z+1, r13	; 0x01
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	0f 92       	push	r0
     f68:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <uxCurrentNumberOfTasks>
     f72:	80 91 79 61 	lds	r24, 0x6179	; 0x806179 <pxCurrentTCB>
     f76:	90 91 7a 61 	lds	r25, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     f7a:	89 2b       	or	r24, r25
     f7c:	99 f0       	breq	.+38     	; 0xfa4 <xTaskCreate+0x148>
     f7e:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <xSchedulerRunning>
     f82:	81 11       	cpse	r24, r1
     f84:	18 c0       	rjmp	.+48     	; 0xfb6 <xTaskCreate+0x15a>
     f86:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
     f8a:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
     f8e:	d6 01       	movw	r26, r12
     f90:	56 96       	adiw	r26, 0x16	; 22
     f92:	8c 91       	ld	r24, X
     f94:	96 89       	ldd	r25, Z+22	; 0x16
     f96:	89 17       	cp	r24, r25
     f98:	88 f0       	brcs	.+34     	; 0xfbc <xTaskCreate+0x160>
     f9a:	c0 92 79 61 	sts	0x6179, r12	; 0x806179 <pxCurrentTCB>
     f9e:	d0 92 7a 61 	sts	0x617A, r13	; 0x80617a <pxCurrentTCB+0x1>
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <xTaskCreate+0x160>
     fa4:	c0 92 79 61 	sts	0x6179, r12	; 0x806179 <pxCurrentTCB>
     fa8:	d0 92 7a 61 	sts	0x617A, r13	; 0x80617a <pxCurrentTCB+0x1>
     fac:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <xTaskCreate+0x15a>
     fb4:	56 c0       	rjmp	.+172    	; 0x1062 <xTaskCreate+0x206>
     fb6:	d6 01       	movw	r26, r12
     fb8:	56 96       	adiw	r26, 0x16	; 22
     fba:	8c 91       	ld	r24, X
     fbc:	90 91 1a 61 	lds	r25, 0x611A	; 0x80611a <uxTaskNumber>
     fc0:	9f 5f       	subi	r25, 0xFF	; 255
     fc2:	90 93 1a 61 	sts	0x611A, r25	; 0x80611a <uxTaskNumber>
     fc6:	f6 01       	movw	r30, r12
     fc8:	91 a3       	std	Z+33, r25	; 0x21
     fca:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <uxTopReadyPriority>
     fce:	98 17       	cp	r25, r24
     fd0:	80 f1       	brcs	.+96     	; 0x1032 <xTaskCreate+0x1d6>
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 01       	movw	r18, r24
     fd6:	22 0f       	add	r18, r18
     fd8:	33 1f       	adc	r19, r19
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	be 01       	movw	r22, r28
     fe8:	8b 5a       	subi	r24, 0xAB	; 171
     fea:	9e 49       	sbci	r25, 0x9E	; 158
     fec:	0e 94 bb 03 	call	0x776	; 0x776 <vListInsertEnd>
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <xSchedulerRunning>
     ff8:	88 23       	and	r24, r24
     ffa:	51 f0       	breq	.+20     	; 0x1010 <xTaskCreate+0x1b4>
     ffc:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
    1000:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    1004:	96 89       	ldd	r25, Z+22	; 0x16
    1006:	d6 01       	movw	r26, r12
    1008:	56 96       	adiw	r26, 0x16	; 22
    100a:	8c 91       	ld	r24, X
    100c:	98 17       	cp	r25, r24
    100e:	b0 f0       	brcs	.+44     	; 0x103c <xTaskCreate+0x1e0>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	7f 90       	pop	r7
    102c:	6f 90       	pop	r6
    102e:	5f 90       	pop	r5
    1030:	08 95       	ret
    1032:	80 93 1f 61 	sts	0x611F, r24	; 0x80611f <uxTopReadyPriority>
    1036:	cd cf       	rjmp	.-102    	; 0xfd2 <xTaskCreate+0x176>
    1038:	03 e0       	ldi	r16, 0x03	; 3
    103a:	5f cf       	rjmp	.-322    	; 0xefa <xTaskCreate+0x9e>
    103c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vPortYield>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	e7 cf       	rjmp	.-50     	; 0x1012 <xTaskCreate+0x1b6>
    1044:	c8 01       	movw	r24, r16
    1046:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	e2 cf       	rjmp	.-60     	; 0x1012 <xTaskCreate+0x1b6>
    104e:	60 e6       	ldi	r22, 0x60	; 96
    1050:	73 e0       	ldi	r23, 0x03	; 3
    1052:	85 e2       	ldi	r24, 0x25	; 37
    1054:	90 e2       	ldi	r25, 0x20	; 32
    1056:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    105a:	f6 01       	movw	r30, r12
    105c:	87 89       	ldd	r24, Z+23	; 0x17
    105e:	90 8d       	ldd	r25, Z+24	; 0x18
    1060:	29 cf       	rjmp	.-430    	; 0xeb4 <xTaskCreate+0x58>
    1062:	85 e5       	ldi	r24, 0x55	; 85
    1064:	91 e6       	ldi	r25, 0x61	; 97
    1066:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    106a:	8e e5       	ldi	r24, 0x5E	; 94
    106c:	91 e6       	ldi	r25, 0x61	; 97
    106e:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    1072:	87 e6       	ldi	r24, 0x67	; 103
    1074:	91 e6       	ldi	r25, 0x61	; 97
    1076:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    107a:	80 e7       	ldi	r24, 0x70	; 112
    107c:	91 e6       	ldi	r25, 0x61	; 97
    107e:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    1082:	8c e4       	ldi	r24, 0x4C	; 76
    1084:	91 e6       	ldi	r25, 0x61	; 97
    1086:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    108a:	83 e4       	ldi	r24, 0x43	; 67
    108c:	91 e6       	ldi	r25, 0x61	; 97
    108e:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    1092:	86 e3       	ldi	r24, 0x36	; 54
    1094:	91 e6       	ldi	r25, 0x61	; 97
    1096:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    109a:	8d e2       	ldi	r24, 0x2D	; 45
    109c:	91 e6       	ldi	r25, 0x61	; 97
    109e:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    10a2:	83 e2       	ldi	r24, 0x23	; 35
    10a4:	91 e6       	ldi	r25, 0x61	; 97
    10a6:	0e 94 a9 03 	call	0x752	; 0x752 <vListInitialise>
    10aa:	8c e4       	ldi	r24, 0x4C	; 76
    10ac:	91 e6       	ldi	r25, 0x61	; 97
    10ae:	80 93 41 61 	sts	0x6141, r24	; 0x806141 <pxDelayedTaskList>
    10b2:	90 93 42 61 	sts	0x6142, r25	; 0x806142 <pxDelayedTaskList+0x1>
    10b6:	83 e4       	ldi	r24, 0x43	; 67
    10b8:	91 e6       	ldi	r25, 0x61	; 97
    10ba:	80 93 3f 61 	sts	0x613F, r24	; 0x80613f <pxOverflowDelayedTaskList>
    10be:	90 93 40 61 	sts	0x6140, r25	; 0x806140 <pxOverflowDelayedTaskList+0x1>
    10c2:	f6 01       	movw	r30, r12
    10c4:	86 89       	ldd	r24, Z+22	; 0x16
    10c6:	7a cf       	rjmp	.-268    	; 0xfbc <xTaskCreate+0x160>

000010c8 <eTaskGetState>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	89 2b       	or	r24, r25
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <eTaskGetState+0xc>
    10d2:	3a c0       	rjmp	.+116    	; 0x1148 <eTaskGetState+0x80>
    10d4:	80 91 79 61 	lds	r24, 0x6179	; 0x806179 <pxCurrentTCB>
    10d8:	90 91 7a 61 	lds	r25, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    10dc:	c8 17       	cp	r28, r24
    10de:	d9 07       	cpc	r29, r25
    10e0:	79 f1       	breq	.+94     	; 0x1140 <eTaskGetState+0x78>
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	0f 92       	push	r0
    10e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ec:	20 91 41 61 	lds	r18, 0x6141	; 0x806141 <pxDelayedTaskList>
    10f0:	30 91 42 61 	lds	r19, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    10f4:	40 91 3f 61 	lds	r20, 0x613F	; 0x80613f <pxOverflowDelayedTaskList>
    10f8:	50 91 40 61 	lds	r21, 0x6140	; 0x806140 <pxOverflowDelayedTaskList+0x1>
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	82 17       	cp	r24, r18
    1102:	93 07       	cpc	r25, r19
    1104:	a9 f0       	breq	.+42     	; 0x1130 <eTaskGetState+0x68>
    1106:	84 17       	cp	r24, r20
    1108:	95 07       	cpc	r25, r21
    110a:	91 f0       	breq	.+36     	; 0x1130 <eTaskGetState+0x68>
    110c:	21 e6       	ldi	r18, 0x61	; 97
    110e:	83 32       	cpi	r24, 0x23	; 35
    1110:	92 07       	cpc	r25, r18
    1112:	51 f0       	breq	.+20     	; 0x1128 <eTaskGetState+0x60>
    1114:	21 e6       	ldi	r18, 0x61	; 97
    1116:	8d 32       	cpi	r24, 0x2D	; 45
    1118:	92 07       	cpc	r25, r18
    111a:	71 f0       	breq	.+28     	; 0x1138 <eTaskGetState+0x70>
    111c:	89 2b       	or	r24, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <eTaskGetState+0x70>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret
    1128:	8c 89       	ldd	r24, Y+20	; 0x14
    112a:	9d 89       	ldd	r25, Y+21	; 0x15
    112c:	89 2b       	or	r24, r25
    112e:	99 f0       	breq	.+38     	; 0x1156 <eTaskGetState+0x8e>
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret
    1148:	6c e4       	ldi	r22, 0x4C	; 76
    114a:	75 e0       	ldi	r23, 0x05	; 5
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	90 e2       	ldi	r25, 0x20	; 32
    1150:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    1154:	bf cf       	rjmp	.-130    	; 0x10d4 <eTaskGetState+0xc>
    1156:	8d a5       	ldd	r24, Y+45	; 0x2d
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	51 f3       	breq	.-44     	; 0x1130 <eTaskGetState+0x68>
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	e1 cf       	rjmp	.-62     	; 0x1122 <eTaskGetState+0x5a>

00001160 <vTaskStartScheduler>:
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	86 e1       	ldi	r24, 0x16	; 22
    1168:	e8 2e       	mov	r14, r24
    116a:	81 e6       	ldi	r24, 0x61	; 97
    116c:	f8 2e       	mov	r15, r24
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	51 e0       	ldi	r21, 0x01	; 1
    1178:	69 e3       	ldi	r22, 0x39	; 57
    117a:	70 e2       	ldi	r23, 0x20	; 32
    117c:	8e ea       	ldi	r24, 0xAE	; 174
    117e:	95 e0       	ldi	r25, 0x05	; 5
    1180:	0e 94 2e 07 	call	0xe5c	; 0xe5c <xTaskCreate>
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	79 f0       	breq	.+30     	; 0x11a6 <vTaskStartScheduler+0x46>
    1188:	8f 3f       	cpi	r24, 0xFF	; 255
    118a:	21 f0       	breq	.+8      	; 0x1194 <vTaskStartScheduler+0x34>
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	08 95       	ret
    1194:	67 e0       	ldi	r22, 0x07	; 7
    1196:	78 e0       	ldi	r23, 0x08	; 8
    1198:	85 e2       	ldi	r24, 0x25	; 37
    119a:	90 e2       	ldi	r25, 0x20	; 32
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <vAssertCalled>
    11a6:	f8 94       	cli
    11a8:	2f ef       	ldi	r18, 0xFF	; 255
    11aa:	3f ef       	ldi	r19, 0xFF	; 255
    11ac:	20 93 18 61 	sts	0x6118, r18	; 0x806118 <xNextTaskUnblockTime>
    11b0:	30 93 19 61 	sts	0x6119, r19	; 0x806119 <xNextTaskUnblockTime+0x1>
    11b4:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xSchedulerRunning>
    11b8:	10 92 20 61 	sts	0x6120, r1	; 0x806120 <xTickCount>
    11bc:	10 92 21 61 	sts	0x6121, r1	; 0x806121 <xTickCount+0x1>
    11c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <vConfigureTimerForRunTimeStats>
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	0c 94 a1 04 	jmp	0x942	; 0x942 <xPortStartScheduler>

000011ce <vTaskSuspendAll>:
    11ce:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	80 93 15 61 	sts	0x6115, r24	; 0x806115 <uxSchedulerSuspended>
    11d8:	08 95       	ret

000011da <xTaskIncrementTick>:
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    11ec:	81 11       	cpse	r24, r1
    11ee:	b9 c0       	rjmp	.+370    	; 0x1362 <xTaskIncrementTick+0x188>
    11f0:	e0 90 20 61 	lds	r14, 0x6120	; 0x806120 <xTickCount>
    11f4:	f0 90 21 61 	lds	r15, 0x6121	; 0x806121 <xTickCount+0x1>
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	e8 1a       	sub	r14, r24
    11fc:	f8 0a       	sbc	r15, r24
    11fe:	e0 92 20 61 	sts	0x6120, r14	; 0x806120 <xTickCount>
    1202:	f0 92 21 61 	sts	0x6121, r15	; 0x806121 <xTickCount+0x1>
    1206:	e1 14       	cp	r14, r1
    1208:	f1 04       	cpc	r15, r1
    120a:	49 f5       	brne	.+82     	; 0x125e <xTaskIncrementTick+0x84>
    120c:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1210:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1214:	80 81       	ld	r24, Z
    1216:	81 11       	cpse	r24, r1
    1218:	ab c0       	rjmp	.+342    	; 0x1370 <xTaskIncrementTick+0x196>
    121a:	80 91 41 61 	lds	r24, 0x6141	; 0x806141 <pxDelayedTaskList>
    121e:	90 91 42 61 	lds	r25, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1222:	20 91 3f 61 	lds	r18, 0x613F	; 0x80613f <pxOverflowDelayedTaskList>
    1226:	30 91 40 61 	lds	r19, 0x6140	; 0x806140 <pxOverflowDelayedTaskList+0x1>
    122a:	20 93 41 61 	sts	0x6141, r18	; 0x806141 <pxDelayedTaskList>
    122e:	30 93 42 61 	sts	0x6142, r19	; 0x806142 <pxDelayedTaskList+0x1>
    1232:	80 93 3f 61 	sts	0x613F, r24	; 0x80613f <pxOverflowDelayedTaskList>
    1236:	90 93 40 61 	sts	0x6140, r25	; 0x806140 <pxOverflowDelayedTaskList+0x1>
    123a:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <xNumOfOverflows>
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <xNumOfOverflows>
    1244:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1248:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    124c:	80 81       	ld	r24, Z
    124e:	81 11       	cpse	r24, r1
    1250:	96 c0       	rjmp	.+300    	; 0x137e <xTaskIncrementTick+0x1a4>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <xNextTaskUnblockTime>
    125a:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <xNextTaskUnblockTime+0x1>
    125e:	80 91 18 61 	lds	r24, 0x6118	; 0x806118 <xNextTaskUnblockTime>
    1262:	90 91 19 61 	lds	r25, 0x6119	; 0x806119 <xNextTaskUnblockTime+0x1>
    1266:	d1 2c       	mov	r13, r1
    1268:	e8 16       	cp	r14, r24
    126a:	f9 06       	cpc	r15, r25
    126c:	08 f4       	brcc	.+2      	; 0x1270 <xTaskIncrementTick+0x96>
    126e:	53 c0       	rjmp	.+166    	; 0x1316 <xTaskIncrementTick+0x13c>
    1270:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1274:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <xTaskIncrementTick+0xa6>
    127e:	45 c0       	rjmp	.+138    	; 0x130a <xTaskIncrementTick+0x130>
    1280:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1284:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1288:	05 80       	ldd	r0, Z+5	; 0x05
    128a:	f6 81       	ldd	r31, Z+6	; 0x06
    128c:	e0 2d       	mov	r30, r0
    128e:	c6 81       	ldd	r28, Z+6	; 0x06
    1290:	d7 81       	ldd	r29, Z+7	; 0x07
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	e8 16       	cp	r14, r24
    1298:	f9 06       	cpc	r15, r25
    129a:	08 f4       	brcc	.+2      	; 0x129e <xTaskIncrementTick+0xc4>
    129c:	73 c0       	rjmp	.+230    	; 0x1384 <xTaskIncrementTick+0x1aa>
    129e:	8e 01       	movw	r16, r28
    12a0:	0e 5f       	subi	r16, 0xFE	; 254
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	c8 01       	movw	r24, r16
    12a6:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    12aa:	8c 89       	ldd	r24, Y+20	; 0x14
    12ac:	9d 89       	ldd	r25, Y+21	; 0x15
    12ae:	89 2b       	or	r24, r25
    12b0:	21 f0       	breq	.+8      	; 0x12ba <xTaskIncrementTick+0xe0>
    12b2:	ce 01       	movw	r24, r28
    12b4:	0c 96       	adiw	r24, 0x0c	; 12
    12b6:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    12ba:	8e 89       	ldd	r24, Y+22	; 0x16
    12bc:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <uxTopReadyPriority>
    12c0:	98 17       	cp	r25, r24
    12c2:	10 f4       	brcc	.+4      	; 0x12c8 <xTaskIncrementTick+0xee>
    12c4:	80 93 1f 61 	sts	0x611F, r24	; 0x80611f <uxTopReadyPriority>
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9c 01       	movw	r18, r24
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	22 0f       	add	r18, r18
    12d2:	33 1f       	adc	r19, r19
    12d4:	22 0f       	add	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	82 0f       	add	r24, r18
    12da:	93 1f       	adc	r25, r19
    12dc:	b8 01       	movw	r22, r16
    12de:	8b 5a       	subi	r24, 0xAB	; 171
    12e0:	9e 49       	sbci	r25, 0x9E	; 158
    12e2:	0e 94 bb 03 	call	0x776	; 0x776 <vListInsertEnd>
    12e6:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
    12ea:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    12ee:	9e 89       	ldd	r25, Y+22	; 0x16
    12f0:	86 89       	ldd	r24, Z+22	; 0x16
    12f2:	98 17       	cp	r25, r24
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <xTaskIncrementTick+0x11e>
    12f6:	bc cf       	rjmp	.-136    	; 0x1270 <xTaskIncrementTick+0x96>
    12f8:	dd 24       	eor	r13, r13
    12fa:	d3 94       	inc	r13
    12fc:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1300:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1304:	80 81       	ld	r24, Z
    1306:	81 11       	cpse	r24, r1
    1308:	bb cf       	rjmp	.-138    	; 0x1280 <xTaskIncrementTick+0xa6>
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <xNextTaskUnblockTime>
    1312:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <xNextTaskUnblockTime+0x1>
    1316:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
    131a:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    131e:	86 89       	ldd	r24, Z+22	; 0x16
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	fc 01       	movw	r30, r24
    1336:	eb 5a       	subi	r30, 0xAB	; 171
    1338:	fe 49       	sbci	r31, 0x9E	; 158
    133a:	80 81       	ld	r24, Z
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	10 f0       	brcs	.+4      	; 0x1344 <xTaskIncrementTick+0x16a>
    1340:	dd 24       	eor	r13, r13
    1342:	d3 94       	inc	r13
    1344:	80 91 1c 61 	lds	r24, 0x611C	; 0x80611c <xYieldPending>
    1348:	88 23       	and	r24, r24
    134a:	11 f0       	breq	.+4      	; 0x1350 <xTaskIncrementTick+0x176>
    134c:	dd 24       	eor	r13, r13
    134e:	d3 94       	inc	r13
    1350:	8d 2d       	mov	r24, r13
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	df 90       	pop	r13
    1360:	08 95       	ret
    1362:	80 91 1d 61 	lds	r24, 0x611D	; 0x80611d <uxPendedTicks>
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 1d 61 	sts	0x611D, r24	; 0x80611d <uxPendedTicks>
    136c:	d1 2c       	mov	r13, r1
    136e:	ea cf       	rjmp	.-44     	; 0x1344 <xTaskIncrementTick+0x16a>
    1370:	66 e6       	ldi	r22, 0x66	; 102
    1372:	7a e0       	ldi	r23, 0x0A	; 10
    1374:	85 e2       	ldi	r24, 0x25	; 37
    1376:	90 e2       	ldi	r25, 0x20	; 32
    1378:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    137c:	4e cf       	rjmp	.-356    	; 0x121a <xTaskIncrementTick+0x40>
    137e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <prvResetNextTaskUnblockTime.part.0>
    1382:	6d cf       	rjmp	.-294    	; 0x125e <xTaskIncrementTick+0x84>
    1384:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <xNextTaskUnblockTime>
    1388:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <xNextTaskUnblockTime+0x1>
    138c:	c4 cf       	rjmp	.-120    	; 0x1316 <xTaskIncrementTick+0x13c>

0000138e <xTaskResumeAll>:
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <xTaskResumeAll+0x14>
    13a0:	77 c0       	rjmp	.+238    	; 0x1490 <xTaskResumeAll+0x102>
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	0f 92       	push	r0
    13a8:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    13ac:	81 50       	subi	r24, 0x01	; 1
    13ae:	80 93 15 61 	sts	0x6115, r24	; 0x806115 <uxSchedulerSuspended>
    13b2:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    13b6:	81 11       	cpse	r24, r1
    13b8:	62 c0       	rjmp	.+196    	; 0x147e <xTaskResumeAll+0xf0>
    13ba:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>
    13be:	88 23       	and	r24, r24
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <xTaskResumeAll+0x36>
    13c2:	5d c0       	rjmp	.+186    	; 0x147e <xTaskResumeAll+0xf0>
    13c4:	c0 e0       	ldi	r28, 0x00	; 0
    13c6:	d0 e0       	ldi	r29, 0x00	; 0
    13c8:	ff 24       	eor	r15, r15
    13ca:	f3 94       	inc	r15
    13cc:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <xPendingReadyList>
    13d0:	88 23       	and	r24, r24
    13d2:	a1 f1       	breq	.+104    	; 0x143c <xTaskResumeAll+0xae>
    13d4:	e0 91 3b 61 	lds	r30, 0x613B	; 0x80613b <xPendingReadyList+0x5>
    13d8:	f0 91 3c 61 	lds	r31, 0x613C	; 0x80613c <xPendingReadyList+0x6>
    13dc:	c6 81       	ldd	r28, Z+6	; 0x06
    13de:	d7 81       	ldd	r29, Z+7	; 0x07
    13e0:	ce 01       	movw	r24, r28
    13e2:	0c 96       	adiw	r24, 0x0c	; 12
    13e4:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    13e8:	8e 01       	movw	r16, r28
    13ea:	0e 5f       	subi	r16, 0xFE	; 254
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	c8 01       	movw	r24, r16
    13f0:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    13f4:	8e 89       	ldd	r24, Y+22	; 0x16
    13f6:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <uxTopReadyPriority>
    13fa:	98 17       	cp	r25, r24
    13fc:	10 f4       	brcc	.+4      	; 0x1402 <xTaskResumeAll+0x74>
    13fe:	80 93 1f 61 	sts	0x611F, r24	; 0x80611f <uxTopReadyPriority>
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9c 01       	movw	r18, r24
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	22 0f       	add	r18, r18
    140c:	33 1f       	adc	r19, r19
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	82 0f       	add	r24, r18
    1414:	93 1f       	adc	r25, r19
    1416:	b8 01       	movw	r22, r16
    1418:	8b 5a       	subi	r24, 0xAB	; 171
    141a:	9e 49       	sbci	r25, 0x9E	; 158
    141c:	0e 94 bb 03 	call	0x776	; 0x776 <vListInsertEnd>
    1420:	e0 91 79 61 	lds	r30, 0x6179	; 0x806179 <pxCurrentTCB>
    1424:	f0 91 7a 61 	lds	r31, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    1428:	9e 89       	ldd	r25, Y+22	; 0x16
    142a:	86 89       	ldd	r24, Z+22	; 0x16
    142c:	98 17       	cp	r25, r24
    142e:	70 f2       	brcs	.-100    	; 0x13cc <xTaskResumeAll+0x3e>
    1430:	f0 92 1c 61 	sts	0x611C, r15	; 0x80611c <xYieldPending>
    1434:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <xPendingReadyList>
    1438:	81 11       	cpse	r24, r1
    143a:	cc cf       	rjmp	.-104    	; 0x13d4 <xTaskResumeAll+0x46>
    143c:	cd 2b       	or	r28, r29
    143e:	69 f0       	breq	.+26     	; 0x145a <xTaskResumeAll+0xcc>
    1440:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1444:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1448:	80 81       	ld	r24, Z
    144a:	81 11       	cpse	r24, r1
    144c:	2c c0       	rjmp	.+88     	; 0x14a6 <xTaskResumeAll+0x118>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	9f ef       	ldi	r25, 0xFF	; 255
    1452:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <xNextTaskUnblockTime>
    1456:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <xNextTaskUnblockTime+0x1>
    145a:	c0 91 1d 61 	lds	r28, 0x611D	; 0x80611d <uxPendedTicks>
    145e:	cc 23       	and	r28, r28
    1460:	51 f0       	breq	.+20     	; 0x1476 <xTaskResumeAll+0xe8>
    1462:	d1 e0       	ldi	r29, 0x01	; 1
    1464:	0e 94 ed 08 	call	0x11da	; 0x11da <xTaskIncrementTick>
    1468:	81 11       	cpse	r24, r1
    146a:	d0 93 1c 61 	sts	0x611C, r29	; 0x80611c <xYieldPending>
    146e:	c1 50       	subi	r28, 0x01	; 1
    1470:	c9 f7       	brne	.-14     	; 0x1464 <xTaskResumeAll+0xd6>
    1472:	10 92 1d 61 	sts	0x611D, r1	; 0x80611d <uxPendedTicks>
    1476:	80 91 1c 61 	lds	r24, 0x611C	; 0x80611c <xYieldPending>
    147a:	81 11       	cpse	r24, r1
    147c:	10 c0       	rjmp	.+32     	; 0x149e <xTaskResumeAll+0x110>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	08 95       	ret
    1490:	6c e6       	ldi	r22, 0x6C	; 108
    1492:	78 e0       	ldi	r23, 0x08	; 8
    1494:	85 e2       	ldi	r24, 0x25	; 37
    1496:	90 e2       	ldi	r25, 0x20	; 32
    1498:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    149c:	82 cf       	rjmp	.-252    	; 0x13a2 <xTaskResumeAll+0x14>
    149e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vPortYield>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	ed cf       	rjmp	.-38     	; 0x1480 <xTaskResumeAll+0xf2>
    14a6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <prvResetNextTaskUnblockTime.part.0>
    14aa:	d7 cf       	rjmp	.-82     	; 0x145a <xTaskResumeAll+0xcc>

000014ac <vTaskDelayUntil>:
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	8c 01       	movw	r16, r24
    14b6:	eb 01       	movw	r28, r22
    14b8:	89 2b       	or	r24, r25
    14ba:	09 f4       	brne	.+2      	; 0x14be <vTaskDelayUntil+0x12>
    14bc:	46 c0       	rjmp	.+140    	; 0x154a <vTaskDelayUntil+0x9e>
    14be:	20 97       	sbiw	r28, 0x00	; 0
    14c0:	e9 f1       	breq	.+122    	; 0x153c <vTaskDelayUntil+0x90>
    14c2:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    14c6:	81 11       	cpse	r24, r1
    14c8:	32 c0       	rjmp	.+100    	; 0x152e <vTaskDelayUntil+0x82>
    14ca:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 15 61 	sts	0x6115, r24	; 0x806115 <uxSchedulerSuspended>
    14d4:	40 91 20 61 	lds	r20, 0x6120	; 0x806120 <xTickCount>
    14d8:	50 91 21 61 	lds	r21, 0x6121	; 0x806121 <xTickCount+0x1>
    14dc:	f8 01       	movw	r30, r16
    14de:	20 81       	ld	r18, Z
    14e0:	31 81       	ldd	r19, Z+1	; 0x01
    14e2:	ce 01       	movw	r24, r28
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	42 17       	cp	r20, r18
    14ea:	53 07       	cpc	r21, r19
    14ec:	88 f4       	brcc	.+34     	; 0x1510 <vTaskDelayUntil+0x64>
    14ee:	82 17       	cp	r24, r18
    14f0:	93 07       	cpc	r25, r19
    14f2:	88 f0       	brcs	.+34     	; 0x1516 <vTaskDelayUntil+0x6a>
    14f4:	f8 01       	movw	r30, r16
    14f6:	80 83       	st	Z, r24
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	0e 94 c7 09 	call	0x138e	; 0x138e <xTaskResumeAll>
    14fe:	81 11       	cpse	r24, r1
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <vTaskDelayUntil+0x5a>
    1502:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vPortYield>
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret
    1510:	82 17       	cp	r24, r18
    1512:	93 07       	cpc	r25, r19
    1514:	18 f0       	brcs	.+6      	; 0x151c <vTaskDelayUntil+0x70>
    1516:	48 17       	cp	r20, r24
    1518:	59 07       	cpc	r21, r25
    151a:	60 f7       	brcc	.-40     	; 0x14f4 <vTaskDelayUntil+0x48>
    151c:	f8 01       	movw	r30, r16
    151e:	80 83       	st	Z, r24
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	84 1b       	sub	r24, r20
    1526:	95 0b       	sbc	r25, r21
    1528:	0e 94 10 06 	call	0xc20	; 0xc20 <prvAddCurrentTaskToDelayedList>
    152c:	e6 cf       	rjmp	.-52     	; 0x14fa <vTaskDelayUntil+0x4e>
    152e:	6c ec       	ldi	r22, 0xCC	; 204
    1530:	74 e0       	ldi	r23, 0x04	; 4
    1532:	85 e2       	ldi	r24, 0x25	; 37
    1534:	90 e2       	ldi	r25, 0x20	; 32
    1536:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    153a:	c7 cf       	rjmp	.-114    	; 0x14ca <vTaskDelayUntil+0x1e>
    153c:	6b ec       	ldi	r22, 0xCB	; 203
    153e:	74 e0       	ldi	r23, 0x04	; 4
    1540:	85 e2       	ldi	r24, 0x25	; 37
    1542:	90 e2       	ldi	r25, 0x20	; 32
    1544:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    1548:	bc cf       	rjmp	.-136    	; 0x14c2 <vTaskDelayUntil+0x16>
    154a:	6a ec       	ldi	r22, 0xCA	; 202
    154c:	74 e0       	ldi	r23, 0x04	; 4
    154e:	85 e2       	ldi	r24, 0x25	; 37
    1550:	90 e2       	ldi	r25, 0x20	; 32
    1552:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vAssertCalled>
    1556:	b3 cf       	rjmp	.-154    	; 0x14be <vTaskDelayUntil+0x12>

00001558 <vTaskSwitchContext>:
    1558:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    155c:	81 11       	cpse	r24, r1
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <vTaskSwitchContext+0xc>
    1560:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <vTaskSwitchContext.part.5>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	80 93 1c 61 	sts	0x611C, r24	; 0x80611c <xYieldPending>
    156a:	08 95       	ret

0000156c <vTaskGetInfo>:
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	8c 01       	movw	r16, r24
    1578:	eb 01       	movw	r28, r22
    157a:	f4 2e       	mov	r15, r20
    157c:	89 2b       	or	r24, r25
    157e:	09 f4       	brne	.+2      	; 0x1582 <vTaskGetInfo+0x16>
    1580:	64 c0       	rjmp	.+200    	; 0x164a <vTaskGetInfo+0xde>
    1582:	08 83       	st	Y, r16
    1584:	19 83       	std	Y+1, r17	; 0x01
    1586:	c8 01       	movw	r24, r16
    1588:	49 96       	adiw	r24, 0x19	; 25
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	9b 83       	std	Y+3, r25	; 0x03
    158e:	d8 01       	movw	r26, r16
    1590:	56 96       	adiw	r26, 0x16	; 22
    1592:	8c 91       	ld	r24, X
    1594:	56 97       	sbiw	r26, 0x16	; 22
    1596:	8e 83       	std	Y+6, r24	; 0x06
    1598:	57 96       	adiw	r26, 0x17	; 23
    159a:	8d 91       	ld	r24, X+
    159c:	9c 91       	ld	r25, X
    159e:	58 97       	sbiw	r26, 0x18	; 24
    15a0:	8c 87       	std	Y+12, r24	; 0x0c
    15a2:	9d 87       	std	Y+13, r25	; 0x0d
    15a4:	91 96       	adiw	r26, 0x21	; 33
    15a6:	8c 91       	ld	r24, X
    15a8:	91 97       	sbiw	r26, 0x21	; 33
    15aa:	8c 83       	std	Y+4, r24	; 0x04
    15ac:	93 96       	adiw	r26, 0x23	; 35
    15ae:	8c 91       	ld	r24, X
    15b0:	93 97       	sbiw	r26, 0x23	; 35
    15b2:	8f 83       	std	Y+7, r24	; 0x07
    15b4:	95 96       	adiw	r26, 0x25	; 37
    15b6:	8d 91       	ld	r24, X+
    15b8:	9d 91       	ld	r25, X+
    15ba:	0d 90       	ld	r0, X+
    15bc:	bc 91       	ld	r27, X
    15be:	a0 2d       	mov	r26, r0
    15c0:	88 87       	std	Y+8, r24	; 0x08
    15c2:	99 87       	std	Y+9, r25	; 0x09
    15c4:	aa 87       	std	Y+10, r26	; 0x0a
    15c6:	bb 87       	std	Y+11, r27	; 0x0b
    15c8:	25 30       	cpi	r18, 0x05	; 5
    15ca:	09 f4       	brne	.+2      	; 0x15ce <vTaskGetInfo+0x62>
    15cc:	43 c0       	rjmp	.+134    	; 0x1654 <vTaskGetInfo+0xe8>
    15ce:	80 91 79 61 	lds	r24, 0x6179	; 0x806179 <pxCurrentTCB>
    15d2:	90 91 7a 61 	lds	r25, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    15d6:	08 17       	cp	r16, r24
    15d8:	19 07       	cpc	r17, r25
    15da:	09 f4       	brne	.+2      	; 0x15de <vTaskGetInfo+0x72>
    15dc:	40 c0       	rjmp	.+128    	; 0x165e <vTaskGetInfo+0xf2>
    15de:	2d 83       	std	Y+5, r18	; 0x05
    15e0:	23 30       	cpi	r18, 0x03	; 3
    15e2:	21 f1       	breq	.+72     	; 0x162c <vTaskGetInfo+0xc0>
    15e4:	ff 20       	and	r15, r15
    15e6:	d1 f0       	breq	.+52     	; 0x161c <vTaskGetInfo+0xb0>
    15e8:	d8 01       	movw	r26, r16
    15ea:	57 96       	adiw	r26, 0x17	; 23
    15ec:	ed 91       	ld	r30, X+
    15ee:	fc 91       	ld	r31, X
    15f0:	58 97       	sbiw	r26, 0x18	; 24
    15f2:	80 81       	ld	r24, Z
    15f4:	85 3a       	cpi	r24, 0xA5	; 165
    15f6:	a9 f5       	brne	.+106    	; 0x1662 <vTaskGetInfo+0xf6>
    15f8:	31 96       	adiw	r30, 0x01	; 1
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	dc 01       	movw	r26, r24
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	a1 1d       	adc	r26, r1
    1604:	b1 1d       	adc	r27, r1
    1606:	21 91       	ld	r18, Z+
    1608:	25 3a       	cpi	r18, 0xA5	; 165
    160a:	d1 f3       	breq	.-12     	; 0x1600 <vTaskGetInfo+0x94>
    160c:	8e 87       	std	Y+14, r24	; 0x0e
    160e:	9f 87       	std	Y+15, r25	; 0x0f
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	08 95       	ret
    161c:	1e 86       	std	Y+14, r1	; 0x0e
    161e:	1f 86       	std	Y+15, r1	; 0x0f
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	08 95       	ret
    162c:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	80 93 15 61 	sts	0x6115, r24	; 0x806115 <uxSchedulerSuspended>
    1636:	f8 01       	movw	r30, r16
    1638:	84 89       	ldd	r24, Z+20	; 0x14
    163a:	95 89       	ldd	r25, Z+21	; 0x15
    163c:	89 2b       	or	r24, r25
    163e:	11 f0       	breq	.+4      	; 0x1644 <vTaskGetInfo+0xd8>
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	0e 94 c7 09 	call	0x138e	; 0x138e <xTaskResumeAll>
    1648:	cd cf       	rjmp	.-102    	; 0x15e4 <vTaskGetInfo+0x78>
    164a:	00 91 79 61 	lds	r16, 0x6179	; 0x806179 <pxCurrentTCB>
    164e:	10 91 7a 61 	lds	r17, 0x617A	; 0x80617a <pxCurrentTCB+0x1>
    1652:	97 cf       	rjmp	.-210    	; 0x1582 <vTaskGetInfo+0x16>
    1654:	c8 01       	movw	r24, r16
    1656:	0e 94 64 08 	call	0x10c8	; 0x10c8 <eTaskGetState>
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	c3 cf       	rjmp	.-122    	; 0x15e4 <vTaskGetInfo+0x78>
    165e:	1d 82       	std	Y+5, r1	; 0x05
    1660:	c1 cf       	rjmp	.-126    	; 0x15e4 <vTaskGetInfo+0x78>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	d2 cf       	rjmp	.-92     	; 0x160c <vTaskGetInfo+0xa0>

00001668 <prvListTasksWithinSingleList.part.6>:
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	5c 01       	movw	r10, r24
    1682:	8b 01       	movw	r16, r22
    1684:	d4 2f       	mov	r29, r20
    1686:	db 01       	movw	r26, r22
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	ed 91       	ld	r30, X+
    168c:	fc 91       	ld	r31, X
    168e:	12 97       	sbiw	r26, 0x02	; 2
    1690:	02 80       	ldd	r0, Z+2	; 0x02
    1692:	f3 81       	ldd	r31, Z+3	; 0x03
    1694:	e0 2d       	mov	r30, r0
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	ed 93       	st	X+, r30
    169a:	fc 93       	st	X, r31
    169c:	12 97       	sbiw	r26, 0x02	; 2
    169e:	7b 01       	movw	r14, r22
    16a0:	b3 e0       	ldi	r27, 0x03	; 3
    16a2:	eb 0e       	add	r14, r27
    16a4:	f1 1c       	adc	r15, r1
    16a6:	ee 15       	cp	r30, r14
    16a8:	ff 05       	cpc	r31, r15
    16aa:	e1 f1       	breq	.+120    	; 0x1724 <prvListTasksWithinSingleList.part.6+0xbc>
    16ac:	c6 80       	ldd	r12, Z+6	; 0x06
    16ae:	d7 80       	ldd	r13, Z+7	; 0x07
    16b0:	c0 e0       	ldi	r28, 0x00	; 0
    16b2:	16 c0       	rjmp	.+44     	; 0x16e0 <prvListTasksWithinSingleList.part.6+0x78>
    16b4:	86 80       	ldd	r8, Z+6	; 0x06
    16b6:	97 80       	ldd	r9, Z+7	; 0x07
    16b8:	b5 01       	movw	r22, r10
    16ba:	b0 e1       	ldi	r27, 0x10	; 16
    16bc:	cb 9f       	mul	r28, r27
    16be:	60 0d       	add	r22, r0
    16c0:	71 1d       	adc	r23, r1
    16c2:	11 24       	eor	r1, r1
    16c4:	2d 2f       	mov	r18, r29
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	c4 01       	movw	r24, r8
    16ca:	0e 94 b6 0a 	call	0x156c	; 0x156c <vTaskGetInfo>
    16ce:	cf 5f       	subi	r28, 0xFF	; 255
    16d0:	c8 14       	cp	r12, r8
    16d2:	d9 04       	cpc	r13, r9
    16d4:	c9 f0       	breq	.+50     	; 0x1708 <prvListTasksWithinSingleList.part.6+0xa0>
    16d6:	d8 01       	movw	r26, r16
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	ed 91       	ld	r30, X+
    16dc:	fc 91       	ld	r31, X
    16de:	12 97       	sbiw	r26, 0x02	; 2
    16e0:	02 80       	ldd	r0, Z+2	; 0x02
    16e2:	f3 81       	ldd	r31, Z+3	; 0x03
    16e4:	e0 2d       	mov	r30, r0
    16e6:	d8 01       	movw	r26, r16
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	ed 93       	st	X+, r30
    16ec:	fc 93       	st	X, r31
    16ee:	12 97       	sbiw	r26, 0x02	; 2
    16f0:	ee 16       	cp	r14, r30
    16f2:	ff 06       	cpc	r15, r31
    16f4:	f9 f6       	brne	.-66     	; 0x16b4 <prvListTasksWithinSingleList.part.6+0x4c>
    16f6:	15 96       	adiw	r26, 0x05	; 5
    16f8:	ed 91       	ld	r30, X+
    16fa:	fc 91       	ld	r31, X
    16fc:	16 97       	sbiw	r26, 0x06	; 6
    16fe:	11 96       	adiw	r26, 0x01	; 1
    1700:	ed 93       	st	X+, r30
    1702:	fc 93       	st	X, r31
    1704:	12 97       	sbiw	r26, 0x02	; 2
    1706:	d6 cf       	rjmp	.-84     	; 0x16b4 <prvListTasksWithinSingleList.part.6+0x4c>
    1708:	8c 2f       	mov	r24, r28
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	08 95       	ret
    1724:	02 80       	ldd	r0, Z+2	; 0x02
    1726:	f3 81       	ldd	r31, Z+3	; 0x03
    1728:	e0 2d       	mov	r30, r0
    172a:	c0 cf       	rjmp	.-128    	; 0x16ac <prvListTasksWithinSingleList.part.6+0x44>

0000172c <uxTaskGetSystemState>:
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	8c 01       	movw	r16, r24
    173a:	7a 01       	movw	r14, r20
    173c:	80 91 15 61 	lds	r24, 0x6115	; 0x806115 <uxSchedulerSuspended>
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	80 93 15 61 	sts	0x6115, r24	; 0x806115 <uxSchedulerSuspended>
    1746:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>
    174a:	68 17       	cp	r22, r24
    174c:	08 f4       	brcc	.+2      	; 0x1750 <uxTaskGetSystemState+0x24>
    174e:	63 c0       	rjmp	.+198    	; 0x1816 <uxTaskGetSystemState+0xea>
    1750:	c4 e0       	ldi	r28, 0x04	; 4
    1752:	d0 e0       	ldi	r29, 0x00	; 0
    1754:	c1 50       	subi	r28, 0x01	; 1
    1756:	6c 2f       	mov	r22, r28
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	cb 01       	movw	r24, r22
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	68 0f       	add	r22, r24
    176a:	79 1f       	adc	r23, r25
    176c:	fb 01       	movw	r30, r22
    176e:	eb 5a       	subi	r30, 0xAB	; 171
    1770:	fe 49       	sbci	r31, 0x9E	; 158
    1772:	80 81       	ld	r24, Z
    1774:	81 11       	cpse	r24, r1
    1776:	44 c0       	rjmp	.+136    	; 0x1800 <uxTaskGetSystemState+0xd4>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	d8 0f       	add	r29, r24
    177c:	c1 11       	cpse	r28, r1
    177e:	ea cf       	rjmp	.-44     	; 0x1754 <uxTaskGetSystemState+0x28>
    1780:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <pxDelayedTaskList>
    1784:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <pxDelayedTaskList+0x1>
    1788:	80 81       	ld	r24, Z
    178a:	81 11       	cpse	r24, r1
    178c:	46 c0       	rjmp	.+140    	; 0x181a <uxTaskGetSystemState+0xee>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	d8 0f       	add	r29, r24
    1792:	e0 91 3f 61 	lds	r30, 0x613F	; 0x80613f <pxOverflowDelayedTaskList>
    1796:	f0 91 40 61 	lds	r31, 0x6140	; 0x806140 <pxOverflowDelayedTaskList+0x1>
    179a:	80 81       	ld	r24, Z
    179c:	81 11       	cpse	r24, r1
    179e:	50 c0       	rjmp	.+160    	; 0x1840 <uxTaskGetSystemState+0x114>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	d8 0f       	add	r29, r24
    17a4:	80 91 2d 61 	lds	r24, 0x612D	; 0x80612d <xTasksWaitingTermination>
    17a8:	81 11       	cpse	r24, r1
    17aa:	5a c0       	rjmp	.+180    	; 0x1860 <uxTaskGetSystemState+0x134>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	d8 0f       	add	r29, r24
    17b0:	80 91 23 61 	lds	r24, 0x6123	; 0x806123 <xSuspendedTaskList>
    17b4:	81 11       	cpse	r24, r1
    17b6:	65 c0       	rjmp	.+202    	; 0x1882 <uxTaskGetSystemState+0x156>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	d8 0f       	add	r29, r24
    17bc:	e1 14       	cp	r14, r1
    17be:	f1 04       	cpc	r15, r1
    17c0:	a9 f0       	breq	.+42     	; 0x17ec <uxTaskGetSystemState+0xc0>
    17c2:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    17c6:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    17ca:	80 91 7b 63 	lds	r24, 0x637B	; 0x80637b <StatsTimer>
    17ce:	90 91 7c 63 	lds	r25, 0x637C	; 0x80637c <StatsTimer+0x1>
    17d2:	a0 91 7d 63 	lds	r26, 0x637D	; 0x80637d <StatsTimer+0x2>
    17d6:	b0 91 7e 63 	lds	r27, 0x637E	; 0x80637e <StatsTimer+0x3>
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	a1 1d       	adc	r26, r1
    17e0:	b1 1d       	adc	r27, r1
    17e2:	f7 01       	movw	r30, r14
    17e4:	80 83       	st	Z, r24
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	a2 83       	std	Z+2, r26	; 0x02
    17ea:	b3 83       	std	Z+3, r27	; 0x03
    17ec:	0e 94 c7 09 	call	0x138e	; 0x138e <xTaskResumeAll>
    17f0:	8d 2f       	mov	r24, r29
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	08 95       	ret
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	bf 01       	movw	r22, r30
    1804:	c8 01       	movw	r24, r16
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	d2 9f       	mul	r29, r18
    180a:	80 0d       	add	r24, r0
    180c:	91 1d       	adc	r25, r1
    180e:	11 24       	eor	r1, r1
    1810:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvListTasksWithinSingleList.part.6>
    1814:	b2 cf       	rjmp	.-156    	; 0x177a <uxTaskGetSystemState+0x4e>
    1816:	d0 e0       	ldi	r29, 0x00	; 0
    1818:	e9 cf       	rjmp	.-46     	; 0x17ec <uxTaskGetSystemState+0xc0>
    181a:	42 e0       	ldi	r20, 0x02	; 2
    181c:	bf 01       	movw	r22, r30
    181e:	c8 01       	movw	r24, r16
    1820:	e0 e1       	ldi	r30, 0x10	; 16
    1822:	de 9f       	mul	r29, r30
    1824:	80 0d       	add	r24, r0
    1826:	91 1d       	adc	r25, r1
    1828:	11 24       	eor	r1, r1
    182a:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvListTasksWithinSingleList.part.6>
    182e:	d8 0f       	add	r29, r24
    1830:	e0 91 3f 61 	lds	r30, 0x613F	; 0x80613f <pxOverflowDelayedTaskList>
    1834:	f0 91 40 61 	lds	r31, 0x6140	; 0x806140 <pxOverflowDelayedTaskList+0x1>
    1838:	80 81       	ld	r24, Z
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <uxTaskGetSystemState+0x114>
    183e:	b0 cf       	rjmp	.-160    	; 0x17a0 <uxTaskGetSystemState+0x74>
    1840:	42 e0       	ldi	r20, 0x02	; 2
    1842:	bf 01       	movw	r22, r30
    1844:	c8 01       	movw	r24, r16
    1846:	f0 e1       	ldi	r31, 0x10	; 16
    1848:	df 9f       	mul	r29, r31
    184a:	80 0d       	add	r24, r0
    184c:	91 1d       	adc	r25, r1
    184e:	11 24       	eor	r1, r1
    1850:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvListTasksWithinSingleList.part.6>
    1854:	d8 0f       	add	r29, r24
    1856:	80 91 2d 61 	lds	r24, 0x612D	; 0x80612d <xTasksWaitingTermination>
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <uxTaskGetSystemState+0x134>
    185e:	a6 cf       	rjmp	.-180    	; 0x17ac <uxTaskGetSystemState+0x80>
    1860:	44 e0       	ldi	r20, 0x04	; 4
    1862:	6d e2       	ldi	r22, 0x2D	; 45
    1864:	71 e6       	ldi	r23, 0x61	; 97
    1866:	c8 01       	movw	r24, r16
    1868:	20 e1       	ldi	r18, 0x10	; 16
    186a:	d2 9f       	mul	r29, r18
    186c:	80 0d       	add	r24, r0
    186e:	91 1d       	adc	r25, r1
    1870:	11 24       	eor	r1, r1
    1872:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvListTasksWithinSingleList.part.6>
    1876:	d8 0f       	add	r29, r24
    1878:	80 91 23 61 	lds	r24, 0x6123	; 0x806123 <xSuspendedTaskList>
    187c:	88 23       	and	r24, r24
    187e:	09 f4       	brne	.+2      	; 0x1882 <uxTaskGetSystemState+0x156>
    1880:	9b cf       	rjmp	.-202    	; 0x17b8 <uxTaskGetSystemState+0x8c>
    1882:	43 e0       	ldi	r20, 0x03	; 3
    1884:	63 e2       	ldi	r22, 0x23	; 35
    1886:	71 e6       	ldi	r23, 0x61	; 97
    1888:	c8 01       	movw	r24, r16
    188a:	e0 e1       	ldi	r30, 0x10	; 16
    188c:	de 9f       	mul	r29, r30
    188e:	80 0d       	add	r24, r0
    1890:	91 1d       	adc	r25, r1
    1892:	11 24       	eor	r1, r1
    1894:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvListTasksWithinSingleList.part.6>
    1898:	90 cf       	rjmp	.-224    	; 0x17ba <uxTaskGetSystemState+0x8e>

0000189a <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
    189a:	2f 92       	push	r2
    189c:	3f 92       	push	r3
    189e:	4f 92       	push	r4
    18a0:	5f 92       	push	r5
    18a2:	6f 92       	push	r6
    18a4:	7f 92       	push	r7
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <vTaskGetRunTimeStats+0x26>
    18c0:	1f 92       	push	r1
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	8c 01       	movw	r16, r24
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
    18c8:	fc 01       	movw	r30, r24
    18ca:	10 82       	st	Z, r1

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
    18cc:	f0 90 22 61 	lds	r15, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
    18d0:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <uxCurrentNumberOfTasks>
    18d4:	f0 e1       	ldi	r31, 0x10	; 16
    18d6:	8f 9f       	mul	r24, r31
    18d8:	c0 01       	movw	r24, r0
    18da:	11 24       	eor	r1, r1
    18dc:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
    18e0:	5c 01       	movw	r10, r24

		if( pxTaskStatusArray != NULL )
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <vTaskGetRunTimeStats+0x4e>
    18e6:	79 c0       	rjmp	.+242    	; 0x19da <vTaskGetRunTimeStats+0x140>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
    18e8:	ae 01       	movw	r20, r28
    18ea:	4f 5f       	subi	r20, 0xFF	; 255
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	6f 2d       	mov	r22, r15
    18f0:	0e 94 96 0b 	call	0x172c	; 0x172c <uxTaskGetSystemState>
    18f4:	88 2e       	mov	r8, r24

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
    18f6:	69 81       	ldd	r22, Y+1	; 0x01
    18f8:	7a 81       	ldd	r23, Y+2	; 0x02
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	24 e6       	ldi	r18, 0x64	; 100
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 01 12 	call	0x2402	; 0x2402 <__udivmodsi4>
    190a:	29 83       	std	Y+1, r18	; 0x01
    190c:	3a 83       	std	Y+2, r19	; 0x02
    190e:	4b 83       	std	Y+3, r20	; 0x03
    1910:	5c 83       	std	Y+4, r21	; 0x04

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
    1912:	21 15       	cp	r18, r1
    1914:	31 05       	cpc	r19, r1
    1916:	41 05       	cpc	r20, r1
    1918:	51 05       	cpc	r21, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <vTaskGetRunTimeStats+0x84>
    191c:	5b c0       	rjmp	.+182    	; 0x19d4 <vTaskGetRunTimeStats+0x13a>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    191e:	88 20       	and	r8, r8
    1920:	09 f4       	brne	.+2      	; 0x1924 <vTaskGetRunTimeStats+0x8a>
    1922:	58 c0       	rjmp	.+176    	; 0x19d4 <vTaskGetRunTimeStats+0x13a>
    1924:	75 01       	movw	r14, r10
    1926:	91 2c       	mov	r9, r1
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    1928:	8b e5       	ldi	r24, 0x5B	; 91
    192a:	c8 2e       	mov	r12, r24
    192c:	80 e2       	ldi	r24, 0x20	; 32
    192e:	d8 2e       	mov	r13, r24

					if( ulStatsAsPercentage > 0UL )
					{
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
    1930:	9d e4       	ldi	r25, 0x4D	; 77
    1932:	29 2e       	mov	r2, r25
    1934:	90 e2       	ldi	r25, 0x20	; 32
    1936:	39 2e       	mov	r3, r25
    1938:	26 c0       	rjmp	.+76     	; 0x1986 <vTaskGetRunTimeStats+0xec>
    193a:	7f 92       	push	r7
    193c:	6f 92       	push	r6
    193e:	5f 92       	push	r5
    1940:	4f 92       	push	r4
    1942:	f7 01       	movw	r30, r14
    1944:	83 85       	ldd	r24, Z+11	; 0x0b
    1946:	8f 93       	push	r24
    1948:	82 85       	ldd	r24, Z+10	; 0x0a
    194a:	8f 93       	push	r24
    194c:	81 85       	ldd	r24, Z+9	; 0x09
    194e:	8f 93       	push	r24
    1950:	80 85       	ldd	r24, Z+8	; 0x08
    1952:	8f 93       	push	r24
    1954:	3f 92       	push	r3
    1956:	2f 92       	push	r2
    1958:	1f 93       	push	r17
    195a:	0f 93       	push	r16
    195c:	0e 94 df 13 	call	0x27be	; 0x27be <sprintf>
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	de bf       	out	0x3e, r29	; 62
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
    1964:	f8 01       	movw	r30, r16
    1966:	01 90       	ld	r0, Z+
    1968:	00 20       	and	r0, r0
    196a:	e9 f7       	brne	.-6      	; 0x1966 <vTaskGetRunTimeStats+0xcc>
    196c:	8f 01       	movw	r16, r30
    196e:	01 50       	subi	r16, 0x01	; 1
    1970:	11 09       	sbc	r17, r1

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    1972:	93 94       	inc	r9
    1974:	90 e1       	ldi	r25, 0x10	; 16
    1976:	e9 0e       	add	r14, r25
    1978:	f1 1c       	adc	r15, r1
    197a:	89 14       	cp	r8, r9
    197c:	59 f1       	breq	.+86     	; 0x19d4 <vTaskGetRunTimeStats+0x13a>
    197e:	29 81       	ldd	r18, Y+1	; 0x01
    1980:	3a 81       	ldd	r19, Y+2	; 0x02
    1982:	4b 81       	ldd	r20, Y+3	; 0x03
    1984:	5c 81       	ldd	r21, Y+4	; 0x04
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
    1986:	f7 01       	movw	r30, r14
    1988:	60 85       	ldd	r22, Z+8	; 0x08
    198a:	71 85       	ldd	r23, Z+9	; 0x09
    198c:	82 85       	ldd	r24, Z+10	; 0x0a
    198e:	93 85       	ldd	r25, Z+11	; 0x0b
    1990:	0e 94 01 12 	call	0x2402	; 0x2402 <__udivmodsi4>
    1994:	29 01       	movw	r4, r18
    1996:	3a 01       	movw	r6, r20

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
    1998:	f7 01       	movw	r30, r14
    199a:	62 81       	ldd	r22, Z+2	; 0x02
    199c:	73 81       	ldd	r23, Z+3	; 0x03
    199e:	c8 01       	movw	r24, r16
    19a0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <prvWriteNameToBuffer>
    19a4:	8c 01       	movw	r16, r24

					if( ulStatsAsPercentage > 0UL )
    19a6:	41 14       	cp	r4, r1
    19a8:	51 04       	cpc	r5, r1
    19aa:	61 04       	cpc	r6, r1
    19ac:	71 04       	cpc	r7, r1
    19ae:	29 f6       	brne	.-118    	; 0x193a <vTaskGetRunTimeStats+0xa0>
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    19b0:	f7 01       	movw	r30, r14
    19b2:	83 85       	ldd	r24, Z+11	; 0x0b
    19b4:	8f 93       	push	r24
    19b6:	82 85       	ldd	r24, Z+10	; 0x0a
    19b8:	8f 93       	push	r24
    19ba:	81 85       	ldd	r24, Z+9	; 0x09
    19bc:	8f 93       	push	r24
    19be:	80 85       	ldd	r24, Z+8	; 0x08
    19c0:	8f 93       	push	r24
    19c2:	df 92       	push	r13
    19c4:	cf 92       	push	r12
    19c6:	1f 93       	push	r17
    19c8:	0f 93       	push	r16
    19ca:	0e 94 df 13 	call	0x27be	; 0x27be <sprintf>
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	c8 cf       	rjmp	.-112    	; 0x1964 <vTaskGetRunTimeStats+0xca>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
    19d4:	c5 01       	movw	r24, r10
    19d6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    19da:	24 96       	adiw	r28, 0x04	; 4
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	7f 90       	pop	r7
    19fa:	6f 90       	pop	r6
    19fc:	5f 90       	pop	r5
    19fe:	4f 90       	pop	r4
    1a00:	3f 90       	pop	r3
    1a02:	2f 90       	pop	r2
    1a04:	08 95       	ret

00001a06 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    1a06:	08 95       	ret

00001a08 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    1a08:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    1a0a:	88 e6       	ldi	r24, 0x68	; 104
    1a0c:	90 e2       	ldi	r25, 0x20	; 32
    1a0e:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
	CFG_ERR_LED();
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    1a18:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a1c:	2f ef       	ldi	r18, 0xFF	; 255
    1a1e:	33 ec       	ldi	r19, 0xC3	; 195
    1a20:	99 e0       	ldi	r25, 0x09	; 9
    1a22:	21 50       	subi	r18, 0x01	; 1
    1a24:	30 40       	sbci	r19, 0x00	; 0
    1a26:	90 40       	sbci	r25, 0x00	; 0
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <vApplicationMallocFailedHook+0x1a>
    1a2a:	00 c0       	rjmp	.+0      	; 0x1a2c <vApplicationMallocFailedHook+0x24>
    1a2c:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1a2e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1a32:	2f ef       	ldi	r18, 0xFF	; 255
    1a34:	33 ec       	ldi	r19, 0xC3	; 195
    1a36:	99 e0       	ldi	r25, 0x09	; 9
    1a38:	21 50       	subi	r18, 0x01	; 1
    1a3a:	30 40       	sbci	r19, 0x00	; 0
    1a3c:	90 40       	sbci	r25, 0x00	; 0
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <vApplicationMallocFailedHook+0x30>
    1a40:	00 c0       	rjmp	.+0      	; 0x1a42 <vApplicationMallocFailedHook+0x3a>
    1a42:	00 00       	nop
    1a44:	e9 cf       	rjmp	.-46     	; 0x1a18 <vApplicationMallocFailedHook+0x10>

00001a46 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	c0 58       	subi	r28, 0x80	; 128
    1a50:	d1 09       	sbc	r29, r1
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    1a56:	f8 94       	cli
	CFG_ERR_LED();
    1a58:	80 e8       	ldi	r24, 0x80	; 128
    1a5a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    1a5e:	7f 93       	push	r23
    1a60:	6f 93       	push	r22
    1a62:	2a e8       	ldi	r18, 0x8A	; 138
    1a64:	30 e2       	ldi	r19, 0x20	; 32
    1a66:	3f 93       	push	r19
    1a68:	2f 93       	push	r18
    1a6a:	1f 92       	push	r1
    1a6c:	8f 93       	push	r24
    1a6e:	8e 01       	movw	r16, r28
    1a70:	0f 5f       	subi	r16, 0xFF	; 255
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	1f 93       	push	r17
    1a76:	0f 93       	push	r16
    1a78:	0e 94 a8 13 	call	0x2750	; 0x2750 <snprintf>
	DbgPrint(Dbg);
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1a86:	80 e8       	ldi	r24, 0x80	; 128
    1a88:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	93 ed       	ldi	r25, 0xD3	; 211
    1a90:	20 e3       	ldi	r18, 0x30	; 48
    1a92:	31 50       	subi	r19, 0x01	; 1
    1a94:	90 40       	sbci	r25, 0x00	; 0
    1a96:	20 40       	sbci	r18, 0x00	; 0
    1a98:	e1 f7       	brne	.-8      	; 0x1a92 <vApplicationStackOverflowHook+0x4c>
    1a9a:	00 c0       	rjmp	.+0      	; 0x1a9c <vApplicationStackOverflowHook+0x56>
    1a9c:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    1a9e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	93 ed       	ldi	r25, 0xD3	; 211
    1aa6:	20 e3       	ldi	r18, 0x30	; 48
    1aa8:	31 50       	subi	r19, 0x01	; 1
    1aaa:	90 40       	sbci	r25, 0x00	; 0
    1aac:	20 40       	sbci	r18, 0x00	; 0
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <vApplicationStackOverflowHook+0x62>
    1ab0:	00 c0       	rjmp	.+0      	; 0x1ab2 <vApplicationStackOverflowHook+0x6c>
    1ab2:	00 00       	nop
    1ab4:	e9 cf       	rjmp	.-46     	; 0x1a88 <vApplicationStackOverflowHook+0x42>

00001ab6 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	c0 58       	subi	r28, 0x80	; 128
    1ac0:	d1 09       	sbc	r29, r1
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    1ac6:	f8 94       	cli
	CFG_ERR_LED();
    1ac8:	20 e8       	ldi	r18, 0x80	; 128
    1aca:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    1ace:	7f 93       	push	r23
    1ad0:	6f 93       	push	r22
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	86 ea       	ldi	r24, 0xA6	; 166
    1ad8:	90 e2       	ldi	r25, 0x20	; 32
    1ada:	9f 93       	push	r25
    1adc:	8f 93       	push	r24
    1ade:	1f 92       	push	r1
    1ae0:	2f 93       	push	r18
    1ae2:	8e 01       	movw	r16, r28
    1ae4:	0f 5f       	subi	r16, 0xFF	; 255
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	1f 93       	push	r17
    1aea:	0f 93       	push	r16
    1aec:	0e 94 a8 13 	call	0x2750	; 0x2750 <snprintf>
	DbgPrint(Dbg);
    1af0:	c8 01       	movw	r24, r16
    1af2:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1afa:	80 e8       	ldi	r24, 0x80	; 128
    1afc:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	93 ec       	ldi	r25, 0xC3	; 195
    1b04:	29 e0       	ldi	r18, 0x09	; 9
    1b06:	31 50       	subi	r19, 0x01	; 1
    1b08:	90 40       	sbci	r25, 0x00	; 0
    1b0a:	20 40       	sbci	r18, 0x00	; 0
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <vAssertCalled+0x50>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <vAssertCalled+0x5a>
    1b10:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1b12:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	93 ed       	ldi	r25, 0xD3	; 211
    1b1a:	20 e3       	ldi	r18, 0x30	; 48
    1b1c:	31 50       	subi	r19, 0x01	; 1
    1b1e:	90 40       	sbci	r25, 0x00	; 0
    1b20:	20 40       	sbci	r18, 0x00	; 0
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <vAssertCalled+0x66>
    1b24:	00 c0       	rjmp	.+0      	; 0x1b26 <vAssertCalled+0x70>
    1b26:	00 00       	nop
    1b28:	e9 cf       	rjmp	.-46     	; 0x1afc <vAssertCalled+0x46>

00001b2a <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    1b2a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    1b2e:	0e 94 c5 02 	call	0x58a	; 0x58a <DriverUSARTInit>
	DriverTWIMInit();		//Initialize TWI in master mode
    1b32:	0e 94 04 02 	call	0x408	; 0x408 <DriverTWIMInit>
	DriverCursorstickInit();//Initialize cursor stick
    1b36:	0e 94 b3 01 	call	0x366	; 0x366 <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    1b3a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <DriverLedInit>
	DriverPowerInit();		//Initialize aux power driver
    1b3e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <DriverPowerInit>
	DriverAdcInit();		//Initialize ADC driver
    1b42:	0e 94 b2 01 	call	0x364	; 0x364 <DriverAdcInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    1b4c:	87 e0       	ldi	r24, 0x07	; 7
    1b4e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1b52:	78 94       	sei
    1b54:	2f ef       	ldi	r18, 0xFF	; 255
    1b56:	89 ef       	ldi	r24, 0xF9	; 249
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	21 50       	subi	r18, 0x01	; 1
    1b5c:	80 40       	sbci	r24, 0x00	; 0
    1b5e:	90 40       	sbci	r25, 0x00	; 0
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <main+0x30>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <main+0x3a>
    1b64:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitLooplichtTask(); // Looplicht task oproepen
    1b66:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <InitLooplichtTask>
	InitTerminalTask(); // Terminal task oproepen
    1b6a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <InitTerminalTask>
	vTaskStartScheduler();	//Start scheduler loop
    1b6e:	0e 94 b0 08 	call	0x1160	; 0x1160 <vTaskStartScheduler>

	return 0;
}
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	08 95       	ret

00001b78 <WorkerLooplicht>:
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    1b78:	cf e0       	ldi	r28, 0x0F	; 15
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1b7a:	18 e0       	ldi	r17, 0x08	; 8
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1b7c:	d1 e0       	ldi	r29, 0x01	; 1
static void WorkerLooplicht(void *pvParameters)
{
	while (1)
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
    1b7e:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <xTimeIncrement>
    1b82:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <xTimeIncrement+0x1>
    1b86:	8f e7       	ldi	r24, 0x7F	; 127
    1b88:	93 e6       	ldi	r25, 0x63	; 99
    1b8a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vTaskDelayUntil>
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
    1b8e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    1b92:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DriverLedWrite>
		if (RichtingInt == 1) {
    1b96:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <RichtingInt>
    1b9a:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <RichtingInt+0x1>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	29 f0       	breq	.+10     	; 0x1bae <WorkerLooplicht+0x36>
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
    1ba4:	02 97       	sbiw	r24, 0x02	; 2
    1ba6:	59 f0       	breq	.+22     	; 0x1bbe <WorkerLooplicht+0x46>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    1ba8:	c0 93 12 20 	sts	0x2012, r28	; 0x802012 <LedData>
    1bac:	e8 cf       	rjmp	.-48     	; 0x1b7e <WorkerLooplicht+0x6>
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
    1bae:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    1bb2:	88 30       	cpi	r24, 0x08	; 8
    1bb4:	61 f0       	breq	.+24     	; 0x1bce <WorkerLooplicht+0x56>
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
    1bb6:	88 0f       	add	r24, r24
    1bb8:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <LedData>
    1bbc:	e0 cf       	rjmp	.-64     	; 0x1b7e <WorkerLooplicht+0x6>
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
    1bbe:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	39 f0       	breq	.+14     	; 0x1bd4 <WorkerLooplicht+0x5c>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
    1bc6:	86 95       	lsr	r24
    1bc8:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <LedData>
    1bcc:	d8 cf       	rjmp	.-80     	; 0x1b7e <WorkerLooplicht+0x6>
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1bce:	d0 93 12 20 	sts	0x2012, r29	; 0x802012 <LedData>
    1bd2:	d5 cf       	rjmp	.-86     	; 0x1b7e <WorkerLooplicht+0x6>
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1bd4:	10 93 12 20 	sts	0x2012, r17	; 0x802012 <LedData>
    1bd8:	d2 cf       	rjmp	.-92     	; 0x1b7e <WorkerLooplicht+0x6>

00001bda <InitLooplichtTask>:
//Private function prototypes
static void WorkerLooplicht(void *pvParameters);

//Function definitions
void InitLooplichtTask()
{
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
	xTaskCreate( WorkerLooplicht, "looplicht", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL );	
    1be0:	e1 2c       	mov	r14, r1
    1be2:	f1 2c       	mov	r15, r1
    1be4:	02 e0       	ldi	r16, 0x02	; 2
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	51 e0       	ldi	r21, 0x01	; 1
    1bee:	66 ec       	ldi	r22, 0xC6	; 198
    1bf0:	70 e2       	ldi	r23, 0x20	; 32
    1bf2:	8c eb       	ldi	r24, 0xBC	; 188
    1bf4:	9d e0       	ldi	r25, 0x0D	; 13
    1bf6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <xTaskCreate>
}
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	08 95       	ret

00001c02 <WorkerTerminal>:

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    1c02:	05 e1       	ldi	r16, 0x15	; 21
    1c04:	10 e2       	ldi	r17, 0x20	; 32
    1c06:	c0 ed       	ldi	r28, 0xD0	; 208
    1c08:	d0 e2       	ldi	r29, 0x20	; 32
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	a8 2e       	mov	r10, r24
    1c0e:	b1 2c       	mov	r11, r1
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	c9 2e       	mov	r12, r25
    1c14:	d1 2c       	mov	r13, r1
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
    1c16:	ee 24       	eor	r14, r14
    1c18:	e3 94       	inc	r14
    1c1a:	f1 2c       	mov	r15, r1
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <WorkerTerminal+0x2c>
    1c1e:	e0 92 13 20 	sts	0x2013, r14	; 0x802013 <RichtingInt>
    1c22:	f0 92 14 20 	sts	0x2014, r15	; 0x802014 <RichtingInt+0x1>
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
		}
		puts(Buffer); // Buffer afprinten
    1c26:	8b e7       	ldi	r24, 0x7B	; 123
    1c28:	91 e6       	ldi	r25, 0x61	; 97
    1c2a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <puts>

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    1c2e:	1f 93       	push	r17
    1c30:	0f 93       	push	r16
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	0e 94 94 13 	call	0x2728	; 0x2728 <scanf>
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
    1c3a:	8b e7       	ldi	r24, 0x7B	; 123
    1c3c:	91 e6       	ldi	r25, 0x61	; 97
    1c3e:	0e 94 4d 0c 	call	0x189a	; 0x189a <vTaskGetRunTimeStats>
		if (strcmp(RichtingString, "looplicht_links") == 0) {
    1c42:	63 ed       	ldi	r22, 0xD3	; 211
    1c44:	70 e2       	ldi	r23, 0x20	; 32
    1c46:	85 e1       	ldi	r24, 0x15	; 21
    1c48:	90 e2       	ldi	r25, 0x20	; 32
    1c4a:	0e 94 0d 13 	call	0x261a	; 0x261a <strcmp>
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	89 2b       	or	r24, r25
    1c58:	11 f3       	breq	.-60     	; 0x1c1e <WorkerTerminal+0x1c>
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
    1c5a:	63 ee       	ldi	r22, 0xE3	; 227
    1c5c:	70 e2       	ldi	r23, 0x20	; 32
    1c5e:	85 e1       	ldi	r24, 0x15	; 21
    1c60:	90 e2       	ldi	r25, 0x20	; 32
    1c62:	0e 94 0d 13 	call	0x261a	; 0x261a <strcmp>
    1c66:	89 2b       	or	r24, r25
    1c68:	29 f4       	brne	.+10     	; 0x1c74 <WorkerTerminal+0x72>
			RichtingInt = 2;
    1c6a:	c0 92 13 20 	sts	0x2013, r12	; 0x802013 <RichtingInt>
    1c6e:	d0 92 14 20 	sts	0x2014, r13	; 0x802014 <RichtingInt+0x1>
    1c72:	d9 cf       	rjmp	.-78     	; 0x1c26 <WorkerTerminal+0x24>
		} else {
			RichtingInt = 3;
    1c74:	a0 92 13 20 	sts	0x2013, r10	; 0x802013 <RichtingInt>
    1c78:	b0 92 14 20 	sts	0x2014, r11	; 0x802014 <RichtingInt+0x1>
    1c7c:	d4 cf       	rjmp	.-88     	; 0x1c26 <WorkerTerminal+0x24>

00001c7e <InitTerminalTask>:
//Private function prototypes
static void WorkerTerminal(void *pvParameters);

//Function definitions
void InitTerminalTask()
{
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
	xTaskCreate( WorkerTerminal, "terminal", configMINIMAL_STACK_SIZE+512 , NULL, tskIDLE_PRIORITY+1, NULL );	
    1c84:	e1 2c       	mov	r14, r1
    1c86:	f1 2c       	mov	r15, r1
    1c88:	01 e0       	ldi	r16, 0x01	; 1
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	53 e0       	ldi	r21, 0x03	; 3
    1c92:	64 ef       	ldi	r22, 0xF4	; 244
    1c94:	70 e2       	ldi	r23, 0x20	; 32
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	9e e0       	ldi	r25, 0x0E	; 14
    1c9a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <xTaskCreate>
}
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	08 95       	ret

00001ca6 <DriverPowerInit>:
    1ca6:	80 e2       	ldi	r24, 0x20	; 32
    1ca8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    1cac:	08 95       	ret

00001cae <DriverPowerVccAuxSet>:
    1cae:	81 11       	cpse	r24, r1
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <DriverPowerVccAuxSet+0xc>
    1cb2:	80 e2       	ldi	r24, 0x20	; 32
    1cb4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1cb8:	08 95       	ret
    1cba:	80 e2       	ldi	r24, 0x20	; 32
    1cbc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    1cc0:	08 95       	ret

00001cc2 <vfprintf>:
    1cc2:	2f 92       	push	r2
    1cc4:	3f 92       	push	r3
    1cc6:	4f 92       	push	r4
    1cc8:	5f 92       	push	r5
    1cca:	6f 92       	push	r6
    1ccc:	7f 92       	push	r7
    1cce:	8f 92       	push	r8
    1cd0:	9f 92       	push	r9
    1cd2:	af 92       	push	r10
    1cd4:	bf 92       	push	r11
    1cd6:	cf 92       	push	r12
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	60 97       	sbiw	r28, 0x10	; 16
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	7c 01       	movw	r14, r24
    1cf2:	1b 01       	movw	r2, r22
    1cf4:	6a 01       	movw	r12, r20
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	16 82       	std	Z+6, r1	; 0x06
    1cfa:	17 82       	std	Z+7, r1	; 0x07
    1cfc:	83 81       	ldd	r24, Z+3	; 0x03
    1cfe:	81 ff       	sbrs	r24, 1
    1d00:	44 c3       	rjmp	.+1672   	; 0x238a <vfprintf+0x6c8>
    1d02:	9e 01       	movw	r18, r28
    1d04:	2f 5f       	subi	r18, 0xFF	; 255
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	39 01       	movw	r6, r18
    1d0a:	f7 01       	movw	r30, r14
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	f1 01       	movw	r30, r2
    1d10:	93 fd       	sbrc	r25, 3
    1d12:	85 91       	lpm	r24, Z+
    1d14:	93 ff       	sbrs	r25, 3
    1d16:	81 91       	ld	r24, Z+
    1d18:	1f 01       	movw	r2, r30
    1d1a:	88 23       	and	r24, r24
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <vfprintf+0x5e>
    1d1e:	31 c3       	rjmp	.+1634   	; 0x2382 <vfprintf+0x6c0>
    1d20:	85 32       	cpi	r24, 0x25	; 37
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <vfprintf+0x70>
    1d24:	93 fd       	sbrc	r25, 3
    1d26:	85 91       	lpm	r24, Z+
    1d28:	93 ff       	sbrs	r25, 3
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	1f 01       	movw	r2, r30
    1d2e:	85 32       	cpi	r24, 0x25	; 37
    1d30:	39 f4       	brne	.+14     	; 0x1d40 <vfprintf+0x7e>
    1d32:	b7 01       	movw	r22, r14
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    1d3a:	56 01       	movw	r10, r12
    1d3c:	65 01       	movw	r12, r10
    1d3e:	e5 cf       	rjmp	.-54     	; 0x1d0a <vfprintf+0x48>
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	51 2c       	mov	r5, r1
    1d44:	91 2c       	mov	r9, r1
    1d46:	ff e1       	ldi	r31, 0x1F	; 31
    1d48:	f9 15       	cp	r31, r9
    1d4a:	d8 f0       	brcs	.+54     	; 0x1d82 <vfprintf+0xc0>
    1d4c:	8b 32       	cpi	r24, 0x2B	; 43
    1d4e:	79 f0       	breq	.+30     	; 0x1d6e <vfprintf+0xac>
    1d50:	38 f4       	brcc	.+14     	; 0x1d60 <vfprintf+0x9e>
    1d52:	80 32       	cpi	r24, 0x20	; 32
    1d54:	79 f0       	breq	.+30     	; 0x1d74 <vfprintf+0xb2>
    1d56:	83 32       	cpi	r24, 0x23	; 35
    1d58:	a1 f4       	brne	.+40     	; 0x1d82 <vfprintf+0xc0>
    1d5a:	f9 2d       	mov	r31, r9
    1d5c:	f0 61       	ori	r31, 0x10	; 16
    1d5e:	2e c0       	rjmp	.+92     	; 0x1dbc <vfprintf+0xfa>
    1d60:	8d 32       	cpi	r24, 0x2D	; 45
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <vfprintf+0xba>
    1d64:	80 33       	cpi	r24, 0x30	; 48
    1d66:	69 f4       	brne	.+26     	; 0x1d82 <vfprintf+0xc0>
    1d68:	29 2d       	mov	r18, r9
    1d6a:	21 60       	ori	r18, 0x01	; 1
    1d6c:	2d c0       	rjmp	.+90     	; 0x1dc8 <vfprintf+0x106>
    1d6e:	39 2d       	mov	r19, r9
    1d70:	32 60       	ori	r19, 0x02	; 2
    1d72:	93 2e       	mov	r9, r19
    1d74:	89 2d       	mov	r24, r9
    1d76:	84 60       	ori	r24, 0x04	; 4
    1d78:	98 2e       	mov	r9, r24
    1d7a:	2a c0       	rjmp	.+84     	; 0x1dd0 <vfprintf+0x10e>
    1d7c:	e9 2d       	mov	r30, r9
    1d7e:	e8 60       	ori	r30, 0x08	; 8
    1d80:	15 c0       	rjmp	.+42     	; 0x1dac <vfprintf+0xea>
    1d82:	97 fc       	sbrc	r9, 7
    1d84:	2d c0       	rjmp	.+90     	; 0x1de0 <vfprintf+0x11e>
    1d86:	20 ed       	ldi	r18, 0xD0	; 208
    1d88:	28 0f       	add	r18, r24
    1d8a:	2a 30       	cpi	r18, 0x0A	; 10
    1d8c:	88 f4       	brcc	.+34     	; 0x1db0 <vfprintf+0xee>
    1d8e:	96 fe       	sbrs	r9, 6
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <vfprintf+0xdc>
    1d92:	3a e0       	ldi	r19, 0x0A	; 10
    1d94:	13 9f       	mul	r17, r19
    1d96:	20 0d       	add	r18, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	12 2f       	mov	r17, r18
    1d9c:	19 c0       	rjmp	.+50     	; 0x1dd0 <vfprintf+0x10e>
    1d9e:	8a e0       	ldi	r24, 0x0A	; 10
    1da0:	58 9e       	mul	r5, r24
    1da2:	20 0d       	add	r18, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	52 2e       	mov	r5, r18
    1da8:	e9 2d       	mov	r30, r9
    1daa:	e0 62       	ori	r30, 0x20	; 32
    1dac:	9e 2e       	mov	r9, r30
    1dae:	10 c0       	rjmp	.+32     	; 0x1dd0 <vfprintf+0x10e>
    1db0:	8e 32       	cpi	r24, 0x2E	; 46
    1db2:	31 f4       	brne	.+12     	; 0x1dc0 <vfprintf+0xfe>
    1db4:	96 fc       	sbrc	r9, 6
    1db6:	e5 c2       	rjmp	.+1482   	; 0x2382 <vfprintf+0x6c0>
    1db8:	f9 2d       	mov	r31, r9
    1dba:	f0 64       	ori	r31, 0x40	; 64
    1dbc:	9f 2e       	mov	r9, r31
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <vfprintf+0x10e>
    1dc0:	8c 36       	cpi	r24, 0x6C	; 108
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <vfprintf+0x10a>
    1dc4:	29 2d       	mov	r18, r9
    1dc6:	20 68       	ori	r18, 0x80	; 128
    1dc8:	92 2e       	mov	r9, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0x10e>
    1dcc:	88 36       	cpi	r24, 0x68	; 104
    1dce:	41 f4       	brne	.+16     	; 0x1de0 <vfprintf+0x11e>
    1dd0:	f1 01       	movw	r30, r2
    1dd2:	93 fd       	sbrc	r25, 3
    1dd4:	85 91       	lpm	r24, Z+
    1dd6:	93 ff       	sbrs	r25, 3
    1dd8:	81 91       	ld	r24, Z+
    1dda:	1f 01       	movw	r2, r30
    1ddc:	81 11       	cpse	r24, r1
    1dde:	b3 cf       	rjmp	.-154    	; 0x1d46 <vfprintf+0x84>
    1de0:	9b eb       	ldi	r25, 0xBB	; 187
    1de2:	98 0f       	add	r25, r24
    1de4:	93 30       	cpi	r25, 0x03	; 3
    1de6:	20 f4       	brcc	.+8      	; 0x1df0 <vfprintf+0x12e>
    1de8:	99 2d       	mov	r25, r9
    1dea:	90 61       	ori	r25, 0x10	; 16
    1dec:	80 5e       	subi	r24, 0xE0	; 224
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <vfprintf+0x13c>
    1df0:	9b e9       	ldi	r25, 0x9B	; 155
    1df2:	98 0f       	add	r25, r24
    1df4:	93 30       	cpi	r25, 0x03	; 3
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <vfprintf+0x138>
    1df8:	66 c1       	rjmp	.+716    	; 0x20c6 <vfprintf+0x404>
    1dfa:	99 2d       	mov	r25, r9
    1dfc:	9f 7e       	andi	r25, 0xEF	; 239
    1dfe:	96 ff       	sbrs	r25, 6
    1e00:	16 e0       	ldi	r17, 0x06	; 6
    1e02:	9f 73       	andi	r25, 0x3F	; 63
    1e04:	99 2e       	mov	r9, r25
    1e06:	85 36       	cpi	r24, 0x65	; 101
    1e08:	19 f4       	brne	.+6      	; 0x1e10 <vfprintf+0x14e>
    1e0a:	90 64       	ori	r25, 0x40	; 64
    1e0c:	99 2e       	mov	r9, r25
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <vfprintf+0x15e>
    1e10:	86 36       	cpi	r24, 0x66	; 102
    1e12:	21 f4       	brne	.+8      	; 0x1e1c <vfprintf+0x15a>
    1e14:	39 2f       	mov	r19, r25
    1e16:	30 68       	ori	r19, 0x80	; 128
    1e18:	93 2e       	mov	r9, r19
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <vfprintf+0x15e>
    1e1c:	11 11       	cpse	r17, r1
    1e1e:	11 50       	subi	r17, 0x01	; 1
    1e20:	97 fe       	sbrs	r9, 7
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <vfprintf+0x170>
    1e24:	1c 33       	cpi	r17, 0x3C	; 60
    1e26:	50 f4       	brcc	.+20     	; 0x1e3c <vfprintf+0x17a>
    1e28:	44 24       	eor	r4, r4
    1e2a:	43 94       	inc	r4
    1e2c:	41 0e       	add	r4, r17
    1e2e:	27 e0       	ldi	r18, 0x07	; 7
    1e30:	0b c0       	rjmp	.+22     	; 0x1e48 <vfprintf+0x186>
    1e32:	18 30       	cpi	r17, 0x08	; 8
    1e34:	38 f0       	brcs	.+14     	; 0x1e44 <vfprintf+0x182>
    1e36:	27 e0       	ldi	r18, 0x07	; 7
    1e38:	17 e0       	ldi	r17, 0x07	; 7
    1e3a:	05 c0       	rjmp	.+10     	; 0x1e46 <vfprintf+0x184>
    1e3c:	27 e0       	ldi	r18, 0x07	; 7
    1e3e:	9c e3       	ldi	r25, 0x3C	; 60
    1e40:	49 2e       	mov	r4, r25
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <vfprintf+0x186>
    1e44:	21 2f       	mov	r18, r17
    1e46:	41 2c       	mov	r4, r1
    1e48:	56 01       	movw	r10, r12
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	a8 0e       	add	r10, r24
    1e4e:	b1 1c       	adc	r11, r1
    1e50:	f6 01       	movw	r30, r12
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	04 2d       	mov	r16, r4
    1e5c:	a3 01       	movw	r20, r6
    1e5e:	0e 94 23 12 	call	0x2446	; 0x2446 <__ftoa_engine>
    1e62:	6c 01       	movw	r12, r24
    1e64:	f9 81       	ldd	r31, Y+1	; 0x01
    1e66:	fc 87       	std	Y+12, r31	; 0x0c
    1e68:	f0 ff       	sbrs	r31, 0
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <vfprintf+0x1ae>
    1e6c:	f3 ff       	sbrs	r31, 3
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <vfprintf+0x1ba>
    1e70:	91 fc       	sbrc	r9, 1
    1e72:	06 c0       	rjmp	.+12     	; 0x1e80 <vfprintf+0x1be>
    1e74:	92 fe       	sbrs	r9, 2
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <vfprintf+0x1c2>
    1e78:	00 e2       	ldi	r16, 0x20	; 32
    1e7a:	05 c0       	rjmp	.+10     	; 0x1e86 <vfprintf+0x1c4>
    1e7c:	0d e2       	ldi	r16, 0x2D	; 45
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <vfprintf+0x1c4>
    1e80:	0b e2       	ldi	r16, 0x2B	; 43
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <vfprintf+0x1c4>
    1e84:	00 e0       	ldi	r16, 0x00	; 0
    1e86:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e88:	8c 70       	andi	r24, 0x0C	; 12
    1e8a:	19 f0       	breq	.+6      	; 0x1e92 <vfprintf+0x1d0>
    1e8c:	01 11       	cpse	r16, r1
    1e8e:	5a c2       	rjmp	.+1204   	; 0x2344 <vfprintf+0x682>
    1e90:	9b c2       	rjmp	.+1334   	; 0x23c8 <vfprintf+0x706>
    1e92:	97 fe       	sbrs	r9, 7
    1e94:	10 c0       	rjmp	.+32     	; 0x1eb6 <vfprintf+0x1f4>
    1e96:	4c 0c       	add	r4, r12
    1e98:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e9a:	f4 ff       	sbrs	r31, 4
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <vfprintf+0x1e4>
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	81 33       	cpi	r24, 0x31	; 49
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <vfprintf+0x1e4>
    1ea4:	4a 94       	dec	r4
    1ea6:	14 14       	cp	r1, r4
    1ea8:	74 f5       	brge	.+92     	; 0x1f06 <vfprintf+0x244>
    1eaa:	28 e0       	ldi	r18, 0x08	; 8
    1eac:	24 15       	cp	r18, r4
    1eae:	78 f5       	brcc	.+94     	; 0x1f0e <vfprintf+0x24c>
    1eb0:	88 e0       	ldi	r24, 0x08	; 8
    1eb2:	48 2e       	mov	r4, r24
    1eb4:	2c c0       	rjmp	.+88     	; 0x1f0e <vfprintf+0x24c>
    1eb6:	96 fc       	sbrc	r9, 6
    1eb8:	2a c0       	rjmp	.+84     	; 0x1f0e <vfprintf+0x24c>
    1eba:	81 2f       	mov	r24, r17
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	8c 15       	cp	r24, r12
    1ec0:	9d 05       	cpc	r25, r13
    1ec2:	9c f0       	brlt	.+38     	; 0x1eea <vfprintf+0x228>
    1ec4:	3c ef       	ldi	r19, 0xFC	; 252
    1ec6:	c3 16       	cp	r12, r19
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	d3 06       	cpc	r13, r19
    1ecc:	74 f0       	brlt	.+28     	; 0x1eea <vfprintf+0x228>
    1ece:	89 2d       	mov	r24, r9
    1ed0:	80 68       	ori	r24, 0x80	; 128
    1ed2:	98 2e       	mov	r9, r24
    1ed4:	0a c0       	rjmp	.+20     	; 0x1eea <vfprintf+0x228>
    1ed6:	e2 e0       	ldi	r30, 0x02	; 2
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	ec 0f       	add	r30, r28
    1edc:	fd 1f       	adc	r31, r29
    1ede:	e1 0f       	add	r30, r17
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 33       	cpi	r24, 0x30	; 48
    1ee6:	19 f4       	brne	.+6      	; 0x1eee <vfprintf+0x22c>
    1ee8:	11 50       	subi	r17, 0x01	; 1
    1eea:	11 11       	cpse	r17, r1
    1eec:	f4 cf       	rjmp	.-24     	; 0x1ed6 <vfprintf+0x214>
    1eee:	97 fe       	sbrs	r9, 7
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <vfprintf+0x24c>
    1ef2:	44 24       	eor	r4, r4
    1ef4:	43 94       	inc	r4
    1ef6:	41 0e       	add	r4, r17
    1ef8:	81 2f       	mov	r24, r17
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	c8 16       	cp	r12, r24
    1efe:	d9 06       	cpc	r13, r25
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <vfprintf+0x24a>
    1f02:	1c 19       	sub	r17, r12
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <vfprintf+0x24c>
    1f06:	44 24       	eor	r4, r4
    1f08:	43 94       	inc	r4
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <vfprintf+0x24c>
    1f0c:	10 e0       	ldi	r17, 0x00	; 0
    1f0e:	97 fe       	sbrs	r9, 7
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <vfprintf+0x25c>
    1f12:	1c 14       	cp	r1, r12
    1f14:	1d 04       	cpc	r1, r13
    1f16:	34 f4       	brge	.+12     	; 0x1f24 <vfprintf+0x262>
    1f18:	c6 01       	movw	r24, r12
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <vfprintf+0x266>
    1f1e:	85 e0       	ldi	r24, 0x05	; 5
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0x266>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	01 11       	cpse	r16, r1
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	11 23       	and	r17, r17
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <vfprintf+0x27a>
    1f30:	21 2f       	mov	r18, r17
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	82 0f       	add	r24, r18
    1f3a:	93 1f       	adc	r25, r19
    1f3c:	25 2d       	mov	r18, r5
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	82 17       	cp	r24, r18
    1f42:	93 07       	cpc	r25, r19
    1f44:	14 f4       	brge	.+4      	; 0x1f4a <vfprintf+0x288>
    1f46:	58 1a       	sub	r5, r24
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <vfprintf+0x28a>
    1f4a:	51 2c       	mov	r5, r1
    1f4c:	89 2d       	mov	r24, r9
    1f4e:	89 70       	andi	r24, 0x09	; 9
    1f50:	49 f4       	brne	.+18     	; 0x1f64 <vfprintf+0x2a2>
    1f52:	55 20       	and	r5, r5
    1f54:	39 f0       	breq	.+14     	; 0x1f64 <vfprintf+0x2a2>
    1f56:	b7 01       	movw	r22, r14
    1f58:	80 e2       	ldi	r24, 0x20	; 32
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    1f60:	5a 94       	dec	r5
    1f62:	f7 cf       	rjmp	.-18     	; 0x1f52 <vfprintf+0x290>
    1f64:	00 23       	and	r16, r16
    1f66:	29 f0       	breq	.+10     	; 0x1f72 <vfprintf+0x2b0>
    1f68:	b7 01       	movw	r22, r14
    1f6a:	80 2f       	mov	r24, r16
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    1f72:	93 fc       	sbrc	r9, 3
    1f74:	09 c0       	rjmp	.+18     	; 0x1f88 <vfprintf+0x2c6>
    1f76:	55 20       	and	r5, r5
    1f78:	39 f0       	breq	.+14     	; 0x1f88 <vfprintf+0x2c6>
    1f7a:	b7 01       	movw	r22, r14
    1f7c:	80 e3       	ldi	r24, 0x30	; 48
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    1f84:	5a 94       	dec	r5
    1f86:	f7 cf       	rjmp	.-18     	; 0x1f76 <vfprintf+0x2b4>
    1f88:	97 fe       	sbrs	r9, 7
    1f8a:	4c c0       	rjmp	.+152    	; 0x2024 <vfprintf+0x362>
    1f8c:	46 01       	movw	r8, r12
    1f8e:	d7 fe       	sbrs	r13, 7
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <vfprintf+0x2d4>
    1f92:	81 2c       	mov	r8, r1
    1f94:	91 2c       	mov	r9, r1
    1f96:	c6 01       	movw	r24, r12
    1f98:	88 19       	sub	r24, r8
    1f9a:	99 09       	sbc	r25, r9
    1f9c:	f3 01       	movw	r30, r6
    1f9e:	e8 0f       	add	r30, r24
    1fa0:	f9 1f       	adc	r31, r25
    1fa2:	ed 87       	std	Y+13, r30	; 0x0d
    1fa4:	fe 87       	std	Y+14, r31	; 0x0e
    1fa6:	96 01       	movw	r18, r12
    1fa8:	24 19       	sub	r18, r4
    1faa:	31 09       	sbc	r19, r1
    1fac:	2f 87       	std	Y+15, r18	; 0x0f
    1fae:	38 8b       	std	Y+16, r19	; 0x10
    1fb0:	01 2f       	mov	r16, r17
    1fb2:	10 e0       	ldi	r17, 0x00	; 0
    1fb4:	11 95       	neg	r17
    1fb6:	01 95       	neg	r16
    1fb8:	11 09       	sbc	r17, r1
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	83 16       	cp	r8, r19
    1fbe:	93 06       	cpc	r9, r19
    1fc0:	29 f4       	brne	.+10     	; 0x1fcc <vfprintf+0x30a>
    1fc2:	b7 01       	movw	r22, r14
    1fc4:	8e e2       	ldi	r24, 0x2E	; 46
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    1fcc:	c8 14       	cp	r12, r8
    1fce:	d9 04       	cpc	r13, r9
    1fd0:	4c f0       	brlt	.+18     	; 0x1fe4 <vfprintf+0x322>
    1fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd4:	98 89       	ldd	r25, Y+16	; 0x10
    1fd6:	88 15       	cp	r24, r8
    1fd8:	99 05       	cpc	r25, r9
    1fda:	24 f4       	brge	.+8      	; 0x1fe4 <vfprintf+0x322>
    1fdc:	ed 85       	ldd	r30, Y+13	; 0x0d
    1fde:	fe 85       	ldd	r31, Y+14	; 0x0e
    1fe0:	81 81       	ldd	r24, Z+1	; 0x01
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <vfprintf+0x324>
    1fe4:	80 e3       	ldi	r24, 0x30	; 48
    1fe6:	f1 e0       	ldi	r31, 0x01	; 1
    1fe8:	8f 1a       	sub	r8, r31
    1fea:	91 08       	sbc	r9, r1
    1fec:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fee:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ff0:	2f 5f       	subi	r18, 0xFF	; 255
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	2d 87       	std	Y+13, r18	; 0x0d
    1ff6:	3e 87       	std	Y+14, r19	; 0x0e
    1ff8:	80 16       	cp	r8, r16
    1ffa:	91 06       	cpc	r9, r17
    1ffc:	2c f0       	brlt	.+10     	; 0x2008 <vfprintf+0x346>
    1ffe:	b7 01       	movw	r22, r14
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2006:	d9 cf       	rjmp	.-78     	; 0x1fba <vfprintf+0x2f8>
    2008:	c8 14       	cp	r12, r8
    200a:	d9 04       	cpc	r13, r9
    200c:	41 f4       	brne	.+16     	; 0x201e <vfprintf+0x35c>
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	96 33       	cpi	r25, 0x36	; 54
    2012:	20 f4       	brcc	.+8      	; 0x201c <vfprintf+0x35a>
    2014:	95 33       	cpi	r25, 0x35	; 53
    2016:	19 f4       	brne	.+6      	; 0x201e <vfprintf+0x35c>
    2018:	3c 85       	ldd	r19, Y+12	; 0x0c
    201a:	34 ff       	sbrs	r19, 4
    201c:	81 e3       	ldi	r24, 0x31	; 49
    201e:	b7 01       	movw	r22, r14
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	4e c0       	rjmp	.+156    	; 0x20c0 <vfprintf+0x3fe>
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	81 33       	cpi	r24, 0x31	; 49
    2028:	19 f0       	breq	.+6      	; 0x2030 <vfprintf+0x36e>
    202a:	9c 85       	ldd	r25, Y+12	; 0x0c
    202c:	9f 7e       	andi	r25, 0xEF	; 239
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	b7 01       	movw	r22, r14
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2038:	11 11       	cpse	r17, r1
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <vfprintf+0x384>
    203c:	94 fc       	sbrc	r9, 4
    203e:	18 c0       	rjmp	.+48     	; 0x2070 <vfprintf+0x3ae>
    2040:	85 e6       	ldi	r24, 0x65	; 101
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <vfprintf+0x3b2>
    2046:	b7 01       	movw	r22, r14
    2048:	8e e2       	ldi	r24, 0x2E	; 46
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2050:	1e 5f       	subi	r17, 0xFE	; 254
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	01 e0       	ldi	r16, 0x01	; 1
    2056:	08 0f       	add	r16, r24
    2058:	f3 01       	movw	r30, r6
    205a:	e8 0f       	add	r30, r24
    205c:	f1 1d       	adc	r31, r1
    205e:	80 81       	ld	r24, Z
    2060:	b7 01       	movw	r22, r14
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2068:	80 2f       	mov	r24, r16
    206a:	01 13       	cpse	r16, r17
    206c:	f3 cf       	rjmp	.-26     	; 0x2054 <vfprintf+0x392>
    206e:	e6 cf       	rjmp	.-52     	; 0x203c <vfprintf+0x37a>
    2070:	85 e4       	ldi	r24, 0x45	; 69
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b7 01       	movw	r22, r14
    2076:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    207a:	d7 fc       	sbrc	r13, 7
    207c:	06 c0       	rjmp	.+12     	; 0x208a <vfprintf+0x3c8>
    207e:	c1 14       	cp	r12, r1
    2080:	d1 04       	cpc	r13, r1
    2082:	41 f4       	brne	.+16     	; 0x2094 <vfprintf+0x3d2>
    2084:	ec 85       	ldd	r30, Y+12	; 0x0c
    2086:	e4 ff       	sbrs	r30, 4
    2088:	05 c0       	rjmp	.+10     	; 0x2094 <vfprintf+0x3d2>
    208a:	d1 94       	neg	r13
    208c:	c1 94       	neg	r12
    208e:	d1 08       	sbc	r13, r1
    2090:	8d e2       	ldi	r24, 0x2D	; 45
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <vfprintf+0x3d4>
    2094:	8b e2       	ldi	r24, 0x2B	; 43
    2096:	b7 01       	movw	r22, r14
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    209e:	80 e3       	ldi	r24, 0x30	; 48
    20a0:	2a e0       	ldi	r18, 0x0A	; 10
    20a2:	c2 16       	cp	r12, r18
    20a4:	d1 04       	cpc	r13, r1
    20a6:	2c f0       	brlt	.+10     	; 0x20b2 <vfprintf+0x3f0>
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	fa e0       	ldi	r31, 0x0A	; 10
    20ac:	cf 1a       	sub	r12, r31
    20ae:	d1 08       	sbc	r13, r1
    20b0:	f7 cf       	rjmp	.-18     	; 0x20a0 <vfprintf+0x3de>
    20b2:	b7 01       	movw	r22, r14
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    20ba:	b7 01       	movw	r22, r14
    20bc:	c6 01       	movw	r24, r12
    20be:	c0 96       	adiw	r24, 0x30	; 48
    20c0:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    20c4:	54 c1       	rjmp	.+680    	; 0x236e <vfprintf+0x6ac>
    20c6:	83 36       	cpi	r24, 0x63	; 99
    20c8:	31 f0       	breq	.+12     	; 0x20d6 <vfprintf+0x414>
    20ca:	83 37       	cpi	r24, 0x73	; 115
    20cc:	79 f0       	breq	.+30     	; 0x20ec <vfprintf+0x42a>
    20ce:	83 35       	cpi	r24, 0x53	; 83
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <vfprintf+0x412>
    20d2:	56 c0       	rjmp	.+172    	; 0x2180 <vfprintf+0x4be>
    20d4:	20 c0       	rjmp	.+64     	; 0x2116 <vfprintf+0x454>
    20d6:	56 01       	movw	r10, r12
    20d8:	32 e0       	ldi	r19, 0x02	; 2
    20da:	a3 0e       	add	r10, r19
    20dc:	b1 1c       	adc	r11, r1
    20de:	f6 01       	movw	r30, r12
    20e0:	80 81       	ld	r24, Z
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	01 e0       	ldi	r16, 0x01	; 1
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	63 01       	movw	r12, r6
    20ea:	12 c0       	rjmp	.+36     	; 0x2110 <vfprintf+0x44e>
    20ec:	56 01       	movw	r10, r12
    20ee:	f2 e0       	ldi	r31, 0x02	; 2
    20f0:	af 0e       	add	r10, r31
    20f2:	b1 1c       	adc	r11, r1
    20f4:	f6 01       	movw	r30, r12
    20f6:	c0 80       	ld	r12, Z
    20f8:	d1 80       	ldd	r13, Z+1	; 0x01
    20fa:	96 fe       	sbrs	r9, 6
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <vfprintf+0x442>
    20fe:	61 2f       	mov	r22, r17
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <vfprintf+0x446>
    2104:	6f ef       	ldi	r22, 0xFF	; 255
    2106:	7f ef       	ldi	r23, 0xFF	; 255
    2108:	c6 01       	movw	r24, r12
    210a:	0e 94 1d 13 	call	0x263a	; 0x263a <strnlen>
    210e:	8c 01       	movw	r16, r24
    2110:	f9 2d       	mov	r31, r9
    2112:	ff 77       	andi	r31, 0x7F	; 127
    2114:	14 c0       	rjmp	.+40     	; 0x213e <vfprintf+0x47c>
    2116:	56 01       	movw	r10, r12
    2118:	22 e0       	ldi	r18, 0x02	; 2
    211a:	a2 0e       	add	r10, r18
    211c:	b1 1c       	adc	r11, r1
    211e:	f6 01       	movw	r30, r12
    2120:	c0 80       	ld	r12, Z
    2122:	d1 80       	ldd	r13, Z+1	; 0x01
    2124:	96 fe       	sbrs	r9, 6
    2126:	03 c0       	rjmp	.+6      	; 0x212e <vfprintf+0x46c>
    2128:	61 2f       	mov	r22, r17
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <vfprintf+0x470>
    212e:	6f ef       	ldi	r22, 0xFF	; 255
    2130:	7f ef       	ldi	r23, 0xFF	; 255
    2132:	c6 01       	movw	r24, r12
    2134:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <strnlen_P>
    2138:	8c 01       	movw	r16, r24
    213a:	f9 2d       	mov	r31, r9
    213c:	f0 68       	ori	r31, 0x80	; 128
    213e:	9f 2e       	mov	r9, r31
    2140:	f3 fd       	sbrc	r31, 3
    2142:	1a c0       	rjmp	.+52     	; 0x2178 <vfprintf+0x4b6>
    2144:	85 2d       	mov	r24, r5
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	08 17       	cp	r16, r24
    214a:	19 07       	cpc	r17, r25
    214c:	a8 f4       	brcc	.+42     	; 0x2178 <vfprintf+0x4b6>
    214e:	b7 01       	movw	r22, r14
    2150:	80 e2       	ldi	r24, 0x20	; 32
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2158:	5a 94       	dec	r5
    215a:	f4 cf       	rjmp	.-24     	; 0x2144 <vfprintf+0x482>
    215c:	f6 01       	movw	r30, r12
    215e:	97 fc       	sbrc	r9, 7
    2160:	85 91       	lpm	r24, Z+
    2162:	97 fe       	sbrs	r9, 7
    2164:	81 91       	ld	r24, Z+
    2166:	6f 01       	movw	r12, r30
    2168:	b7 01       	movw	r22, r14
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2170:	51 10       	cpse	r5, r1
    2172:	5a 94       	dec	r5
    2174:	01 50       	subi	r16, 0x01	; 1
    2176:	11 09       	sbc	r17, r1
    2178:	01 15       	cp	r16, r1
    217a:	11 05       	cpc	r17, r1
    217c:	79 f7       	brne	.-34     	; 0x215c <vfprintf+0x49a>
    217e:	f7 c0       	rjmp	.+494    	; 0x236e <vfprintf+0x6ac>
    2180:	84 36       	cpi	r24, 0x64	; 100
    2182:	11 f0       	breq	.+4      	; 0x2188 <vfprintf+0x4c6>
    2184:	89 36       	cpi	r24, 0x69	; 105
    2186:	61 f5       	brne	.+88     	; 0x21e0 <vfprintf+0x51e>
    2188:	56 01       	movw	r10, r12
    218a:	97 fe       	sbrs	r9, 7
    218c:	09 c0       	rjmp	.+18     	; 0x21a0 <vfprintf+0x4de>
    218e:	24 e0       	ldi	r18, 0x04	; 4
    2190:	a2 0e       	add	r10, r18
    2192:	b1 1c       	adc	r11, r1
    2194:	f6 01       	movw	r30, r12
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	0a c0       	rjmp	.+20     	; 0x21b4 <vfprintf+0x4f2>
    21a0:	f2 e0       	ldi	r31, 0x02	; 2
    21a2:	af 0e       	add	r10, r31
    21a4:	b1 1c       	adc	r11, r1
    21a6:	f6 01       	movw	r30, r12
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	07 2e       	mov	r0, r23
    21ae:	00 0c       	add	r0, r0
    21b0:	88 0b       	sbc	r24, r24
    21b2:	99 0b       	sbc	r25, r25
    21b4:	f9 2d       	mov	r31, r9
    21b6:	ff 76       	andi	r31, 0x6F	; 111
    21b8:	9f 2e       	mov	r9, r31
    21ba:	97 ff       	sbrs	r25, 7
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <vfprintf+0x50e>
    21be:	90 95       	com	r25
    21c0:	80 95       	com	r24
    21c2:	70 95       	com	r23
    21c4:	61 95       	neg	r22
    21c6:	7f 4f       	sbci	r23, 0xFF	; 255
    21c8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	f0 68       	ori	r31, 0x80	; 128
    21ce:	9f 2e       	mov	r9, r31
    21d0:	2a e0       	ldi	r18, 0x0A	; 10
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	a3 01       	movw	r20, r6
    21d6:	0e 94 08 14 	call	0x2810	; 0x2810 <__ultoa_invert>
    21da:	c8 2e       	mov	r12, r24
    21dc:	c6 18       	sub	r12, r6
    21de:	3f c0       	rjmp	.+126    	; 0x225e <vfprintf+0x59c>
    21e0:	09 2d       	mov	r16, r9
    21e2:	85 37       	cpi	r24, 0x75	; 117
    21e4:	21 f4       	brne	.+8      	; 0x21ee <vfprintf+0x52c>
    21e6:	0f 7e       	andi	r16, 0xEF	; 239
    21e8:	2a e0       	ldi	r18, 0x0A	; 10
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	1d c0       	rjmp	.+58     	; 0x2228 <vfprintf+0x566>
    21ee:	09 7f       	andi	r16, 0xF9	; 249
    21f0:	8f 36       	cpi	r24, 0x6F	; 111
    21f2:	91 f0       	breq	.+36     	; 0x2218 <vfprintf+0x556>
    21f4:	18 f4       	brcc	.+6      	; 0x21fc <vfprintf+0x53a>
    21f6:	88 35       	cpi	r24, 0x58	; 88
    21f8:	59 f0       	breq	.+22     	; 0x2210 <vfprintf+0x54e>
    21fa:	c3 c0       	rjmp	.+390    	; 0x2382 <vfprintf+0x6c0>
    21fc:	80 37       	cpi	r24, 0x70	; 112
    21fe:	19 f0       	breq	.+6      	; 0x2206 <vfprintf+0x544>
    2200:	88 37       	cpi	r24, 0x78	; 120
    2202:	11 f0       	breq	.+4      	; 0x2208 <vfprintf+0x546>
    2204:	be c0       	rjmp	.+380    	; 0x2382 <vfprintf+0x6c0>
    2206:	00 61       	ori	r16, 0x10	; 16
    2208:	04 ff       	sbrs	r16, 4
    220a:	09 c0       	rjmp	.+18     	; 0x221e <vfprintf+0x55c>
    220c:	04 60       	ori	r16, 0x04	; 4
    220e:	07 c0       	rjmp	.+14     	; 0x221e <vfprintf+0x55c>
    2210:	94 fe       	sbrs	r9, 4
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <vfprintf+0x562>
    2214:	06 60       	ori	r16, 0x06	; 6
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <vfprintf+0x562>
    2218:	28 e0       	ldi	r18, 0x08	; 8
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <vfprintf+0x566>
    221e:	20 e1       	ldi	r18, 0x10	; 16
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <vfprintf+0x566>
    2224:	20 e1       	ldi	r18, 0x10	; 16
    2226:	32 e0       	ldi	r19, 0x02	; 2
    2228:	56 01       	movw	r10, r12
    222a:	07 ff       	sbrs	r16, 7
    222c:	09 c0       	rjmp	.+18     	; 0x2240 <vfprintf+0x57e>
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	a8 0e       	add	r10, r24
    2232:	b1 1c       	adc	r11, r1
    2234:	f6 01       	movw	r30, r12
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	08 c0       	rjmp	.+16     	; 0x2250 <vfprintf+0x58e>
    2240:	f2 e0       	ldi	r31, 0x02	; 2
    2242:	af 0e       	add	r10, r31
    2244:	b1 1c       	adc	r11, r1
    2246:	f6 01       	movw	r30, r12
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a3 01       	movw	r20, r6
    2252:	0e 94 08 14 	call	0x2810	; 0x2810 <__ultoa_invert>
    2256:	c8 2e       	mov	r12, r24
    2258:	c6 18       	sub	r12, r6
    225a:	0f 77       	andi	r16, 0x7F	; 127
    225c:	90 2e       	mov	r9, r16
    225e:	96 fe       	sbrs	r9, 6
    2260:	0b c0       	rjmp	.+22     	; 0x2278 <vfprintf+0x5b6>
    2262:	09 2d       	mov	r16, r9
    2264:	0e 7f       	andi	r16, 0xFE	; 254
    2266:	c1 16       	cp	r12, r17
    2268:	50 f4       	brcc	.+20     	; 0x227e <vfprintf+0x5bc>
    226a:	94 fe       	sbrs	r9, 4
    226c:	0a c0       	rjmp	.+20     	; 0x2282 <vfprintf+0x5c0>
    226e:	92 fc       	sbrc	r9, 2
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <vfprintf+0x5c0>
    2272:	09 2d       	mov	r16, r9
    2274:	0e 7e       	andi	r16, 0xEE	; 238
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <vfprintf+0x5c0>
    2278:	dc 2c       	mov	r13, r12
    227a:	09 2d       	mov	r16, r9
    227c:	03 c0       	rjmp	.+6      	; 0x2284 <vfprintf+0x5c2>
    227e:	dc 2c       	mov	r13, r12
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <vfprintf+0x5c2>
    2282:	d1 2e       	mov	r13, r17
    2284:	04 ff       	sbrs	r16, 4
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <vfprintf+0x5e0>
    2288:	fe 01       	movw	r30, r28
    228a:	ec 0d       	add	r30, r12
    228c:	f1 1d       	adc	r31, r1
    228e:	80 81       	ld	r24, Z
    2290:	80 33       	cpi	r24, 0x30	; 48
    2292:	11 f4       	brne	.+4      	; 0x2298 <vfprintf+0x5d6>
    2294:	09 7e       	andi	r16, 0xE9	; 233
    2296:	09 c0       	rjmp	.+18     	; 0x22aa <vfprintf+0x5e8>
    2298:	02 ff       	sbrs	r16, 2
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <vfprintf+0x5e6>
    229c:	d3 94       	inc	r13
    229e:	d3 94       	inc	r13
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <vfprintf+0x5e8>
    22a2:	80 2f       	mov	r24, r16
    22a4:	86 78       	andi	r24, 0x86	; 134
    22a6:	09 f0       	breq	.+2      	; 0x22aa <vfprintf+0x5e8>
    22a8:	d3 94       	inc	r13
    22aa:	03 fd       	sbrc	r16, 3
    22ac:	11 c0       	rjmp	.+34     	; 0x22d0 <vfprintf+0x60e>
    22ae:	00 ff       	sbrs	r16, 0
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <vfprintf+0x5fc>
    22b2:	1c 2d       	mov	r17, r12
    22b4:	d5 14       	cp	r13, r5
    22b6:	80 f4       	brcc	.+32     	; 0x22d8 <vfprintf+0x616>
    22b8:	15 0d       	add	r17, r5
    22ba:	1d 19       	sub	r17, r13
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <vfprintf+0x616>
    22be:	d5 14       	cp	r13, r5
    22c0:	58 f4       	brcc	.+22     	; 0x22d8 <vfprintf+0x616>
    22c2:	b7 01       	movw	r22, r14
    22c4:	80 e2       	ldi	r24, 0x20	; 32
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    22cc:	d3 94       	inc	r13
    22ce:	f7 cf       	rjmp	.-18     	; 0x22be <vfprintf+0x5fc>
    22d0:	d5 14       	cp	r13, r5
    22d2:	10 f4       	brcc	.+4      	; 0x22d8 <vfprintf+0x616>
    22d4:	5d 18       	sub	r5, r13
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <vfprintf+0x618>
    22d8:	51 2c       	mov	r5, r1
    22da:	04 ff       	sbrs	r16, 4
    22dc:	10 c0       	rjmp	.+32     	; 0x22fe <vfprintf+0x63c>
    22de:	b7 01       	movw	r22, r14
    22e0:	80 e3       	ldi	r24, 0x30	; 48
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    22e8:	02 ff       	sbrs	r16, 2
    22ea:	17 c0       	rjmp	.+46     	; 0x231a <vfprintf+0x658>
    22ec:	01 fd       	sbrc	r16, 1
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <vfprintf+0x634>
    22f0:	88 e7       	ldi	r24, 0x78	; 120
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <vfprintf+0x638>
    22f6:	88 e5       	ldi	r24, 0x58	; 88
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	b7 01       	movw	r22, r14
    22fc:	0c c0       	rjmp	.+24     	; 0x2316 <vfprintf+0x654>
    22fe:	80 2f       	mov	r24, r16
    2300:	86 78       	andi	r24, 0x86	; 134
    2302:	59 f0       	breq	.+22     	; 0x231a <vfprintf+0x658>
    2304:	01 ff       	sbrs	r16, 1
    2306:	02 c0       	rjmp	.+4      	; 0x230c <vfprintf+0x64a>
    2308:	8b e2       	ldi	r24, 0x2B	; 43
    230a:	01 c0       	rjmp	.+2      	; 0x230e <vfprintf+0x64c>
    230c:	80 e2       	ldi	r24, 0x20	; 32
    230e:	07 fd       	sbrc	r16, 7
    2310:	8d e2       	ldi	r24, 0x2D	; 45
    2312:	b7 01       	movw	r22, r14
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    231a:	c1 16       	cp	r12, r17
    231c:	38 f4       	brcc	.+14     	; 0x232c <vfprintf+0x66a>
    231e:	b7 01       	movw	r22, r14
    2320:	80 e3       	ldi	r24, 0x30	; 48
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2328:	11 50       	subi	r17, 0x01	; 1
    232a:	f7 cf       	rjmp	.-18     	; 0x231a <vfprintf+0x658>
    232c:	ca 94       	dec	r12
    232e:	f3 01       	movw	r30, r6
    2330:	ec 0d       	add	r30, r12
    2332:	f1 1d       	adc	r31, r1
    2334:	80 81       	ld	r24, Z
    2336:	b7 01       	movw	r22, r14
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    233e:	c1 10       	cpse	r12, r1
    2340:	f5 cf       	rjmp	.-22     	; 0x232c <vfprintf+0x66a>
    2342:	15 c0       	rjmp	.+42     	; 0x236e <vfprintf+0x6ac>
    2344:	f4 e0       	ldi	r31, 0x04	; 4
    2346:	f5 15       	cp	r31, r5
    2348:	60 f5       	brcc	.+88     	; 0x23a2 <vfprintf+0x6e0>
    234a:	84 e0       	ldi	r24, 0x04	; 4
    234c:	58 1a       	sub	r5, r24
    234e:	93 fe       	sbrs	r9, 3
    2350:	1f c0       	rjmp	.+62     	; 0x2390 <vfprintf+0x6ce>
    2352:	01 11       	cpse	r16, r1
    2354:	27 c0       	rjmp	.+78     	; 0x23a4 <vfprintf+0x6e2>
    2356:	2c 85       	ldd	r18, Y+12	; 0x0c
    2358:	23 ff       	sbrs	r18, 3
    235a:	2a c0       	rjmp	.+84     	; 0x23b0 <vfprintf+0x6ee>
    235c:	00 e1       	ldi	r16, 0x10	; 16
    235e:	12 e0       	ldi	r17, 0x02	; 2
    2360:	39 2d       	mov	r19, r9
    2362:	30 71       	andi	r19, 0x10	; 16
    2364:	93 2e       	mov	r9, r19
    2366:	f8 01       	movw	r30, r16
    2368:	84 91       	lpm	r24, Z
    236a:	81 11       	cpse	r24, r1
    236c:	24 c0       	rjmp	.+72     	; 0x23b6 <vfprintf+0x6f4>
    236e:	55 20       	and	r5, r5
    2370:	09 f4       	brne	.+2      	; 0x2374 <vfprintf+0x6b2>
    2372:	e4 cc       	rjmp	.-1592   	; 0x1d3c <vfprintf+0x7a>
    2374:	b7 01       	movw	r22, r14
    2376:	80 e2       	ldi	r24, 0x20	; 32
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    237e:	5a 94       	dec	r5
    2380:	f6 cf       	rjmp	.-20     	; 0x236e <vfprintf+0x6ac>
    2382:	f7 01       	movw	r30, r14
    2384:	86 81       	ldd	r24, Z+6	; 0x06
    2386:	97 81       	ldd	r25, Z+7	; 0x07
    2388:	26 c0       	rjmp	.+76     	; 0x23d6 <vfprintf+0x714>
    238a:	8f ef       	ldi	r24, 0xFF	; 255
    238c:	9f ef       	ldi	r25, 0xFF	; 255
    238e:	23 c0       	rjmp	.+70     	; 0x23d6 <vfprintf+0x714>
    2390:	b7 01       	movw	r22, r14
    2392:	80 e2       	ldi	r24, 0x20	; 32
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    239a:	5a 94       	dec	r5
    239c:	51 10       	cpse	r5, r1
    239e:	f8 cf       	rjmp	.-16     	; 0x2390 <vfprintf+0x6ce>
    23a0:	d8 cf       	rjmp	.-80     	; 0x2352 <vfprintf+0x690>
    23a2:	51 2c       	mov	r5, r1
    23a4:	b7 01       	movw	r22, r14
    23a6:	80 2f       	mov	r24, r16
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    23ae:	d3 cf       	rjmp	.-90     	; 0x2356 <vfprintf+0x694>
    23b0:	04 e1       	ldi	r16, 0x14	; 20
    23b2:	12 e0       	ldi	r17, 0x02	; 2
    23b4:	d5 cf       	rjmp	.-86     	; 0x2360 <vfprintf+0x69e>
    23b6:	91 10       	cpse	r9, r1
    23b8:	80 52       	subi	r24, 0x20	; 32
    23ba:	b7 01       	movw	r22, r14
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    23c2:	0f 5f       	subi	r16, 0xFF	; 255
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	cf cf       	rjmp	.-98     	; 0x2366 <vfprintf+0x6a4>
    23c8:	23 e0       	ldi	r18, 0x03	; 3
    23ca:	25 15       	cp	r18, r5
    23cc:	10 f4       	brcc	.+4      	; 0x23d2 <vfprintf+0x710>
    23ce:	83 e0       	ldi	r24, 0x03	; 3
    23d0:	bd cf       	rjmp	.-134    	; 0x234c <vfprintf+0x68a>
    23d2:	51 2c       	mov	r5, r1
    23d4:	c0 cf       	rjmp	.-128    	; 0x2356 <vfprintf+0x694>
    23d6:	60 96       	adiw	r28, 0x10	; 16
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	bf 90       	pop	r11
    23ee:	af 90       	pop	r10
    23f0:	9f 90       	pop	r9
    23f2:	8f 90       	pop	r8
    23f4:	7f 90       	pop	r7
    23f6:	6f 90       	pop	r6
    23f8:	5f 90       	pop	r5
    23fa:	4f 90       	pop	r4
    23fc:	3f 90       	pop	r3
    23fe:	2f 90       	pop	r2
    2400:	08 95       	ret

00002402 <__udivmodsi4>:
    2402:	a1 e2       	ldi	r26, 0x21	; 33
    2404:	1a 2e       	mov	r1, r26
    2406:	aa 1b       	sub	r26, r26
    2408:	bb 1b       	sub	r27, r27
    240a:	fd 01       	movw	r30, r26
    240c:	0d c0       	rjmp	.+26     	; 0x2428 <__udivmodsi4_ep>

0000240e <__udivmodsi4_loop>:
    240e:	aa 1f       	adc	r26, r26
    2410:	bb 1f       	adc	r27, r27
    2412:	ee 1f       	adc	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	a2 17       	cp	r26, r18
    2418:	b3 07       	cpc	r27, r19
    241a:	e4 07       	cpc	r30, r20
    241c:	f5 07       	cpc	r31, r21
    241e:	20 f0       	brcs	.+8      	; 0x2428 <__udivmodsi4_ep>
    2420:	a2 1b       	sub	r26, r18
    2422:	b3 0b       	sbc	r27, r19
    2424:	e4 0b       	sbc	r30, r20
    2426:	f5 0b       	sbc	r31, r21

00002428 <__udivmodsi4_ep>:
    2428:	66 1f       	adc	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	1a 94       	dec	r1
    2432:	69 f7       	brne	.-38     	; 0x240e <__udivmodsi4_loop>
    2434:	60 95       	com	r22
    2436:	70 95       	com	r23
    2438:	80 95       	com	r24
    243a:	90 95       	com	r25
    243c:	9b 01       	movw	r18, r22
    243e:	ac 01       	movw	r20, r24
    2440:	bd 01       	movw	r22, r26
    2442:	cf 01       	movw	r24, r30
    2444:	08 95       	ret

00002446 <__ftoa_engine>:
    2446:	28 30       	cpi	r18, 0x08	; 8
    2448:	08 f0       	brcs	.+2      	; 0x244c <__ftoa_engine+0x6>
    244a:	27 e0       	ldi	r18, 0x07	; 7
    244c:	33 27       	eor	r19, r19
    244e:	da 01       	movw	r26, r20
    2450:	99 0f       	add	r25, r25
    2452:	31 1d       	adc	r19, r1
    2454:	87 fd       	sbrc	r24, 7
    2456:	91 60       	ori	r25, 0x01	; 1
    2458:	00 96       	adiw	r24, 0x00	; 0
    245a:	61 05       	cpc	r22, r1
    245c:	71 05       	cpc	r23, r1
    245e:	39 f4       	brne	.+14     	; 0x246e <__ftoa_engine+0x28>
    2460:	32 60       	ori	r19, 0x02	; 2
    2462:	2e 5f       	subi	r18, 0xFE	; 254
    2464:	3d 93       	st	X+, r19
    2466:	30 e3       	ldi	r19, 0x30	; 48
    2468:	2a 95       	dec	r18
    246a:	e1 f7       	brne	.-8      	; 0x2464 <__ftoa_engine+0x1e>
    246c:	08 95       	ret
    246e:	9f 3f       	cpi	r25, 0xFF	; 255
    2470:	30 f0       	brcs	.+12     	; 0x247e <__ftoa_engine+0x38>
    2472:	80 38       	cpi	r24, 0x80	; 128
    2474:	71 05       	cpc	r23, r1
    2476:	61 05       	cpc	r22, r1
    2478:	09 f0       	breq	.+2      	; 0x247c <__ftoa_engine+0x36>
    247a:	3c 5f       	subi	r19, 0xFC	; 252
    247c:	3c 5f       	subi	r19, 0xFC	; 252
    247e:	3d 93       	st	X+, r19
    2480:	91 30       	cpi	r25, 0x01	; 1
    2482:	08 f0       	brcs	.+2      	; 0x2486 <__ftoa_engine+0x40>
    2484:	80 68       	ori	r24, 0x80	; 128
    2486:	91 1d       	adc	r25, r1
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	1f 93       	push	r17
    248e:	0f 93       	push	r16
    2490:	ff 92       	push	r15
    2492:	ef 92       	push	r14
    2494:	19 2f       	mov	r17, r25
    2496:	98 7f       	andi	r25, 0xF8	; 248
    2498:	96 95       	lsr	r25
    249a:	e9 2f       	mov	r30, r25
    249c:	96 95       	lsr	r25
    249e:	96 95       	lsr	r25
    24a0:	e9 0f       	add	r30, r25
    24a2:	ff 27       	eor	r31, r31
    24a4:	ee 58       	subi	r30, 0x8E	; 142
    24a6:	fd 4f       	sbci	r31, 0xFD	; 253
    24a8:	99 27       	eor	r25, r25
    24aa:	33 27       	eor	r19, r19
    24ac:	ee 24       	eor	r14, r14
    24ae:	ff 24       	eor	r15, r15
    24b0:	a7 01       	movw	r20, r14
    24b2:	e7 01       	movw	r28, r14
    24b4:	05 90       	lpm	r0, Z+
    24b6:	08 94       	sec
    24b8:	07 94       	ror	r0
    24ba:	28 f4       	brcc	.+10     	; 0x24c6 <__ftoa_engine+0x80>
    24bc:	36 0f       	add	r19, r22
    24be:	e7 1e       	adc	r14, r23
    24c0:	f8 1e       	adc	r15, r24
    24c2:	49 1f       	adc	r20, r25
    24c4:	51 1d       	adc	r21, r1
    24c6:	66 0f       	add	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	88 1f       	adc	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	06 94       	lsr	r0
    24d0:	a1 f7       	brne	.-24     	; 0x24ba <__ftoa_engine+0x74>
    24d2:	05 90       	lpm	r0, Z+
    24d4:	07 94       	ror	r0
    24d6:	28 f4       	brcc	.+10     	; 0x24e2 <__ftoa_engine+0x9c>
    24d8:	e7 0e       	add	r14, r23
    24da:	f8 1e       	adc	r15, r24
    24dc:	49 1f       	adc	r20, r25
    24de:	56 1f       	adc	r21, r22
    24e0:	c1 1d       	adc	r28, r1
    24e2:	77 0f       	add	r23, r23
    24e4:	88 1f       	adc	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	66 1f       	adc	r22, r22
    24ea:	06 94       	lsr	r0
    24ec:	a1 f7       	brne	.-24     	; 0x24d6 <__ftoa_engine+0x90>
    24ee:	05 90       	lpm	r0, Z+
    24f0:	07 94       	ror	r0
    24f2:	28 f4       	brcc	.+10     	; 0x24fe <__ftoa_engine+0xb8>
    24f4:	f8 0e       	add	r15, r24
    24f6:	49 1f       	adc	r20, r25
    24f8:	56 1f       	adc	r21, r22
    24fa:	c7 1f       	adc	r28, r23
    24fc:	d1 1d       	adc	r29, r1
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	66 1f       	adc	r22, r22
    2504:	77 1f       	adc	r23, r23
    2506:	06 94       	lsr	r0
    2508:	a1 f7       	brne	.-24     	; 0x24f2 <__ftoa_engine+0xac>
    250a:	05 90       	lpm	r0, Z+
    250c:	07 94       	ror	r0
    250e:	20 f4       	brcc	.+8      	; 0x2518 <__ftoa_engine+0xd2>
    2510:	49 0f       	add	r20, r25
    2512:	56 1f       	adc	r21, r22
    2514:	c7 1f       	adc	r28, r23
    2516:	d8 1f       	adc	r29, r24
    2518:	99 0f       	add	r25, r25
    251a:	66 1f       	adc	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	88 1f       	adc	r24, r24
    2520:	06 94       	lsr	r0
    2522:	a9 f7       	brne	.-22     	; 0x250e <__ftoa_engine+0xc8>
    2524:	84 91       	lpm	r24, Z
    2526:	10 95       	com	r17
    2528:	17 70       	andi	r17, 0x07	; 7
    252a:	41 f0       	breq	.+16     	; 0x253c <__ftoa_engine+0xf6>
    252c:	d6 95       	lsr	r29
    252e:	c7 95       	ror	r28
    2530:	57 95       	ror	r21
    2532:	47 95       	ror	r20
    2534:	f7 94       	ror	r15
    2536:	e7 94       	ror	r14
    2538:	1a 95       	dec	r17
    253a:	c1 f7       	brne	.-16     	; 0x252c <__ftoa_engine+0xe6>
    253c:	e8 e1       	ldi	r30, 0x18	; 24
    253e:	f2 e0       	ldi	r31, 0x02	; 2
    2540:	68 94       	set
    2542:	15 90       	lpm	r1, Z+
    2544:	15 91       	lpm	r17, Z+
    2546:	35 91       	lpm	r19, Z+
    2548:	65 91       	lpm	r22, Z+
    254a:	95 91       	lpm	r25, Z+
    254c:	05 90       	lpm	r0, Z+
    254e:	7f e2       	ldi	r23, 0x2F	; 47
    2550:	73 95       	inc	r23
    2552:	e1 18       	sub	r14, r1
    2554:	f1 0a       	sbc	r15, r17
    2556:	43 0b       	sbc	r20, r19
    2558:	56 0b       	sbc	r21, r22
    255a:	c9 0b       	sbc	r28, r25
    255c:	d0 09       	sbc	r29, r0
    255e:	c0 f7       	brcc	.-16     	; 0x2550 <__ftoa_engine+0x10a>
    2560:	e1 0c       	add	r14, r1
    2562:	f1 1e       	adc	r15, r17
    2564:	43 1f       	adc	r20, r19
    2566:	56 1f       	adc	r21, r22
    2568:	c9 1f       	adc	r28, r25
    256a:	d0 1d       	adc	r29, r0
    256c:	7e f4       	brtc	.+30     	; 0x258c <__ftoa_engine+0x146>
    256e:	70 33       	cpi	r23, 0x30	; 48
    2570:	11 f4       	brne	.+4      	; 0x2576 <__ftoa_engine+0x130>
    2572:	8a 95       	dec	r24
    2574:	e6 cf       	rjmp	.-52     	; 0x2542 <__ftoa_engine+0xfc>
    2576:	e8 94       	clt
    2578:	01 50       	subi	r16, 0x01	; 1
    257a:	30 f0       	brcs	.+12     	; 0x2588 <__ftoa_engine+0x142>
    257c:	08 0f       	add	r16, r24
    257e:	0a f4       	brpl	.+2      	; 0x2582 <__ftoa_engine+0x13c>
    2580:	00 27       	eor	r16, r16
    2582:	02 17       	cp	r16, r18
    2584:	08 f4       	brcc	.+2      	; 0x2588 <__ftoa_engine+0x142>
    2586:	20 2f       	mov	r18, r16
    2588:	23 95       	inc	r18
    258a:	02 2f       	mov	r16, r18
    258c:	7a 33       	cpi	r23, 0x3A	; 58
    258e:	28 f0       	brcs	.+10     	; 0x259a <__ftoa_engine+0x154>
    2590:	79 e3       	ldi	r23, 0x39	; 57
    2592:	7d 93       	st	X+, r23
    2594:	2a 95       	dec	r18
    2596:	e9 f7       	brne	.-6      	; 0x2592 <__ftoa_engine+0x14c>
    2598:	10 c0       	rjmp	.+32     	; 0x25ba <__ftoa_engine+0x174>
    259a:	7d 93       	st	X+, r23
    259c:	2a 95       	dec	r18
    259e:	89 f6       	brne	.-94     	; 0x2542 <__ftoa_engine+0xfc>
    25a0:	06 94       	lsr	r0
    25a2:	97 95       	ror	r25
    25a4:	67 95       	ror	r22
    25a6:	37 95       	ror	r19
    25a8:	17 95       	ror	r17
    25aa:	17 94       	ror	r1
    25ac:	e1 18       	sub	r14, r1
    25ae:	f1 0a       	sbc	r15, r17
    25b0:	43 0b       	sbc	r20, r19
    25b2:	56 0b       	sbc	r21, r22
    25b4:	c9 0b       	sbc	r28, r25
    25b6:	d0 09       	sbc	r29, r0
    25b8:	98 f0       	brcs	.+38     	; 0x25e0 <__ftoa_engine+0x19a>
    25ba:	23 95       	inc	r18
    25bc:	7e 91       	ld	r23, -X
    25be:	73 95       	inc	r23
    25c0:	7a 33       	cpi	r23, 0x3A	; 58
    25c2:	08 f0       	brcs	.+2      	; 0x25c6 <__ftoa_engine+0x180>
    25c4:	70 e3       	ldi	r23, 0x30	; 48
    25c6:	7c 93       	st	X, r23
    25c8:	20 13       	cpse	r18, r16
    25ca:	b8 f7       	brcc	.-18     	; 0x25ba <__ftoa_engine+0x174>
    25cc:	7e 91       	ld	r23, -X
    25ce:	70 61       	ori	r23, 0x10	; 16
    25d0:	7d 93       	st	X+, r23
    25d2:	30 f0       	brcs	.+12     	; 0x25e0 <__ftoa_engine+0x19a>
    25d4:	83 95       	inc	r24
    25d6:	71 e3       	ldi	r23, 0x31	; 49
    25d8:	7d 93       	st	X+, r23
    25da:	70 e3       	ldi	r23, 0x30	; 48
    25dc:	2a 95       	dec	r18
    25de:	e1 f7       	brne	.-8      	; 0x25d8 <__ftoa_engine+0x192>
    25e0:	11 24       	eor	r1, r1
    25e2:	ef 90       	pop	r14
    25e4:	ff 90       	pop	r15
    25e6:	0f 91       	pop	r16
    25e8:	1f 91       	pop	r17
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	99 27       	eor	r25, r25
    25f0:	87 fd       	sbrc	r24, 7
    25f2:	90 95       	com	r25
    25f4:	08 95       	ret

000025f6 <strnlen_P>:
    25f6:	fc 01       	movw	r30, r24
    25f8:	05 90       	lpm	r0, Z+
    25fa:	61 50       	subi	r22, 0x01	; 1
    25fc:	70 40       	sbci	r23, 0x00	; 0
    25fe:	01 10       	cpse	r0, r1
    2600:	d8 f7       	brcc	.-10     	; 0x25f8 <strnlen_P+0x2>
    2602:	80 95       	com	r24
    2604:	90 95       	com	r25
    2606:	8e 0f       	add	r24, r30
    2608:	9f 1f       	adc	r25, r31
    260a:	08 95       	ret

0000260c <memset>:
    260c:	dc 01       	movw	r26, r24
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <memset+0x6>
    2610:	6d 93       	st	X+, r22
    2612:	41 50       	subi	r20, 0x01	; 1
    2614:	50 40       	sbci	r21, 0x00	; 0
    2616:	e0 f7       	brcc	.-8      	; 0x2610 <memset+0x4>
    2618:	08 95       	ret

0000261a <strcmp>:
    261a:	fb 01       	movw	r30, r22
    261c:	dc 01       	movw	r26, r24
    261e:	8d 91       	ld	r24, X+
    2620:	01 90       	ld	r0, Z+
    2622:	80 19       	sub	r24, r0
    2624:	01 10       	cpse	r0, r1
    2626:	d9 f3       	breq	.-10     	; 0x261e <strcmp+0x4>
    2628:	99 0b       	sbc	r25, r25
    262a:	08 95       	ret

0000262c <strcpy>:
    262c:	fb 01       	movw	r30, r22
    262e:	dc 01       	movw	r26, r24
    2630:	01 90       	ld	r0, Z+
    2632:	0d 92       	st	X+, r0
    2634:	00 20       	and	r0, r0
    2636:	e1 f7       	brne	.-8      	; 0x2630 <strcpy+0x4>
    2638:	08 95       	ret

0000263a <strnlen>:
    263a:	fc 01       	movw	r30, r24
    263c:	61 50       	subi	r22, 0x01	; 1
    263e:	70 40       	sbci	r23, 0x00	; 0
    2640:	01 90       	ld	r0, Z+
    2642:	01 10       	cpse	r0, r1
    2644:	d8 f7       	brcc	.-10     	; 0x263c <strnlen+0x2>
    2646:	80 95       	com	r24
    2648:	90 95       	com	r25
    264a:	8e 0f       	add	r24, r30
    264c:	9f 1f       	adc	r25, r31
    264e:	08 95       	ret

00002650 <fputc>:
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	fb 01       	movw	r30, r22
    265a:	23 81       	ldd	r18, Z+3	; 0x03
    265c:	21 fd       	sbrc	r18, 1
    265e:	03 c0       	rjmp	.+6      	; 0x2666 <fputc+0x16>
    2660:	8f ef       	ldi	r24, 0xFF	; 255
    2662:	9f ef       	ldi	r25, 0xFF	; 255
    2664:	2c c0       	rjmp	.+88     	; 0x26be <fputc+0x6e>
    2666:	22 ff       	sbrs	r18, 2
    2668:	16 c0       	rjmp	.+44     	; 0x2696 <fputc+0x46>
    266a:	46 81       	ldd	r20, Z+6	; 0x06
    266c:	57 81       	ldd	r21, Z+7	; 0x07
    266e:	24 81       	ldd	r18, Z+4	; 0x04
    2670:	35 81       	ldd	r19, Z+5	; 0x05
    2672:	42 17       	cp	r20, r18
    2674:	53 07       	cpc	r21, r19
    2676:	44 f4       	brge	.+16     	; 0x2688 <fputc+0x38>
    2678:	a0 81       	ld	r26, Z
    267a:	b1 81       	ldd	r27, Z+1	; 0x01
    267c:	9d 01       	movw	r18, r26
    267e:	2f 5f       	subi	r18, 0xFF	; 255
    2680:	3f 4f       	sbci	r19, 0xFF	; 255
    2682:	20 83       	st	Z, r18
    2684:	31 83       	std	Z+1, r19	; 0x01
    2686:	8c 93       	st	X, r24
    2688:	26 81       	ldd	r18, Z+6	; 0x06
    268a:	37 81       	ldd	r19, Z+7	; 0x07
    268c:	2f 5f       	subi	r18, 0xFF	; 255
    268e:	3f 4f       	sbci	r19, 0xFF	; 255
    2690:	26 83       	std	Z+6, r18	; 0x06
    2692:	37 83       	std	Z+7, r19	; 0x07
    2694:	14 c0       	rjmp	.+40     	; 0x26be <fputc+0x6e>
    2696:	8b 01       	movw	r16, r22
    2698:	ec 01       	movw	r28, r24
    269a:	fb 01       	movw	r30, r22
    269c:	00 84       	ldd	r0, Z+8	; 0x08
    269e:	f1 85       	ldd	r31, Z+9	; 0x09
    26a0:	e0 2d       	mov	r30, r0
    26a2:	19 95       	eicall
    26a4:	89 2b       	or	r24, r25
    26a6:	e1 f6       	brne	.-72     	; 0x2660 <fputc+0x10>
    26a8:	d8 01       	movw	r26, r16
    26aa:	16 96       	adiw	r26, 0x06	; 6
    26ac:	8d 91       	ld	r24, X+
    26ae:	9c 91       	ld	r25, X
    26b0:	17 97       	sbiw	r26, 0x07	; 7
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	16 96       	adiw	r26, 0x06	; 6
    26b6:	8d 93       	st	X+, r24
    26b8:	9c 93       	st	X, r25
    26ba:	17 97       	sbiw	r26, 0x07	; 7
    26bc:	ce 01       	movw	r24, r28
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	08 95       	ret

000026c8 <puts>:
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	e0 91 83 63 	lds	r30, 0x6383	; 0x806383 <__iob+0x2>
    26d4:	f0 91 84 63 	lds	r31, 0x6384	; 0x806384 <__iob+0x3>
    26d8:	23 81       	ldd	r18, Z+3	; 0x03
    26da:	21 ff       	sbrs	r18, 1
    26dc:	1b c0       	rjmp	.+54     	; 0x2714 <puts+0x4c>
    26de:	8c 01       	movw	r16, r24
    26e0:	d0 e0       	ldi	r29, 0x00	; 0
    26e2:	c0 e0       	ldi	r28, 0x00	; 0
    26e4:	f8 01       	movw	r30, r16
    26e6:	81 91       	ld	r24, Z+
    26e8:	8f 01       	movw	r16, r30
    26ea:	60 91 83 63 	lds	r22, 0x6383	; 0x806383 <__iob+0x2>
    26ee:	70 91 84 63 	lds	r23, 0x6384	; 0x806384 <__iob+0x3>
    26f2:	db 01       	movw	r26, r22
    26f4:	18 96       	adiw	r26, 0x08	; 8
    26f6:	ed 91       	ld	r30, X+
    26f8:	fc 91       	ld	r31, X
    26fa:	19 97       	sbiw	r26, 0x09	; 9
    26fc:	88 23       	and	r24, r24
    26fe:	31 f0       	breq	.+12     	; 0x270c <puts+0x44>
    2700:	19 95       	eicall
    2702:	89 2b       	or	r24, r25
    2704:	79 f3       	breq	.-34     	; 0x26e4 <puts+0x1c>
    2706:	df ef       	ldi	r29, 0xFF	; 255
    2708:	cf ef       	ldi	r28, 0xFF	; 255
    270a:	ec cf       	rjmp	.-40     	; 0x26e4 <puts+0x1c>
    270c:	8a e0       	ldi	r24, 0x0A	; 10
    270e:	19 95       	eicall
    2710:	89 2b       	or	r24, r25
    2712:	19 f0       	breq	.+6      	; 0x271a <puts+0x52>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	9f ef       	ldi	r25, 0xFF	; 255
    2718:	02 c0       	rjmp	.+4      	; 0x271e <puts+0x56>
    271a:	8d 2f       	mov	r24, r29
    271c:	9c 2f       	mov	r25, r28
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	08 95       	ret

00002728 <scanf>:
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	ae 01       	movw	r20, r28
    2732:	4a 5f       	subi	r20, 0xFA	; 250
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	fa 01       	movw	r30, r20
    2738:	61 91       	ld	r22, Z+
    273a:	71 91       	ld	r23, Z+
    273c:	af 01       	movw	r20, r30
    273e:	80 91 81 63 	lds	r24, 0x6381	; 0x806381 <__iob>
    2742:	90 91 82 63 	lds	r25, 0x6382	; 0x806382 <__iob+0x1>
    2746:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <vfscanf>
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	08 95       	ret

00002750 <snprintf>:
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	2e 97       	sbiw	r28, 0x0e	; 14
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0e 89       	ldd	r16, Y+22	; 0x16
    2764:	1f 89       	ldd	r17, Y+23	; 0x17
    2766:	88 8d       	ldd	r24, Y+24	; 0x18
    2768:	99 8d       	ldd	r25, Y+25	; 0x19
    276a:	26 e0       	ldi	r18, 0x06	; 6
    276c:	2c 83       	std	Y+4, r18	; 0x04
    276e:	09 83       	std	Y+1, r16	; 0x01
    2770:	1a 83       	std	Y+2, r17	; 0x02
    2772:	97 ff       	sbrs	r25, 7
    2774:	02 c0       	rjmp	.+4      	; 0x277a <snprintf+0x2a>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e8       	ldi	r25, 0x80	; 128
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	ae 01       	movw	r20, r28
    2782:	44 5e       	subi	r20, 0xE4	; 228
    2784:	5f 4f       	sbci	r21, 0xFF	; 255
    2786:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2788:	7b 8d       	ldd	r23, Y+27	; 0x1b
    278a:	ce 01       	movw	r24, r28
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <vfprintf>
    2792:	4d 81       	ldd	r20, Y+5	; 0x05
    2794:	5e 81       	ldd	r21, Y+6	; 0x06
    2796:	57 fd       	sbrc	r21, 7
    2798:	0a c0       	rjmp	.+20     	; 0x27ae <snprintf+0x5e>
    279a:	2f 81       	ldd	r18, Y+7	; 0x07
    279c:	38 85       	ldd	r19, Y+8	; 0x08
    279e:	42 17       	cp	r20, r18
    27a0:	53 07       	cpc	r21, r19
    27a2:	0c f4       	brge	.+2      	; 0x27a6 <snprintf+0x56>
    27a4:	9a 01       	movw	r18, r20
    27a6:	f8 01       	movw	r30, r16
    27a8:	e2 0f       	add	r30, r18
    27aa:	f3 1f       	adc	r31, r19
    27ac:	10 82       	st	Z, r1
    27ae:	2e 96       	adiw	r28, 0x0e	; 14
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret

000027be <sprintf>:
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	2e 97       	sbiw	r28, 0x0e	; 14
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0e 89       	ldd	r16, Y+22	; 0x16
    27d2:	1f 89       	ldd	r17, Y+23	; 0x17
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	8c 83       	std	Y+4, r24	; 0x04
    27d8:	09 83       	std	Y+1, r16	; 0x01
    27da:	1a 83       	std	Y+2, r17	; 0x02
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	9f e7       	ldi	r25, 0x7F	; 127
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	ae 01       	movw	r20, r28
    27e6:	46 5e       	subi	r20, 0xE6	; 230
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	68 8d       	ldd	r22, Y+24	; 0x18
    27ec:	79 8d       	ldd	r23, Y+25	; 0x19
    27ee:	ce 01       	movw	r24, r28
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <vfprintf>
    27f6:	ef 81       	ldd	r30, Y+7	; 0x07
    27f8:	f8 85       	ldd	r31, Y+8	; 0x08
    27fa:	e0 0f       	add	r30, r16
    27fc:	f1 1f       	adc	r31, r17
    27fe:	10 82       	st	Z, r1
    2800:	2e 96       	adiw	r28, 0x0e	; 14
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	08 95       	ret

00002810 <__ultoa_invert>:
    2810:	fa 01       	movw	r30, r20
    2812:	aa 27       	eor	r26, r26
    2814:	28 30       	cpi	r18, 0x08	; 8
    2816:	51 f1       	breq	.+84     	; 0x286c <__ultoa_invert+0x5c>
    2818:	20 31       	cpi	r18, 0x10	; 16
    281a:	81 f1       	breq	.+96     	; 0x287c <__ultoa_invert+0x6c>
    281c:	e8 94       	clt
    281e:	6f 93       	push	r22
    2820:	6e 7f       	andi	r22, 0xFE	; 254
    2822:	6e 5f       	subi	r22, 0xFE	; 254
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	8f 4f       	sbci	r24, 0xFF	; 255
    2828:	9f 4f       	sbci	r25, 0xFF	; 255
    282a:	af 4f       	sbci	r26, 0xFF	; 255
    282c:	b1 e0       	ldi	r27, 0x01	; 1
    282e:	3e d0       	rcall	.+124    	; 0x28ac <__ultoa_invert+0x9c>
    2830:	b4 e0       	ldi	r27, 0x04	; 4
    2832:	3c d0       	rcall	.+120    	; 0x28ac <__ultoa_invert+0x9c>
    2834:	67 0f       	add	r22, r23
    2836:	78 1f       	adc	r23, r24
    2838:	89 1f       	adc	r24, r25
    283a:	9a 1f       	adc	r25, r26
    283c:	a1 1d       	adc	r26, r1
    283e:	68 0f       	add	r22, r24
    2840:	79 1f       	adc	r23, r25
    2842:	8a 1f       	adc	r24, r26
    2844:	91 1d       	adc	r25, r1
    2846:	a1 1d       	adc	r26, r1
    2848:	6a 0f       	add	r22, r26
    284a:	71 1d       	adc	r23, r1
    284c:	81 1d       	adc	r24, r1
    284e:	91 1d       	adc	r25, r1
    2850:	a1 1d       	adc	r26, r1
    2852:	20 d0       	rcall	.+64     	; 0x2894 <__ultoa_invert+0x84>
    2854:	09 f4       	brne	.+2      	; 0x2858 <__ultoa_invert+0x48>
    2856:	68 94       	set
    2858:	3f 91       	pop	r19
    285a:	2a e0       	ldi	r18, 0x0A	; 10
    285c:	26 9f       	mul	r18, r22
    285e:	11 24       	eor	r1, r1
    2860:	30 19       	sub	r19, r0
    2862:	30 5d       	subi	r19, 0xD0	; 208
    2864:	31 93       	st	Z+, r19
    2866:	de f6       	brtc	.-74     	; 0x281e <__ultoa_invert+0xe>
    2868:	cf 01       	movw	r24, r30
    286a:	08 95       	ret
    286c:	46 2f       	mov	r20, r22
    286e:	47 70       	andi	r20, 0x07	; 7
    2870:	40 5d       	subi	r20, 0xD0	; 208
    2872:	41 93       	st	Z+, r20
    2874:	b3 e0       	ldi	r27, 0x03	; 3
    2876:	0f d0       	rcall	.+30     	; 0x2896 <__ultoa_invert+0x86>
    2878:	c9 f7       	brne	.-14     	; 0x286c <__ultoa_invert+0x5c>
    287a:	f6 cf       	rjmp	.-20     	; 0x2868 <__ultoa_invert+0x58>
    287c:	46 2f       	mov	r20, r22
    287e:	4f 70       	andi	r20, 0x0F	; 15
    2880:	40 5d       	subi	r20, 0xD0	; 208
    2882:	4a 33       	cpi	r20, 0x3A	; 58
    2884:	18 f0       	brcs	.+6      	; 0x288c <__ultoa_invert+0x7c>
    2886:	49 5d       	subi	r20, 0xD9	; 217
    2888:	31 fd       	sbrc	r19, 1
    288a:	40 52       	subi	r20, 0x20	; 32
    288c:	41 93       	st	Z+, r20
    288e:	02 d0       	rcall	.+4      	; 0x2894 <__ultoa_invert+0x84>
    2890:	a9 f7       	brne	.-22     	; 0x287c <__ultoa_invert+0x6c>
    2892:	ea cf       	rjmp	.-44     	; 0x2868 <__ultoa_invert+0x58>
    2894:	b4 e0       	ldi	r27, 0x04	; 4
    2896:	a6 95       	lsr	r26
    2898:	97 95       	ror	r25
    289a:	87 95       	ror	r24
    289c:	77 95       	ror	r23
    289e:	67 95       	ror	r22
    28a0:	ba 95       	dec	r27
    28a2:	c9 f7       	brne	.-14     	; 0x2896 <__ultoa_invert+0x86>
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	61 05       	cpc	r22, r1
    28a8:	71 05       	cpc	r23, r1
    28aa:	08 95       	ret
    28ac:	9b 01       	movw	r18, r22
    28ae:	ac 01       	movw	r20, r24
    28b0:	0a 2e       	mov	r0, r26
    28b2:	06 94       	lsr	r0
    28b4:	57 95       	ror	r21
    28b6:	47 95       	ror	r20
    28b8:	37 95       	ror	r19
    28ba:	27 95       	ror	r18
    28bc:	ba 95       	dec	r27
    28be:	c9 f7       	brne	.-14     	; 0x28b2 <__ultoa_invert+0xa2>
    28c0:	62 0f       	add	r22, r18
    28c2:	73 1f       	adc	r23, r19
    28c4:	84 1f       	adc	r24, r20
    28c6:	95 1f       	adc	r25, r21
    28c8:	a0 1d       	adc	r26, r0
    28ca:	08 95       	ret

000028cc <putval>:
    28cc:	20 fd       	sbrc	r18, 0
    28ce:	09 c0       	rjmp	.+18     	; 0x28e2 <putval+0x16>
    28d0:	fc 01       	movw	r30, r24
    28d2:	23 fd       	sbrc	r18, 3
    28d4:	05 c0       	rjmp	.+10     	; 0x28e0 <putval+0x14>
    28d6:	22 ff       	sbrs	r18, 2
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <putval+0x12>
    28da:	73 83       	std	Z+3, r23	; 0x03
    28dc:	62 83       	std	Z+2, r22	; 0x02
    28de:	51 83       	std	Z+1, r21	; 0x01
    28e0:	40 83       	st	Z, r20
    28e2:	08 95       	ret

000028e4 <mulacc>:
    28e4:	44 fd       	sbrc	r20, 4
    28e6:	17 c0       	rjmp	.+46     	; 0x2916 <mulacc+0x32>
    28e8:	46 fd       	sbrc	r20, 6
    28ea:	17 c0       	rjmp	.+46     	; 0x291a <mulacc+0x36>
    28ec:	ab 01       	movw	r20, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	da 01       	movw	r26, r20
    28f2:	fb 01       	movw	r30, r22
    28f4:	aa 0f       	add	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	ee 1f       	adc	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	10 94       	com	r1
    28fe:	d1 f7       	brne	.-12     	; 0x28f4 <mulacc+0x10>
    2900:	4a 0f       	add	r20, r26
    2902:	5b 1f       	adc	r21, r27
    2904:	6e 1f       	adc	r22, r30
    2906:	7f 1f       	adc	r23, r31
    2908:	cb 01       	movw	r24, r22
    290a:	ba 01       	movw	r22, r20
    290c:	66 0f       	add	r22, r22
    290e:	77 1f       	adc	r23, r23
    2910:	88 1f       	adc	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <mulacc+0x44>
    2916:	33 e0       	ldi	r19, 0x03	; 3
    2918:	01 c0       	rjmp	.+2      	; 0x291c <mulacc+0x38>
    291a:	34 e0       	ldi	r19, 0x04	; 4
    291c:	66 0f       	add	r22, r22
    291e:	77 1f       	adc	r23, r23
    2920:	88 1f       	adc	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	31 50       	subi	r19, 0x01	; 1
    2926:	d1 f7       	brne	.-12     	; 0x291c <mulacc+0x38>
    2928:	62 0f       	add	r22, r18
    292a:	71 1d       	adc	r23, r1
    292c:	81 1d       	adc	r24, r1
    292e:	91 1d       	adc	r25, r1
    2930:	08 95       	ret

00002932 <skip_spaces>:
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	8c 01       	movw	r16, r24
    293c:	c8 01       	movw	r24, r16
    293e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2942:	ec 01       	movw	r28, r24
    2944:	97 fd       	sbrc	r25, 7
    2946:	08 c0       	rjmp	.+16     	; 0x2958 <skip_spaces+0x26>
    2948:	0e 94 44 17 	call	0x2e88	; 0x2e88 <isspace>
    294c:	89 2b       	or	r24, r25
    294e:	b1 f7       	brne	.-20     	; 0x293c <skip_spaces+0xa>
    2950:	b8 01       	movw	r22, r16
    2952:	ce 01       	movw	r24, r28
    2954:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ungetc>
    2958:	ce 01       	movw	r24, r28
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <conv_int>:
    2964:	8f 92       	push	r8
    2966:	9f 92       	push	r9
    2968:	af 92       	push	r10
    296a:	bf 92       	push	r11
    296c:	ef 92       	push	r14
    296e:	ff 92       	push	r15
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	8c 01       	movw	r16, r24
    297a:	d6 2f       	mov	r29, r22
    297c:	7a 01       	movw	r14, r20
    297e:	b2 2e       	mov	r11, r18
    2980:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2984:	9c 01       	movw	r18, r24
    2986:	33 27       	eor	r19, r19
    2988:	2b 32       	cpi	r18, 0x2B	; 43
    298a:	31 05       	cpc	r19, r1
    298c:	31 f0       	breq	.+12     	; 0x299a <conv_int+0x36>
    298e:	2d 32       	cpi	r18, 0x2D	; 45
    2990:	31 05       	cpc	r19, r1
    2992:	61 f4       	brne	.+24     	; 0x29ac <conv_int+0x48>
    2994:	8b 2d       	mov	r24, r11
    2996:	80 68       	ori	r24, 0x80	; 128
    2998:	b8 2e       	mov	r11, r24
    299a:	d1 50       	subi	r29, 0x01	; 1
    299c:	11 f4       	brne	.+4      	; 0x29a2 <conv_int+0x3e>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	68 c0       	rjmp	.+208    	; 0x2a72 <conv_int+0x10e>
    29a2:	c8 01       	movw	r24, r16
    29a4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    29a8:	97 fd       	sbrc	r25, 7
    29aa:	f9 cf       	rjmp	.-14     	; 0x299e <conv_int+0x3a>
    29ac:	cb 2d       	mov	r28, r11
    29ae:	cd 7f       	andi	r28, 0xFD	; 253
    29b0:	2b 2d       	mov	r18, r11
    29b2:	20 73       	andi	r18, 0x30	; 48
    29b4:	09 f5       	brne	.+66     	; 0x29f8 <conv_int+0x94>
    29b6:	80 33       	cpi	r24, 0x30	; 48
    29b8:	f9 f4       	brne	.+62     	; 0x29f8 <conv_int+0x94>
    29ba:	aa 24       	eor	r10, r10
    29bc:	aa 94       	dec	r10
    29be:	ad 0e       	add	r10, r29
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <conv_int+0x60>
    29c2:	43 c0       	rjmp	.+134    	; 0x2a4a <conv_int+0xe6>
    29c4:	c8 01       	movw	r24, r16
    29c6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    29ca:	97 fd       	sbrc	r25, 7
    29cc:	3e c0       	rjmp	.+124    	; 0x2a4a <conv_int+0xe6>
    29ce:	9c 01       	movw	r18, r24
    29d0:	2f 7d       	andi	r18, 0xDF	; 223
    29d2:	33 27       	eor	r19, r19
    29d4:	28 35       	cpi	r18, 0x58	; 88
    29d6:	31 05       	cpc	r19, r1
    29d8:	49 f4       	brne	.+18     	; 0x29ec <conv_int+0x88>
    29da:	c2 64       	ori	r28, 0x42	; 66
    29dc:	d2 50       	subi	r29, 0x02	; 2
    29de:	a9 f1       	breq	.+106    	; 0x2a4a <conv_int+0xe6>
    29e0:	c8 01       	movw	r24, r16
    29e2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    29e6:	97 ff       	sbrs	r25, 7
    29e8:	07 c0       	rjmp	.+14     	; 0x29f8 <conv_int+0x94>
    29ea:	2f c0       	rjmp	.+94     	; 0x2a4a <conv_int+0xe6>
    29ec:	b6 fe       	sbrs	r11, 6
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <conv_int+0x90>
    29f0:	c2 60       	ori	r28, 0x02	; 2
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <conv_int+0x92>
    29f4:	c2 61       	ori	r28, 0x12	; 18
    29f6:	da 2d       	mov	r29, r10
    29f8:	81 2c       	mov	r8, r1
    29fa:	91 2c       	mov	r9, r1
    29fc:	54 01       	movw	r10, r8
    29fe:	20 ed       	ldi	r18, 0xD0	; 208
    2a00:	28 0f       	add	r18, r24
    2a02:	28 30       	cpi	r18, 0x08	; 8
    2a04:	80 f0       	brcs	.+32     	; 0x2a26 <conv_int+0xc2>
    2a06:	c4 ff       	sbrs	r28, 4
    2a08:	04 c0       	rjmp	.+8      	; 0x2a12 <conv_int+0xae>
    2a0a:	b8 01       	movw	r22, r16
    2a0c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ungetc>
    2a10:	19 c0       	rjmp	.+50     	; 0x2a44 <conv_int+0xe0>
    2a12:	2a 30       	cpi	r18, 0x0A	; 10
    2a14:	40 f0       	brcs	.+16     	; 0x2a26 <conv_int+0xc2>
    2a16:	c6 ff       	sbrs	r28, 6
    2a18:	f8 cf       	rjmp	.-16     	; 0x2a0a <conv_int+0xa6>
    2a1a:	2f 7d       	andi	r18, 0xDF	; 223
    2a1c:	3f ee       	ldi	r19, 0xEF	; 239
    2a1e:	32 0f       	add	r19, r18
    2a20:	36 30       	cpi	r19, 0x06	; 6
    2a22:	98 f7       	brcc	.-26     	; 0x2a0a <conv_int+0xa6>
    2a24:	27 50       	subi	r18, 0x07	; 7
    2a26:	4c 2f       	mov	r20, r28
    2a28:	c5 01       	movw	r24, r10
    2a2a:	b4 01       	movw	r22, r8
    2a2c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <mulacc>
    2a30:	4b 01       	movw	r8, r22
    2a32:	5c 01       	movw	r10, r24
    2a34:	c2 60       	ori	r28, 0x02	; 2
    2a36:	d1 50       	subi	r29, 0x01	; 1
    2a38:	59 f0       	breq	.+22     	; 0x2a50 <conv_int+0xec>
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2a40:	97 ff       	sbrs	r25, 7
    2a42:	dd cf       	rjmp	.-70     	; 0x29fe <conv_int+0x9a>
    2a44:	c1 fd       	sbrc	r28, 1
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <conv_int+0xec>
    2a48:	aa cf       	rjmp	.-172    	; 0x299e <conv_int+0x3a>
    2a4a:	81 2c       	mov	r8, r1
    2a4c:	91 2c       	mov	r9, r1
    2a4e:	54 01       	movw	r10, r8
    2a50:	c7 ff       	sbrs	r28, 7
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <conv_int+0x100>
    2a54:	b0 94       	com	r11
    2a56:	a0 94       	com	r10
    2a58:	90 94       	com	r9
    2a5a:	80 94       	com	r8
    2a5c:	81 1c       	adc	r8, r1
    2a5e:	91 1c       	adc	r9, r1
    2a60:	a1 1c       	adc	r10, r1
    2a62:	b1 1c       	adc	r11, r1
    2a64:	2c 2f       	mov	r18, r28
    2a66:	b5 01       	movw	r22, r10
    2a68:	a4 01       	movw	r20, r8
    2a6a:	c7 01       	movw	r24, r14
    2a6c:	0e 94 66 14 	call	0x28cc	; 0x28cc <putval>
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	bf 90       	pop	r11
    2a80:	af 90       	pop	r10
    2a82:	9f 90       	pop	r9
    2a84:	8f 90       	pop	r8
    2a86:	08 95       	ret

00002a88 <conv_brk>:
    2a88:	5f 92       	push	r5
    2a8a:	6f 92       	push	r6
    2a8c:	7f 92       	push	r7
    2a8e:	8f 92       	push	r8
    2a90:	9f 92       	push	r9
    2a92:	af 92       	push	r10
    2a94:	bf 92       	push	r11
    2a96:	cf 92       	push	r12
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	a0 97       	sbiw	r28, 0x20	; 32
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	5c 01       	movw	r10, r24
    2ab2:	96 2e       	mov	r9, r22
    2ab4:	7a 01       	movw	r14, r20
    2ab6:	f9 01       	movw	r30, r18
    2ab8:	8e 01       	movw	r16, r28
    2aba:	0f 5f       	subi	r16, 0xFF	; 255
    2abc:	1f 4f       	sbci	r17, 0xFF	; 255
    2abe:	68 01       	movw	r12, r16
    2ac0:	80 e2       	ldi	r24, 0x20	; 32
    2ac2:	d8 01       	movw	r26, r16
    2ac4:	1d 92       	st	X+, r1
    2ac6:	8a 95       	dec	r24
    2ac8:	e9 f7       	brne	.-6      	; 0x2ac4 <conv_brk+0x3c>
    2aca:	d5 01       	movw	r26, r10
    2acc:	13 96       	adiw	r26, 0x03	; 3
    2ace:	8c 90       	ld	r8, X
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	61 2c       	mov	r6, r1
    2ad6:	71 2c       	mov	r7, r1
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	83 fc       	sbrc	r8, 3
    2ae0:	25 91       	lpm	r18, Z+
    2ae2:	83 fe       	sbrs	r8, 3
    2ae4:	21 91       	ld	r18, Z+
    2ae6:	8f 01       	movw	r16, r30
    2ae8:	52 2e       	mov	r5, r18
    2aea:	21 11       	cpse	r18, r1
    2aec:	03 c0       	rjmp	.+6      	; 0x2af4 <conv_brk+0x6c>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	92 c0       	rjmp	.+292    	; 0x2c18 <conv_brk+0x190>
    2af4:	2e 35       	cpi	r18, 0x5E	; 94
    2af6:	11 f4       	brne	.+4      	; 0x2afc <conv_brk+0x74>
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	51 f1       	breq	.+84     	; 0x2b50 <conv_brk+0xc8>
    2afc:	43 2f       	mov	r20, r19
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	48 17       	cp	r20, r24
    2b02:	59 07       	cpc	r21, r25
    2b04:	3c f4       	brge	.+14     	; 0x2b14 <conv_brk+0x8c>
    2b06:	2d 35       	cpi	r18, 0x5D	; 93
    2b08:	59 f1       	breq	.+86     	; 0x2b60 <conv_brk+0xd8>
    2b0a:	2d 32       	cpi	r18, 0x2D	; 45
    2b0c:	19 f4       	brne	.+6      	; 0x2b14 <conv_brk+0x8c>
    2b0e:	77 20       	and	r7, r7
    2b10:	09 f1       	breq	.+66     	; 0x2b54 <conv_brk+0xcc>
    2b12:	03 c0       	rjmp	.+6      	; 0x2b1a <conv_brk+0x92>
    2b14:	77 20       	and	r7, r7
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <conv_brk+0x92>
    2b18:	6a c0       	rjmp	.+212    	; 0x2bee <conv_brk+0x166>
    2b1a:	45 2d       	mov	r20, r5
    2b1c:	46 95       	lsr	r20
    2b1e:	46 95       	lsr	r20
    2b20:	46 95       	lsr	r20
    2b22:	d6 01       	movw	r26, r12
    2b24:	a4 0f       	add	r26, r20
    2b26:	b1 1d       	adc	r27, r1
    2b28:	45 2d       	mov	r20, r5
    2b2a:	47 70       	andi	r20, 0x07	; 7
    2b2c:	8b 01       	movw	r16, r22
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <conv_brk+0xac>
    2b30:	00 0f       	add	r16, r16
    2b32:	11 1f       	adc	r17, r17
    2b34:	4a 95       	dec	r20
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <conv_brk+0xa8>
    2b38:	a8 01       	movw	r20, r16
    2b3a:	5c 91       	ld	r21, X
    2b3c:	45 2b       	or	r20, r21
    2b3e:	4c 93       	st	X, r20
    2b40:	65 14       	cp	r6, r5
    2b42:	59 f0       	breq	.+22     	; 0x2b5a <conv_brk+0xd2>
    2b44:	56 14       	cp	r5, r6
    2b46:	10 f4       	brcc	.+4      	; 0x2b4c <conv_brk+0xc4>
    2b48:	53 94       	inc	r5
    2b4a:	e7 cf       	rjmp	.-50     	; 0x2b1a <conv_brk+0x92>
    2b4c:	5a 94       	dec	r5
    2b4e:	e5 cf       	rjmp	.-54     	; 0x2b1a <conv_brk+0x92>
    2b50:	31 e0       	ldi	r19, 0x01	; 1
    2b52:	04 c0       	rjmp	.+8      	; 0x2b5c <conv_brk+0xd4>
    2b54:	77 24       	eor	r7, r7
    2b56:	73 94       	inc	r7
    2b58:	01 c0       	rjmp	.+2      	; 0x2b5c <conv_brk+0xd4>
    2b5a:	71 2c       	mov	r7, r1
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	bf cf       	rjmp	.-130    	; 0x2ade <conv_brk+0x56>
    2b60:	77 20       	and	r7, r7
    2b62:	19 f0       	breq	.+6      	; 0x2b6a <conv_brk+0xe2>
    2b64:	8e 81       	ldd	r24, Y+6	; 0x06
    2b66:	80 62       	ori	r24, 0x20	; 32
    2b68:	8e 83       	std	Y+6, r24	; 0x06
    2b6a:	31 11       	cpse	r19, r1
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <conv_brk+0xec>
    2b6e:	88 24       	eor	r8, r8
    2b70:	83 94       	inc	r8
    2b72:	17 c0       	rjmp	.+46     	; 0x2ba2 <conv_brk+0x11a>
    2b74:	f6 01       	movw	r30, r12
    2b76:	9e 01       	movw	r18, r28
    2b78:	2f 5d       	subi	r18, 0xDF	; 223
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	80 95       	com	r24
    2b80:	81 93       	st	Z+, r24
    2b82:	2e 17       	cp	r18, r30
    2b84:	3f 07       	cpc	r19, r31
    2b86:	d1 f7       	brne	.-12     	; 0x2b7c <conv_brk+0xf4>
    2b88:	f2 cf       	rjmp	.-28     	; 0x2b6e <conv_brk+0xe6>
    2b8a:	e1 14       	cp	r14, r1
    2b8c:	f1 04       	cpc	r15, r1
    2b8e:	29 f0       	breq	.+10     	; 0x2b9a <conv_brk+0x112>
    2b90:	d7 01       	movw	r26, r14
    2b92:	8c 93       	st	X, r24
    2b94:	f7 01       	movw	r30, r14
    2b96:	31 96       	adiw	r30, 0x01	; 1
    2b98:	7f 01       	movw	r14, r30
    2b9a:	9a 94       	dec	r9
    2b9c:	81 2c       	mov	r8, r1
    2b9e:	99 20       	and	r9, r9
    2ba0:	f9 f0       	breq	.+62     	; 0x2be0 <conv_brk+0x158>
    2ba2:	c5 01       	movw	r24, r10
    2ba4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2ba8:	97 fd       	sbrc	r25, 7
    2baa:	18 c0       	rjmp	.+48     	; 0x2bdc <conv_brk+0x154>
    2bac:	fc 01       	movw	r30, r24
    2bae:	ff 27       	eor	r31, r31
    2bb0:	23 e0       	ldi	r18, 0x03	; 3
    2bb2:	f5 95       	asr	r31
    2bb4:	e7 95       	ror	r30
    2bb6:	2a 95       	dec	r18
    2bb8:	e1 f7       	brne	.-8      	; 0x2bb2 <conv_brk+0x12a>
    2bba:	ec 0d       	add	r30, r12
    2bbc:	fd 1d       	adc	r31, r13
    2bbe:	20 81       	ld	r18, Z
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	ac 01       	movw	r20, r24
    2bc4:	47 70       	andi	r20, 0x07	; 7
    2bc6:	55 27       	eor	r21, r21
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <conv_brk+0x146>
    2bca:	35 95       	asr	r19
    2bcc:	27 95       	ror	r18
    2bce:	4a 95       	dec	r20
    2bd0:	e2 f7       	brpl	.-8      	; 0x2bca <conv_brk+0x142>
    2bd2:	20 fd       	sbrc	r18, 0
    2bd4:	da cf       	rjmp	.-76     	; 0x2b8a <conv_brk+0x102>
    2bd6:	b5 01       	movw	r22, r10
    2bd8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ungetc>
    2bdc:	81 10       	cpse	r8, r1
    2bde:	87 cf       	rjmp	.-242    	; 0x2aee <conv_brk+0x66>
    2be0:	e1 14       	cp	r14, r1
    2be2:	f1 04       	cpc	r15, r1
    2be4:	11 f0       	breq	.+4      	; 0x2bea <conv_brk+0x162>
    2be6:	d7 01       	movw	r26, r14
    2be8:	1c 92       	st	X, r1
    2bea:	c8 01       	movw	r24, r16
    2bec:	15 c0       	rjmp	.+42     	; 0x2c18 <conv_brk+0x190>
    2bee:	42 2f       	mov	r20, r18
    2bf0:	46 95       	lsr	r20
    2bf2:	46 95       	lsr	r20
    2bf4:	46 95       	lsr	r20
    2bf6:	d6 01       	movw	r26, r12
    2bf8:	a4 0f       	add	r26, r20
    2bfa:	b1 1d       	adc	r27, r1
    2bfc:	42 2f       	mov	r20, r18
    2bfe:	47 70       	andi	r20, 0x07	; 7
    2c00:	8b 01       	movw	r16, r22
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <conv_brk+0x180>
    2c04:	00 0f       	add	r16, r16
    2c06:	11 1f       	adc	r17, r17
    2c08:	4a 95       	dec	r20
    2c0a:	e2 f7       	brpl	.-8      	; 0x2c04 <conv_brk+0x17c>
    2c0c:	a8 01       	movw	r20, r16
    2c0e:	5c 91       	ld	r21, X
    2c10:	45 2b       	or	r20, r21
    2c12:	4c 93       	st	X, r20
    2c14:	62 2e       	mov	r6, r18
    2c16:	a2 cf       	rjmp	.-188    	; 0x2b5c <conv_brk+0xd4>
    2c18:	a0 96       	adiw	r28, 0x20	; 32
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	bf 90       	pop	r11
    2c30:	af 90       	pop	r10
    2c32:	9f 90       	pop	r9
    2c34:	8f 90       	pop	r8
    2c36:	7f 90       	pop	r7
    2c38:	6f 90       	pop	r6
    2c3a:	5f 90       	pop	r5
    2c3c:	08 95       	ret

00002c3e <vfscanf>:
    2c3e:	5f 92       	push	r5
    2c40:	6f 92       	push	r6
    2c42:	7f 92       	push	r7
    2c44:	8f 92       	push	r8
    2c46:	9f 92       	push	r9
    2c48:	af 92       	push	r10
    2c4a:	bf 92       	push	r11
    2c4c:	cf 92       	push	r12
    2c4e:	df 92       	push	r13
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	6c 01       	movw	r12, r24
    2c5e:	eb 01       	movw	r28, r22
    2c60:	5a 01       	movw	r10, r20
    2c62:	fc 01       	movw	r30, r24
    2c64:	16 82       	std	Z+6, r1	; 0x06
    2c66:	17 82       	std	Z+7, r1	; 0x07
    2c68:	51 2c       	mov	r5, r1
    2c6a:	f6 01       	movw	r30, r12
    2c6c:	e3 80       	ldd	r14, Z+3	; 0x03
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e3 fc       	sbrc	r14, 3
    2c72:	85 91       	lpm	r24, Z+
    2c74:	e3 fe       	sbrs	r14, 3
    2c76:	81 91       	ld	r24, Z+
    2c78:	18 2f       	mov	r17, r24
    2c7a:	ef 01       	movw	r28, r30
    2c7c:	88 23       	and	r24, r24
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <vfscanf+0x44>
    2c80:	ee c0       	rjmp	.+476    	; 0x2e5e <vfscanf+0x220>
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 44 17 	call	0x2e88	; 0x2e88 <isspace>
    2c88:	89 2b       	or	r24, r25
    2c8a:	21 f0       	breq	.+8      	; 0x2c94 <vfscanf+0x56>
    2c8c:	c6 01       	movw	r24, r12
    2c8e:	0e 94 99 14 	call	0x2932	; 0x2932 <skip_spaces>
    2c92:	eb cf       	rjmp	.-42     	; 0x2c6a <vfscanf+0x2c>
    2c94:	15 32       	cpi	r17, 0x25	; 37
    2c96:	41 f4       	brne	.+16     	; 0x2ca8 <vfscanf+0x6a>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e3 fc       	sbrc	r14, 3
    2c9c:	15 91       	lpm	r17, Z+
    2c9e:	e3 fe       	sbrs	r14, 3
    2ca0:	11 91       	ld	r17, Z+
    2ca2:	ef 01       	movw	r28, r30
    2ca4:	15 32       	cpi	r17, 0x25	; 37
    2ca6:	81 f4       	brne	.+32     	; 0x2cc8 <vfscanf+0x8a>
    2ca8:	c6 01       	movw	r24, r12
    2caa:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2cae:	97 fd       	sbrc	r25, 7
    2cb0:	d4 c0       	rjmp	.+424    	; 0x2e5a <vfscanf+0x21c>
    2cb2:	41 2f       	mov	r20, r17
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	9c 01       	movw	r18, r24
    2cb8:	33 27       	eor	r19, r19
    2cba:	24 17       	cp	r18, r20
    2cbc:	35 07       	cpc	r19, r21
    2cbe:	a9 f2       	breq	.-86     	; 0x2c6a <vfscanf+0x2c>
    2cc0:	b6 01       	movw	r22, r12
    2cc2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ungetc>
    2cc6:	cb c0       	rjmp	.+406    	; 0x2e5e <vfscanf+0x220>
    2cc8:	1a 32       	cpi	r17, 0x2A	; 42
    2cca:	39 f4       	brne	.+14     	; 0x2cda <vfscanf+0x9c>
    2ccc:	e3 fc       	sbrc	r14, 3
    2cce:	15 91       	lpm	r17, Z+
    2cd0:	e3 fe       	sbrs	r14, 3
    2cd2:	11 91       	ld	r17, Z+
    2cd4:	ef 01       	movw	r28, r30
    2cd6:	01 e0       	ldi	r16, 0x01	; 1
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <vfscanf+0x9e>
    2cda:	00 e0       	ldi	r16, 0x00	; 0
    2cdc:	f1 2c       	mov	r15, r1
    2cde:	20 ed       	ldi	r18, 0xD0	; 208
    2ce0:	21 0f       	add	r18, r17
    2ce2:	2a 30       	cpi	r18, 0x0A	; 10
    2ce4:	80 f4       	brcc	.+32     	; 0x2d06 <vfscanf+0xc8>
    2ce6:	02 60       	ori	r16, 0x02	; 2
    2ce8:	6f 2d       	mov	r22, r15
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	40 e2       	ldi	r20, 0x20	; 32
    2cf2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <mulacc>
    2cf6:	f6 2e       	mov	r15, r22
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e3 fc       	sbrc	r14, 3
    2cfc:	15 91       	lpm	r17, Z+
    2cfe:	e3 fe       	sbrs	r14, 3
    2d00:	11 91       	ld	r17, Z+
    2d02:	ef 01       	movw	r28, r30
    2d04:	ec cf       	rjmp	.-40     	; 0x2cde <vfscanf+0xa0>
    2d06:	01 ff       	sbrs	r16, 1
    2d08:	03 c0       	rjmp	.+6      	; 0x2d10 <vfscanf+0xd2>
    2d0a:	f1 10       	cpse	r15, r1
    2d0c:	03 c0       	rjmp	.+6      	; 0x2d14 <vfscanf+0xd6>
    2d0e:	a7 c0       	rjmp	.+334    	; 0x2e5e <vfscanf+0x220>
    2d10:	ff 24       	eor	r15, r15
    2d12:	fa 94       	dec	r15
    2d14:	18 36       	cpi	r17, 0x68	; 104
    2d16:	19 f0       	breq	.+6      	; 0x2d1e <vfscanf+0xe0>
    2d18:	1c 36       	cpi	r17, 0x6C	; 108
    2d1a:	51 f0       	breq	.+20     	; 0x2d30 <vfscanf+0xf2>
    2d1c:	10 c0       	rjmp	.+32     	; 0x2d3e <vfscanf+0x100>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e3 fc       	sbrc	r14, 3
    2d22:	15 91       	lpm	r17, Z+
    2d24:	e3 fe       	sbrs	r14, 3
    2d26:	11 91       	ld	r17, Z+
    2d28:	ef 01       	movw	r28, r30
    2d2a:	18 36       	cpi	r17, 0x68	; 104
    2d2c:	41 f4       	brne	.+16     	; 0x2d3e <vfscanf+0x100>
    2d2e:	08 60       	ori	r16, 0x08	; 8
    2d30:	04 60       	ori	r16, 0x04	; 4
    2d32:	fe 01       	movw	r30, r28
    2d34:	e3 fc       	sbrc	r14, 3
    2d36:	15 91       	lpm	r17, Z+
    2d38:	e3 fe       	sbrs	r14, 3
    2d3a:	11 91       	ld	r17, Z+
    2d3c:	ef 01       	movw	r28, r30
    2d3e:	11 23       	and	r17, r17
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <vfscanf+0x106>
    2d42:	8d c0       	rjmp	.+282    	; 0x2e5e <vfscanf+0x220>
    2d44:	61 2f       	mov	r22, r17
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	82 e1       	ldi	r24, 0x12	; 18
    2d4a:	93 e0       	ldi	r25, 0x03	; 3
    2d4c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <strchr_P>
    2d50:	89 2b       	or	r24, r25
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <vfscanf+0x118>
    2d54:	84 c0       	rjmp	.+264    	; 0x2e5e <vfscanf+0x220>
    2d56:	00 fd       	sbrc	r16, 0
    2d58:	07 c0       	rjmp	.+14     	; 0x2d68 <vfscanf+0x12a>
    2d5a:	f5 01       	movw	r30, r10
    2d5c:	80 80       	ld	r8, Z
    2d5e:	91 80       	ldd	r9, Z+1	; 0x01
    2d60:	c5 01       	movw	r24, r10
    2d62:	02 96       	adiw	r24, 0x02	; 2
    2d64:	5c 01       	movw	r10, r24
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <vfscanf+0x12e>
    2d68:	81 2c       	mov	r8, r1
    2d6a:	91 2c       	mov	r9, r1
    2d6c:	1e 36       	cpi	r17, 0x6E	; 110
    2d6e:	51 f4       	brne	.+20     	; 0x2d84 <vfscanf+0x146>
    2d70:	f6 01       	movw	r30, r12
    2d72:	46 81       	ldd	r20, Z+6	; 0x06
    2d74:	57 81       	ldd	r21, Z+7	; 0x07
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	20 2f       	mov	r18, r16
    2d7c:	c4 01       	movw	r24, r8
    2d7e:	0e 94 66 14 	call	0x28cc	; 0x28cc <putval>
    2d82:	73 cf       	rjmp	.-282    	; 0x2c6a <vfscanf+0x2c>
    2d84:	13 36       	cpi	r17, 0x63	; 99
    2d86:	a9 f4       	brne	.+42     	; 0x2db2 <vfscanf+0x174>
    2d88:	01 fd       	sbrc	r16, 1
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <vfscanf+0x152>
    2d8c:	ff 24       	eor	r15, r15
    2d8e:	f3 94       	inc	r15
    2d90:	c6 01       	movw	r24, r12
    2d92:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2d96:	97 fd       	sbrc	r25, 7
    2d98:	60 c0       	rjmp	.+192    	; 0x2e5a <vfscanf+0x21c>
    2d9a:	81 14       	cp	r8, r1
    2d9c:	91 04       	cpc	r9, r1
    2d9e:	29 f0       	breq	.+10     	; 0x2daa <vfscanf+0x16c>
    2da0:	f4 01       	movw	r30, r8
    2da2:	80 83       	st	Z, r24
    2da4:	c4 01       	movw	r24, r8
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	4c 01       	movw	r8, r24
    2daa:	fa 94       	dec	r15
    2dac:	f1 10       	cpse	r15, r1
    2dae:	f0 cf       	rjmp	.-32     	; 0x2d90 <vfscanf+0x152>
    2db0:	50 c0       	rjmp	.+160    	; 0x2e52 <vfscanf+0x214>
    2db2:	1b 35       	cpi	r17, 0x5B	; 91
    2db4:	59 f4       	brne	.+22     	; 0x2dcc <vfscanf+0x18e>
    2db6:	9e 01       	movw	r18, r28
    2db8:	a4 01       	movw	r20, r8
    2dba:	6f 2d       	mov	r22, r15
    2dbc:	c6 01       	movw	r24, r12
    2dbe:	0e 94 44 15 	call	0x2a88	; 0x2a88 <conv_brk>
    2dc2:	ec 01       	movw	r28, r24
    2dc4:	89 2b       	or	r24, r25
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <vfscanf+0x18c>
    2dc8:	44 c0       	rjmp	.+136    	; 0x2e52 <vfscanf+0x214>
    2dca:	3e c0       	rjmp	.+124    	; 0x2e48 <vfscanf+0x20a>
    2dcc:	c6 01       	movw	r24, r12
    2dce:	0e 94 99 14 	call	0x2932	; 0x2932 <skip_spaces>
    2dd2:	97 fd       	sbrc	r25, 7
    2dd4:	42 c0       	rjmp	.+132    	; 0x2e5a <vfscanf+0x21c>
    2dd6:	1f 36       	cpi	r17, 0x6F	; 111
    2dd8:	61 f1       	breq	.+88     	; 0x2e32 <vfscanf+0x1f4>
    2dda:	28 f4       	brcc	.+10     	; 0x2de6 <vfscanf+0x1a8>
    2ddc:	14 36       	cpi	r17, 0x64	; 100
    2dde:	39 f1       	breq	.+78     	; 0x2e2e <vfscanf+0x1f0>
    2de0:	19 36       	cpi	r17, 0x69	; 105
    2de2:	51 f1       	breq	.+84     	; 0x2e38 <vfscanf+0x1fa>
    2de4:	28 c0       	rjmp	.+80     	; 0x2e36 <vfscanf+0x1f8>
    2de6:	13 37       	cpi	r17, 0x73	; 115
    2de8:	71 f0       	breq	.+28     	; 0x2e06 <vfscanf+0x1c8>
    2dea:	15 37       	cpi	r17, 0x75	; 117
    2dec:	01 f1       	breq	.+64     	; 0x2e2e <vfscanf+0x1f0>
    2dee:	23 c0       	rjmp	.+70     	; 0x2e36 <vfscanf+0x1f8>
    2df0:	81 14       	cp	r8, r1
    2df2:	91 04       	cpc	r9, r1
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <vfscanf+0x1c2>
    2df6:	f4 01       	movw	r30, r8
    2df8:	60 82       	st	Z, r6
    2dfa:	c4 01       	movw	r24, r8
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	4c 01       	movw	r8, r24
    2e00:	fa 94       	dec	r15
    2e02:	ff 20       	and	r15, r15
    2e04:	71 f0       	breq	.+28     	; 0x2e22 <vfscanf+0x1e4>
    2e06:	c6 01       	movw	r24, r12
    2e08:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fgetc>
    2e0c:	3c 01       	movw	r6, r24
    2e0e:	97 fd       	sbrc	r25, 7
    2e10:	08 c0       	rjmp	.+16     	; 0x2e22 <vfscanf+0x1e4>
    2e12:	0e 94 44 17 	call	0x2e88	; 0x2e88 <isspace>
    2e16:	89 2b       	or	r24, r25
    2e18:	59 f3       	breq	.-42     	; 0x2df0 <vfscanf+0x1b2>
    2e1a:	b6 01       	movw	r22, r12
    2e1c:	c3 01       	movw	r24, r6
    2e1e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ungetc>
    2e22:	81 14       	cp	r8, r1
    2e24:	91 04       	cpc	r9, r1
    2e26:	a9 f0       	breq	.+42     	; 0x2e52 <vfscanf+0x214>
    2e28:	f4 01       	movw	r30, r8
    2e2a:	10 82       	st	Z, r1
    2e2c:	12 c0       	rjmp	.+36     	; 0x2e52 <vfscanf+0x214>
    2e2e:	00 62       	ori	r16, 0x20	; 32
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <vfscanf+0x1fa>
    2e32:	00 61       	ori	r16, 0x10	; 16
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <vfscanf+0x1fa>
    2e36:	00 64       	ori	r16, 0x40	; 64
    2e38:	20 2f       	mov	r18, r16
    2e3a:	a4 01       	movw	r20, r8
    2e3c:	6f 2d       	mov	r22, r15
    2e3e:	c6 01       	movw	r24, r12
    2e40:	0e 94 b2 14 	call	0x2964	; 0x2964 <conv_int>
    2e44:	81 11       	cpse	r24, r1
    2e46:	05 c0       	rjmp	.+10     	; 0x2e52 <vfscanf+0x214>
    2e48:	f6 01       	movw	r30, r12
    2e4a:	83 81       	ldd	r24, Z+3	; 0x03
    2e4c:	80 73       	andi	r24, 0x30	; 48
    2e4e:	29 f4       	brne	.+10     	; 0x2e5a <vfscanf+0x21c>
    2e50:	06 c0       	rjmp	.+12     	; 0x2e5e <vfscanf+0x220>
    2e52:	00 fd       	sbrc	r16, 0
    2e54:	0a cf       	rjmp	.-492    	; 0x2c6a <vfscanf+0x2c>
    2e56:	53 94       	inc	r5
    2e58:	08 cf       	rjmp	.-496    	; 0x2c6a <vfscanf+0x2c>
    2e5a:	55 20       	and	r5, r5
    2e5c:	19 f0       	breq	.+6      	; 0x2e64 <vfscanf+0x226>
    2e5e:	85 2d       	mov	r24, r5
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <vfscanf+0x22a>
    2e64:	8f ef       	ldi	r24, 0xFF	; 255
    2e66:	9f ef       	ldi	r25, 0xFF	; 255
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	ff 90       	pop	r15
    2e72:	ef 90       	pop	r14
    2e74:	df 90       	pop	r13
    2e76:	cf 90       	pop	r12
    2e78:	bf 90       	pop	r11
    2e7a:	af 90       	pop	r10
    2e7c:	9f 90       	pop	r9
    2e7e:	8f 90       	pop	r8
    2e80:	7f 90       	pop	r7
    2e82:	6f 90       	pop	r6
    2e84:	5f 90       	pop	r5
    2e86:	08 95       	ret

00002e88 <isspace>:
    2e88:	91 11       	cpse	r25, r1
    2e8a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__ctype_isfalse>
    2e8e:	80 32       	cpi	r24, 0x20	; 32
    2e90:	19 f0       	breq	.+6      	; 0x2e98 <isspace+0x10>
    2e92:	89 50       	subi	r24, 0x09	; 9
    2e94:	85 50       	subi	r24, 0x05	; 5
    2e96:	c8 f7       	brcc	.-14     	; 0x2e8a <isspace+0x2>
    2e98:	08 95       	ret

00002e9a <strchr_P>:
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	05 90       	lpm	r0, Z+
    2e9e:	06 16       	cp	r0, r22
    2ea0:	21 f0       	breq	.+8      	; 0x2eaa <strchr_P+0x10>
    2ea2:	00 20       	and	r0, r0
    2ea4:	d9 f7       	brne	.-10     	; 0x2e9c <strchr_P+0x2>
    2ea6:	c0 01       	movw	r24, r0
    2ea8:	08 95       	ret
    2eaa:	31 97       	sbiw	r30, 0x01	; 1
    2eac:	cf 01       	movw	r24, r30
    2eae:	08 95       	ret

00002eb0 <fgetc>:
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	ec 01       	movw	r28, r24
    2eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    2eb8:	20 ff       	sbrs	r18, 0
    2eba:	33 c0       	rjmp	.+102    	; 0x2f22 <fgetc+0x72>
    2ebc:	26 ff       	sbrs	r18, 6
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <fgetc+0x24>
    2ec0:	2f 7b       	andi	r18, 0xBF	; 191
    2ec2:	2b 83       	std	Y+3, r18	; 0x03
    2ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	8e 83       	std	Y+6, r24	; 0x06
    2ecc:	9f 83       	std	Y+7, r25	; 0x07
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	29 c0       	rjmp	.+82     	; 0x2f26 <fgetc+0x76>
    2ed4:	22 ff       	sbrs	r18, 2
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <fgetc+0x46>
    2ed8:	e8 81       	ld	r30, Y
    2eda:	f9 81       	ldd	r31, Y+1	; 0x01
    2edc:	80 81       	ld	r24, Z
    2ede:	08 2e       	mov	r0, r24
    2ee0:	00 0c       	add	r0, r0
    2ee2:	99 0b       	sbc	r25, r25
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	19 f4       	brne	.+6      	; 0x2eee <fgetc+0x3e>
    2ee8:	20 62       	ori	r18, 0x20	; 32
    2eea:	2b 83       	std	Y+3, r18	; 0x03
    2eec:	1a c0       	rjmp	.+52     	; 0x2f22 <fgetc+0x72>
    2eee:	31 96       	adiw	r30, 0x01	; 1
    2ef0:	e8 83       	st	Y, r30
    2ef2:	f9 83       	std	Y+1, r31	; 0x01
    2ef4:	0e c0       	rjmp	.+28     	; 0x2f12 <fgetc+0x62>
    2ef6:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ef8:	fb 85       	ldd	r31, Y+11	; 0x0b
    2efa:	19 95       	eicall
    2efc:	97 ff       	sbrs	r25, 7
    2efe:	09 c0       	rjmp	.+18     	; 0x2f12 <fgetc+0x62>
    2f00:	2b 81       	ldd	r18, Y+3	; 0x03
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	11 f0       	breq	.+4      	; 0x2f0a <fgetc+0x5a>
    2f06:	80 e2       	ldi	r24, 0x20	; 32
    2f08:	01 c0       	rjmp	.+2      	; 0x2f0c <fgetc+0x5c>
    2f0a:	80 e1       	ldi	r24, 0x10	; 16
    2f0c:	82 2b       	or	r24, r18
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
    2f10:	08 c0       	rjmp	.+16     	; 0x2f22 <fgetc+0x72>
    2f12:	2e 81       	ldd	r18, Y+6	; 0x06
    2f14:	3f 81       	ldd	r19, Y+7	; 0x07
    2f16:	2f 5f       	subi	r18, 0xFF	; 255
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	2e 83       	std	Y+6, r18	; 0x06
    2f1c:	3f 83       	std	Y+7, r19	; 0x07
    2f1e:	99 27       	eor	r25, r25
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <fgetc+0x76>
    2f22:	8f ef       	ldi	r24, 0xFF	; 255
    2f24:	9f ef       	ldi	r25, 0xFF	; 255
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	08 95       	ret

00002f2c <ungetc>:
    2f2c:	fb 01       	movw	r30, r22
    2f2e:	23 81       	ldd	r18, Z+3	; 0x03
    2f30:	20 ff       	sbrs	r18, 0
    2f32:	12 c0       	rjmp	.+36     	; 0x2f58 <ungetc+0x2c>
    2f34:	26 fd       	sbrc	r18, 6
    2f36:	10 c0       	rjmp	.+32     	; 0x2f58 <ungetc+0x2c>
    2f38:	8f 3f       	cpi	r24, 0xFF	; 255
    2f3a:	3f ef       	ldi	r19, 0xFF	; 255
    2f3c:	93 07       	cpc	r25, r19
    2f3e:	61 f0       	breq	.+24     	; 0x2f58 <ungetc+0x2c>
    2f40:	82 83       	std	Z+2, r24	; 0x02
    2f42:	2f 7d       	andi	r18, 0xDF	; 223
    2f44:	20 64       	ori	r18, 0x40	; 64
    2f46:	23 83       	std	Z+3, r18	; 0x03
    2f48:	26 81       	ldd	r18, Z+6	; 0x06
    2f4a:	37 81       	ldd	r19, Z+7	; 0x07
    2f4c:	21 50       	subi	r18, 0x01	; 1
    2f4e:	31 09       	sbc	r19, r1
    2f50:	26 83       	std	Z+6, r18	; 0x06
    2f52:	37 83       	std	Z+7, r19	; 0x07
    2f54:	99 27       	eor	r25, r25
    2f56:	08 95       	ret
    2f58:	8f ef       	ldi	r24, 0xFF	; 255
    2f5a:	9f ef       	ldi	r25, 0xFF	; 255
    2f5c:	08 95       	ret

00002f5e <__ctype_isfalse>:
    2f5e:	99 27       	eor	r25, r25
    2f60:	88 27       	eor	r24, r24

00002f62 <__ctype_istrue>:
    2f62:	08 95       	ret

00002f64 <_exit>:
    2f64:	f8 94       	cli

00002f66 <__stop_program>:
    2f66:	ff cf       	rjmp	.-2      	; 0x2f66 <__stop_program>
