
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00802000  00002fce  00003062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004289  00802126  00802126  00003188  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000904b  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dca  00000000  00000000  0000c73f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003764  00000000  00000000  00010509  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d04  00000000  00000000  00013c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039d1  00000000  00000000  00014974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b4f  00000000  00000000  00018345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  0001ce94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__ctors_end>
       4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
       8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
       c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      10:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      14:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      18:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      20:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      24:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      28:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      2c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      30:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      34:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      38:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__vector_14>
      3c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      40:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      44:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      48:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      4c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      50:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_20>
      54:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      58:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      5c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      60:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      64:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      68:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      6c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      70:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      74:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      78:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      7c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      80:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      84:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      88:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      8c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      90:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      94:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      98:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      9c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      ac:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b8:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_46>
      bc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      cc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      dc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      ec:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      fc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     100:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     104:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     108:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     10c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     110:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     114:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     118:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     11c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     120:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     124:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     128:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     12c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     130:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     134:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     138:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     13c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     140:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     144:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     148:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     14c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     150:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     154:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     158:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     15c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     160:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     164:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     168:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     16c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     170:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     174:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     178:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     17c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     180:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     184:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     188:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     18c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     190:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     194:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     198:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     19c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1ac:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1bc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1cc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1dc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1ec:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <prvIdleTask>
     200:	0c 94 b1 02 	jmp	0x562	; 0x562 <stdio_putchar>
     204:	0c 94 bd 02 	jmp	0x57a	; 0x57a <stdio_getchar>
     208:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <WorkerLooplicht>
     20c:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <WorkerTerminal>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__c.2474>:
     312:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000031e <__ctors_end>:
     31e:	11 24       	eor	r1, r1
     320:	1f be       	out	0x3f, r1	; 63
     322:	cf ef       	ldi	r28, 0xFF	; 255
     324:	cd bf       	out	0x3d, r28	; 61
     326:	df e9       	ldi	r29, 0x9F	; 159
     328:	de bf       	out	0x3e, r29	; 62
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	0c bf       	out	0x3c, r16	; 60

0000032e <__do_copy_data>:
     32e:	11 e2       	ldi	r17, 0x21	; 33
     330:	a0 e0       	ldi	r26, 0x00	; 0
     332:	b0 e2       	ldi	r27, 0x20	; 32
     334:	ee ec       	ldi	r30, 0xCE	; 206
     336:	ff e2       	ldi	r31, 0x2F	; 47
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	0b bf       	out	0x3b, r16	; 59
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__do_copy_data+0x14>
     33e:	07 90       	elpm	r0, Z+
     340:	0d 92       	st	X+, r0
     342:	a6 32       	cpi	r26, 0x26	; 38
     344:	b1 07       	cpc	r27, r17
     346:	d9 f7       	brne	.-10     	; 0x33e <__do_copy_data+0x10>

00000348 <__do_clear_bss>:
     348:	23 e6       	ldi	r18, 0x63	; 99
     34a:	a6 e2       	ldi	r26, 0x26	; 38
     34c:	b1 e2       	ldi	r27, 0x21	; 33
     34e:	01 c0       	rjmp	.+2      	; 0x352 <.do_clear_bss_start>

00000350 <.do_clear_bss_loop>:
     350:	1d 92       	st	X+, r1

00000352 <.do_clear_bss_start>:
     352:	af 3a       	cpi	r26, 0xAF	; 175
     354:	b2 07       	cpc	r27, r18
     356:	e1 f7       	brne	.-8      	; 0x350 <.do_clear_bss_loop>
     358:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <main>
     35c:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <_exit>

00000360 <__bad_interrupt>:
     360:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000364 <DriverAdcInit>:
#include "DriverAdc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void DriverAdcInit(void)
{
     364:	08 95       	ret

00000366 <DriverCursorstickInit>:
#include "DriverCursorstick.h"

void DriverCursorstickInit(void)
{
     366:	08 95       	ret

00000368 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     368:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     36a:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     36e:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     372:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     376:	90 81       	ld	r25, Z
     378:	99 23       	and	r25, r25
     37a:	69 f0       	breq	.+26     	; 0x396 <DbgPrint+0x2e>
     37c:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     37e:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     380:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     384:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     388:	96 ff       	sbrs	r25, 6
     38a:	fc cf       	rjmp	.-8      	; 0x384 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     38c:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     390:	91 91       	ld	r25, Z+
     392:	91 11       	cpse	r25, r1
     394:	f5 cf       	rjmp	.-22     	; 0x380 <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     396:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     39a:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     39e:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     3a2:	08 95       	ret

000003a4 <DriverLedInit>:
#include "DriverLed.h"

void DriverLedInit(void)
{
	PORTB.DIRSET=0b00000111; // PB0-2 als uitgang zetten
     3a4:	e0 e2       	ldi	r30, 0x20	; 32
     3a6:	f6 e0       	ldi	r31, 0x06	; 6
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	81 83       	std	Z+1, r24	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTB.PIN0CTRL=0b01000000;
     3ac:	80 e4       	ldi	r24, 0x40	; 64
     3ae:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL=0b01000000;
     3b0:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL=0b01000000;
     3b2:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTA.DIRSET=0b10000000; // PA7 als uitgang zetten
     3b4:	e0 e0       	ldi	r30, 0x00	; 0
     3b6:	f6 e0       	ldi	r31, 0x06	; 6
     3b8:	90 e8       	ldi	r25, 0x80	; 128
     3ba:	91 83       	std	Z+1, r25	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTA.PIN7CTRL=0b01000000;
     3bc:	87 8b       	std	Z+23, r24	; 0x17
     3be:	08 95       	ret

000003c0 <DriverLedWrite>:
}

void DriverLedWrite(uint8_t LedData)
{
	PORTB.OUT = LedData & 0b00000111;	// Alleen de de waarden van PB0-2 overhouden
     3c0:	98 2f       	mov	r25, r24
     3c2:	97 70       	andi	r25, 0x07	; 7
     3c4:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	LedData = LedData<<4; // 4 nullen langs rechts inschuiven om de 4de bit op plaats 8 te krijgen voor PA7
	PORTA.OUT = LedData & 0b10000000; // Alleen waarde van PA7 overhouden
     3c8:	82 95       	swap	r24
     3ca:	80 78       	andi	r24, 0x80	; 128
     3cc:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
     3d0:	08 95       	ret

000003d2 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     3d2:	8b ec       	ldi	r24, 0xCB	; 203
     3d4:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     3de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3e2:	83 ff       	sbrs	r24, 3
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3e6:	82 ec       	ldi	r24, 0xC2	; 194
     3e8:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3ec:	88 e1       	ldi	r24, 0x18	; 24
     3ee:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3f2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3f6:	84 ff       	sbrs	r24, 4
     3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3fa:	88 ed       	ldi	r24, 0xD8	; 216
     3fc:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret

00000408 <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     408:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     40c:	e0 e8       	ldi	r30, 0x80	; 128
     40e:	f6 e0       	ldi	r31, 0x06	; 6
     410:	88 e1       	ldi	r24, 0x18	; 24
     412:	80 8b       	std	Z+16, r24	; 0x10
     414:	81 8b       	std	Z+17, r24	; 0x11
     416:	e0 ea       	ldi	r30, 0xA0	; 160
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	88 e7       	ldi	r24, 0x78	; 120
     41c:	81 83       	std	Z+1, r24	; 0x01
     41e:	83 e2       	ldi	r24, 0x23	; 35
     420:	85 83       	std	Z+5, r24	; 0x05
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	84 83       	std	Z+4, r24	; 0x04
     426:	08 95       	ret

00000428 <TWIMWriteHandler>:
     428:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <Twim_bytesToWrite>
     42c:	20 91 29 21 	lds	r18, 0x2129	; 0x802129 <Twim_bytesToRead>
     430:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     434:	84 fd       	sbrc	r24, 4
     436:	08 c0       	rjmp	.+16     	; 0x448 <TWIMWriteHandler+0x20>
     438:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <Twim_bytesWritten>
     43c:	89 17       	cp	r24, r25
     43e:	50 f0       	brcs	.+20     	; 0x454 <TWIMWriteHandler+0x2c>
     440:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <Twim_bytesRead>
     444:	82 17       	cp	r24, r18
     446:	b8 f0       	brcs	.+46     	; 0x476 <TWIMWriteHandler+0x4e>
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     44e:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     452:	08 95       	ret
     454:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <Twim_bytesWritten>
     458:	e0 91 2d 21 	lds	r30, 0x212D	; 0x80212d <Twim_writeData>
     45c:	f0 91 2e 21 	lds	r31, 0x212E	; 0x80212e <Twim_writeData+0x1>
     460:	e8 0f       	add	r30, r24
     462:	f1 1d       	adc	r31, r1
     464:	80 81       	ld	r24, Z
     466:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     46a:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <Twim_bytesWritten>
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <Twim_bytesWritten>
     474:	08 95       	ret
     476:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <Twim_address>
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     480:	08 95       	ret

00000482 <TWIMReadHandler>:
     482:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <Twim_bytesRead>
     486:	80 32       	cpi	r24, 0x20	; 32
     488:	e0 f4       	brcc	.+56     	; 0x4c2 <TWIMReadHandler+0x40>
     48a:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     48e:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <Twim_bytesRead>
     492:	e0 91 2b 21 	lds	r30, 0x212B	; 0x80212b <Twim_readData>
     496:	f0 91 2c 21 	lds	r31, 0x212C	; 0x80212c <Twim_readData+0x1>
     49a:	e9 0f       	add	r30, r25
     49c:	f1 1d       	adc	r31, r1
     49e:	80 83       	st	Z, r24
     4a0:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <Twim_bytesRead>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <Twim_bytesRead>
     4aa:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <Twim_bytesToRead>
     4ae:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <Twim_bytesRead>
     4b2:	89 17       	cp	r24, r25
     4b4:	88 f0       	brcs	.+34     	; 0x4d8 <TWIMReadHandler+0x56>
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4bc:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     4c0:	08 95       	ret
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4c8:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     4cc:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <Twim_bytesToRead>
     4d0:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <Twim_bytesRead>
     4d4:	89 17       	cp	r24, r25
     4d6:	78 f7       	brcc	.-34     	; 0x4b6 <TWIMReadHandler+0x34>
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4de:	08 95       	ret

000004e0 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	0b b6       	in	r0, 0x3b	; 59
     4ec:	0f 92       	push	r0
     4ee:	2f 93       	push	r18
     4f0:	3f 93       	push	r19
     4f2:	4f 93       	push	r20
     4f4:	5f 93       	push	r21
     4f6:	6f 93       	push	r22
     4f8:	7f 93       	push	r23
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
     4fe:	af 93       	push	r26
     500:	bf 93       	push	r27
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     506:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     50a:	98 2f       	mov	r25, r24
     50c:	9c 70       	andi	r25, 0x0C	; 12
     50e:	39 f4       	brne	.+14     	; 0x51e <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     510:	86 fd       	sbrc	r24, 6
     512:	21 c0       	rjmp	.+66     	; 0x556 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     514:	87 fd       	sbrc	r24, 7
     516:	22 c0       	rjmp	.+68     	; 0x55c <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     518:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     51c:	07 c0       	rjmp	.+14     	; 0x52c <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     51e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     522:	88 60       	ori	r24, 0x08	; 8
     524:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     528:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     52c:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
	{	
	}
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0b be       	out	0x3b, r0	; 59
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     556:	0e 94 14 02 	call	0x428	; 0x428 <TWIMWriteHandler>
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     55c:	0e 94 41 02 	call	0x482	; 0x482 <TWIMReadHandler>
     560:	e5 cf       	rjmp	.-54     	; 0x52c <__vector_46+0x4c>

00000562 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     562:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     566:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     56a:	86 ff       	sbrs	r24, 6
     56c:	fc cf       	rjmp	.-8      	; 0x566 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret

0000057a <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     57a:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     57e:	87 ff       	sbrs	r24, 7
     580:	fc cf       	rjmp	.-8      	; 0x57a <stdio_getchar>
	return USART.DATA;
     582:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	08 95       	ret

0000058a <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     58a:	e0 e8       	ldi	r30, 0x80	; 128
     58c:	f6 e0       	ldi	r31, 0x06	; 6
     58e:	88 e0       	ldi	r24, 0x08	; 8
     590:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     596:	e0 ea       	ldi	r30, 0xA0	; 160
     598:	fa e0       	ldi	r31, 0x0A	; 10
     59a:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     59c:	88 e1       	ldi	r24, 0x18	; 24
     59e:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     5a4:	85 ee       	ldi	r24, 0xE5	; 229
     5a6:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     5a8:	8c eb       	ldi	r24, 0xBC	; 188
     5aa:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     5ac:	e9 ea       	ldi	r30, 0xA9	; 169
     5ae:	f3 e6       	ldi	r31, 0x63	; 99
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e2       	ldi	r25, 0x20	; 32
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     5b8:	80 83       	st	Z, r24
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	08 95       	ret

000005be <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     5c8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     5cc:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <xHeapHasBeenInitialised.4117>
     5d0:	81 11       	cpse	r24, r1
     5d2:	21 c0       	rjmp	.+66     	; 0x616 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5d4:	8a e3       	ldi	r24, 0x3A	; 58
     5d6:	91 e2       	ldi	r25, 0x21	; 33
     5d8:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <xStart>
     5dc:	90 93 36 21 	sts	0x2136, r25	; 0x802136 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     5e0:	10 92 37 21 	sts	0x2137, r1	; 0x802137 <xStart+0x2>
     5e4:	10 92 38 21 	sts	0x2138, r1	; 0x802138 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	9f e3       	ldi	r25, 0x3F	; 63
     5ec:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <xEnd+0x2>
     5f0:	90 93 34 21 	sts	0x2134, r25	; 0x802134 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     5f4:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <xEnd>
     5f8:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     5fc:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <ucHeap+0x3>
     600:	90 93 3d 21 	sts	0x213D, r25	; 0x80213d <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     604:	81 e3       	ldi	r24, 0x31	; 49
     606:	91 e2       	ldi	r25, 0x21	; 33
     608:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <ucHeap+0x1>
     60c:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xHeapHasBeenInitialised.4117>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     616:	20 97       	sbiw	r28, 0x00	; 0
     618:	09 f4       	brne	.+2      	; 0x61c <pvPortMalloc+0x5e>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     61c:	ae 01       	movw	r20, r28
     61e:	4c 5f       	subi	r20, 0xFC	; 252
     620:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     622:	23 96       	adiw	r28, 0x03	; 3
     624:	ce 3f       	cpi	r28, 0xFE	; 254
     626:	df 43       	sbci	r29, 0x3F	; 63
     628:	08 f0       	brcs	.+2      	; 0x62c <pvPortMalloc+0x6e>
     62a:	5c c0       	rjmp	.+184    	; 0x6e4 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     62c:	e0 91 35 21 	lds	r30, 0x2135	; 0x802135 <xStart>
     630:	f0 91 36 21 	lds	r31, 0x2136	; 0x802136 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     634:	a5 e3       	ldi	r26, 0x35	; 53
     636:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     638:	06 c0       	rjmp	.+12     	; 0x646 <pvPortMalloc+0x88>
     63a:	80 81       	ld	r24, Z
     63c:	91 81       	ldd	r25, Z+1	; 0x01
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	39 f0       	breq	.+14     	; 0x650 <pvPortMalloc+0x92>
     642:	df 01       	movw	r26, r30
     644:	fc 01       	movw	r30, r24
     646:	22 81       	ldd	r18, Z+2	; 0x02
     648:	33 81       	ldd	r19, Z+3	; 0x03
     64a:	24 17       	cp	r18, r20
     64c:	35 07       	cpc	r19, r21
     64e:	a8 f3       	brcs	.-22     	; 0x63a <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     650:	c1 e2       	ldi	r28, 0x21	; 33
     652:	e1 33       	cpi	r30, 0x31	; 49
     654:	fc 07       	cpc	r31, r28
     656:	09 f4       	brne	.+2      	; 0x65a <pvPortMalloc+0x9c>
     658:	45 c0       	rjmp	.+138    	; 0x6e4 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     65a:	cd 91       	ld	r28, X+
     65c:	dc 91       	ld	r29, X
     65e:	11 97       	sbiw	r26, 0x01	; 1
     660:	8e 01       	movw	r16, r28
     662:	0c 5f       	subi	r16, 0xFC	; 252
     664:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	8d 93       	st	X+, r24
     66c:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     66e:	c9 01       	movw	r24, r18
     670:	84 1b       	sub	r24, r20
     672:	95 0b       	sbc	r25, r21
     674:	89 30       	cpi	r24, 0x09	; 9
     676:	91 05       	cpc	r25, r1
     678:	00 f1       	brcs	.+64     	; 0x6ba <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     67a:	bf 01       	movw	r22, r30
     67c:	64 0f       	add	r22, r20
     67e:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     680:	db 01       	movw	r26, r22
     682:	12 96       	adiw	r26, 0x02	; 2
     684:	8d 93       	st	X+, r24
     686:	9c 93       	st	X, r25
     688:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     68a:	42 83       	std	Z+2, r20	; 0x02
     68c:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     68e:	12 96       	adiw	r26, 0x02	; 2
     690:	2d 91       	ld	r18, X+
     692:	3c 91       	ld	r19, X
     694:	13 97       	sbiw	r26, 0x03	; 3
     696:	a5 e3       	ldi	r26, 0x35	; 53
     698:	b1 e2       	ldi	r27, 0x21	; 33
     69a:	01 c0       	rjmp	.+2      	; 0x69e <pvPortMalloc+0xe0>
     69c:	df 01       	movw	r26, r30
     69e:	ed 91       	ld	r30, X+
     6a0:	fc 91       	ld	r31, X
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	93 81       	ldd	r25, Z+3	; 0x03
     6a8:	82 17       	cp	r24, r18
     6aa:	93 07       	cpc	r25, r19
     6ac:	b8 f3       	brcs	.-18     	; 0x69c <pvPortMalloc+0xde>
     6ae:	eb 01       	movw	r28, r22
     6b0:	e8 83       	st	Y, r30
     6b2:	f9 83       	std	Y+1, r31	; 0x01
     6b4:	6d 93       	st	X+, r22
     6b6:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     6b8:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     6ba:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6be:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6c2:	82 1b       	sub	r24, r18
     6c4:	93 0b       	sbc	r25, r19
     6c6:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     6ca:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6ce:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     6d2:	01 15       	cp	r16, r1
     6d4:	11 05       	cpc	r17, r1
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     6d8:	c8 01       	movw	r24, r16
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6e4:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     6e8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vApplicationMallocFailedHook>
     6ec:	00 e0       	ldi	r16, 0x00	; 0
     6ee:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     6f0:	c8 01       	movw	r24, r16
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	08 95       	ret

000006fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	21 f1       	breq	.+72     	; 0x74c <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     704:	ec 01       	movw	r28, r24
     706:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     708:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     70c:	4a 81       	ldd	r20, Y+2	; 0x02
     70e:	5b 81       	ldd	r21, Y+3	; 0x03
     710:	a5 e3       	ldi	r26, 0x35	; 53
     712:	b1 e2       	ldi	r27, 0x21	; 33
     714:	01 c0       	rjmp	.+2      	; 0x718 <vPortFree+0x1c>
     716:	df 01       	movw	r26, r30
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	22 81       	ldd	r18, Z+2	; 0x02
     720:	33 81       	ldd	r19, Z+3	; 0x03
     722:	24 17       	cp	r18, r20
     724:	35 07       	cpc	r19, r21
     726:	b8 f3       	brcs	.-18     	; 0x716 <vPortFree+0x1a>
     728:	e8 83       	st	Y, r30
     72a:	f9 83       	std	Y+1, r31	; 0x01
     72c:	cd 93       	st	X+, r28
     72e:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     730:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     734:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     738:	48 0f       	add	r20, r24
     73a:	59 1f       	adc	r21, r25
     73c:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     740:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     748:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <xTaskResumeAll>
	}
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     752:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     756:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     75a:	08 95       	ret

0000075c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     75c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     75e:	03 96       	adiw	r24, 0x03	; 3
     760:	81 83       	std	Z+1, r24	; 0x01
     762:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	3f ef       	ldi	r19, 0xFF	; 255
     768:	23 83       	std	Z+3, r18	; 0x03
     76a:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     76c:	85 83       	std	Z+5, r24	; 0x05
     76e:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     770:	87 83       	std	Z+7, r24	; 0x07
     772:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     774:	10 82       	st	Z, r1
     776:	08 95       	ret

00000778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     778:	fc 01       	movw	r30, r24
     77a:	10 86       	std	Z+8, r1	; 0x08
     77c:	11 86       	std	Z+9, r1	; 0x09
     77e:	08 95       	ret

00000780 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	9c 01       	movw	r18, r24
     786:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     788:	dc 01       	movw	r26, r24
     78a:	11 96       	adiw	r26, 0x01	; 1
     78c:	cd 91       	ld	r28, X+
     78e:	dc 91       	ld	r29, X
     790:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     792:	c2 83       	std	Z+2, r28	; 0x02
     794:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	9d 81       	ldd	r25, Y+5	; 0x05
     79a:	84 83       	std	Z+4, r24	; 0x04
     79c:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	9d 81       	ldd	r25, Y+5	; 0x05
     7a2:	dc 01       	movw	r26, r24
     7a4:	12 96       	adiw	r26, 0x02	; 2
     7a6:	6d 93       	st	X+, r22
     7a8:	7c 93       	st	X, r23
     7aa:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     7ac:	6c 83       	std	Y+4, r22	; 0x04
     7ae:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     7b0:	20 87       	std	Z+8, r18	; 0x08
     7b2:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     7b4:	f9 01       	movw	r30, r18
     7b6:	80 81       	ld	r24, Z
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	80 83       	st	Z, r24
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7c8:	48 81       	ld	r20, Y
     7ca:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     7cc:	4f 3f       	cpi	r20, 0xFF	; 255
     7ce:	2f ef       	ldi	r18, 0xFF	; 255
     7d0:	52 07       	cpc	r21, r18
     7d2:	01 f1       	breq	.+64     	; 0x814 <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7d4:	dc 01       	movw	r26, r24
     7d6:	13 96       	adiw	r26, 0x03	; 3
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <vListInsert+0x1a>
     7da:	df 01       	movw	r26, r30
     7dc:	12 96       	adiw	r26, 0x02	; 2
     7de:	ed 91       	ld	r30, X+
     7e0:	fc 91       	ld	r31, X
     7e2:	13 97       	sbiw	r26, 0x03	; 3
     7e4:	20 81       	ld	r18, Z
     7e6:	31 81       	ldd	r19, Z+1	; 0x01
     7e8:	42 17       	cp	r20, r18
     7ea:	53 07       	cpc	r21, r19
     7ec:	b0 f7       	brcc	.-20     	; 0x7da <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     7ee:	ea 83       	std	Y+2, r30	; 0x02
     7f0:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7f2:	c4 83       	std	Z+4, r28	; 0x04
     7f4:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     7f6:	ac 83       	std	Y+4, r26	; 0x04
     7f8:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     7fa:	12 96       	adiw	r26, 0x02	; 2
     7fc:	cd 93       	st	X+, r28
     7fe:	dc 93       	st	X, r29
     800:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     802:	88 87       	std	Y+8, r24	; 0x08
     804:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     806:	fc 01       	movw	r30, r24
     808:	20 81       	ld	r18, Z
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	20 83       	st	Z, r18
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     814:	fc 01       	movw	r30, r24
     816:	a7 81       	ldd	r26, Z+7	; 0x07
     818:	b0 85       	ldd	r27, Z+8	; 0x08
     81a:	12 96       	adiw	r26, 0x02	; 2
     81c:	ed 91       	ld	r30, X+
     81e:	fc 91       	ld	r31, X
     820:	13 97       	sbiw	r26, 0x03	; 3
     822:	e5 cf       	rjmp	.-54     	; 0x7ee <vListInsert+0x2c>

00000824 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     82a:	a0 85       	ldd	r26, Z+8	; 0x08
     82c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     82e:	22 81       	ldd	r18, Z+2	; 0x02
     830:	33 81       	ldd	r19, Z+3	; 0x03
     832:	84 81       	ldd	r24, Z+4	; 0x04
     834:	95 81       	ldd	r25, Z+5	; 0x05
     836:	e9 01       	movw	r28, r18
     838:	8c 83       	std	Y+4, r24	; 0x04
     83a:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     83c:	84 81       	ldd	r24, Z+4	; 0x04
     83e:	95 81       	ldd	r25, Z+5	; 0x05
     840:	ec 01       	movw	r28, r24
     842:	2a 83       	std	Y+2, r18	; 0x02
     844:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     846:	11 96       	adiw	r26, 0x01	; 1
     848:	2d 91       	ld	r18, X+
     84a:	3c 91       	ld	r19, X
     84c:	12 97       	sbiw	r26, 0x02	; 2
     84e:	e2 17       	cp	r30, r18
     850:	f3 07       	cpc	r31, r19
     852:	49 f0       	breq	.+18     	; 0x866 <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     854:	10 86       	std	Z+8, r1	; 0x08
     856:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     858:	8c 91       	ld	r24, X
     85a:	81 50       	subi	r24, 0x01	; 1
     85c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     85e:	8c 91       	ld	r24, X
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	8d 93       	st	X+, r24
     86a:	9c 93       	st	X, r25
     86c:	12 97       	sbiw	r26, 0x02	; 2
     86e:	f2 cf       	rjmp	.-28     	; 0x854 <uxListRemove+0x30>

00000870 <pxPortInitialiseStack>:
void vPortYieldISR( void )
{
	portSAVE_CONTEXT();
	vTaskSwitchContext();
	portRESTORE_CONTEXT();
	asm volatile ( "reti" );
     870:	31 e1       	ldi	r19, 0x11	; 17
     872:	fc 01       	movw	r30, r24
     874:	30 83       	st	Z, r19
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	22 e2       	ldi	r18, 0x22	; 34
     87a:	20 83       	st	Z, r18
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	a3 e3       	ldi	r26, 0x33	; 51
     880:	a0 83       	st	Z, r26
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	60 83       	st	Z, r22
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	70 83       	st	Z, r23
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	10 82       	st	Z, r1
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	10 82       	st	Z, r1
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	60 e8       	ldi	r22, 0x80	; 128
     896:	60 83       	st	Z, r22
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	62 e0       	ldi	r22, 0x02	; 2
     8a0:	60 83       	st	Z, r22
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	60 83       	st	Z, r22
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	60 83       	st	Z, r22
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	65 e0       	ldi	r22, 0x05	; 5
     8b2:	60 83       	st	Z, r22
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	66 e0       	ldi	r22, 0x06	; 6
     8b8:	60 83       	st	Z, r22
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	67 e0       	ldi	r22, 0x07	; 7
     8be:	60 83       	st	Z, r22
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	68 e0       	ldi	r22, 0x08	; 8
     8c4:	60 83       	st	Z, r22
     8c6:	31 97       	sbiw	r30, 0x01	; 1
     8c8:	69 e0       	ldi	r22, 0x09	; 9
     8ca:	60 83       	st	Z, r22
     8cc:	31 97       	sbiw	r30, 0x01	; 1
     8ce:	60 e1       	ldi	r22, 0x10	; 16
     8d0:	60 83       	st	Z, r22
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	30 83       	st	Z, r19
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	32 e1       	ldi	r19, 0x12	; 18
     8da:	30 83       	st	Z, r19
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	33 e1       	ldi	r19, 0x13	; 19
     8e0:	30 83       	st	Z, r19
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	34 e1       	ldi	r19, 0x14	; 20
     8e6:	30 83       	st	Z, r19
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	35 e1       	ldi	r19, 0x15	; 21
     8ec:	30 83       	st	Z, r19
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	36 e1       	ldi	r19, 0x16	; 22
     8f2:	30 83       	st	Z, r19
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	37 e1       	ldi	r19, 0x17	; 23
     8f8:	30 83       	st	Z, r19
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	38 e1       	ldi	r19, 0x18	; 24
     8fe:	30 83       	st	Z, r19
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	39 e1       	ldi	r19, 0x19	; 25
     904:	30 83       	st	Z, r19
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	30 e2       	ldi	r19, 0x20	; 32
     90a:	30 83       	st	Z, r19
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	31 e2       	ldi	r19, 0x21	; 33
     910:	30 83       	st	Z, r19
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	20 83       	st	Z, r18
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	23 e2       	ldi	r18, 0x23	; 35
     91a:	20 83       	st	Z, r18
     91c:	31 97       	sbiw	r30, 0x01	; 1
     91e:	40 83       	st	Z, r20
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	50 83       	st	Z, r21
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	26 e2       	ldi	r18, 0x26	; 38
     928:	20 83       	st	Z, r18
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	27 e2       	ldi	r18, 0x27	; 39
     92e:	20 83       	st	Z, r18
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	28 e2       	ldi	r18, 0x28	; 40
     934:	20 83       	st	Z, r18
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	29 e2       	ldi	r18, 0x29	; 41
     93a:	20 83       	st	Z, r18
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	20 e3       	ldi	r18, 0x30	; 48
     940:	20 83       	st	Z, r18
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	21 e3       	ldi	r18, 0x31	; 49
     946:	20 83       	st	Z, r18
     948:	87 97       	sbiw	r24, 0x27	; 39
     94a:	08 95       	ret

0000094c <xPortStartScheduler>:
     94c:	e0 e0       	ldi	r30, 0x00	; 0
     94e:	f8 e0       	ldi	r31, 0x08	; 8
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 83       	st	Z, r24
     954:	86 83       	std	Z+6, r24	; 0x06
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	9d e7       	ldi	r25, 0x7D	; 125
     95a:	86 a3       	std	Z+38, r24	; 0x26
     95c:	97 a3       	std	Z+39, r25	; 0x27
     95e:	a0 91 a1 61 	lds	r26, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     962:	b0 91 a2 61 	lds	r27, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     966:	cd 91       	ld	r28, X+
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	dd 91       	ld	r29, X+
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	bf 91       	pop	r27
     978:	af 91       	pop	r26
     97a:	9f 91       	pop	r25
     97c:	8f 91       	pop	r24
     97e:	7f 91       	pop	r23
     980:	6f 91       	pop	r22
     982:	5f 91       	pop	r21
     984:	4f 91       	pop	r20
     986:	3f 91       	pop	r19
     988:	2f 91       	pop	r18
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	bf 90       	pop	r11
     998:	af 90       	pop	r10
     99a:	9f 90       	pop	r9
     99c:	8f 90       	pop	r8
     99e:	7f 90       	pop	r7
     9a0:	6f 90       	pop	r6
     9a2:	5f 90       	pop	r5
     9a4:	4f 90       	pop	r4
     9a6:	3f 90       	pop	r3
     9a8:	2f 90       	pop	r2
     9aa:	1f 90       	pop	r1
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	08 95       	ret
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret

000009b8 <vPortYield>:
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	0f 92       	push	r0
     9c0:	1f 92       	push	r1
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 92       	push	r2
     9c6:	3f 92       	push	r3
     9c8:	4f 92       	push	r4
     9ca:	5f 92       	push	r5
     9cc:	6f 92       	push	r6
     9ce:	7f 92       	push	r7
     9d0:	8f 92       	push	r8
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
     a00:	a0 91 a1 61 	lds	r26, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     a04:	b0 91 a2 61 	lds	r27, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     a08:	0d b6       	in	r0, 0x3d	; 61
     a0a:	0d 92       	st	X+, r0
     a0c:	0e b6       	in	r0, 0x3e	; 62
     a0e:	0d 92       	st	X+, r0
     a10:	0e 94 b1 0a 	call	0x1562	; 0x1562 <vTaskSwitchContext>
     a14:	a0 91 a1 61 	lds	r26, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     a18:	b0 91 a2 61 	lds	r27, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     a1c:	cd 91       	ld	r28, X+
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	dd 91       	ld	r29, X+
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	bf 91       	pop	r27
     a2e:	af 91       	pop	r26
     a30:	9f 91       	pop	r25
     a32:	8f 91       	pop	r24
     a34:	7f 91       	pop	r23
     a36:	6f 91       	pop	r22
     a38:	5f 91       	pop	r21
     a3a:	4f 91       	pop	r20
     a3c:	3f 91       	pop	r19
     a3e:	2f 91       	pop	r18
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	7f 90       	pop	r7
     a56:	6f 90       	pop	r6
     a58:	5f 90       	pop	r5
     a5a:	4f 90       	pop	r4
     a5c:	3f 90       	pop	r3
     a5e:	2f 90       	pop	r2
     a60:	1f 90       	pop	r1
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	08 95       	ret

00000a6a <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	0f 92       	push	r0
     a72:	1f 92       	push	r1
     a74:	11 24       	eor	r1, r1
     a76:	2f 92       	push	r2
     a78:	3f 92       	push	r3
     a7a:	4f 92       	push	r4
     a7c:	5f 92       	push	r5
     a7e:	6f 92       	push	r6
     a80:	7f 92       	push	r7
     a82:	8f 92       	push	r8
     a84:	9f 92       	push	r9
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	a0 91 a1 61 	lds	r26, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     ab6:	b0 91 a2 61 	lds	r27, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     aba:	0d b6       	in	r0, 0x3d	; 61
     abc:	0d 92       	st	X+, r0
     abe:	0e b6       	in	r0, 0x3e	; 62
     ac0:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     ac2:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     ac6:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     aca:	80 91 a3 63 	lds	r24, 0x63A3	; 0x8063a3 <StatsTimer>
     ace:	90 91 a4 63 	lds	r25, 0x63A4	; 0x8063a4 <StatsTimer+0x1>
     ad2:	a0 91 a5 63 	lds	r26, 0x63A5	; 0x8063a5 <StatsTimer+0x2>
     ad6:	b0 91 a6 63 	lds	r27, 0x63A6	; 0x8063a6 <StatsTimer+0x3>
     ada:	82 0f       	add	r24, r18
     adc:	93 1f       	adc	r25, r19
     ade:	a1 1d       	adc	r26, r1
     ae0:	b1 1d       	adc	r27, r1
     ae2:	80 93 a3 63 	sts	0x63A3, r24	; 0x8063a3 <StatsTimer>
     ae6:	90 93 a4 63 	sts	0x63A4, r25	; 0x8063a4 <StatsTimer+0x1>
     aea:	a0 93 a5 63 	sts	0x63A5, r26	; 0x8063a5 <StatsTimer+0x2>
     aee:	b0 93 a6 63 	sts	0x63A6, r27	; 0x8063a6 <StatsTimer+0x3>
		xTaskIncrementTick();
     af2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <xTaskIncrementTick>
		vTaskSwitchContext();
     af6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     afa:	a0 91 a1 61 	lds	r26, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     afe:	b0 91 a2 61 	lds	r27, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     b02:	cd 91       	ld	r28, X+
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	dd 91       	ld	r29, X+
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	bf 91       	pop	r27
     b14:	af 91       	pop	r26
     b16:	9f 91       	pop	r25
     b18:	8f 91       	pop	r24
     b1a:	7f 91       	pop	r23
     b1c:	6f 91       	pop	r22
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	7f 90       	pop	r7
     b3c:	6f 90       	pop	r6
     b3e:	5f 90       	pop	r5
     b40:	4f 90       	pop	r4
     b42:	3f 90       	pop	r3
     b44:	2f 90       	pop	r2
     b46:	1f 90       	pop	r1
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0

		asm volatile ( "reti" );
     b4e:	18 95       	reti

00000b50 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     b50:	08 95       	ret

00000b52 <__vector_20>:
	//TCC1.CTRLA=0b0111; //DIV1024	
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC1_OVF_vect)
{
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
	//StatsTimer++;
}
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     b66:	20 c0       	rjmp	.+64     	; 0xba8 <prvIdleTask+0x42>
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	0f 92       	push	r0
     b6e:	e0 91 5a 61 	lds	r30, 0x615A	; 0x80615a <xTasksWaitingTermination+0x5>
     b72:	f0 91 5b 61 	lds	r31, 0x615B	; 0x80615b <xTasksWaitingTermination+0x6>
     b76:	c6 81       	ldd	r28, Z+6	; 0x06
     b78:	d7 81       	ldd	r29, Z+7	; 0x07
     b7a:	ce 01       	movw	r24, r28
     b7c:	02 96       	adiw	r24, 0x02	; 2
     b7e:	0e 94 12 04 	call	0x824	; 0x824 <uxListRemove>
     b82:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	80 93 4a 61 	sts	0x614A, r24	; 0x80614a <uxCurrentNumberOfTasks>
     b8c:	80 91 54 61 	lds	r24, 0x6154	; 0x806154 <uxDeletedTasksWaitingCleanUp>
     b90:	81 50       	subi	r24, 0x01	; 1
     b92:	80 93 54 61 	sts	0x6154, r24	; 0x806154 <uxDeletedTasksWaitingCleanUp>
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	8f 89       	ldd	r24, Y+23	; 0x17
     b9c:	98 8d       	ldd	r25, Y+24	; 0x18
     b9e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
     ba8:	80 91 54 61 	lds	r24, 0x6154	; 0x806154 <uxDeletedTasksWaitingCleanUp>
     bac:	81 11       	cpse	r24, r1
     bae:	dc cf       	rjmp	.-72     	; 0xb68 <prvIdleTask+0x2>
     bb0:	80 91 7d 61 	lds	r24, 0x617D	; 0x80617d <pxReadyTasksLists>
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	10 f0       	brcs	.+4      	; 0xbbc <prvIdleTask+0x56>
     bb8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
     bbc:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <vApplicationIdleHook>
     bc0:	f3 cf       	rjmp	.-26     	; 0xba8 <prvIdleTask+0x42>

00000bc2 <prvWriteNameToBuffer>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ec 01       	movw	r28, r24
     bc8:	0e 94 35 13 	call	0x266a	; 0x266a <strcpy>
     bcc:	fe 01       	movw	r30, r28
     bce:	01 90       	ld	r0, Z+
     bd0:	00 20       	and	r0, r0
     bd2:	e9 f7       	brne	.-6      	; 0xbce <prvWriteNameToBuffer+0xc>
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	ec 1b       	sub	r30, r28
     bd8:	fd 0b       	sbc	r31, r29
     bda:	e7 30       	cpi	r30, 0x07	; 7
     bdc:	f1 05       	cpc	r31, r1
     bde:	60 f4       	brcc	.+24     	; 0xbf8 <prvWriteNameToBuffer+0x36>
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	9e 01       	movw	r18, r28
     be6:	29 5f       	subi	r18, 0xF9	; 249
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	80 e2       	ldi	r24, 0x20	; 32
     bec:	81 93       	st	Z+, r24
     bee:	e2 17       	cp	r30, r18
     bf0:	f3 07       	cpc	r31, r19
     bf2:	e1 f7       	brne	.-8      	; 0xbec <prvWriteNameToBuffer+0x2a>
     bf4:	e7 e0       	ldi	r30, 0x07	; 7
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ce 01       	movw	r24, r28
     bfa:	8e 0f       	add	r24, r30
     bfc:	9f 1f       	adc	r25, r31
     bfe:	fc 01       	movw	r30, r24
     c00:	10 82       	st	Z, r1
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <prvResetNextTaskUnblockTime.part.0>:
     c08:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
     c0c:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
     c10:	05 80       	ldd	r0, Z+5	; 0x05
     c12:	f6 81       	ldd	r31, Z+6	; 0x06
     c14:	e0 2d       	mov	r30, r0
     c16:	06 80       	ldd	r0, Z+6	; 0x06
     c18:	f7 81       	ldd	r31, Z+7	; 0x07
     c1a:	e0 2d       	mov	r30, r0
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <xNextTaskUnblockTime>
     c24:	90 93 41 61 	sts	0x6141, r25	; 0x806141 <xNextTaskUnblockTime+0x1>
     c28:	08 95       	ret

00000c2a <prvAddCurrentTaskToDelayedList>:
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
     c36:	f6 2e       	mov	r15, r22
     c38:	00 91 48 61 	lds	r16, 0x6148	; 0x806148 <xTickCount>
     c3c:	10 91 49 61 	lds	r17, 0x6149	; 0x806149 <xTickCount+0x1>
     c40:	80 91 a1 61 	lds	r24, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     c44:	90 91 a2 61 	lds	r25, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     c48:	02 96       	adiw	r24, 0x02	; 2
     c4a:	0e 94 12 04 	call	0x824	; 0x824 <uxListRemove>
     c4e:	cf 3f       	cpi	r28, 0xFF	; 255
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	d8 07       	cpc	r29, r24
     c54:	a9 f1       	breq	.+106    	; 0xcc0 <prvAddCurrentTaskToDelayedList+0x96>
     c56:	c0 0f       	add	r28, r16
     c58:	d1 1f       	adc	r29, r17
     c5a:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     c5e:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     c62:	c2 83       	std	Z+2, r28	; 0x02
     c64:	d3 83       	std	Z+3, r29	; 0x03
     c66:	60 91 a1 61 	lds	r22, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     c6a:	70 91 a2 61 	lds	r23, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     c6e:	c0 17       	cp	r28, r16
     c70:	d1 07       	cpc	r29, r17
     c72:	c8 f0       	brcs	.+50     	; 0xca6 <prvAddCurrentTaskToDelayedList+0x7c>
     c74:	80 91 69 61 	lds	r24, 0x6169	; 0x806169 <pxDelayedTaskList>
     c78:	90 91 6a 61 	lds	r25, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
     c7c:	6e 5f       	subi	r22, 0xFE	; 254
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vListInsert>
     c84:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <xNextTaskUnblockTime>
     c88:	90 91 41 61 	lds	r25, 0x6141	; 0x806141 <xNextTaskUnblockTime+0x1>
     c8c:	c8 17       	cp	r28, r24
     c8e:	d9 07       	cpc	r29, r25
     c90:	20 f4       	brcc	.+8      	; 0xc9a <prvAddCurrentTaskToDelayedList+0x70>
     c92:	c0 93 40 61 	sts	0x6140, r28	; 0x806140 <xNextTaskUnblockTime>
     c96:	d0 93 41 61 	sts	0x6141, r29	; 0x806141 <xNextTaskUnblockTime+0x1>
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	08 95       	ret
     ca6:	80 91 67 61 	lds	r24, 0x6167	; 0x806167 <pxOverflowDelayedTaskList>
     caa:	90 91 68 61 	lds	r25, 0x6168	; 0x806168 <pxOverflowDelayedTaskList+0x1>
     cae:	6e 5f       	subi	r22, 0xFE	; 254
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <vListInsert>
     cc0:	ff 20       	and	r15, r15
     cc2:	49 f2       	breq	.-110    	; 0xc56 <prvAddCurrentTaskToDelayedList+0x2c>
     cc4:	60 91 a1 61 	lds	r22, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     cc8:	70 91 a2 61 	lds	r23, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     ccc:	6e 5f       	subi	r22, 0xFE	; 254
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	8b e4       	ldi	r24, 0x4B	; 75
     cd2:	91 e6       	ldi	r25, 0x61	; 97
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	0c 94 c0 03 	jmp	0x780	; 0x780 <vListInsertEnd>

00000ce2 <vTaskSwitchContext.part.5>:
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	10 92 44 61 	sts	0x6144, r1	; 0x806144 <xYieldPending>
     cec:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     cf0:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     cf4:	80 91 a3 63 	lds	r24, 0x63A3	; 0x8063a3 <StatsTimer>
     cf8:	90 91 a4 63 	lds	r25, 0x63A4	; 0x8063a4 <StatsTimer+0x1>
     cfc:	a0 91 a5 63 	lds	r26, 0x63A5	; 0x8063a5 <StatsTimer+0x2>
     d00:	b0 91 a6 63 	lds	r27, 0x63A6	; 0x8063a6 <StatsTimer+0x3>
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	a1 1d       	adc	r26, r1
     d0a:	b1 1d       	adc	r27, r1
     d0c:	00 91 39 61 	lds	r16, 0x6139	; 0x806139 <ulTaskSwitchedInTime>
     d10:	10 91 3a 61 	lds	r17, 0x613A	; 0x80613a <ulTaskSwitchedInTime+0x1>
     d14:	20 91 3b 61 	lds	r18, 0x613B	; 0x80613b <ulTaskSwitchedInTime+0x2>
     d18:	30 91 3c 61 	lds	r19, 0x613C	; 0x80613c <ulTaskSwitchedInTime+0x3>
     d1c:	08 17       	cp	r16, r24
     d1e:	19 07       	cpc	r17, r25
     d20:	2a 07       	cpc	r18, r26
     d22:	3b 07       	cpc	r19, r27
     d24:	a0 f4       	brcc	.+40     	; 0xd4e <vTaskSwitchContext.part.5+0x6c>
     d26:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     d2a:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     d2e:	45 a1       	ldd	r20, Z+37	; 0x25
     d30:	56 a1       	ldd	r21, Z+38	; 0x26
     d32:	67 a1       	ldd	r22, Z+39	; 0x27
     d34:	70 a5       	ldd	r23, Z+40	; 0x28
     d36:	40 1b       	sub	r20, r16
     d38:	51 0b       	sbc	r21, r17
     d3a:	62 0b       	sbc	r22, r18
     d3c:	73 0b       	sbc	r23, r19
     d3e:	48 0f       	add	r20, r24
     d40:	59 1f       	adc	r21, r25
     d42:	6a 1f       	adc	r22, r26
     d44:	7b 1f       	adc	r23, r27
     d46:	45 a3       	std	Z+37, r20	; 0x25
     d48:	56 a3       	std	Z+38, r21	; 0x26
     d4a:	67 a3       	std	Z+39, r22	; 0x27
     d4c:	70 a7       	std	Z+40, r23	; 0x28
     d4e:	80 93 39 61 	sts	0x6139, r24	; 0x806139 <ulTaskSwitchedInTime>
     d52:	90 93 3a 61 	sts	0x613A, r25	; 0x80613a <ulTaskSwitchedInTime+0x1>
     d56:	a0 93 3b 61 	sts	0x613B, r26	; 0x80613b <ulTaskSwitchedInTime+0x2>
     d5a:	b0 93 3c 61 	sts	0x613C, r27	; 0x80613c <ulTaskSwitchedInTime+0x3>
     d5e:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     d62:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     d66:	07 88       	ldd	r0, Z+23	; 0x17
     d68:	f0 8d       	ldd	r31, Z+24	; 0x18
     d6a:	e0 2d       	mov	r30, r0
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	a2 81       	ldd	r26, Z+2	; 0x02
     d72:	b3 81       	ldd	r27, Z+3	; 0x03
     d74:	85 3a       	cpi	r24, 0xA5	; 165
     d76:	95 4a       	sbci	r25, 0xA5	; 165
     d78:	a5 4a       	sbci	r26, 0xA5	; 165
     d7a:	b5 4a       	sbci	r27, 0xA5	; 165
     d7c:	09 f4       	brne	.+2      	; 0xd80 <vTaskSwitchContext.part.5+0x9e>
     d7e:	4c c0       	rjmp	.+152    	; 0xe18 <vTaskSwitchContext.part.5+0x136>
     d80:	60 91 a1 61 	lds	r22, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     d84:	70 91 a2 61 	lds	r23, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     d88:	80 91 a1 61 	lds	r24, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     d8c:	90 91 a2 61 	lds	r25, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     d90:	67 5e       	subi	r22, 0xE7	; 231
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vApplicationStackOverflowHook>
     d98:	c0 91 47 61 	lds	r28, 0x6147	; 0x806147 <uxTopReadyPriority>
     d9c:	8c 2f       	mov	r24, r28
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 01       	movw	r18, r24
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	f9 01       	movw	r30, r18
     db0:	e8 0f       	add	r30, r24
     db2:	f9 1f       	adc	r31, r25
     db4:	e3 58       	subi	r30, 0x83	; 131
     db6:	fe 49       	sbci	r31, 0x9E	; 158
     db8:	40 81       	ld	r20, Z
     dba:	41 11       	cpse	r20, r1
     dbc:	0c c0       	rjmp	.+24     	; 0xdd6 <vTaskSwitchContext.part.5+0xf4>
     dbe:	cc 23       	and	r28, r28
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <vTaskSwitchContext.part.5+0xe4>
     dc2:	c1 50       	subi	r28, 0x01	; 1
     dc4:	eb cf       	rjmp	.-42     	; 0xd9c <vTaskSwitchContext.part.5+0xba>
     dc6:	6c e8       	ldi	r22, 0x8C	; 140
     dc8:	7b e0       	ldi	r23, 0x0B	; 11
     dca:	85 e2       	ldi	r24, 0x25	; 37
     dcc:	90 e2       	ldi	r25, 0x20	; 32
     dce:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
     dd2:	c1 50       	subi	r28, 0x01	; 1
     dd4:	e3 cf       	rjmp	.-58     	; 0xd9c <vTaskSwitchContext.part.5+0xba>
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	dc 01       	movw	r26, r24
     ddc:	a3 58       	subi	r26, 0x83	; 131
     dde:	be 49       	sbci	r27, 0x9E	; 158
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	ed 91       	ld	r30, X+
     de4:	fc 91       	ld	r31, X
     de6:	12 97       	sbiw	r26, 0x02	; 2
     de8:	02 80       	ldd	r0, Z+2	; 0x02
     dea:	f3 81       	ldd	r31, Z+3	; 0x03
     dec:	e0 2d       	mov	r30, r0
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	ed 93       	st	X+, r30
     df2:	fc 93       	st	X, r31
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	80 58       	subi	r24, 0x80	; 128
     df8:	9e 49       	sbci	r25, 0x9E	; 158
     dfa:	e8 17       	cp	r30, r24
     dfc:	f9 07       	cpc	r31, r25
     dfe:	59 f1       	breq	.+86     	; 0xe56 <vTaskSwitchContext.part.5+0x174>
     e00:	86 81       	ldd	r24, Z+6	; 0x06
     e02:	97 81       	ldd	r25, Z+7	; 0x07
     e04:	80 93 a1 61 	sts	0x61A1, r24	; 0x8061a1 <pxCurrentTCB>
     e08:	90 93 a2 61 	sts	0x61A2, r25	; 0x8061a2 <pxCurrentTCB+0x1>
     e0c:	c0 93 47 61 	sts	0x6147, r28	; 0x806147 <uxTopReadyPriority>
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret
     e18:	84 81       	ldd	r24, Z+4	; 0x04
     e1a:	95 81       	ldd	r25, Z+5	; 0x05
     e1c:	a6 81       	ldd	r26, Z+6	; 0x06
     e1e:	b7 81       	ldd	r27, Z+7	; 0x07
     e20:	85 3a       	cpi	r24, 0xA5	; 165
     e22:	95 4a       	sbci	r25, 0xA5	; 165
     e24:	a5 4a       	sbci	r26, 0xA5	; 165
     e26:	b5 4a       	sbci	r27, 0xA5	; 165
     e28:	09 f0       	breq	.+2      	; 0xe2c <vTaskSwitchContext.part.5+0x14a>
     e2a:	aa cf       	rjmp	.-172    	; 0xd80 <vTaskSwitchContext.part.5+0x9e>
     e2c:	80 85       	ldd	r24, Z+8	; 0x08
     e2e:	91 85       	ldd	r25, Z+9	; 0x09
     e30:	a2 85       	ldd	r26, Z+10	; 0x0a
     e32:	b3 85       	ldd	r27, Z+11	; 0x0b
     e34:	85 3a       	cpi	r24, 0xA5	; 165
     e36:	95 4a       	sbci	r25, 0xA5	; 165
     e38:	a5 4a       	sbci	r26, 0xA5	; 165
     e3a:	b5 4a       	sbci	r27, 0xA5	; 165
     e3c:	09 f0       	breq	.+2      	; 0xe40 <vTaskSwitchContext.part.5+0x15e>
     e3e:	a0 cf       	rjmp	.-192    	; 0xd80 <vTaskSwitchContext.part.5+0x9e>
     e40:	84 85       	ldd	r24, Z+12	; 0x0c
     e42:	95 85       	ldd	r25, Z+13	; 0x0d
     e44:	a6 85       	ldd	r26, Z+14	; 0x0e
     e46:	b7 85       	ldd	r27, Z+15	; 0x0f
     e48:	85 3a       	cpi	r24, 0xA5	; 165
     e4a:	95 4a       	sbci	r25, 0xA5	; 165
     e4c:	a5 4a       	sbci	r26, 0xA5	; 165
     e4e:	b5 4a       	sbci	r27, 0xA5	; 165
     e50:	09 f0       	breq	.+2      	; 0xe54 <vTaskSwitchContext.part.5+0x172>
     e52:	96 cf       	rjmp	.-212    	; 0xd80 <vTaskSwitchContext.part.5+0x9e>
     e54:	a1 cf       	rjmp	.-190    	; 0xd98 <vTaskSwitchContext.part.5+0xb6>
     e56:	02 80       	ldd	r0, Z+2	; 0x02
     e58:	f3 81       	ldd	r31, Z+3	; 0x03
     e5a:	e0 2d       	mov	r30, r0
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	ed 93       	st	X+, r30
     e60:	fc 93       	st	X, r31
     e62:	12 97       	sbiw	r26, 0x02	; 2
     e64:	cd cf       	rjmp	.-102    	; 0xe00 <vTaskSwitchContext.part.5+0x11e>

00000e66 <xTaskCreate>:
     e66:	5f 92       	push	r5
     e68:	6f 92       	push	r6
     e6a:	7f 92       	push	r7
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	4c 01       	movw	r8, r24
     e86:	eb 01       	movw	r28, r22
     e88:	5a 01       	movw	r10, r20
     e8a:	39 01       	movw	r6, r18
     e8c:	50 2e       	mov	r5, r16
     e8e:	ca 01       	movw	r24, r20
     e90:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
     e94:	8c 01       	movw	r16, r24
     e96:	89 2b       	or	r24, r25
     e98:	09 f4       	brne	.+2      	; 0xe9c <xTaskCreate+0x36>
     e9a:	dc c0       	rjmp	.+440    	; 0x1054 <xTaskCreate+0x1ee>
     e9c:	8e e2       	ldi	r24, 0x2E	; 46
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
     ea4:	6c 01       	movw	r12, r24
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	09 f4       	brne	.+2      	; 0xeac <xTaskCreate+0x46>
     eaa:	d1 c0       	rjmp	.+418    	; 0x104e <xTaskCreate+0x1e8>
     eac:	dc 01       	movw	r26, r24
     eae:	57 96       	adiw	r26, 0x17	; 23
     eb0:	0d 93       	st	X+, r16
     eb2:	1c 93       	st	X, r17
     eb4:	58 97       	sbiw	r26, 0x18	; 24
     eb6:	20 97       	sbiw	r28, 0x00	; 0
     eb8:	09 f4       	brne	.+2      	; 0xebc <xTaskCreate+0x56>
     eba:	ce c0       	rjmp	.+412    	; 0x1058 <xTaskCreate+0x1f2>
     ebc:	c8 01       	movw	r24, r16
     ebe:	a5 01       	movw	r20, r10
     ec0:	65 ea       	ldi	r22, 0xA5	; 165
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	0e 94 25 13 	call	0x264a	; 0x264a <memset>
     ec8:	f1 e0       	ldi	r31, 0x01	; 1
     eca:	af 1a       	sub	r10, r31
     ecc:	b1 08       	sbc	r11, r1
     ece:	d6 01       	movw	r26, r12
     ed0:	57 96       	adiw	r26, 0x17	; 23
     ed2:	8d 91       	ld	r24, X+
     ed4:	9c 91       	ld	r25, X
     ed6:	58 97       	sbiw	r26, 0x18	; 24
     ed8:	a8 0e       	add	r10, r24
     eda:	b9 1e       	adc	r11, r25
     edc:	f6 01       	movw	r30, r12
     ede:	79 96       	adiw	r30, 0x19	; 25
     ee0:	9e 01       	movw	r18, r28
     ee2:	28 5f       	subi	r18, 0xF8	; 248
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	de 01       	movw	r26, r28
     ee8:	89 91       	ld	r24, Y+
     eea:	81 93       	st	Z+, r24
     eec:	8c 91       	ld	r24, X
     eee:	88 23       	and	r24, r24
     ef0:	19 f0       	breq	.+6      	; 0xef8 <xTaskCreate+0x92>
     ef2:	c2 17       	cp	r28, r18
     ef4:	d3 07       	cpc	r29, r19
     ef6:	b9 f7       	brne	.-18     	; 0xee6 <xTaskCreate+0x80>
     ef8:	f6 01       	movw	r30, r12
     efa:	10 a2       	std	Z+32, r1	; 0x20
     efc:	05 2d       	mov	r16, r5
     efe:	04 30       	cpi	r16, 0x04	; 4
     f00:	08 f0       	brcs	.+2      	; 0xf04 <xTaskCreate+0x9e>
     f02:	9f c0       	rjmp	.+318    	; 0x1042 <xTaskCreate+0x1dc>
     f04:	d6 01       	movw	r26, r12
     f06:	56 96       	adiw	r26, 0x16	; 22
     f08:	0c 93       	st	X, r16
     f0a:	56 97       	sbiw	r26, 0x16	; 22
     f0c:	93 96       	adiw	r26, 0x23	; 35
     f0e:	0c 93       	st	X, r16
     f10:	93 97       	sbiw	r26, 0x23	; 35
     f12:	94 96       	adiw	r26, 0x24	; 36
     f14:	1c 92       	st	X, r1
     f16:	e6 01       	movw	r28, r12
     f18:	22 96       	adiw	r28, 0x02	; 2
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 bc 03 	call	0x778	; 0x778 <vListInitialiseItem>
     f20:	c6 01       	movw	r24, r12
     f22:	0c 96       	adiw	r24, 0x0c	; 12
     f24:	0e 94 bc 03 	call	0x778	; 0x778 <vListInitialiseItem>
     f28:	f6 01       	movw	r30, r12
     f2a:	c0 86       	std	Z+8, r12	; 0x08
     f2c:	d1 86       	std	Z+9, r13	; 0x09
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	80 1b       	sub	r24, r16
     f34:	91 09       	sbc	r25, r1
     f36:	84 87       	std	Z+12, r24	; 0x0c
     f38:	95 87       	std	Z+13, r25	; 0x0d
     f3a:	c2 8a       	std	Z+18, r12	; 0x12
     f3c:	d3 8a       	std	Z+19, r13	; 0x13
     f3e:	15 a2       	std	Z+37, r1	; 0x25
     f40:	16 a2       	std	Z+38, r1	; 0x26
     f42:	17 a2       	std	Z+39, r1	; 0x27
     f44:	10 a6       	std	Z+40, r1	; 0x28
     f46:	11 a6       	std	Z+41, r1	; 0x29
     f48:	12 a6       	std	Z+42, r1	; 0x2a
     f4a:	13 a6       	std	Z+43, r1	; 0x2b
     f4c:	14 a6       	std	Z+44, r1	; 0x2c
     f4e:	15 a6       	std	Z+45, r1	; 0x2d
     f50:	a3 01       	movw	r20, r6
     f52:	b4 01       	movw	r22, r8
     f54:	c5 01       	movw	r24, r10
     f56:	0e 94 38 04 	call	0x870	; 0x870 <pxPortInitialiseStack>
     f5a:	d6 01       	movw	r26, r12
     f5c:	8d 93       	st	X+, r24
     f5e:	9c 93       	st	X, r25
     f60:	e1 14       	cp	r14, r1
     f62:	f1 04       	cpc	r15, r1
     f64:	19 f0       	breq	.+6      	; 0xf6c <xTaskCreate+0x106>
     f66:	f7 01       	movw	r30, r14
     f68:	c0 82       	st	Z, r12
     f6a:	d1 82       	std	Z+1, r13	; 0x01
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	0f 92       	push	r0
     f72:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	80 93 4a 61 	sts	0x614A, r24	; 0x80614a <uxCurrentNumberOfTasks>
     f7c:	80 91 a1 61 	lds	r24, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     f80:	90 91 a2 61 	lds	r25, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     f84:	89 2b       	or	r24, r25
     f86:	99 f0       	breq	.+38     	; 0xfae <xTaskCreate+0x148>
     f88:	80 91 46 61 	lds	r24, 0x6146	; 0x806146 <xSchedulerRunning>
     f8c:	81 11       	cpse	r24, r1
     f8e:	18 c0       	rjmp	.+48     	; 0xfc0 <xTaskCreate+0x15a>
     f90:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
     f94:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
     f98:	d6 01       	movw	r26, r12
     f9a:	56 96       	adiw	r26, 0x16	; 22
     f9c:	8c 91       	ld	r24, X
     f9e:	96 89       	ldd	r25, Z+22	; 0x16
     fa0:	89 17       	cp	r24, r25
     fa2:	88 f0       	brcs	.+34     	; 0xfc6 <xTaskCreate+0x160>
     fa4:	c0 92 a1 61 	sts	0x61A1, r12	; 0x8061a1 <pxCurrentTCB>
     fa8:	d0 92 a2 61 	sts	0x61A2, r13	; 0x8061a2 <pxCurrentTCB+0x1>
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <xTaskCreate+0x160>
     fae:	c0 92 a1 61 	sts	0x61A1, r12	; 0x8061a1 <pxCurrentTCB>
     fb2:	d0 92 a2 61 	sts	0x61A2, r13	; 0x8061a2 <pxCurrentTCB+0x1>
     fb6:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <xTaskCreate+0x15a>
     fbe:	56 c0       	rjmp	.+172    	; 0x106c <xTaskCreate+0x206>
     fc0:	d6 01       	movw	r26, r12
     fc2:	56 96       	adiw	r26, 0x16	; 22
     fc4:	8c 91       	ld	r24, X
     fc6:	90 91 42 61 	lds	r25, 0x6142	; 0x806142 <uxTaskNumber>
     fca:	9f 5f       	subi	r25, 0xFF	; 255
     fcc:	90 93 42 61 	sts	0x6142, r25	; 0x806142 <uxTaskNumber>
     fd0:	f6 01       	movw	r30, r12
     fd2:	91 a3       	std	Z+33, r25	; 0x21
     fd4:	90 91 47 61 	lds	r25, 0x6147	; 0x806147 <uxTopReadyPriority>
     fd8:	98 17       	cp	r25, r24
     fda:	80 f1       	brcs	.+96     	; 0x103c <xTaskCreate+0x1d6>
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9c 01       	movw	r18, r24
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	82 0f       	add	r24, r18
     fee:	93 1f       	adc	r25, r19
     ff0:	be 01       	movw	r22, r28
     ff2:	83 58       	subi	r24, 0x83	; 131
     ff4:	9e 49       	sbci	r25, 0x9E	; 158
     ff6:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsertEnd>
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	80 91 46 61 	lds	r24, 0x6146	; 0x806146 <xSchedulerRunning>
    1002:	88 23       	and	r24, r24
    1004:	51 f0       	breq	.+20     	; 0x101a <xTaskCreate+0x1b4>
    1006:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    100a:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    100e:	96 89       	ldd	r25, Z+22	; 0x16
    1010:	d6 01       	movw	r26, r12
    1012:	56 96       	adiw	r26, 0x16	; 22
    1014:	8c 91       	ld	r24, X
    1016:	98 17       	cp	r25, r24
    1018:	b0 f0       	brcs	.+44     	; 0x1046 <xTaskCreate+0x1e0>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	8f 90       	pop	r8
    1034:	7f 90       	pop	r7
    1036:	6f 90       	pop	r6
    1038:	5f 90       	pop	r5
    103a:	08 95       	ret
    103c:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <uxTopReadyPriority>
    1040:	cd cf       	rjmp	.-102    	; 0xfdc <xTaskCreate+0x176>
    1042:	03 e0       	ldi	r16, 0x03	; 3
    1044:	5f cf       	rjmp	.-322    	; 0xf04 <xTaskCreate+0x9e>
    1046:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	e7 cf       	rjmp	.-50     	; 0x101c <xTaskCreate+0x1b6>
    104e:	c8 01       	movw	r24, r16
    1050:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	e2 cf       	rjmp	.-60     	; 0x101c <xTaskCreate+0x1b6>
    1058:	60 e6       	ldi	r22, 0x60	; 96
    105a:	73 e0       	ldi	r23, 0x03	; 3
    105c:	85 e2       	ldi	r24, 0x25	; 37
    105e:	90 e2       	ldi	r25, 0x20	; 32
    1060:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    1064:	f6 01       	movw	r30, r12
    1066:	87 89       	ldd	r24, Z+23	; 0x17
    1068:	90 8d       	ldd	r25, Z+24	; 0x18
    106a:	29 cf       	rjmp	.-430    	; 0xebe <xTaskCreate+0x58>
    106c:	8d e7       	ldi	r24, 0x7D	; 125
    106e:	91 e6       	ldi	r25, 0x61	; 97
    1070:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    1074:	86 e8       	ldi	r24, 0x86	; 134
    1076:	91 e6       	ldi	r25, 0x61	; 97
    1078:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    107c:	8f e8       	ldi	r24, 0x8F	; 143
    107e:	91 e6       	ldi	r25, 0x61	; 97
    1080:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    1084:	88 e9       	ldi	r24, 0x98	; 152
    1086:	91 e6       	ldi	r25, 0x61	; 97
    1088:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    108c:	84 e7       	ldi	r24, 0x74	; 116
    108e:	91 e6       	ldi	r25, 0x61	; 97
    1090:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    1094:	8b e6       	ldi	r24, 0x6B	; 107
    1096:	91 e6       	ldi	r25, 0x61	; 97
    1098:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    109c:	8e e5       	ldi	r24, 0x5E	; 94
    109e:	91 e6       	ldi	r25, 0x61	; 97
    10a0:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    10a4:	85 e5       	ldi	r24, 0x55	; 85
    10a6:	91 e6       	ldi	r25, 0x61	; 97
    10a8:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    10ac:	8b e4       	ldi	r24, 0x4B	; 75
    10ae:	91 e6       	ldi	r25, 0x61	; 97
    10b0:	0e 94 ae 03 	call	0x75c	; 0x75c <vListInitialise>
    10b4:	84 e7       	ldi	r24, 0x74	; 116
    10b6:	91 e6       	ldi	r25, 0x61	; 97
    10b8:	80 93 69 61 	sts	0x6169, r24	; 0x806169 <pxDelayedTaskList>
    10bc:	90 93 6a 61 	sts	0x616A, r25	; 0x80616a <pxDelayedTaskList+0x1>
    10c0:	8b e6       	ldi	r24, 0x6B	; 107
    10c2:	91 e6       	ldi	r25, 0x61	; 97
    10c4:	80 93 67 61 	sts	0x6167, r24	; 0x806167 <pxOverflowDelayedTaskList>
    10c8:	90 93 68 61 	sts	0x6168, r25	; 0x806168 <pxOverflowDelayedTaskList+0x1>
    10cc:	f6 01       	movw	r30, r12
    10ce:	86 89       	ldd	r24, Z+22	; 0x16
    10d0:	7a cf       	rjmp	.-268    	; 0xfc6 <xTaskCreate+0x160>

000010d2 <eTaskGetState>:
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	89 2b       	or	r24, r25
    10da:	09 f4       	brne	.+2      	; 0x10de <eTaskGetState+0xc>
    10dc:	3a c0       	rjmp	.+116    	; 0x1152 <eTaskGetState+0x80>
    10de:	80 91 a1 61 	lds	r24, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    10e2:	90 91 a2 61 	lds	r25, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    10e6:	c8 17       	cp	r28, r24
    10e8:	d9 07       	cpc	r29, r25
    10ea:	79 f1       	breq	.+94     	; 0x114a <eTaskGetState+0x78>
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	0f 92       	push	r0
    10f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f6:	20 91 69 61 	lds	r18, 0x6169	; 0x806169 <pxDelayedTaskList>
    10fa:	30 91 6a 61 	lds	r19, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    10fe:	40 91 67 61 	lds	r20, 0x6167	; 0x806167 <pxOverflowDelayedTaskList>
    1102:	50 91 68 61 	lds	r21, 0x6168	; 0x806168 <pxOverflowDelayedTaskList+0x1>
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	82 17       	cp	r24, r18
    110c:	93 07       	cpc	r25, r19
    110e:	a9 f0       	breq	.+42     	; 0x113a <eTaskGetState+0x68>
    1110:	84 17       	cp	r24, r20
    1112:	95 07       	cpc	r25, r21
    1114:	91 f0       	breq	.+36     	; 0x113a <eTaskGetState+0x68>
    1116:	21 e6       	ldi	r18, 0x61	; 97
    1118:	8b 34       	cpi	r24, 0x4B	; 75
    111a:	92 07       	cpc	r25, r18
    111c:	51 f0       	breq	.+20     	; 0x1132 <eTaskGetState+0x60>
    111e:	21 e6       	ldi	r18, 0x61	; 97
    1120:	85 35       	cpi	r24, 0x55	; 85
    1122:	92 07       	cpc	r25, r18
    1124:	71 f0       	breq	.+28     	; 0x1142 <eTaskGetState+0x70>
    1126:	89 2b       	or	r24, r25
    1128:	61 f0       	breq	.+24     	; 0x1142 <eTaskGetState+0x70>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret
    1132:	8c 89       	ldd	r24, Y+20	; 0x14
    1134:	9d 89       	ldd	r25, Y+21	; 0x15
    1136:	89 2b       	or	r24, r25
    1138:	99 f0       	breq	.+38     	; 0x1160 <eTaskGetState+0x8e>
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret
    1152:	6c e4       	ldi	r22, 0x4C	; 76
    1154:	75 e0       	ldi	r23, 0x05	; 5
    1156:	85 e2       	ldi	r24, 0x25	; 37
    1158:	90 e2       	ldi	r25, 0x20	; 32
    115a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    115e:	bf cf       	rjmp	.-130    	; 0x10de <eTaskGetState+0xc>
    1160:	8d a5       	ldd	r24, Y+45	; 0x2d
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	51 f3       	breq	.-44     	; 0x113a <eTaskGetState+0x68>
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	e1 cf       	rjmp	.-62     	; 0x112c <eTaskGetState+0x5a>

0000116a <vTaskStartScheduler>:
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	8e e3       	ldi	r24, 0x3E	; 62
    1172:	e8 2e       	mov	r14, r24
    1174:	81 e6       	ldi	r24, 0x61	; 97
    1176:	f8 2e       	mov	r15, r24
    1178:	00 e0       	ldi	r16, 0x00	; 0
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	51 e0       	ldi	r21, 0x01	; 1
    1182:	69 e3       	ldi	r22, 0x39	; 57
    1184:	70 e2       	ldi	r23, 0x20	; 32
    1186:	83 eb       	ldi	r24, 0xB3	; 179
    1188:	95 e0       	ldi	r25, 0x05	; 5
    118a:	0e 94 33 07 	call	0xe66	; 0xe66 <xTaskCreate>
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	79 f0       	breq	.+30     	; 0x11b0 <vTaskStartScheduler+0x46>
    1192:	8f 3f       	cpi	r24, 0xFF	; 255
    1194:	21 f0       	breq	.+8      	; 0x119e <vTaskStartScheduler+0x34>
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	08 95       	ret
    119e:	67 e0       	ldi	r22, 0x07	; 7
    11a0:	78 e0       	ldi	r23, 0x08	; 8
    11a2:	85 e2       	ldi	r24, 0x25	; 37
    11a4:	90 e2       	ldi	r25, 0x20	; 32
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <vAssertCalled>
    11b0:	f8 94       	cli
    11b2:	2f ef       	ldi	r18, 0xFF	; 255
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	20 93 40 61 	sts	0x6140, r18	; 0x806140 <xNextTaskUnblockTime>
    11ba:	30 93 41 61 	sts	0x6141, r19	; 0x806141 <xNextTaskUnblockTime+0x1>
    11be:	80 93 46 61 	sts	0x6146, r24	; 0x806146 <xSchedulerRunning>
    11c2:	10 92 48 61 	sts	0x6148, r1	; 0x806148 <xTickCount>
    11c6:	10 92 49 61 	sts	0x6149, r1	; 0x806149 <xTickCount+0x1>
    11ca:	0e 94 a8 05 	call	0xb50	; 0xb50 <vConfigureTimerForRunTimeStats>
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	0c 94 a6 04 	jmp	0x94c	; 0x94c <xPortStartScheduler>

000011d8 <vTaskSuspendAll>:
    11d8:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 3d 61 	sts	0x613D, r24	; 0x80613d <uxSchedulerSuspended>
    11e2:	08 95       	ret

000011e4 <xTaskIncrementTick>:
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    11f6:	81 11       	cpse	r24, r1
    11f8:	b9 c0       	rjmp	.+370    	; 0x136c <xTaskIncrementTick+0x188>
    11fa:	e0 90 48 61 	lds	r14, 0x6148	; 0x806148 <xTickCount>
    11fe:	f0 90 49 61 	lds	r15, 0x6149	; 0x806149 <xTickCount+0x1>
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	e8 1a       	sub	r14, r24
    1206:	f8 0a       	sbc	r15, r24
    1208:	e0 92 48 61 	sts	0x6148, r14	; 0x806148 <xTickCount>
    120c:	f0 92 49 61 	sts	0x6149, r15	; 0x806149 <xTickCount+0x1>
    1210:	e1 14       	cp	r14, r1
    1212:	f1 04       	cpc	r15, r1
    1214:	49 f5       	brne	.+82     	; 0x1268 <xTaskIncrementTick+0x84>
    1216:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    121a:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    121e:	80 81       	ld	r24, Z
    1220:	81 11       	cpse	r24, r1
    1222:	ab c0       	rjmp	.+342    	; 0x137a <xTaskIncrementTick+0x196>
    1224:	80 91 69 61 	lds	r24, 0x6169	; 0x806169 <pxDelayedTaskList>
    1228:	90 91 6a 61 	lds	r25, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    122c:	20 91 67 61 	lds	r18, 0x6167	; 0x806167 <pxOverflowDelayedTaskList>
    1230:	30 91 68 61 	lds	r19, 0x6168	; 0x806168 <pxOverflowDelayedTaskList+0x1>
    1234:	20 93 69 61 	sts	0x6169, r18	; 0x806169 <pxDelayedTaskList>
    1238:	30 93 6a 61 	sts	0x616A, r19	; 0x80616a <pxDelayedTaskList+0x1>
    123c:	80 93 67 61 	sts	0x6167, r24	; 0x806167 <pxOverflowDelayedTaskList>
    1240:	90 93 68 61 	sts	0x6168, r25	; 0x806168 <pxOverflowDelayedTaskList+0x1>
    1244:	80 91 43 61 	lds	r24, 0x6143	; 0x806143 <xNumOfOverflows>
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 43 61 	sts	0x6143, r24	; 0x806143 <xNumOfOverflows>
    124e:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    1252:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    1256:	80 81       	ld	r24, Z
    1258:	81 11       	cpse	r24, r1
    125a:	96 c0       	rjmp	.+300    	; 0x1388 <xTaskIncrementTick+0x1a4>
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <xNextTaskUnblockTime>
    1264:	90 93 41 61 	sts	0x6141, r25	; 0x806141 <xNextTaskUnblockTime+0x1>
    1268:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <xNextTaskUnblockTime>
    126c:	90 91 41 61 	lds	r25, 0x6141	; 0x806141 <xNextTaskUnblockTime+0x1>
    1270:	d1 2c       	mov	r13, r1
    1272:	e8 16       	cp	r14, r24
    1274:	f9 06       	cpc	r15, r25
    1276:	08 f4       	brcc	.+2      	; 0x127a <xTaskIncrementTick+0x96>
    1278:	53 c0       	rjmp	.+166    	; 0x1320 <xTaskIncrementTick+0x13c>
    127a:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    127e:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    1282:	80 81       	ld	r24, Z
    1284:	88 23       	and	r24, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <xTaskIncrementTick+0xa6>
    1288:	45 c0       	rjmp	.+138    	; 0x1314 <xTaskIncrementTick+0x130>
    128a:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    128e:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    1292:	05 80       	ldd	r0, Z+5	; 0x05
    1294:	f6 81       	ldd	r31, Z+6	; 0x06
    1296:	e0 2d       	mov	r30, r0
    1298:	c6 81       	ldd	r28, Z+6	; 0x06
    129a:	d7 81       	ldd	r29, Z+7	; 0x07
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	9b 81       	ldd	r25, Y+3	; 0x03
    12a0:	e8 16       	cp	r14, r24
    12a2:	f9 06       	cpc	r15, r25
    12a4:	08 f4       	brcc	.+2      	; 0x12a8 <xTaskIncrementTick+0xc4>
    12a6:	73 c0       	rjmp	.+230    	; 0x138e <xTaskIncrementTick+0x1aa>
    12a8:	8e 01       	movw	r16, r28
    12aa:	0e 5f       	subi	r16, 0xFE	; 254
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	c8 01       	movw	r24, r16
    12b0:	0e 94 12 04 	call	0x824	; 0x824 <uxListRemove>
    12b4:	8c 89       	ldd	r24, Y+20	; 0x14
    12b6:	9d 89       	ldd	r25, Y+21	; 0x15
    12b8:	89 2b       	or	r24, r25
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <xTaskIncrementTick+0xe0>
    12bc:	ce 01       	movw	r24, r28
    12be:	0c 96       	adiw	r24, 0x0c	; 12
    12c0:	0e 94 12 04 	call	0x824	; 0x824 <uxListRemove>
    12c4:	8e 89       	ldd	r24, Y+22	; 0x16
    12c6:	90 91 47 61 	lds	r25, 0x6147	; 0x806147 <uxTopReadyPriority>
    12ca:	98 17       	cp	r25, r24
    12cc:	10 f4       	brcc	.+4      	; 0x12d2 <xTaskIncrementTick+0xee>
    12ce:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <uxTopReadyPriority>
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9c 01       	movw	r18, r24
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	82 0f       	add	r24, r18
    12e4:	93 1f       	adc	r25, r19
    12e6:	b8 01       	movw	r22, r16
    12e8:	83 58       	subi	r24, 0x83	; 131
    12ea:	9e 49       	sbci	r25, 0x9E	; 158
    12ec:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsertEnd>
    12f0:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    12f4:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    12f8:	9e 89       	ldd	r25, Y+22	; 0x16
    12fa:	86 89       	ldd	r24, Z+22	; 0x16
    12fc:	98 17       	cp	r25, r24
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <xTaskIncrementTick+0x11e>
    1300:	bc cf       	rjmp	.-136    	; 0x127a <xTaskIncrementTick+0x96>
    1302:	dd 24       	eor	r13, r13
    1304:	d3 94       	inc	r13
    1306:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    130a:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    130e:	80 81       	ld	r24, Z
    1310:	81 11       	cpse	r24, r1
    1312:	bb cf       	rjmp	.-138    	; 0x128a <xTaskIncrementTick+0xa6>
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	9f ef       	ldi	r25, 0xFF	; 255
    1318:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <xNextTaskUnblockTime>
    131c:	90 93 41 61 	sts	0x6141, r25	; 0x806141 <xNextTaskUnblockTime+0x1>
    1320:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    1324:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    1328:	86 89       	ldd	r24, Z+22	; 0x16
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	fc 01       	movw	r30, r24
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	8e 0f       	add	r24, r30
    133c:	9f 1f       	adc	r25, r31
    133e:	fc 01       	movw	r30, r24
    1340:	e3 58       	subi	r30, 0x83	; 131
    1342:	fe 49       	sbci	r31, 0x9E	; 158
    1344:	80 81       	ld	r24, Z
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	10 f0       	brcs	.+4      	; 0x134e <xTaskIncrementTick+0x16a>
    134a:	dd 24       	eor	r13, r13
    134c:	d3 94       	inc	r13
    134e:	80 91 44 61 	lds	r24, 0x6144	; 0x806144 <xYieldPending>
    1352:	88 23       	and	r24, r24
    1354:	11 f0       	breq	.+4      	; 0x135a <xTaskIncrementTick+0x176>
    1356:	dd 24       	eor	r13, r13
    1358:	d3 94       	inc	r13
    135a:	8d 2d       	mov	r24, r13
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	08 95       	ret
    136c:	80 91 45 61 	lds	r24, 0x6145	; 0x806145 <uxPendedTicks>
    1370:	8f 5f       	subi	r24, 0xFF	; 255
    1372:	80 93 45 61 	sts	0x6145, r24	; 0x806145 <uxPendedTicks>
    1376:	d1 2c       	mov	r13, r1
    1378:	ea cf       	rjmp	.-44     	; 0x134e <xTaskIncrementTick+0x16a>
    137a:	66 e6       	ldi	r22, 0x66	; 102
    137c:	7a e0       	ldi	r23, 0x0A	; 10
    137e:	85 e2       	ldi	r24, 0x25	; 37
    1380:	90 e2       	ldi	r25, 0x20	; 32
    1382:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    1386:	4e cf       	rjmp	.-356    	; 0x1224 <xTaskIncrementTick+0x40>
    1388:	0e 94 04 06 	call	0xc08	; 0xc08 <prvResetNextTaskUnblockTime.part.0>
    138c:	6d cf       	rjmp	.-294    	; 0x1268 <xTaskIncrementTick+0x84>
    138e:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <xNextTaskUnblockTime>
    1392:	90 93 41 61 	sts	0x6141, r25	; 0x806141 <xNextTaskUnblockTime+0x1>
    1396:	c4 cf       	rjmp	.-120    	; 0x1320 <xTaskIncrementTick+0x13c>

00001398 <xTaskResumeAll>:
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <xTaskResumeAll+0x14>
    13aa:	77 c0       	rjmp	.+238    	; 0x149a <xTaskResumeAll+0x102>
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	0f 92       	push	r0
    13b2:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	80 93 3d 61 	sts	0x613D, r24	; 0x80613d <uxSchedulerSuspended>
    13bc:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    13c0:	81 11       	cpse	r24, r1
    13c2:	62 c0       	rjmp	.+196    	; 0x1488 <xTaskResumeAll+0xf0>
    13c4:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <xTaskResumeAll+0x36>
    13cc:	5d c0       	rjmp	.+186    	; 0x1488 <xTaskResumeAll+0xf0>
    13ce:	c0 e0       	ldi	r28, 0x00	; 0
    13d0:	d0 e0       	ldi	r29, 0x00	; 0
    13d2:	ff 24       	eor	r15, r15
    13d4:	f3 94       	inc	r15
    13d6:	80 91 5e 61 	lds	r24, 0x615E	; 0x80615e <xPendingReadyList>
    13da:	88 23       	and	r24, r24
    13dc:	a1 f1       	breq	.+104    	; 0x1446 <xTaskResumeAll+0xae>
    13de:	e0 91 63 61 	lds	r30, 0x6163	; 0x806163 <xPendingReadyList+0x5>
    13e2:	f0 91 64 61 	lds	r31, 0x6164	; 0x806164 <xPendingReadyList+0x6>
    13e6:	c6 81       	ldd	r28, Z+6	; 0x06
    13e8:	d7 81       	ldd	r29, Z+7	; 0x07
    13ea:	ce 01       	movw	r24, r28
    13ec:	0c 96       	adiw	r24, 0x0c	; 12
    13ee:	0e 94 12 04 	call	0x824	; 0x824 <uxListRemove>
    13f2:	8e 01       	movw	r16, r28
    13f4:	0e 5f       	subi	r16, 0xFE	; 254
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	c8 01       	movw	r24, r16
    13fa:	0e 94 12 04 	call	0x824	; 0x824 <uxListRemove>
    13fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1400:	90 91 47 61 	lds	r25, 0x6147	; 0x806147 <uxTopReadyPriority>
    1404:	98 17       	cp	r25, r24
    1406:	10 f4       	brcc	.+4      	; 0x140c <xTaskResumeAll+0x74>
    1408:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <uxTopReadyPriority>
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 01       	movw	r18, r24
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	b8 01       	movw	r22, r16
    1422:	83 58       	subi	r24, 0x83	; 131
    1424:	9e 49       	sbci	r25, 0x9E	; 158
    1426:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsertEnd>
    142a:	e0 91 a1 61 	lds	r30, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    142e:	f0 91 a2 61 	lds	r31, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    1432:	9e 89       	ldd	r25, Y+22	; 0x16
    1434:	86 89       	ldd	r24, Z+22	; 0x16
    1436:	98 17       	cp	r25, r24
    1438:	70 f2       	brcs	.-100    	; 0x13d6 <xTaskResumeAll+0x3e>
    143a:	f0 92 44 61 	sts	0x6144, r15	; 0x806144 <xYieldPending>
    143e:	80 91 5e 61 	lds	r24, 0x615E	; 0x80615e <xPendingReadyList>
    1442:	81 11       	cpse	r24, r1
    1444:	cc cf       	rjmp	.-104    	; 0x13de <xTaskResumeAll+0x46>
    1446:	cd 2b       	or	r28, r29
    1448:	69 f0       	breq	.+26     	; 0x1464 <xTaskResumeAll+0xcc>
    144a:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    144e:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    1452:	80 81       	ld	r24, Z
    1454:	81 11       	cpse	r24, r1
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <xTaskResumeAll+0x118>
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	9f ef       	ldi	r25, 0xFF	; 255
    145c:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <xNextTaskUnblockTime>
    1460:	90 93 41 61 	sts	0x6141, r25	; 0x806141 <xNextTaskUnblockTime+0x1>
    1464:	c0 91 45 61 	lds	r28, 0x6145	; 0x806145 <uxPendedTicks>
    1468:	cc 23       	and	r28, r28
    146a:	51 f0       	breq	.+20     	; 0x1480 <xTaskResumeAll+0xe8>
    146c:	d1 e0       	ldi	r29, 0x01	; 1
    146e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <xTaskIncrementTick>
    1472:	81 11       	cpse	r24, r1
    1474:	d0 93 44 61 	sts	0x6144, r29	; 0x806144 <xYieldPending>
    1478:	c1 50       	subi	r28, 0x01	; 1
    147a:	c9 f7       	brne	.-14     	; 0x146e <xTaskResumeAll+0xd6>
    147c:	10 92 45 61 	sts	0x6145, r1	; 0x806145 <uxPendedTicks>
    1480:	80 91 44 61 	lds	r24, 0x6144	; 0x806144 <xYieldPending>
    1484:	81 11       	cpse	r24, r1
    1486:	10 c0       	rjmp	.+32     	; 0x14a8 <xTaskResumeAll+0x110>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	08 95       	ret
    149a:	6c e6       	ldi	r22, 0x6C	; 108
    149c:	78 e0       	ldi	r23, 0x08	; 8
    149e:	85 e2       	ldi	r24, 0x25	; 37
    14a0:	90 e2       	ldi	r25, 0x20	; 32
    14a2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    14a6:	82 cf       	rjmp	.-252    	; 0x13ac <xTaskResumeAll+0x14>
    14a8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	ed cf       	rjmp	.-38     	; 0x148a <xTaskResumeAll+0xf2>
    14b0:	0e 94 04 06 	call	0xc08	; 0xc08 <prvResetNextTaskUnblockTime.part.0>
    14b4:	d7 cf       	rjmp	.-82     	; 0x1464 <xTaskResumeAll+0xcc>

000014b6 <vTaskDelayUntil>:
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	8c 01       	movw	r16, r24
    14c0:	eb 01       	movw	r28, r22
    14c2:	89 2b       	or	r24, r25
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <vTaskDelayUntil+0x12>
    14c6:	46 c0       	rjmp	.+140    	; 0x1554 <vTaskDelayUntil+0x9e>
    14c8:	20 97       	sbiw	r28, 0x00	; 0
    14ca:	e9 f1       	breq	.+122    	; 0x1546 <vTaskDelayUntil+0x90>
    14cc:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    14d0:	81 11       	cpse	r24, r1
    14d2:	32 c0       	rjmp	.+100    	; 0x1538 <vTaskDelayUntil+0x82>
    14d4:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	80 93 3d 61 	sts	0x613D, r24	; 0x80613d <uxSchedulerSuspended>
    14de:	40 91 48 61 	lds	r20, 0x6148	; 0x806148 <xTickCount>
    14e2:	50 91 49 61 	lds	r21, 0x6149	; 0x806149 <xTickCount+0x1>
    14e6:	f8 01       	movw	r30, r16
    14e8:	20 81       	ld	r18, Z
    14ea:	31 81       	ldd	r19, Z+1	; 0x01
    14ec:	ce 01       	movw	r24, r28
    14ee:	82 0f       	add	r24, r18
    14f0:	93 1f       	adc	r25, r19
    14f2:	42 17       	cp	r20, r18
    14f4:	53 07       	cpc	r21, r19
    14f6:	88 f4       	brcc	.+34     	; 0x151a <vTaskDelayUntil+0x64>
    14f8:	82 17       	cp	r24, r18
    14fa:	93 07       	cpc	r25, r19
    14fc:	88 f0       	brcs	.+34     	; 0x1520 <vTaskDelayUntil+0x6a>
    14fe:	f8 01       	movw	r30, r16
    1500:	80 83       	st	Z, r24
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskResumeAll>
    1508:	81 11       	cpse	r24, r1
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <vTaskDelayUntil+0x5a>
    150c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret
    151a:	82 17       	cp	r24, r18
    151c:	93 07       	cpc	r25, r19
    151e:	18 f0       	brcs	.+6      	; 0x1526 <vTaskDelayUntil+0x70>
    1520:	48 17       	cp	r20, r24
    1522:	59 07       	cpc	r21, r25
    1524:	60 f7       	brcc	.-40     	; 0x14fe <vTaskDelayUntil+0x48>
    1526:	f8 01       	movw	r30, r16
    1528:	80 83       	st	Z, r24
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	84 1b       	sub	r24, r20
    1530:	95 0b       	sbc	r25, r21
    1532:	0e 94 15 06 	call	0xc2a	; 0xc2a <prvAddCurrentTaskToDelayedList>
    1536:	e6 cf       	rjmp	.-52     	; 0x1504 <vTaskDelayUntil+0x4e>
    1538:	6c ec       	ldi	r22, 0xCC	; 204
    153a:	74 e0       	ldi	r23, 0x04	; 4
    153c:	85 e2       	ldi	r24, 0x25	; 37
    153e:	90 e2       	ldi	r25, 0x20	; 32
    1540:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    1544:	c7 cf       	rjmp	.-114    	; 0x14d4 <vTaskDelayUntil+0x1e>
    1546:	6b ec       	ldi	r22, 0xCB	; 203
    1548:	74 e0       	ldi	r23, 0x04	; 4
    154a:	85 e2       	ldi	r24, 0x25	; 37
    154c:	90 e2       	ldi	r25, 0x20	; 32
    154e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    1552:	bc cf       	rjmp	.-136    	; 0x14cc <vTaskDelayUntil+0x16>
    1554:	6a ec       	ldi	r22, 0xCA	; 202
    1556:	74 e0       	ldi	r23, 0x04	; 4
    1558:	85 e2       	ldi	r24, 0x25	; 37
    155a:	90 e2       	ldi	r25, 0x20	; 32
    155c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vAssertCalled>
    1560:	b3 cf       	rjmp	.-154    	; 0x14c8 <vTaskDelayUntil+0x12>

00001562 <vTaskSwitchContext>:
    1562:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    1566:	81 11       	cpse	r24, r1
    1568:	02 c0       	rjmp	.+4      	; 0x156e <vTaskSwitchContext+0xc>
    156a:	0c 94 71 06 	jmp	0xce2	; 0xce2 <vTaskSwitchContext.part.5>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 44 61 	sts	0x6144, r24	; 0x806144 <xYieldPending>
    1574:	08 95       	ret

00001576 <vTaskGetInfo>:
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	8c 01       	movw	r16, r24
    1582:	eb 01       	movw	r28, r22
    1584:	f4 2e       	mov	r15, r20
    1586:	89 2b       	or	r24, r25
    1588:	09 f4       	brne	.+2      	; 0x158c <vTaskGetInfo+0x16>
    158a:	64 c0       	rjmp	.+200    	; 0x1654 <vTaskGetInfo+0xde>
    158c:	08 83       	st	Y, r16
    158e:	19 83       	std	Y+1, r17	; 0x01
    1590:	c8 01       	movw	r24, r16
    1592:	49 96       	adiw	r24, 0x19	; 25
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	9b 83       	std	Y+3, r25	; 0x03
    1598:	d8 01       	movw	r26, r16
    159a:	56 96       	adiw	r26, 0x16	; 22
    159c:	8c 91       	ld	r24, X
    159e:	56 97       	sbiw	r26, 0x16	; 22
    15a0:	8e 83       	std	Y+6, r24	; 0x06
    15a2:	57 96       	adiw	r26, 0x17	; 23
    15a4:	8d 91       	ld	r24, X+
    15a6:	9c 91       	ld	r25, X
    15a8:	58 97       	sbiw	r26, 0x18	; 24
    15aa:	8c 87       	std	Y+12, r24	; 0x0c
    15ac:	9d 87       	std	Y+13, r25	; 0x0d
    15ae:	91 96       	adiw	r26, 0x21	; 33
    15b0:	8c 91       	ld	r24, X
    15b2:	91 97       	sbiw	r26, 0x21	; 33
    15b4:	8c 83       	std	Y+4, r24	; 0x04
    15b6:	93 96       	adiw	r26, 0x23	; 35
    15b8:	8c 91       	ld	r24, X
    15ba:	93 97       	sbiw	r26, 0x23	; 35
    15bc:	8f 83       	std	Y+7, r24	; 0x07
    15be:	95 96       	adiw	r26, 0x25	; 37
    15c0:	8d 91       	ld	r24, X+
    15c2:	9d 91       	ld	r25, X+
    15c4:	0d 90       	ld	r0, X+
    15c6:	bc 91       	ld	r27, X
    15c8:	a0 2d       	mov	r26, r0
    15ca:	88 87       	std	Y+8, r24	; 0x08
    15cc:	99 87       	std	Y+9, r25	; 0x09
    15ce:	aa 87       	std	Y+10, r26	; 0x0a
    15d0:	bb 87       	std	Y+11, r27	; 0x0b
    15d2:	25 30       	cpi	r18, 0x05	; 5
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <vTaskGetInfo+0x62>
    15d6:	43 c0       	rjmp	.+134    	; 0x165e <vTaskGetInfo+0xe8>
    15d8:	80 91 a1 61 	lds	r24, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    15dc:	90 91 a2 61 	lds	r25, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    15e0:	08 17       	cp	r16, r24
    15e2:	19 07       	cpc	r17, r25
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <vTaskGetInfo+0x72>
    15e6:	40 c0       	rjmp	.+128    	; 0x1668 <vTaskGetInfo+0xf2>
    15e8:	2d 83       	std	Y+5, r18	; 0x05
    15ea:	23 30       	cpi	r18, 0x03	; 3
    15ec:	21 f1       	breq	.+72     	; 0x1636 <vTaskGetInfo+0xc0>
    15ee:	ff 20       	and	r15, r15
    15f0:	d1 f0       	breq	.+52     	; 0x1626 <vTaskGetInfo+0xb0>
    15f2:	d8 01       	movw	r26, r16
    15f4:	57 96       	adiw	r26, 0x17	; 23
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	58 97       	sbiw	r26, 0x18	; 24
    15fc:	80 81       	ld	r24, Z
    15fe:	85 3a       	cpi	r24, 0xA5	; 165
    1600:	a9 f5       	brne	.+106    	; 0x166c <vTaskGetInfo+0xf6>
    1602:	31 96       	adiw	r30, 0x01	; 1
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	dc 01       	movw	r26, r24
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	a1 1d       	adc	r26, r1
    160e:	b1 1d       	adc	r27, r1
    1610:	21 91       	ld	r18, Z+
    1612:	25 3a       	cpi	r18, 0xA5	; 165
    1614:	d1 f3       	breq	.-12     	; 0x160a <vTaskGetInfo+0x94>
    1616:	8e 87       	std	Y+14, r24	; 0x0e
    1618:	9f 87       	std	Y+15, r25	; 0x0f
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	08 95       	ret
    1626:	1e 86       	std	Y+14, r1	; 0x0e
    1628:	1f 86       	std	Y+15, r1	; 0x0f
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	08 95       	ret
    1636:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	80 93 3d 61 	sts	0x613D, r24	; 0x80613d <uxSchedulerSuspended>
    1640:	f8 01       	movw	r30, r16
    1642:	84 89       	ldd	r24, Z+20	; 0x14
    1644:	95 89       	ldd	r25, Z+21	; 0x15
    1646:	89 2b       	or	r24, r25
    1648:	11 f0       	breq	.+4      	; 0x164e <vTaskGetInfo+0xd8>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskResumeAll>
    1652:	cd cf       	rjmp	.-102    	; 0x15ee <vTaskGetInfo+0x78>
    1654:	00 91 a1 61 	lds	r16, 0x61A1	; 0x8061a1 <pxCurrentTCB>
    1658:	10 91 a2 61 	lds	r17, 0x61A2	; 0x8061a2 <pxCurrentTCB+0x1>
    165c:	97 cf       	rjmp	.-210    	; 0x158c <vTaskGetInfo+0x16>
    165e:	c8 01       	movw	r24, r16
    1660:	0e 94 69 08 	call	0x10d2	; 0x10d2 <eTaskGetState>
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	c3 cf       	rjmp	.-122    	; 0x15ee <vTaskGetInfo+0x78>
    1668:	1d 82       	std	Y+5, r1	; 0x05
    166a:	c1 cf       	rjmp	.-126    	; 0x15ee <vTaskGetInfo+0x78>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	d2 cf       	rjmp	.-92     	; 0x1616 <vTaskGetInfo+0xa0>

00001672 <prvListTasksWithinSingleList.part.6>:
    1672:	8f 92       	push	r8
    1674:	9f 92       	push	r9
    1676:	af 92       	push	r10
    1678:	bf 92       	push	r11
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	5c 01       	movw	r10, r24
    168c:	8b 01       	movw	r16, r22
    168e:	d4 2f       	mov	r29, r20
    1690:	db 01       	movw	r26, r22
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	12 97       	sbiw	r26, 0x02	; 2
    169a:	02 80       	ldd	r0, Z+2	; 0x02
    169c:	f3 81       	ldd	r31, Z+3	; 0x03
    169e:	e0 2d       	mov	r30, r0
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	ed 93       	st	X+, r30
    16a4:	fc 93       	st	X, r31
    16a6:	12 97       	sbiw	r26, 0x02	; 2
    16a8:	7b 01       	movw	r14, r22
    16aa:	b3 e0       	ldi	r27, 0x03	; 3
    16ac:	eb 0e       	add	r14, r27
    16ae:	f1 1c       	adc	r15, r1
    16b0:	ee 15       	cp	r30, r14
    16b2:	ff 05       	cpc	r31, r15
    16b4:	e1 f1       	breq	.+120    	; 0x172e <prvListTasksWithinSingleList.part.6+0xbc>
    16b6:	c6 80       	ldd	r12, Z+6	; 0x06
    16b8:	d7 80       	ldd	r13, Z+7	; 0x07
    16ba:	c0 e0       	ldi	r28, 0x00	; 0
    16bc:	16 c0       	rjmp	.+44     	; 0x16ea <prvListTasksWithinSingleList.part.6+0x78>
    16be:	86 80       	ldd	r8, Z+6	; 0x06
    16c0:	97 80       	ldd	r9, Z+7	; 0x07
    16c2:	b5 01       	movw	r22, r10
    16c4:	b0 e1       	ldi	r27, 0x10	; 16
    16c6:	cb 9f       	mul	r28, r27
    16c8:	60 0d       	add	r22, r0
    16ca:	71 1d       	adc	r23, r1
    16cc:	11 24       	eor	r1, r1
    16ce:	2d 2f       	mov	r18, r29
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	c4 01       	movw	r24, r8
    16d4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskGetInfo>
    16d8:	cf 5f       	subi	r28, 0xFF	; 255
    16da:	c8 14       	cp	r12, r8
    16dc:	d9 04       	cpc	r13, r9
    16de:	c9 f0       	breq	.+50     	; 0x1712 <prvListTasksWithinSingleList.part.6+0xa0>
    16e0:	d8 01       	movw	r26, r16
    16e2:	11 96       	adiw	r26, 0x01	; 1
    16e4:	ed 91       	ld	r30, X+
    16e6:	fc 91       	ld	r31, X
    16e8:	12 97       	sbiw	r26, 0x02	; 2
    16ea:	02 80       	ldd	r0, Z+2	; 0x02
    16ec:	f3 81       	ldd	r31, Z+3	; 0x03
    16ee:	e0 2d       	mov	r30, r0
    16f0:	d8 01       	movw	r26, r16
    16f2:	11 96       	adiw	r26, 0x01	; 1
    16f4:	ed 93       	st	X+, r30
    16f6:	fc 93       	st	X, r31
    16f8:	12 97       	sbiw	r26, 0x02	; 2
    16fa:	ee 16       	cp	r14, r30
    16fc:	ff 06       	cpc	r15, r31
    16fe:	f9 f6       	brne	.-66     	; 0x16be <prvListTasksWithinSingleList.part.6+0x4c>
    1700:	15 96       	adiw	r26, 0x05	; 5
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	16 97       	sbiw	r26, 0x06	; 6
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	ed 93       	st	X+, r30
    170c:	fc 93       	st	X, r31
    170e:	12 97       	sbiw	r26, 0x02	; 2
    1710:	d6 cf       	rjmp	.-84     	; 0x16be <prvListTasksWithinSingleList.part.6+0x4c>
    1712:	8c 2f       	mov	r24, r28
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	08 95       	ret
    172e:	02 80       	ldd	r0, Z+2	; 0x02
    1730:	f3 81       	ldd	r31, Z+3	; 0x03
    1732:	e0 2d       	mov	r30, r0
    1734:	c0 cf       	rjmp	.-128    	; 0x16b6 <prvListTasksWithinSingleList.part.6+0x44>

00001736 <uxTaskGetSystemState>:
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	8c 01       	movw	r16, r24
    1744:	7a 01       	movw	r14, r20
    1746:	80 91 3d 61 	lds	r24, 0x613D	; 0x80613d <uxSchedulerSuspended>
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	80 93 3d 61 	sts	0x613D, r24	; 0x80613d <uxSchedulerSuspended>
    1750:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>
    1754:	68 17       	cp	r22, r24
    1756:	08 f4       	brcc	.+2      	; 0x175a <uxTaskGetSystemState+0x24>
    1758:	63 c0       	rjmp	.+198    	; 0x1820 <uxTaskGetSystemState+0xea>
    175a:	c4 e0       	ldi	r28, 0x04	; 4
    175c:	d0 e0       	ldi	r29, 0x00	; 0
    175e:	c1 50       	subi	r28, 0x01	; 1
    1760:	6c 2f       	mov	r22, r28
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	cb 01       	movw	r24, r22
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	68 0f       	add	r22, r24
    1774:	79 1f       	adc	r23, r25
    1776:	fb 01       	movw	r30, r22
    1778:	e3 58       	subi	r30, 0x83	; 131
    177a:	fe 49       	sbci	r31, 0x9E	; 158
    177c:	80 81       	ld	r24, Z
    177e:	81 11       	cpse	r24, r1
    1780:	44 c0       	rjmp	.+136    	; 0x180a <uxTaskGetSystemState+0xd4>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	d8 0f       	add	r29, r24
    1786:	c1 11       	cpse	r28, r1
    1788:	ea cf       	rjmp	.-44     	; 0x175e <uxTaskGetSystemState+0x28>
    178a:	e0 91 69 61 	lds	r30, 0x6169	; 0x806169 <pxDelayedTaskList>
    178e:	f0 91 6a 61 	lds	r31, 0x616A	; 0x80616a <pxDelayedTaskList+0x1>
    1792:	80 81       	ld	r24, Z
    1794:	81 11       	cpse	r24, r1
    1796:	46 c0       	rjmp	.+140    	; 0x1824 <uxTaskGetSystemState+0xee>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	d8 0f       	add	r29, r24
    179c:	e0 91 67 61 	lds	r30, 0x6167	; 0x806167 <pxOverflowDelayedTaskList>
    17a0:	f0 91 68 61 	lds	r31, 0x6168	; 0x806168 <pxOverflowDelayedTaskList+0x1>
    17a4:	80 81       	ld	r24, Z
    17a6:	81 11       	cpse	r24, r1
    17a8:	50 c0       	rjmp	.+160    	; 0x184a <uxTaskGetSystemState+0x114>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	d8 0f       	add	r29, r24
    17ae:	80 91 55 61 	lds	r24, 0x6155	; 0x806155 <xTasksWaitingTermination>
    17b2:	81 11       	cpse	r24, r1
    17b4:	5a c0       	rjmp	.+180    	; 0x186a <uxTaskGetSystemState+0x134>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	d8 0f       	add	r29, r24
    17ba:	80 91 4b 61 	lds	r24, 0x614B	; 0x80614b <xSuspendedTaskList>
    17be:	81 11       	cpse	r24, r1
    17c0:	65 c0       	rjmp	.+202    	; 0x188c <uxTaskGetSystemState+0x156>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	d8 0f       	add	r29, r24
    17c6:	e1 14       	cp	r14, r1
    17c8:	f1 04       	cpc	r15, r1
    17ca:	a9 f0       	breq	.+42     	; 0x17f6 <uxTaskGetSystemState+0xc0>
    17cc:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    17d0:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    17d4:	80 91 a3 63 	lds	r24, 0x63A3	; 0x8063a3 <StatsTimer>
    17d8:	90 91 a4 63 	lds	r25, 0x63A4	; 0x8063a4 <StatsTimer+0x1>
    17dc:	a0 91 a5 63 	lds	r26, 0x63A5	; 0x8063a5 <StatsTimer+0x2>
    17e0:	b0 91 a6 63 	lds	r27, 0x63A6	; 0x8063a6 <StatsTimer+0x3>
    17e4:	82 0f       	add	r24, r18
    17e6:	93 1f       	adc	r25, r19
    17e8:	a1 1d       	adc	r26, r1
    17ea:	b1 1d       	adc	r27, r1
    17ec:	f7 01       	movw	r30, r14
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
    17f6:	0e 94 cc 09 	call	0x1398	; 0x1398 <xTaskResumeAll>
    17fa:	8d 2f       	mov	r24, r29
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	bf 01       	movw	r22, r30
    180e:	c8 01       	movw	r24, r16
    1810:	20 e1       	ldi	r18, 0x10	; 16
    1812:	d2 9f       	mul	r29, r18
    1814:	80 0d       	add	r24, r0
    1816:	91 1d       	adc	r25, r1
    1818:	11 24       	eor	r1, r1
    181a:	0e 94 39 0b 	call	0x1672	; 0x1672 <prvListTasksWithinSingleList.part.6>
    181e:	b2 cf       	rjmp	.-156    	; 0x1784 <uxTaskGetSystemState+0x4e>
    1820:	d0 e0       	ldi	r29, 0x00	; 0
    1822:	e9 cf       	rjmp	.-46     	; 0x17f6 <uxTaskGetSystemState+0xc0>
    1824:	42 e0       	ldi	r20, 0x02	; 2
    1826:	bf 01       	movw	r22, r30
    1828:	c8 01       	movw	r24, r16
    182a:	e0 e1       	ldi	r30, 0x10	; 16
    182c:	de 9f       	mul	r29, r30
    182e:	80 0d       	add	r24, r0
    1830:	91 1d       	adc	r25, r1
    1832:	11 24       	eor	r1, r1
    1834:	0e 94 39 0b 	call	0x1672	; 0x1672 <prvListTasksWithinSingleList.part.6>
    1838:	d8 0f       	add	r29, r24
    183a:	e0 91 67 61 	lds	r30, 0x6167	; 0x806167 <pxOverflowDelayedTaskList>
    183e:	f0 91 68 61 	lds	r31, 0x6168	; 0x806168 <pxOverflowDelayedTaskList+0x1>
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <uxTaskGetSystemState+0x114>
    1848:	b0 cf       	rjmp	.-160    	; 0x17aa <uxTaskGetSystemState+0x74>
    184a:	42 e0       	ldi	r20, 0x02	; 2
    184c:	bf 01       	movw	r22, r30
    184e:	c8 01       	movw	r24, r16
    1850:	f0 e1       	ldi	r31, 0x10	; 16
    1852:	df 9f       	mul	r29, r31
    1854:	80 0d       	add	r24, r0
    1856:	91 1d       	adc	r25, r1
    1858:	11 24       	eor	r1, r1
    185a:	0e 94 39 0b 	call	0x1672	; 0x1672 <prvListTasksWithinSingleList.part.6>
    185e:	d8 0f       	add	r29, r24
    1860:	80 91 55 61 	lds	r24, 0x6155	; 0x806155 <xTasksWaitingTermination>
    1864:	88 23       	and	r24, r24
    1866:	09 f4       	brne	.+2      	; 0x186a <uxTaskGetSystemState+0x134>
    1868:	a6 cf       	rjmp	.-180    	; 0x17b6 <uxTaskGetSystemState+0x80>
    186a:	44 e0       	ldi	r20, 0x04	; 4
    186c:	65 e5       	ldi	r22, 0x55	; 85
    186e:	71 e6       	ldi	r23, 0x61	; 97
    1870:	c8 01       	movw	r24, r16
    1872:	20 e1       	ldi	r18, 0x10	; 16
    1874:	d2 9f       	mul	r29, r18
    1876:	80 0d       	add	r24, r0
    1878:	91 1d       	adc	r25, r1
    187a:	11 24       	eor	r1, r1
    187c:	0e 94 39 0b 	call	0x1672	; 0x1672 <prvListTasksWithinSingleList.part.6>
    1880:	d8 0f       	add	r29, r24
    1882:	80 91 4b 61 	lds	r24, 0x614B	; 0x80614b <xSuspendedTaskList>
    1886:	88 23       	and	r24, r24
    1888:	09 f4       	brne	.+2      	; 0x188c <uxTaskGetSystemState+0x156>
    188a:	9b cf       	rjmp	.-202    	; 0x17c2 <uxTaskGetSystemState+0x8c>
    188c:	43 e0       	ldi	r20, 0x03	; 3
    188e:	6b e4       	ldi	r22, 0x4B	; 75
    1890:	71 e6       	ldi	r23, 0x61	; 97
    1892:	c8 01       	movw	r24, r16
    1894:	e0 e1       	ldi	r30, 0x10	; 16
    1896:	de 9f       	mul	r29, r30
    1898:	80 0d       	add	r24, r0
    189a:	91 1d       	adc	r25, r1
    189c:	11 24       	eor	r1, r1
    189e:	0e 94 39 0b 	call	0x1672	; 0x1672 <prvListTasksWithinSingleList.part.6>
    18a2:	90 cf       	rjmp	.-224    	; 0x17c4 <uxTaskGetSystemState+0x8e>

000018a4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
    18a4:	2f 92       	push	r2
    18a6:	3f 92       	push	r3
    18a8:	4f 92       	push	r4
    18aa:	5f 92       	push	r5
    18ac:	6f 92       	push	r6
    18ae:	7f 92       	push	r7
    18b0:	8f 92       	push	r8
    18b2:	9f 92       	push	r9
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <vTaskGetRunTimeStats+0x26>
    18ca:	1f 92       	push	r1
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	8c 01       	movw	r16, r24
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
    18d2:	fc 01       	movw	r30, r24
    18d4:	10 82       	st	Z, r1

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
    18d6:	f0 90 4a 61 	lds	r15, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
    18da:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <uxCurrentNumberOfTasks>
    18de:	f0 e1       	ldi	r31, 0x10	; 16
    18e0:	8f 9f       	mul	r24, r31
    18e2:	c0 01       	movw	r24, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
    18ea:	5c 01       	movw	r10, r24

		if( pxTaskStatusArray != NULL )
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <vTaskGetRunTimeStats+0x4e>
    18f0:	79 c0       	rjmp	.+242    	; 0x19e4 <vTaskGetRunTimeStats+0x140>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
    18f2:	ae 01       	movw	r20, r28
    18f4:	4f 5f       	subi	r20, 0xFF	; 255
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
    18f8:	6f 2d       	mov	r22, r15
    18fa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <uxTaskGetSystemState>
    18fe:	88 2e       	mov	r8, r24

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
    1900:	69 81       	ldd	r22, Y+1	; 0x01
    1902:	7a 81       	ldd	r23, Y+2	; 0x02
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	24 e6       	ldi	r18, 0x64	; 100
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	0e 94 20 12 	call	0x2440	; 0x2440 <__udivmodsi4>
    1914:	29 83       	std	Y+1, r18	; 0x01
    1916:	3a 83       	std	Y+2, r19	; 0x02
    1918:	4b 83       	std	Y+3, r20	; 0x03
    191a:	5c 83       	std	Y+4, r21	; 0x04

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
    191c:	21 15       	cp	r18, r1
    191e:	31 05       	cpc	r19, r1
    1920:	41 05       	cpc	r20, r1
    1922:	51 05       	cpc	r21, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <vTaskGetRunTimeStats+0x84>
    1926:	5b c0       	rjmp	.+182    	; 0x19de <vTaskGetRunTimeStats+0x13a>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    1928:	88 20       	and	r8, r8
    192a:	09 f4       	brne	.+2      	; 0x192e <vTaskGetRunTimeStats+0x8a>
    192c:	58 c0       	rjmp	.+176    	; 0x19de <vTaskGetRunTimeStats+0x13a>
    192e:	75 01       	movw	r14, r10
    1930:	91 2c       	mov	r9, r1
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    1932:	8b e5       	ldi	r24, 0x5B	; 91
    1934:	c8 2e       	mov	r12, r24
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	d8 2e       	mov	r13, r24

					if( ulStatsAsPercentage > 0UL )
					{
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
    193a:	9d e4       	ldi	r25, 0x4D	; 77
    193c:	29 2e       	mov	r2, r25
    193e:	90 e2       	ldi	r25, 0x20	; 32
    1940:	39 2e       	mov	r3, r25
    1942:	26 c0       	rjmp	.+76     	; 0x1990 <vTaskGetRunTimeStats+0xec>
    1944:	7f 92       	push	r7
    1946:	6f 92       	push	r6
    1948:	5f 92       	push	r5
    194a:	4f 92       	push	r4
    194c:	f7 01       	movw	r30, r14
    194e:	83 85       	ldd	r24, Z+11	; 0x0b
    1950:	8f 93       	push	r24
    1952:	82 85       	ldd	r24, Z+10	; 0x0a
    1954:	8f 93       	push	r24
    1956:	81 85       	ldd	r24, Z+9	; 0x09
    1958:	8f 93       	push	r24
    195a:	80 85       	ldd	r24, Z+8	; 0x08
    195c:	8f 93       	push	r24
    195e:	3f 92       	push	r3
    1960:	2f 92       	push	r2
    1962:	1f 93       	push	r17
    1964:	0f 93       	push	r16
    1966:	0e 94 12 14 	call	0x2824	; 0x2824 <sprintf>
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	de bf       	out	0x3e, r29	; 62
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
    196e:	f8 01       	movw	r30, r16
    1970:	01 90       	ld	r0, Z+
    1972:	00 20       	and	r0, r0
    1974:	e9 f7       	brne	.-6      	; 0x1970 <vTaskGetRunTimeStats+0xcc>
    1976:	8f 01       	movw	r16, r30
    1978:	01 50       	subi	r16, 0x01	; 1
    197a:	11 09       	sbc	r17, r1

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    197c:	93 94       	inc	r9
    197e:	90 e1       	ldi	r25, 0x10	; 16
    1980:	e9 0e       	add	r14, r25
    1982:	f1 1c       	adc	r15, r1
    1984:	89 14       	cp	r8, r9
    1986:	59 f1       	breq	.+86     	; 0x19de <vTaskGetRunTimeStats+0x13a>
    1988:	29 81       	ldd	r18, Y+1	; 0x01
    198a:	3a 81       	ldd	r19, Y+2	; 0x02
    198c:	4b 81       	ldd	r20, Y+3	; 0x03
    198e:	5c 81       	ldd	r21, Y+4	; 0x04
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
    1990:	f7 01       	movw	r30, r14
    1992:	60 85       	ldd	r22, Z+8	; 0x08
    1994:	71 85       	ldd	r23, Z+9	; 0x09
    1996:	82 85       	ldd	r24, Z+10	; 0x0a
    1998:	93 85       	ldd	r25, Z+11	; 0x0b
    199a:	0e 94 20 12 	call	0x2440	; 0x2440 <__udivmodsi4>
    199e:	29 01       	movw	r4, r18
    19a0:	3a 01       	movw	r6, r20

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
    19a2:	f7 01       	movw	r30, r14
    19a4:	62 81       	ldd	r22, Z+2	; 0x02
    19a6:	73 81       	ldd	r23, Z+3	; 0x03
    19a8:	c8 01       	movw	r24, r16
    19aa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <prvWriteNameToBuffer>
    19ae:	8c 01       	movw	r16, r24

					if( ulStatsAsPercentage > 0UL )
    19b0:	41 14       	cp	r4, r1
    19b2:	51 04       	cpc	r5, r1
    19b4:	61 04       	cpc	r6, r1
    19b6:	71 04       	cpc	r7, r1
    19b8:	29 f6       	brne	.-118    	; 0x1944 <vTaskGetRunTimeStats+0xa0>
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    19ba:	f7 01       	movw	r30, r14
    19bc:	83 85       	ldd	r24, Z+11	; 0x0b
    19be:	8f 93       	push	r24
    19c0:	82 85       	ldd	r24, Z+10	; 0x0a
    19c2:	8f 93       	push	r24
    19c4:	81 85       	ldd	r24, Z+9	; 0x09
    19c6:	8f 93       	push	r24
    19c8:	80 85       	ldd	r24, Z+8	; 0x08
    19ca:	8f 93       	push	r24
    19cc:	df 92       	push	r13
    19ce:	cf 92       	push	r12
    19d0:	1f 93       	push	r17
    19d2:	0f 93       	push	r16
    19d4:	0e 94 12 14 	call	0x2824	; 0x2824 <sprintf>
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	c8 cf       	rjmp	.-112    	; 0x196e <vTaskGetRunTimeStats+0xca>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
    19de:	c5 01       	movw	r24, r10
    19e0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    19e4:	24 96       	adiw	r28, 0x04	; 4
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	7f 90       	pop	r7
    1a04:	6f 90       	pop	r6
    1a06:	5f 90       	pop	r5
    1a08:	4f 90       	pop	r4
    1a0a:	3f 90       	pop	r3
    1a0c:	2f 90       	pop	r2
    1a0e:	08 95       	ret

00001a10 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    1a10:	08 95       	ret

00001a12 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    1a12:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    1a14:	88 e6       	ldi	r24, 0x68	; 104
    1a16:	90 e2       	ldi	r25, 0x20	; 32
    1a18:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
	CFG_ERR_LED();
    1a1c:	80 e8       	ldi	r24, 0x80	; 128
    1a1e:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    1a22:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	33 ec       	ldi	r19, 0xC3	; 195
    1a2a:	99 e0       	ldi	r25, 0x09	; 9
    1a2c:	21 50       	subi	r18, 0x01	; 1
    1a2e:	30 40       	sbci	r19, 0x00	; 0
    1a30:	90 40       	sbci	r25, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <vApplicationMallocFailedHook+0x1a>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <vApplicationMallocFailedHook+0x24>
    1a36:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1a38:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	33 ec       	ldi	r19, 0xC3	; 195
    1a40:	99 e0       	ldi	r25, 0x09	; 9
    1a42:	21 50       	subi	r18, 0x01	; 1
    1a44:	30 40       	sbci	r19, 0x00	; 0
    1a46:	90 40       	sbci	r25, 0x00	; 0
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <vApplicationMallocFailedHook+0x30>
    1a4a:	00 c0       	rjmp	.+0      	; 0x1a4c <vApplicationMallocFailedHook+0x3a>
    1a4c:	00 00       	nop
    1a4e:	e9 cf       	rjmp	.-46     	; 0x1a22 <vApplicationMallocFailedHook+0x10>

00001a50 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	c0 58       	subi	r28, 0x80	; 128
    1a5a:	d1 09       	sbc	r29, r1
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    1a60:	f8 94       	cli
	CFG_ERR_LED();
    1a62:	80 e8       	ldi	r24, 0x80	; 128
    1a64:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    1a68:	7f 93       	push	r23
    1a6a:	6f 93       	push	r22
    1a6c:	2a e8       	ldi	r18, 0x8A	; 138
    1a6e:	30 e2       	ldi	r19, 0x20	; 32
    1a70:	3f 93       	push	r19
    1a72:	2f 93       	push	r18
    1a74:	1f 92       	push	r1
    1a76:	8f 93       	push	r24
    1a78:	8e 01       	movw	r16, r28
    1a7a:	0f 5f       	subi	r16, 0xFF	; 255
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	1f 93       	push	r17
    1a80:	0f 93       	push	r16
    1a82:	0e 94 db 13 	call	0x27b6	; 0x27b6 <snprintf>
	DbgPrint(Dbg);
    1a86:	c8 01       	movw	r24, r16
    1a88:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1a90:	80 e8       	ldi	r24, 0x80	; 128
    1a92:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	93 ed       	ldi	r25, 0xD3	; 211
    1a9a:	20 e3       	ldi	r18, 0x30	; 48
    1a9c:	31 50       	subi	r19, 0x01	; 1
    1a9e:	90 40       	sbci	r25, 0x00	; 0
    1aa0:	20 40       	sbci	r18, 0x00	; 0
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <vApplicationStackOverflowHook+0x4c>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <vApplicationStackOverflowHook+0x56>
    1aa6:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    1aa8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	93 ed       	ldi	r25, 0xD3	; 211
    1ab0:	20 e3       	ldi	r18, 0x30	; 48
    1ab2:	31 50       	subi	r19, 0x01	; 1
    1ab4:	90 40       	sbci	r25, 0x00	; 0
    1ab6:	20 40       	sbci	r18, 0x00	; 0
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <vApplicationStackOverflowHook+0x62>
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <vApplicationStackOverflowHook+0x6c>
    1abc:	00 00       	nop
    1abe:	e9 cf       	rjmp	.-46     	; 0x1a92 <vApplicationStackOverflowHook+0x42>

00001ac0 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	c0 58       	subi	r28, 0x80	; 128
    1aca:	d1 09       	sbc	r29, r1
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    1ad0:	f8 94       	cli
	CFG_ERR_LED();
    1ad2:	20 e8       	ldi	r18, 0x80	; 128
    1ad4:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    1ad8:	7f 93       	push	r23
    1ada:	6f 93       	push	r22
    1adc:	9f 93       	push	r25
    1ade:	8f 93       	push	r24
    1ae0:	86 ea       	ldi	r24, 0xA6	; 166
    1ae2:	90 e2       	ldi	r25, 0x20	; 32
    1ae4:	9f 93       	push	r25
    1ae6:	8f 93       	push	r24
    1ae8:	1f 92       	push	r1
    1aea:	2f 93       	push	r18
    1aec:	8e 01       	movw	r16, r28
    1aee:	0f 5f       	subi	r16, 0xFF	; 255
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	1f 93       	push	r17
    1af4:	0f 93       	push	r16
    1af6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <snprintf>
	DbgPrint(Dbg);
    1afa:	c8 01       	movw	r24, r16
    1afc:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	93 ec       	ldi	r25, 0xC3	; 195
    1b0e:	29 e0       	ldi	r18, 0x09	; 9
    1b10:	31 50       	subi	r19, 0x01	; 1
    1b12:	90 40       	sbci	r25, 0x00	; 0
    1b14:	20 40       	sbci	r18, 0x00	; 0
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <vAssertCalled+0x50>
    1b18:	00 c0       	rjmp	.+0      	; 0x1b1a <vAssertCalled+0x5a>
    1b1a:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1b1c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	93 ed       	ldi	r25, 0xD3	; 211
    1b24:	20 e3       	ldi	r18, 0x30	; 48
    1b26:	31 50       	subi	r19, 0x01	; 1
    1b28:	90 40       	sbci	r25, 0x00	; 0
    1b2a:	20 40       	sbci	r18, 0x00	; 0
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <vAssertCalled+0x66>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <vAssertCalled+0x70>
    1b30:	00 00       	nop
    1b32:	e9 cf       	rjmp	.-46     	; 0x1b06 <vAssertCalled+0x46>

00001b34 <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    1b34:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    1b38:	0e 94 c5 02 	call	0x58a	; 0x58a <DriverUSARTInit>
	DriverTWIMInit();		//Initialize TWI in master mode
    1b3c:	0e 94 04 02 	call	0x408	; 0x408 <DriverTWIMInit>
	DriverCursorstickInit();//Initialize cursor stick
    1b40:	0e 94 b3 01 	call	0x366	; 0x366 <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    1b44:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <DriverLedInit>
	DriverPowerInit();		//Initialize aux power driver
    1b48:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DriverPowerInit>
	DriverAdcInit();		//Initialize ADC driver
    1b4c:	0e 94 b2 01 	call	0x364	; 0x364 <DriverAdcInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 76 0e 	call	0x1cec	; 0x1cec <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    1b56:	87 e0       	ldi	r24, 0x07	; 7
    1b58:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1b5c:	78 94       	sei
    1b5e:	2f ef       	ldi	r18, 0xFF	; 255
    1b60:	89 ef       	ldi	r24, 0xF9	; 249
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	21 50       	subi	r18, 0x01	; 1
    1b66:	80 40       	sbci	r24, 0x00	; 0
    1b68:	90 40       	sbci	r25, 0x00	; 0
    1b6a:	e1 f7       	brne	.-8      	; 0x1b64 <main+0x30>
    1b6c:	00 c0       	rjmp	.+0      	; 0x1b6e <main+0x3a>
    1b6e:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitLooplichtTask(); // Looplicht task oproepen
    1b70:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <InitLooplichtTask>
	InitTerminalTask(); // Terminal task oproepen
    1b74:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <InitTerminalTask>
	vTaskStartScheduler();	//Start scheduler loop
    1b78:	0e 94 b5 08 	call	0x116a	; 0x116a <vTaskStartScheduler>

	return 0;
}
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	08 95       	ret

00001b82 <WorkerLooplicht>:
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    1b82:	cf e0       	ldi	r28, 0x0F	; 15
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1b84:	18 e0       	ldi	r17, 0x08	; 8
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1b86:	d1 e0       	ldi	r29, 0x01	; 1
static void WorkerLooplicht(void *pvParameters)
{
	while (1)
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
    1b88:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <xTimeIncrement>
    1b8c:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <xTimeIncrement+0x1>
    1b90:	87 ea       	ldi	r24, 0xA7	; 167
    1b92:	93 e6       	ldi	r25, 0x63	; 99
    1b94:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vTaskDelayUntil>
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
    1b98:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    1b9c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DriverLedWrite>
		if (RichtingInt == 1) {
    1ba0:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <RichtingInt>
    1ba4:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <RichtingInt+0x1>
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	91 05       	cpc	r25, r1
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <WorkerLooplicht+0x36>
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
    1bae:	02 97       	sbiw	r24, 0x02	; 2
    1bb0:	59 f0       	breq	.+22     	; 0x1bc8 <WorkerLooplicht+0x46>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    1bb2:	c0 93 12 20 	sts	0x2012, r28	; 0x802012 <LedData>
    1bb6:	e8 cf       	rjmp	.-48     	; 0x1b88 <WorkerLooplicht+0x6>
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
    1bb8:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    1bbc:	88 30       	cpi	r24, 0x08	; 8
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <WorkerLooplicht+0x56>
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
    1bc0:	88 0f       	add	r24, r24
    1bc2:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <LedData>
    1bc6:	e0 cf       	rjmp	.-64     	; 0x1b88 <WorkerLooplicht+0x6>
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
    1bc8:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	39 f0       	breq	.+14     	; 0x1bde <WorkerLooplicht+0x5c>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
    1bd0:	86 95       	lsr	r24
    1bd2:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <LedData>
    1bd6:	d8 cf       	rjmp	.-80     	; 0x1b88 <WorkerLooplicht+0x6>
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1bd8:	d0 93 12 20 	sts	0x2012, r29	; 0x802012 <LedData>
    1bdc:	d5 cf       	rjmp	.-86     	; 0x1b88 <WorkerLooplicht+0x6>
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    1bde:	10 93 12 20 	sts	0x2012, r17	; 0x802012 <LedData>
    1be2:	d2 cf       	rjmp	.-92     	; 0x1b88 <WorkerLooplicht+0x6>

00001be4 <InitLooplichtTask>:
//Private function prototypes
static void WorkerLooplicht(void *pvParameters);

//Function definitions
void InitLooplichtTask()
{
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
	xTaskCreate( WorkerLooplicht, "looplicht", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL );	
    1bea:	e1 2c       	mov	r14, r1
    1bec:	f1 2c       	mov	r15, r1
    1bee:	02 e0       	ldi	r16, 0x02	; 2
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	51 e0       	ldi	r21, 0x01	; 1
    1bf8:	66 ec       	ldi	r22, 0xC6	; 198
    1bfa:	70 e2       	ldi	r23, 0x20	; 32
    1bfc:	81 ec       	ldi	r24, 0xC1	; 193
    1bfe:	9d e0       	ldi	r25, 0x0D	; 13
    1c00:	0e 94 33 07 	call	0xe66	; 0xe66 <xTaskCreate>
}
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	08 95       	ret

00001c0c <WorkerTerminal>:

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    1c0c:	85 e1       	ldi	r24, 0x15	; 21
    1c0e:	e8 2e       	mov	r14, r24
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	f8 2e       	mov	r15, r24
    1c14:	00 ed       	ldi	r16, 0xD0	; 208
    1c16:	10 e2       	ldi	r17, 0x20	; 32
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	a9 2e       	mov	r10, r25
    1c1c:	b1 2c       	mov	r11, r1
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
    1c1e:	22 e0       	ldi	r18, 0x02	; 2
    1c20:	82 2e       	mov	r8, r18
    1c22:	91 2c       	mov	r9, r1
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
    1c24:	cc 24       	eor	r12, r12
    1c26:	c3 94       	inc	r12
    1c28:	d1 2c       	mov	r13, r1
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
		}
		printf("Resterende heap: %d en basisadres: %d \r", xPortGetFreeHeapSize(), pvPortMalloc(5000));
    1c2a:	c4 ef       	ldi	r28, 0xF4	; 244
    1c2c:	d0 e2       	ldi	r29, 0x20	; 32
    1c2e:	1e c0       	rjmp	.+60     	; 0x1c6c <WorkerTerminal+0x60>
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
    1c30:	c0 92 13 20 	sts	0x2013, r12	; 0x802013 <RichtingInt>
    1c34:	d0 92 14 20 	sts	0x2014, r13	; 0x802014 <RichtingInt+0x1>
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
		}
		printf("Resterende heap: %d en basisadres: %d \r", xPortGetFreeHeapSize(), pvPortMalloc(5000));
    1c38:	88 e8       	ldi	r24, 0x88	; 136
    1c3a:	93 e1       	ldi	r25, 0x13	; 19
    1c3c:	0e 94 df 02 	call	0x5be	; 0x5be <pvPortMalloc>
    1c40:	78 2e       	mov	r7, r24
    1c42:	69 2e       	mov	r6, r25
    1c44:	0e 94 a9 03 	call	0x752	; 0x752 <xPortGetFreeHeapSize>
    1c48:	6f 92       	push	r6
    1c4a:	7f 92       	push	r7
    1c4c:	9f 93       	push	r25
    1c4e:	8f 93       	push	r24
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	0e 94 83 13 	call	0x2706	; 0x2706 <printf>
		puts(Buffer); // Buffer afprinten
    1c58:	83 ea       	ldi	r24, 0xA3	; 163
    1c5a:	91 e6       	ldi	r25, 0x61	; 97
    1c5c:	0e 94 97 13 	call	0x272e	; 0x272e <puts>
	}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    1c6c:	ff 92       	push	r15
    1c6e:	ef 92       	push	r14
    1c70:	1f 93       	push	r17
    1c72:	0f 93       	push	r16
    1c74:	0e 94 c7 13 	call	0x278e	; 0x278e <scanf>
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
    1c78:	83 ea       	ldi	r24, 0xA3	; 163
    1c7a:	91 e6       	ldi	r25, 0x61	; 97
    1c7c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <vTaskGetRunTimeStats>
		if (strcmp(RichtingString, "looplicht_links") == 0) {
    1c80:	63 ed       	ldi	r22, 0xD3	; 211
    1c82:	70 e2       	ldi	r23, 0x20	; 32
    1c84:	85 e1       	ldi	r24, 0x15	; 21
    1c86:	90 e2       	ldi	r25, 0x20	; 32
    1c88:	0e 94 2c 13 	call	0x2658	; 0x2658 <strcmp>
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	89 2b       	or	r24, r25
    1c96:	61 f2       	breq	.-104    	; 0x1c30 <WorkerTerminal+0x24>
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
    1c98:	63 ee       	ldi	r22, 0xE3	; 227
    1c9a:	70 e2       	ldi	r23, 0x20	; 32
    1c9c:	85 e1       	ldi	r24, 0x15	; 21
    1c9e:	90 e2       	ldi	r25, 0x20	; 32
    1ca0:	0e 94 2c 13 	call	0x2658	; 0x2658 <strcmp>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	29 f4       	brne	.+10     	; 0x1cb2 <WorkerTerminal+0xa6>
			RichtingInt = 2;
    1ca8:	80 92 13 20 	sts	0x2013, r8	; 0x802013 <RichtingInt>
    1cac:	90 92 14 20 	sts	0x2014, r9	; 0x802014 <RichtingInt+0x1>
    1cb0:	c3 cf       	rjmp	.-122    	; 0x1c38 <WorkerTerminal+0x2c>
		} else {
			RichtingInt = 3;
    1cb2:	a0 92 13 20 	sts	0x2013, r10	; 0x802013 <RichtingInt>
    1cb6:	b0 92 14 20 	sts	0x2014, r11	; 0x802014 <RichtingInt+0x1>
    1cba:	be cf       	rjmp	.-132    	; 0x1c38 <WorkerTerminal+0x2c>

00001cbc <InitTerminalTask>:
//Private function prototypes
static void WorkerTerminal(void *pvParameters);

//Function definitions
void InitTerminalTask()
{
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
	xTaskCreate( WorkerTerminal, "terminal", configMINIMAL_STACK_SIZE+512 , NULL, tskIDLE_PRIORITY+1, NULL );	
    1cc2:	e1 2c       	mov	r14, r1
    1cc4:	f1 2c       	mov	r15, r1
    1cc6:	01 e0       	ldi	r16, 0x01	; 1
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	53 e0       	ldi	r21, 0x03	; 3
    1cd0:	6c e1       	ldi	r22, 0x1C	; 28
    1cd2:	71 e2       	ldi	r23, 0x21	; 33
    1cd4:	86 e0       	ldi	r24, 0x06	; 6
    1cd6:	9e e0       	ldi	r25, 0x0E	; 14
    1cd8:	0e 94 33 07 	call	0xe66	; 0xe66 <xTaskCreate>
}
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	08 95       	ret

00001ce4 <DriverPowerInit>:
    1ce4:	80 e2       	ldi	r24, 0x20	; 32
    1ce6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    1cea:	08 95       	ret

00001cec <DriverPowerVccAuxSet>:
    1cec:	81 11       	cpse	r24, r1
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <DriverPowerVccAuxSet+0xc>
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1cf6:	08 95       	ret
    1cf8:	80 e2       	ldi	r24, 0x20	; 32
    1cfa:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    1cfe:	08 95       	ret

00001d00 <vfprintf>:
    1d00:	2f 92       	push	r2
    1d02:	3f 92       	push	r3
    1d04:	4f 92       	push	r4
    1d06:	5f 92       	push	r5
    1d08:	6f 92       	push	r6
    1d0a:	7f 92       	push	r7
    1d0c:	8f 92       	push	r8
    1d0e:	9f 92       	push	r9
    1d10:	af 92       	push	r10
    1d12:	bf 92       	push	r11
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	60 97       	sbiw	r28, 0x10	; 16
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	7c 01       	movw	r14, r24
    1d30:	1b 01       	movw	r2, r22
    1d32:	6a 01       	movw	r12, r20
    1d34:	fc 01       	movw	r30, r24
    1d36:	16 82       	std	Z+6, r1	; 0x06
    1d38:	17 82       	std	Z+7, r1	; 0x07
    1d3a:	83 81       	ldd	r24, Z+3	; 0x03
    1d3c:	81 ff       	sbrs	r24, 1
    1d3e:	44 c3       	rjmp	.+1672   	; 0x23c8 <vfprintf+0x6c8>
    1d40:	9e 01       	movw	r18, r28
    1d42:	2f 5f       	subi	r18, 0xFF	; 255
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	39 01       	movw	r6, r18
    1d48:	f7 01       	movw	r30, r14
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	f1 01       	movw	r30, r2
    1d4e:	93 fd       	sbrc	r25, 3
    1d50:	85 91       	lpm	r24, Z+
    1d52:	93 ff       	sbrs	r25, 3
    1d54:	81 91       	ld	r24, Z+
    1d56:	1f 01       	movw	r2, r30
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <vfprintf+0x5e>
    1d5c:	31 c3       	rjmp	.+1634   	; 0x23c0 <vfprintf+0x6c0>
    1d5e:	85 32       	cpi	r24, 0x25	; 37
    1d60:	39 f4       	brne	.+14     	; 0x1d70 <vfprintf+0x70>
    1d62:	93 fd       	sbrc	r25, 3
    1d64:	85 91       	lpm	r24, Z+
    1d66:	93 ff       	sbrs	r25, 3
    1d68:	81 91       	ld	r24, Z+
    1d6a:	1f 01       	movw	r2, r30
    1d6c:	85 32       	cpi	r24, 0x25	; 37
    1d6e:	39 f4       	brne	.+14     	; 0x1d7e <vfprintf+0x7e>
    1d70:	b7 01       	movw	r22, r14
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    1d78:	56 01       	movw	r10, r12
    1d7a:	65 01       	movw	r12, r10
    1d7c:	e5 cf       	rjmp	.-54     	; 0x1d48 <vfprintf+0x48>
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	51 2c       	mov	r5, r1
    1d82:	91 2c       	mov	r9, r1
    1d84:	ff e1       	ldi	r31, 0x1F	; 31
    1d86:	f9 15       	cp	r31, r9
    1d88:	d8 f0       	brcs	.+54     	; 0x1dc0 <vfprintf+0xc0>
    1d8a:	8b 32       	cpi	r24, 0x2B	; 43
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <vfprintf+0xac>
    1d8e:	38 f4       	brcc	.+14     	; 0x1d9e <vfprintf+0x9e>
    1d90:	80 32       	cpi	r24, 0x20	; 32
    1d92:	79 f0       	breq	.+30     	; 0x1db2 <vfprintf+0xb2>
    1d94:	83 32       	cpi	r24, 0x23	; 35
    1d96:	a1 f4       	brne	.+40     	; 0x1dc0 <vfprintf+0xc0>
    1d98:	f9 2d       	mov	r31, r9
    1d9a:	f0 61       	ori	r31, 0x10	; 16
    1d9c:	2e c0       	rjmp	.+92     	; 0x1dfa <vfprintf+0xfa>
    1d9e:	8d 32       	cpi	r24, 0x2D	; 45
    1da0:	61 f0       	breq	.+24     	; 0x1dba <vfprintf+0xba>
    1da2:	80 33       	cpi	r24, 0x30	; 48
    1da4:	69 f4       	brne	.+26     	; 0x1dc0 <vfprintf+0xc0>
    1da6:	29 2d       	mov	r18, r9
    1da8:	21 60       	ori	r18, 0x01	; 1
    1daa:	2d c0       	rjmp	.+90     	; 0x1e06 <vfprintf+0x106>
    1dac:	39 2d       	mov	r19, r9
    1dae:	32 60       	ori	r19, 0x02	; 2
    1db0:	93 2e       	mov	r9, r19
    1db2:	89 2d       	mov	r24, r9
    1db4:	84 60       	ori	r24, 0x04	; 4
    1db6:	98 2e       	mov	r9, r24
    1db8:	2a c0       	rjmp	.+84     	; 0x1e0e <vfprintf+0x10e>
    1dba:	e9 2d       	mov	r30, r9
    1dbc:	e8 60       	ori	r30, 0x08	; 8
    1dbe:	15 c0       	rjmp	.+42     	; 0x1dea <vfprintf+0xea>
    1dc0:	97 fc       	sbrc	r9, 7
    1dc2:	2d c0       	rjmp	.+90     	; 0x1e1e <vfprintf+0x11e>
    1dc4:	20 ed       	ldi	r18, 0xD0	; 208
    1dc6:	28 0f       	add	r18, r24
    1dc8:	2a 30       	cpi	r18, 0x0A	; 10
    1dca:	88 f4       	brcc	.+34     	; 0x1dee <vfprintf+0xee>
    1dcc:	96 fe       	sbrs	r9, 6
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <vfprintf+0xdc>
    1dd0:	3a e0       	ldi	r19, 0x0A	; 10
    1dd2:	13 9f       	mul	r17, r19
    1dd4:	20 0d       	add	r18, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	12 2f       	mov	r17, r18
    1dda:	19 c0       	rjmp	.+50     	; 0x1e0e <vfprintf+0x10e>
    1ddc:	8a e0       	ldi	r24, 0x0A	; 10
    1dde:	58 9e       	mul	r5, r24
    1de0:	20 0d       	add	r18, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	52 2e       	mov	r5, r18
    1de6:	e9 2d       	mov	r30, r9
    1de8:	e0 62       	ori	r30, 0x20	; 32
    1dea:	9e 2e       	mov	r9, r30
    1dec:	10 c0       	rjmp	.+32     	; 0x1e0e <vfprintf+0x10e>
    1dee:	8e 32       	cpi	r24, 0x2E	; 46
    1df0:	31 f4       	brne	.+12     	; 0x1dfe <vfprintf+0xfe>
    1df2:	96 fc       	sbrc	r9, 6
    1df4:	e5 c2       	rjmp	.+1482   	; 0x23c0 <vfprintf+0x6c0>
    1df6:	f9 2d       	mov	r31, r9
    1df8:	f0 64       	ori	r31, 0x40	; 64
    1dfa:	9f 2e       	mov	r9, r31
    1dfc:	08 c0       	rjmp	.+16     	; 0x1e0e <vfprintf+0x10e>
    1dfe:	8c 36       	cpi	r24, 0x6C	; 108
    1e00:	21 f4       	brne	.+8      	; 0x1e0a <vfprintf+0x10a>
    1e02:	29 2d       	mov	r18, r9
    1e04:	20 68       	ori	r18, 0x80	; 128
    1e06:	92 2e       	mov	r9, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vfprintf+0x10e>
    1e0a:	88 36       	cpi	r24, 0x68	; 104
    1e0c:	41 f4       	brne	.+16     	; 0x1e1e <vfprintf+0x11e>
    1e0e:	f1 01       	movw	r30, r2
    1e10:	93 fd       	sbrc	r25, 3
    1e12:	85 91       	lpm	r24, Z+
    1e14:	93 ff       	sbrs	r25, 3
    1e16:	81 91       	ld	r24, Z+
    1e18:	1f 01       	movw	r2, r30
    1e1a:	81 11       	cpse	r24, r1
    1e1c:	b3 cf       	rjmp	.-154    	; 0x1d84 <vfprintf+0x84>
    1e1e:	9b eb       	ldi	r25, 0xBB	; 187
    1e20:	98 0f       	add	r25, r24
    1e22:	93 30       	cpi	r25, 0x03	; 3
    1e24:	20 f4       	brcc	.+8      	; 0x1e2e <vfprintf+0x12e>
    1e26:	99 2d       	mov	r25, r9
    1e28:	90 61       	ori	r25, 0x10	; 16
    1e2a:	80 5e       	subi	r24, 0xE0	; 224
    1e2c:	07 c0       	rjmp	.+14     	; 0x1e3c <vfprintf+0x13c>
    1e2e:	9b e9       	ldi	r25, 0x9B	; 155
    1e30:	98 0f       	add	r25, r24
    1e32:	93 30       	cpi	r25, 0x03	; 3
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <vfprintf+0x138>
    1e36:	66 c1       	rjmp	.+716    	; 0x2104 <vfprintf+0x404>
    1e38:	99 2d       	mov	r25, r9
    1e3a:	9f 7e       	andi	r25, 0xEF	; 239
    1e3c:	96 ff       	sbrs	r25, 6
    1e3e:	16 e0       	ldi	r17, 0x06	; 6
    1e40:	9f 73       	andi	r25, 0x3F	; 63
    1e42:	99 2e       	mov	r9, r25
    1e44:	85 36       	cpi	r24, 0x65	; 101
    1e46:	19 f4       	brne	.+6      	; 0x1e4e <vfprintf+0x14e>
    1e48:	90 64       	ori	r25, 0x40	; 64
    1e4a:	99 2e       	mov	r9, r25
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <vfprintf+0x15e>
    1e4e:	86 36       	cpi	r24, 0x66	; 102
    1e50:	21 f4       	brne	.+8      	; 0x1e5a <vfprintf+0x15a>
    1e52:	39 2f       	mov	r19, r25
    1e54:	30 68       	ori	r19, 0x80	; 128
    1e56:	93 2e       	mov	r9, r19
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <vfprintf+0x15e>
    1e5a:	11 11       	cpse	r17, r1
    1e5c:	11 50       	subi	r17, 0x01	; 1
    1e5e:	97 fe       	sbrs	r9, 7
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <vfprintf+0x170>
    1e62:	1c 33       	cpi	r17, 0x3C	; 60
    1e64:	50 f4       	brcc	.+20     	; 0x1e7a <vfprintf+0x17a>
    1e66:	44 24       	eor	r4, r4
    1e68:	43 94       	inc	r4
    1e6a:	41 0e       	add	r4, r17
    1e6c:	27 e0       	ldi	r18, 0x07	; 7
    1e6e:	0b c0       	rjmp	.+22     	; 0x1e86 <vfprintf+0x186>
    1e70:	18 30       	cpi	r17, 0x08	; 8
    1e72:	38 f0       	brcs	.+14     	; 0x1e82 <vfprintf+0x182>
    1e74:	27 e0       	ldi	r18, 0x07	; 7
    1e76:	17 e0       	ldi	r17, 0x07	; 7
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <vfprintf+0x184>
    1e7a:	27 e0       	ldi	r18, 0x07	; 7
    1e7c:	9c e3       	ldi	r25, 0x3C	; 60
    1e7e:	49 2e       	mov	r4, r25
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <vfprintf+0x186>
    1e82:	21 2f       	mov	r18, r17
    1e84:	41 2c       	mov	r4, r1
    1e86:	56 01       	movw	r10, r12
    1e88:	84 e0       	ldi	r24, 0x04	; 4
    1e8a:	a8 0e       	add	r10, r24
    1e8c:	b1 1c       	adc	r11, r1
    1e8e:	f6 01       	movw	r30, r12
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	04 2d       	mov	r16, r4
    1e9a:	a3 01       	movw	r20, r6
    1e9c:	0e 94 42 12 	call	0x2484	; 0x2484 <__ftoa_engine>
    1ea0:	6c 01       	movw	r12, r24
    1ea2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea4:	fc 87       	std	Y+12, r31	; 0x0c
    1ea6:	f0 ff       	sbrs	r31, 0
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <vfprintf+0x1ae>
    1eaa:	f3 ff       	sbrs	r31, 3
    1eac:	06 c0       	rjmp	.+12     	; 0x1eba <vfprintf+0x1ba>
    1eae:	91 fc       	sbrc	r9, 1
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <vfprintf+0x1be>
    1eb2:	92 fe       	sbrs	r9, 2
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <vfprintf+0x1c2>
    1eb6:	00 e2       	ldi	r16, 0x20	; 32
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <vfprintf+0x1c4>
    1eba:	0d e2       	ldi	r16, 0x2D	; 45
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <vfprintf+0x1c4>
    1ebe:	0b e2       	ldi	r16, 0x2B	; 43
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <vfprintf+0x1c4>
    1ec2:	00 e0       	ldi	r16, 0x00	; 0
    1ec4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ec6:	8c 70       	andi	r24, 0x0C	; 12
    1ec8:	19 f0       	breq	.+6      	; 0x1ed0 <vfprintf+0x1d0>
    1eca:	01 11       	cpse	r16, r1
    1ecc:	5a c2       	rjmp	.+1204   	; 0x2382 <vfprintf+0x682>
    1ece:	9b c2       	rjmp	.+1334   	; 0x2406 <vfprintf+0x706>
    1ed0:	97 fe       	sbrs	r9, 7
    1ed2:	10 c0       	rjmp	.+32     	; 0x1ef4 <vfprintf+0x1f4>
    1ed4:	4c 0c       	add	r4, r12
    1ed6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ed8:	f4 ff       	sbrs	r31, 4
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <vfprintf+0x1e4>
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	81 33       	cpi	r24, 0x31	; 49
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <vfprintf+0x1e4>
    1ee2:	4a 94       	dec	r4
    1ee4:	14 14       	cp	r1, r4
    1ee6:	74 f5       	brge	.+92     	; 0x1f44 <vfprintf+0x244>
    1ee8:	28 e0       	ldi	r18, 0x08	; 8
    1eea:	24 15       	cp	r18, r4
    1eec:	78 f5       	brcc	.+94     	; 0x1f4c <vfprintf+0x24c>
    1eee:	88 e0       	ldi	r24, 0x08	; 8
    1ef0:	48 2e       	mov	r4, r24
    1ef2:	2c c0       	rjmp	.+88     	; 0x1f4c <vfprintf+0x24c>
    1ef4:	96 fc       	sbrc	r9, 6
    1ef6:	2a c0       	rjmp	.+84     	; 0x1f4c <vfprintf+0x24c>
    1ef8:	81 2f       	mov	r24, r17
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	8c 15       	cp	r24, r12
    1efe:	9d 05       	cpc	r25, r13
    1f00:	9c f0       	brlt	.+38     	; 0x1f28 <vfprintf+0x228>
    1f02:	3c ef       	ldi	r19, 0xFC	; 252
    1f04:	c3 16       	cp	r12, r19
    1f06:	3f ef       	ldi	r19, 0xFF	; 255
    1f08:	d3 06       	cpc	r13, r19
    1f0a:	74 f0       	brlt	.+28     	; 0x1f28 <vfprintf+0x228>
    1f0c:	89 2d       	mov	r24, r9
    1f0e:	80 68       	ori	r24, 0x80	; 128
    1f10:	98 2e       	mov	r9, r24
    1f12:	0a c0       	rjmp	.+20     	; 0x1f28 <vfprintf+0x228>
    1f14:	e2 e0       	ldi	r30, 0x02	; 2
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	ec 0f       	add	r30, r28
    1f1a:	fd 1f       	adc	r31, r29
    1f1c:	e1 0f       	add	r30, r17
    1f1e:	f1 1d       	adc	r31, r1
    1f20:	80 81       	ld	r24, Z
    1f22:	80 33       	cpi	r24, 0x30	; 48
    1f24:	19 f4       	brne	.+6      	; 0x1f2c <vfprintf+0x22c>
    1f26:	11 50       	subi	r17, 0x01	; 1
    1f28:	11 11       	cpse	r17, r1
    1f2a:	f4 cf       	rjmp	.-24     	; 0x1f14 <vfprintf+0x214>
    1f2c:	97 fe       	sbrs	r9, 7
    1f2e:	0e c0       	rjmp	.+28     	; 0x1f4c <vfprintf+0x24c>
    1f30:	44 24       	eor	r4, r4
    1f32:	43 94       	inc	r4
    1f34:	41 0e       	add	r4, r17
    1f36:	81 2f       	mov	r24, r17
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	c8 16       	cp	r12, r24
    1f3c:	d9 06       	cpc	r13, r25
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <vfprintf+0x24a>
    1f40:	1c 19       	sub	r17, r12
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <vfprintf+0x24c>
    1f44:	44 24       	eor	r4, r4
    1f46:	43 94       	inc	r4
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <vfprintf+0x24c>
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
    1f4c:	97 fe       	sbrs	r9, 7
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <vfprintf+0x25c>
    1f50:	1c 14       	cp	r1, r12
    1f52:	1d 04       	cpc	r1, r13
    1f54:	34 f4       	brge	.+12     	; 0x1f62 <vfprintf+0x262>
    1f56:	c6 01       	movw	r24, r12
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	05 c0       	rjmp	.+10     	; 0x1f66 <vfprintf+0x266>
    1f5c:	85 e0       	ldi	r24, 0x05	; 5
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <vfprintf+0x266>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	01 11       	cpse	r16, r1
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	11 23       	and	r17, r17
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <vfprintf+0x27a>
    1f6e:	21 2f       	mov	r18, r17
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	82 0f       	add	r24, r18
    1f78:	93 1f       	adc	r25, r19
    1f7a:	25 2d       	mov	r18, r5
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	82 17       	cp	r24, r18
    1f80:	93 07       	cpc	r25, r19
    1f82:	14 f4       	brge	.+4      	; 0x1f88 <vfprintf+0x288>
    1f84:	58 1a       	sub	r5, r24
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <vfprintf+0x28a>
    1f88:	51 2c       	mov	r5, r1
    1f8a:	89 2d       	mov	r24, r9
    1f8c:	89 70       	andi	r24, 0x09	; 9
    1f8e:	49 f4       	brne	.+18     	; 0x1fa2 <vfprintf+0x2a2>
    1f90:	55 20       	and	r5, r5
    1f92:	39 f0       	breq	.+14     	; 0x1fa2 <vfprintf+0x2a2>
    1f94:	b7 01       	movw	r22, r14
    1f96:	80 e2       	ldi	r24, 0x20	; 32
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    1f9e:	5a 94       	dec	r5
    1fa0:	f7 cf       	rjmp	.-18     	; 0x1f90 <vfprintf+0x290>
    1fa2:	00 23       	and	r16, r16
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <vfprintf+0x2b0>
    1fa6:	b7 01       	movw	r22, r14
    1fa8:	80 2f       	mov	r24, r16
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    1fb0:	93 fc       	sbrc	r9, 3
    1fb2:	09 c0       	rjmp	.+18     	; 0x1fc6 <vfprintf+0x2c6>
    1fb4:	55 20       	and	r5, r5
    1fb6:	39 f0       	breq	.+14     	; 0x1fc6 <vfprintf+0x2c6>
    1fb8:	b7 01       	movw	r22, r14
    1fba:	80 e3       	ldi	r24, 0x30	; 48
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    1fc2:	5a 94       	dec	r5
    1fc4:	f7 cf       	rjmp	.-18     	; 0x1fb4 <vfprintf+0x2b4>
    1fc6:	97 fe       	sbrs	r9, 7
    1fc8:	4c c0       	rjmp	.+152    	; 0x2062 <vfprintf+0x362>
    1fca:	46 01       	movw	r8, r12
    1fcc:	d7 fe       	sbrs	r13, 7
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <vfprintf+0x2d4>
    1fd0:	81 2c       	mov	r8, r1
    1fd2:	91 2c       	mov	r9, r1
    1fd4:	c6 01       	movw	r24, r12
    1fd6:	88 19       	sub	r24, r8
    1fd8:	99 09       	sbc	r25, r9
    1fda:	f3 01       	movw	r30, r6
    1fdc:	e8 0f       	add	r30, r24
    1fde:	f9 1f       	adc	r31, r25
    1fe0:	ed 87       	std	Y+13, r30	; 0x0d
    1fe2:	fe 87       	std	Y+14, r31	; 0x0e
    1fe4:	96 01       	movw	r18, r12
    1fe6:	24 19       	sub	r18, r4
    1fe8:	31 09       	sbc	r19, r1
    1fea:	2f 87       	std	Y+15, r18	; 0x0f
    1fec:	38 8b       	std	Y+16, r19	; 0x10
    1fee:	01 2f       	mov	r16, r17
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	11 95       	neg	r17
    1ff4:	01 95       	neg	r16
    1ff6:	11 09       	sbc	r17, r1
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	83 16       	cp	r8, r19
    1ffc:	93 06       	cpc	r9, r19
    1ffe:	29 f4       	brne	.+10     	; 0x200a <vfprintf+0x30a>
    2000:	b7 01       	movw	r22, r14
    2002:	8e e2       	ldi	r24, 0x2E	; 46
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    200a:	c8 14       	cp	r12, r8
    200c:	d9 04       	cpc	r13, r9
    200e:	4c f0       	brlt	.+18     	; 0x2022 <vfprintf+0x322>
    2010:	8f 85       	ldd	r24, Y+15	; 0x0f
    2012:	98 89       	ldd	r25, Y+16	; 0x10
    2014:	88 15       	cp	r24, r8
    2016:	99 05       	cpc	r25, r9
    2018:	24 f4       	brge	.+8      	; 0x2022 <vfprintf+0x322>
    201a:	ed 85       	ldd	r30, Y+13	; 0x0d
    201c:	fe 85       	ldd	r31, Y+14	; 0x0e
    201e:	81 81       	ldd	r24, Z+1	; 0x01
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <vfprintf+0x324>
    2022:	80 e3       	ldi	r24, 0x30	; 48
    2024:	f1 e0       	ldi	r31, 0x01	; 1
    2026:	8f 1a       	sub	r8, r31
    2028:	91 08       	sbc	r9, r1
    202a:	2d 85       	ldd	r18, Y+13	; 0x0d
    202c:	3e 85       	ldd	r19, Y+14	; 0x0e
    202e:	2f 5f       	subi	r18, 0xFF	; 255
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	2d 87       	std	Y+13, r18	; 0x0d
    2034:	3e 87       	std	Y+14, r19	; 0x0e
    2036:	80 16       	cp	r8, r16
    2038:	91 06       	cpc	r9, r17
    203a:	2c f0       	brlt	.+10     	; 0x2046 <vfprintf+0x346>
    203c:	b7 01       	movw	r22, r14
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2044:	d9 cf       	rjmp	.-78     	; 0x1ff8 <vfprintf+0x2f8>
    2046:	c8 14       	cp	r12, r8
    2048:	d9 04       	cpc	r13, r9
    204a:	41 f4       	brne	.+16     	; 0x205c <vfprintf+0x35c>
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	96 33       	cpi	r25, 0x36	; 54
    2050:	20 f4       	brcc	.+8      	; 0x205a <vfprintf+0x35a>
    2052:	95 33       	cpi	r25, 0x35	; 53
    2054:	19 f4       	brne	.+6      	; 0x205c <vfprintf+0x35c>
    2056:	3c 85       	ldd	r19, Y+12	; 0x0c
    2058:	34 ff       	sbrs	r19, 4
    205a:	81 e3       	ldi	r24, 0x31	; 49
    205c:	b7 01       	movw	r22, r14
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	4e c0       	rjmp	.+156    	; 0x20fe <vfprintf+0x3fe>
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	81 33       	cpi	r24, 0x31	; 49
    2066:	19 f0       	breq	.+6      	; 0x206e <vfprintf+0x36e>
    2068:	9c 85       	ldd	r25, Y+12	; 0x0c
    206a:	9f 7e       	andi	r25, 0xEF	; 239
    206c:	9c 87       	std	Y+12, r25	; 0x0c
    206e:	b7 01       	movw	r22, r14
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2076:	11 11       	cpse	r17, r1
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <vfprintf+0x384>
    207a:	94 fc       	sbrc	r9, 4
    207c:	18 c0       	rjmp	.+48     	; 0x20ae <vfprintf+0x3ae>
    207e:	85 e6       	ldi	r24, 0x65	; 101
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	17 c0       	rjmp	.+46     	; 0x20b2 <vfprintf+0x3b2>
    2084:	b7 01       	movw	r22, r14
    2086:	8e e2       	ldi	r24, 0x2E	; 46
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    208e:	1e 5f       	subi	r17, 0xFE	; 254
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	01 e0       	ldi	r16, 0x01	; 1
    2094:	08 0f       	add	r16, r24
    2096:	f3 01       	movw	r30, r6
    2098:	e8 0f       	add	r30, r24
    209a:	f1 1d       	adc	r31, r1
    209c:	80 81       	ld	r24, Z
    209e:	b7 01       	movw	r22, r14
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    20a6:	80 2f       	mov	r24, r16
    20a8:	01 13       	cpse	r16, r17
    20aa:	f3 cf       	rjmp	.-26     	; 0x2092 <vfprintf+0x392>
    20ac:	e6 cf       	rjmp	.-52     	; 0x207a <vfprintf+0x37a>
    20ae:	85 e4       	ldi	r24, 0x45	; 69
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	b7 01       	movw	r22, r14
    20b4:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    20b8:	d7 fc       	sbrc	r13, 7
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <vfprintf+0x3c8>
    20bc:	c1 14       	cp	r12, r1
    20be:	d1 04       	cpc	r13, r1
    20c0:	41 f4       	brne	.+16     	; 0x20d2 <vfprintf+0x3d2>
    20c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    20c4:	e4 ff       	sbrs	r30, 4
    20c6:	05 c0       	rjmp	.+10     	; 0x20d2 <vfprintf+0x3d2>
    20c8:	d1 94       	neg	r13
    20ca:	c1 94       	neg	r12
    20cc:	d1 08       	sbc	r13, r1
    20ce:	8d e2       	ldi	r24, 0x2D	; 45
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <vfprintf+0x3d4>
    20d2:	8b e2       	ldi	r24, 0x2B	; 43
    20d4:	b7 01       	movw	r22, r14
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    20dc:	80 e3       	ldi	r24, 0x30	; 48
    20de:	2a e0       	ldi	r18, 0x0A	; 10
    20e0:	c2 16       	cp	r12, r18
    20e2:	d1 04       	cpc	r13, r1
    20e4:	2c f0       	brlt	.+10     	; 0x20f0 <vfprintf+0x3f0>
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	fa e0       	ldi	r31, 0x0A	; 10
    20ea:	cf 1a       	sub	r12, r31
    20ec:	d1 08       	sbc	r13, r1
    20ee:	f7 cf       	rjmp	.-18     	; 0x20de <vfprintf+0x3de>
    20f0:	b7 01       	movw	r22, r14
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    20f8:	b7 01       	movw	r22, r14
    20fa:	c6 01       	movw	r24, r12
    20fc:	c0 96       	adiw	r24, 0x30	; 48
    20fe:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2102:	54 c1       	rjmp	.+680    	; 0x23ac <vfprintf+0x6ac>
    2104:	83 36       	cpi	r24, 0x63	; 99
    2106:	31 f0       	breq	.+12     	; 0x2114 <vfprintf+0x414>
    2108:	83 37       	cpi	r24, 0x73	; 115
    210a:	79 f0       	breq	.+30     	; 0x212a <vfprintf+0x42a>
    210c:	83 35       	cpi	r24, 0x53	; 83
    210e:	09 f0       	breq	.+2      	; 0x2112 <vfprintf+0x412>
    2110:	56 c0       	rjmp	.+172    	; 0x21be <vfprintf+0x4be>
    2112:	20 c0       	rjmp	.+64     	; 0x2154 <vfprintf+0x454>
    2114:	56 01       	movw	r10, r12
    2116:	32 e0       	ldi	r19, 0x02	; 2
    2118:	a3 0e       	add	r10, r19
    211a:	b1 1c       	adc	r11, r1
    211c:	f6 01       	movw	r30, r12
    211e:	80 81       	ld	r24, Z
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	01 e0       	ldi	r16, 0x01	; 1
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	63 01       	movw	r12, r6
    2128:	12 c0       	rjmp	.+36     	; 0x214e <vfprintf+0x44e>
    212a:	56 01       	movw	r10, r12
    212c:	f2 e0       	ldi	r31, 0x02	; 2
    212e:	af 0e       	add	r10, r31
    2130:	b1 1c       	adc	r11, r1
    2132:	f6 01       	movw	r30, r12
    2134:	c0 80       	ld	r12, Z
    2136:	d1 80       	ldd	r13, Z+1	; 0x01
    2138:	96 fe       	sbrs	r9, 6
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <vfprintf+0x442>
    213c:	61 2f       	mov	r22, r17
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <vfprintf+0x446>
    2142:	6f ef       	ldi	r22, 0xFF	; 255
    2144:	7f ef       	ldi	r23, 0xFF	; 255
    2146:	c6 01       	movw	r24, r12
    2148:	0e 94 3c 13 	call	0x2678	; 0x2678 <strnlen>
    214c:	8c 01       	movw	r16, r24
    214e:	f9 2d       	mov	r31, r9
    2150:	ff 77       	andi	r31, 0x7F	; 127
    2152:	14 c0       	rjmp	.+40     	; 0x217c <vfprintf+0x47c>
    2154:	56 01       	movw	r10, r12
    2156:	22 e0       	ldi	r18, 0x02	; 2
    2158:	a2 0e       	add	r10, r18
    215a:	b1 1c       	adc	r11, r1
    215c:	f6 01       	movw	r30, r12
    215e:	c0 80       	ld	r12, Z
    2160:	d1 80       	ldd	r13, Z+1	; 0x01
    2162:	96 fe       	sbrs	r9, 6
    2164:	03 c0       	rjmp	.+6      	; 0x216c <vfprintf+0x46c>
    2166:	61 2f       	mov	r22, r17
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <vfprintf+0x470>
    216c:	6f ef       	ldi	r22, 0xFF	; 255
    216e:	7f ef       	ldi	r23, 0xFF	; 255
    2170:	c6 01       	movw	r24, r12
    2172:	0e 94 1a 13 	call	0x2634	; 0x2634 <strnlen_P>
    2176:	8c 01       	movw	r16, r24
    2178:	f9 2d       	mov	r31, r9
    217a:	f0 68       	ori	r31, 0x80	; 128
    217c:	9f 2e       	mov	r9, r31
    217e:	f3 fd       	sbrc	r31, 3
    2180:	1a c0       	rjmp	.+52     	; 0x21b6 <vfprintf+0x4b6>
    2182:	85 2d       	mov	r24, r5
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	08 17       	cp	r16, r24
    2188:	19 07       	cpc	r17, r25
    218a:	a8 f4       	brcc	.+42     	; 0x21b6 <vfprintf+0x4b6>
    218c:	b7 01       	movw	r22, r14
    218e:	80 e2       	ldi	r24, 0x20	; 32
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2196:	5a 94       	dec	r5
    2198:	f4 cf       	rjmp	.-24     	; 0x2182 <vfprintf+0x482>
    219a:	f6 01       	movw	r30, r12
    219c:	97 fc       	sbrc	r9, 7
    219e:	85 91       	lpm	r24, Z+
    21a0:	97 fe       	sbrs	r9, 7
    21a2:	81 91       	ld	r24, Z+
    21a4:	6f 01       	movw	r12, r30
    21a6:	b7 01       	movw	r22, r14
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    21ae:	51 10       	cpse	r5, r1
    21b0:	5a 94       	dec	r5
    21b2:	01 50       	subi	r16, 0x01	; 1
    21b4:	11 09       	sbc	r17, r1
    21b6:	01 15       	cp	r16, r1
    21b8:	11 05       	cpc	r17, r1
    21ba:	79 f7       	brne	.-34     	; 0x219a <vfprintf+0x49a>
    21bc:	f7 c0       	rjmp	.+494    	; 0x23ac <vfprintf+0x6ac>
    21be:	84 36       	cpi	r24, 0x64	; 100
    21c0:	11 f0       	breq	.+4      	; 0x21c6 <vfprintf+0x4c6>
    21c2:	89 36       	cpi	r24, 0x69	; 105
    21c4:	61 f5       	brne	.+88     	; 0x221e <vfprintf+0x51e>
    21c6:	56 01       	movw	r10, r12
    21c8:	97 fe       	sbrs	r9, 7
    21ca:	09 c0       	rjmp	.+18     	; 0x21de <vfprintf+0x4de>
    21cc:	24 e0       	ldi	r18, 0x04	; 4
    21ce:	a2 0e       	add	r10, r18
    21d0:	b1 1c       	adc	r11, r1
    21d2:	f6 01       	movw	r30, r12
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	0a c0       	rjmp	.+20     	; 0x21f2 <vfprintf+0x4f2>
    21de:	f2 e0       	ldi	r31, 0x02	; 2
    21e0:	af 0e       	add	r10, r31
    21e2:	b1 1c       	adc	r11, r1
    21e4:	f6 01       	movw	r30, r12
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	07 2e       	mov	r0, r23
    21ec:	00 0c       	add	r0, r0
    21ee:	88 0b       	sbc	r24, r24
    21f0:	99 0b       	sbc	r25, r25
    21f2:	f9 2d       	mov	r31, r9
    21f4:	ff 76       	andi	r31, 0x6F	; 111
    21f6:	9f 2e       	mov	r9, r31
    21f8:	97 ff       	sbrs	r25, 7
    21fa:	09 c0       	rjmp	.+18     	; 0x220e <vfprintf+0x50e>
    21fc:	90 95       	com	r25
    21fe:	80 95       	com	r24
    2200:	70 95       	com	r23
    2202:	61 95       	neg	r22
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	f0 68       	ori	r31, 0x80	; 128
    220c:	9f 2e       	mov	r9, r31
    220e:	2a e0       	ldi	r18, 0x0A	; 10
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	a3 01       	movw	r20, r6
    2214:	0e 94 3b 14 	call	0x2876	; 0x2876 <__ultoa_invert>
    2218:	c8 2e       	mov	r12, r24
    221a:	c6 18       	sub	r12, r6
    221c:	3f c0       	rjmp	.+126    	; 0x229c <vfprintf+0x59c>
    221e:	09 2d       	mov	r16, r9
    2220:	85 37       	cpi	r24, 0x75	; 117
    2222:	21 f4       	brne	.+8      	; 0x222c <vfprintf+0x52c>
    2224:	0f 7e       	andi	r16, 0xEF	; 239
    2226:	2a e0       	ldi	r18, 0x0A	; 10
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	1d c0       	rjmp	.+58     	; 0x2266 <vfprintf+0x566>
    222c:	09 7f       	andi	r16, 0xF9	; 249
    222e:	8f 36       	cpi	r24, 0x6F	; 111
    2230:	91 f0       	breq	.+36     	; 0x2256 <vfprintf+0x556>
    2232:	18 f4       	brcc	.+6      	; 0x223a <vfprintf+0x53a>
    2234:	88 35       	cpi	r24, 0x58	; 88
    2236:	59 f0       	breq	.+22     	; 0x224e <vfprintf+0x54e>
    2238:	c3 c0       	rjmp	.+390    	; 0x23c0 <vfprintf+0x6c0>
    223a:	80 37       	cpi	r24, 0x70	; 112
    223c:	19 f0       	breq	.+6      	; 0x2244 <vfprintf+0x544>
    223e:	88 37       	cpi	r24, 0x78	; 120
    2240:	11 f0       	breq	.+4      	; 0x2246 <vfprintf+0x546>
    2242:	be c0       	rjmp	.+380    	; 0x23c0 <vfprintf+0x6c0>
    2244:	00 61       	ori	r16, 0x10	; 16
    2246:	04 ff       	sbrs	r16, 4
    2248:	09 c0       	rjmp	.+18     	; 0x225c <vfprintf+0x55c>
    224a:	04 60       	ori	r16, 0x04	; 4
    224c:	07 c0       	rjmp	.+14     	; 0x225c <vfprintf+0x55c>
    224e:	94 fe       	sbrs	r9, 4
    2250:	08 c0       	rjmp	.+16     	; 0x2262 <vfprintf+0x562>
    2252:	06 60       	ori	r16, 0x06	; 6
    2254:	06 c0       	rjmp	.+12     	; 0x2262 <vfprintf+0x562>
    2256:	28 e0       	ldi	r18, 0x08	; 8
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <vfprintf+0x566>
    225c:	20 e1       	ldi	r18, 0x10	; 16
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <vfprintf+0x566>
    2262:	20 e1       	ldi	r18, 0x10	; 16
    2264:	32 e0       	ldi	r19, 0x02	; 2
    2266:	56 01       	movw	r10, r12
    2268:	07 ff       	sbrs	r16, 7
    226a:	09 c0       	rjmp	.+18     	; 0x227e <vfprintf+0x57e>
    226c:	84 e0       	ldi	r24, 0x04	; 4
    226e:	a8 0e       	add	r10, r24
    2270:	b1 1c       	adc	r11, r1
    2272:	f6 01       	movw	r30, r12
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	08 c0       	rjmp	.+16     	; 0x228e <vfprintf+0x58e>
    227e:	f2 e0       	ldi	r31, 0x02	; 2
    2280:	af 0e       	add	r10, r31
    2282:	b1 1c       	adc	r11, r1
    2284:	f6 01       	movw	r30, r12
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a3 01       	movw	r20, r6
    2290:	0e 94 3b 14 	call	0x2876	; 0x2876 <__ultoa_invert>
    2294:	c8 2e       	mov	r12, r24
    2296:	c6 18       	sub	r12, r6
    2298:	0f 77       	andi	r16, 0x7F	; 127
    229a:	90 2e       	mov	r9, r16
    229c:	96 fe       	sbrs	r9, 6
    229e:	0b c0       	rjmp	.+22     	; 0x22b6 <vfprintf+0x5b6>
    22a0:	09 2d       	mov	r16, r9
    22a2:	0e 7f       	andi	r16, 0xFE	; 254
    22a4:	c1 16       	cp	r12, r17
    22a6:	50 f4       	brcc	.+20     	; 0x22bc <vfprintf+0x5bc>
    22a8:	94 fe       	sbrs	r9, 4
    22aa:	0a c0       	rjmp	.+20     	; 0x22c0 <vfprintf+0x5c0>
    22ac:	92 fc       	sbrc	r9, 2
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <vfprintf+0x5c0>
    22b0:	09 2d       	mov	r16, r9
    22b2:	0e 7e       	andi	r16, 0xEE	; 238
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <vfprintf+0x5c0>
    22b6:	dc 2c       	mov	r13, r12
    22b8:	09 2d       	mov	r16, r9
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <vfprintf+0x5c2>
    22bc:	dc 2c       	mov	r13, r12
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <vfprintf+0x5c2>
    22c0:	d1 2e       	mov	r13, r17
    22c2:	04 ff       	sbrs	r16, 4
    22c4:	0d c0       	rjmp	.+26     	; 0x22e0 <vfprintf+0x5e0>
    22c6:	fe 01       	movw	r30, r28
    22c8:	ec 0d       	add	r30, r12
    22ca:	f1 1d       	adc	r31, r1
    22cc:	80 81       	ld	r24, Z
    22ce:	80 33       	cpi	r24, 0x30	; 48
    22d0:	11 f4       	brne	.+4      	; 0x22d6 <vfprintf+0x5d6>
    22d2:	09 7e       	andi	r16, 0xE9	; 233
    22d4:	09 c0       	rjmp	.+18     	; 0x22e8 <vfprintf+0x5e8>
    22d6:	02 ff       	sbrs	r16, 2
    22d8:	06 c0       	rjmp	.+12     	; 0x22e6 <vfprintf+0x5e6>
    22da:	d3 94       	inc	r13
    22dc:	d3 94       	inc	r13
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <vfprintf+0x5e8>
    22e0:	80 2f       	mov	r24, r16
    22e2:	86 78       	andi	r24, 0x86	; 134
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <vfprintf+0x5e8>
    22e6:	d3 94       	inc	r13
    22e8:	03 fd       	sbrc	r16, 3
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <vfprintf+0x60e>
    22ec:	00 ff       	sbrs	r16, 0
    22ee:	06 c0       	rjmp	.+12     	; 0x22fc <vfprintf+0x5fc>
    22f0:	1c 2d       	mov	r17, r12
    22f2:	d5 14       	cp	r13, r5
    22f4:	80 f4       	brcc	.+32     	; 0x2316 <vfprintf+0x616>
    22f6:	15 0d       	add	r17, r5
    22f8:	1d 19       	sub	r17, r13
    22fa:	0d c0       	rjmp	.+26     	; 0x2316 <vfprintf+0x616>
    22fc:	d5 14       	cp	r13, r5
    22fe:	58 f4       	brcc	.+22     	; 0x2316 <vfprintf+0x616>
    2300:	b7 01       	movw	r22, r14
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    230a:	d3 94       	inc	r13
    230c:	f7 cf       	rjmp	.-18     	; 0x22fc <vfprintf+0x5fc>
    230e:	d5 14       	cp	r13, r5
    2310:	10 f4       	brcc	.+4      	; 0x2316 <vfprintf+0x616>
    2312:	5d 18       	sub	r5, r13
    2314:	01 c0       	rjmp	.+2      	; 0x2318 <vfprintf+0x618>
    2316:	51 2c       	mov	r5, r1
    2318:	04 ff       	sbrs	r16, 4
    231a:	10 c0       	rjmp	.+32     	; 0x233c <vfprintf+0x63c>
    231c:	b7 01       	movw	r22, r14
    231e:	80 e3       	ldi	r24, 0x30	; 48
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2326:	02 ff       	sbrs	r16, 2
    2328:	17 c0       	rjmp	.+46     	; 0x2358 <vfprintf+0x658>
    232a:	01 fd       	sbrc	r16, 1
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <vfprintf+0x634>
    232e:	88 e7       	ldi	r24, 0x78	; 120
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0x638>
    2334:	88 e5       	ldi	r24, 0x58	; 88
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	b7 01       	movw	r22, r14
    233a:	0c c0       	rjmp	.+24     	; 0x2354 <vfprintf+0x654>
    233c:	80 2f       	mov	r24, r16
    233e:	86 78       	andi	r24, 0x86	; 134
    2340:	59 f0       	breq	.+22     	; 0x2358 <vfprintf+0x658>
    2342:	01 ff       	sbrs	r16, 1
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x64a>
    2346:	8b e2       	ldi	r24, 0x2B	; 43
    2348:	01 c0       	rjmp	.+2      	; 0x234c <vfprintf+0x64c>
    234a:	80 e2       	ldi	r24, 0x20	; 32
    234c:	07 fd       	sbrc	r16, 7
    234e:	8d e2       	ldi	r24, 0x2D	; 45
    2350:	b7 01       	movw	r22, r14
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2358:	c1 16       	cp	r12, r17
    235a:	38 f4       	brcc	.+14     	; 0x236a <vfprintf+0x66a>
    235c:	b7 01       	movw	r22, r14
    235e:	80 e3       	ldi	r24, 0x30	; 48
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2366:	11 50       	subi	r17, 0x01	; 1
    2368:	f7 cf       	rjmp	.-18     	; 0x2358 <vfprintf+0x658>
    236a:	ca 94       	dec	r12
    236c:	f3 01       	movw	r30, r6
    236e:	ec 0d       	add	r30, r12
    2370:	f1 1d       	adc	r31, r1
    2372:	80 81       	ld	r24, Z
    2374:	b7 01       	movw	r22, r14
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    237c:	c1 10       	cpse	r12, r1
    237e:	f5 cf       	rjmp	.-22     	; 0x236a <vfprintf+0x66a>
    2380:	15 c0       	rjmp	.+42     	; 0x23ac <vfprintf+0x6ac>
    2382:	f4 e0       	ldi	r31, 0x04	; 4
    2384:	f5 15       	cp	r31, r5
    2386:	60 f5       	brcc	.+88     	; 0x23e0 <vfprintf+0x6e0>
    2388:	84 e0       	ldi	r24, 0x04	; 4
    238a:	58 1a       	sub	r5, r24
    238c:	93 fe       	sbrs	r9, 3
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <vfprintf+0x6ce>
    2390:	01 11       	cpse	r16, r1
    2392:	27 c0       	rjmp	.+78     	; 0x23e2 <vfprintf+0x6e2>
    2394:	2c 85       	ldd	r18, Y+12	; 0x0c
    2396:	23 ff       	sbrs	r18, 3
    2398:	2a c0       	rjmp	.+84     	; 0x23ee <vfprintf+0x6ee>
    239a:	00 e1       	ldi	r16, 0x10	; 16
    239c:	12 e0       	ldi	r17, 0x02	; 2
    239e:	39 2d       	mov	r19, r9
    23a0:	30 71       	andi	r19, 0x10	; 16
    23a2:	93 2e       	mov	r9, r19
    23a4:	f8 01       	movw	r30, r16
    23a6:	84 91       	lpm	r24, Z
    23a8:	81 11       	cpse	r24, r1
    23aa:	24 c0       	rjmp	.+72     	; 0x23f4 <vfprintf+0x6f4>
    23ac:	55 20       	and	r5, r5
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <vfprintf+0x6b2>
    23b0:	e4 cc       	rjmp	.-1592   	; 0x1d7a <vfprintf+0x7a>
    23b2:	b7 01       	movw	r22, r14
    23b4:	80 e2       	ldi	r24, 0x20	; 32
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    23bc:	5a 94       	dec	r5
    23be:	f6 cf       	rjmp	.-20     	; 0x23ac <vfprintf+0x6ac>
    23c0:	f7 01       	movw	r30, r14
    23c2:	86 81       	ldd	r24, Z+6	; 0x06
    23c4:	97 81       	ldd	r25, Z+7	; 0x07
    23c6:	26 c0       	rjmp	.+76     	; 0x2414 <vfprintf+0x714>
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	9f ef       	ldi	r25, 0xFF	; 255
    23cc:	23 c0       	rjmp	.+70     	; 0x2414 <vfprintf+0x714>
    23ce:	b7 01       	movw	r22, r14
    23d0:	80 e2       	ldi	r24, 0x20	; 32
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    23d8:	5a 94       	dec	r5
    23da:	51 10       	cpse	r5, r1
    23dc:	f8 cf       	rjmp	.-16     	; 0x23ce <vfprintf+0x6ce>
    23de:	d8 cf       	rjmp	.-80     	; 0x2390 <vfprintf+0x690>
    23e0:	51 2c       	mov	r5, r1
    23e2:	b7 01       	movw	r22, r14
    23e4:	80 2f       	mov	r24, r16
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    23ec:	d3 cf       	rjmp	.-90     	; 0x2394 <vfprintf+0x694>
    23ee:	04 e1       	ldi	r16, 0x14	; 20
    23f0:	12 e0       	ldi	r17, 0x02	; 2
    23f2:	d5 cf       	rjmp	.-86     	; 0x239e <vfprintf+0x69e>
    23f4:	91 10       	cpse	r9, r1
    23f6:	80 52       	subi	r24, 0x20	; 32
    23f8:	b7 01       	movw	r22, r14
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 47 13 	call	0x268e	; 0x268e <fputc>
    2400:	0f 5f       	subi	r16, 0xFF	; 255
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	cf cf       	rjmp	.-98     	; 0x23a4 <vfprintf+0x6a4>
    2406:	23 e0       	ldi	r18, 0x03	; 3
    2408:	25 15       	cp	r18, r5
    240a:	10 f4       	brcc	.+4      	; 0x2410 <vfprintf+0x710>
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	bd cf       	rjmp	.-134    	; 0x238a <vfprintf+0x68a>
    2410:	51 2c       	mov	r5, r1
    2412:	c0 cf       	rjmp	.-128    	; 0x2394 <vfprintf+0x694>
    2414:	60 96       	adiw	r28, 0x10	; 16
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	bf 90       	pop	r11
    242c:	af 90       	pop	r10
    242e:	9f 90       	pop	r9
    2430:	8f 90       	pop	r8
    2432:	7f 90       	pop	r7
    2434:	6f 90       	pop	r6
    2436:	5f 90       	pop	r5
    2438:	4f 90       	pop	r4
    243a:	3f 90       	pop	r3
    243c:	2f 90       	pop	r2
    243e:	08 95       	ret

00002440 <__udivmodsi4>:
    2440:	a1 e2       	ldi	r26, 0x21	; 33
    2442:	1a 2e       	mov	r1, r26
    2444:	aa 1b       	sub	r26, r26
    2446:	bb 1b       	sub	r27, r27
    2448:	fd 01       	movw	r30, r26
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <__udivmodsi4_ep>

0000244c <__udivmodsi4_loop>:
    244c:	aa 1f       	adc	r26, r26
    244e:	bb 1f       	adc	r27, r27
    2450:	ee 1f       	adc	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	a2 17       	cp	r26, r18
    2456:	b3 07       	cpc	r27, r19
    2458:	e4 07       	cpc	r30, r20
    245a:	f5 07       	cpc	r31, r21
    245c:	20 f0       	brcs	.+8      	; 0x2466 <__udivmodsi4_ep>
    245e:	a2 1b       	sub	r26, r18
    2460:	b3 0b       	sbc	r27, r19
    2462:	e4 0b       	sbc	r30, r20
    2464:	f5 0b       	sbc	r31, r21

00002466 <__udivmodsi4_ep>:
    2466:	66 1f       	adc	r22, r22
    2468:	77 1f       	adc	r23, r23
    246a:	88 1f       	adc	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	1a 94       	dec	r1
    2470:	69 f7       	brne	.-38     	; 0x244c <__udivmodsi4_loop>
    2472:	60 95       	com	r22
    2474:	70 95       	com	r23
    2476:	80 95       	com	r24
    2478:	90 95       	com	r25
    247a:	9b 01       	movw	r18, r22
    247c:	ac 01       	movw	r20, r24
    247e:	bd 01       	movw	r22, r26
    2480:	cf 01       	movw	r24, r30
    2482:	08 95       	ret

00002484 <__ftoa_engine>:
    2484:	28 30       	cpi	r18, 0x08	; 8
    2486:	08 f0       	brcs	.+2      	; 0x248a <__ftoa_engine+0x6>
    2488:	27 e0       	ldi	r18, 0x07	; 7
    248a:	33 27       	eor	r19, r19
    248c:	da 01       	movw	r26, r20
    248e:	99 0f       	add	r25, r25
    2490:	31 1d       	adc	r19, r1
    2492:	87 fd       	sbrc	r24, 7
    2494:	91 60       	ori	r25, 0x01	; 1
    2496:	00 96       	adiw	r24, 0x00	; 0
    2498:	61 05       	cpc	r22, r1
    249a:	71 05       	cpc	r23, r1
    249c:	39 f4       	brne	.+14     	; 0x24ac <__ftoa_engine+0x28>
    249e:	32 60       	ori	r19, 0x02	; 2
    24a0:	2e 5f       	subi	r18, 0xFE	; 254
    24a2:	3d 93       	st	X+, r19
    24a4:	30 e3       	ldi	r19, 0x30	; 48
    24a6:	2a 95       	dec	r18
    24a8:	e1 f7       	brne	.-8      	; 0x24a2 <__ftoa_engine+0x1e>
    24aa:	08 95       	ret
    24ac:	9f 3f       	cpi	r25, 0xFF	; 255
    24ae:	30 f0       	brcs	.+12     	; 0x24bc <__ftoa_engine+0x38>
    24b0:	80 38       	cpi	r24, 0x80	; 128
    24b2:	71 05       	cpc	r23, r1
    24b4:	61 05       	cpc	r22, r1
    24b6:	09 f0       	breq	.+2      	; 0x24ba <__ftoa_engine+0x36>
    24b8:	3c 5f       	subi	r19, 0xFC	; 252
    24ba:	3c 5f       	subi	r19, 0xFC	; 252
    24bc:	3d 93       	st	X+, r19
    24be:	91 30       	cpi	r25, 0x01	; 1
    24c0:	08 f0       	brcs	.+2      	; 0x24c4 <__ftoa_engine+0x40>
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	91 1d       	adc	r25, r1
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	1f 93       	push	r17
    24cc:	0f 93       	push	r16
    24ce:	ff 92       	push	r15
    24d0:	ef 92       	push	r14
    24d2:	19 2f       	mov	r17, r25
    24d4:	98 7f       	andi	r25, 0xF8	; 248
    24d6:	96 95       	lsr	r25
    24d8:	e9 2f       	mov	r30, r25
    24da:	96 95       	lsr	r25
    24dc:	96 95       	lsr	r25
    24de:	e9 0f       	add	r30, r25
    24e0:	ff 27       	eor	r31, r31
    24e2:	ee 58       	subi	r30, 0x8E	; 142
    24e4:	fd 4f       	sbci	r31, 0xFD	; 253
    24e6:	99 27       	eor	r25, r25
    24e8:	33 27       	eor	r19, r19
    24ea:	ee 24       	eor	r14, r14
    24ec:	ff 24       	eor	r15, r15
    24ee:	a7 01       	movw	r20, r14
    24f0:	e7 01       	movw	r28, r14
    24f2:	05 90       	lpm	r0, Z+
    24f4:	08 94       	sec
    24f6:	07 94       	ror	r0
    24f8:	28 f4       	brcc	.+10     	; 0x2504 <__ftoa_engine+0x80>
    24fa:	36 0f       	add	r19, r22
    24fc:	e7 1e       	adc	r14, r23
    24fe:	f8 1e       	adc	r15, r24
    2500:	49 1f       	adc	r20, r25
    2502:	51 1d       	adc	r21, r1
    2504:	66 0f       	add	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	88 1f       	adc	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	06 94       	lsr	r0
    250e:	a1 f7       	brne	.-24     	; 0x24f8 <__ftoa_engine+0x74>
    2510:	05 90       	lpm	r0, Z+
    2512:	07 94       	ror	r0
    2514:	28 f4       	brcc	.+10     	; 0x2520 <__ftoa_engine+0x9c>
    2516:	e7 0e       	add	r14, r23
    2518:	f8 1e       	adc	r15, r24
    251a:	49 1f       	adc	r20, r25
    251c:	56 1f       	adc	r21, r22
    251e:	c1 1d       	adc	r28, r1
    2520:	77 0f       	add	r23, r23
    2522:	88 1f       	adc	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	66 1f       	adc	r22, r22
    2528:	06 94       	lsr	r0
    252a:	a1 f7       	brne	.-24     	; 0x2514 <__ftoa_engine+0x90>
    252c:	05 90       	lpm	r0, Z+
    252e:	07 94       	ror	r0
    2530:	28 f4       	brcc	.+10     	; 0x253c <__ftoa_engine+0xb8>
    2532:	f8 0e       	add	r15, r24
    2534:	49 1f       	adc	r20, r25
    2536:	56 1f       	adc	r21, r22
    2538:	c7 1f       	adc	r28, r23
    253a:	d1 1d       	adc	r29, r1
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	66 1f       	adc	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	06 94       	lsr	r0
    2546:	a1 f7       	brne	.-24     	; 0x2530 <__ftoa_engine+0xac>
    2548:	05 90       	lpm	r0, Z+
    254a:	07 94       	ror	r0
    254c:	20 f4       	brcc	.+8      	; 0x2556 <__ftoa_engine+0xd2>
    254e:	49 0f       	add	r20, r25
    2550:	56 1f       	adc	r21, r22
    2552:	c7 1f       	adc	r28, r23
    2554:	d8 1f       	adc	r29, r24
    2556:	99 0f       	add	r25, r25
    2558:	66 1f       	adc	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	88 1f       	adc	r24, r24
    255e:	06 94       	lsr	r0
    2560:	a9 f7       	brne	.-22     	; 0x254c <__ftoa_engine+0xc8>
    2562:	84 91       	lpm	r24, Z
    2564:	10 95       	com	r17
    2566:	17 70       	andi	r17, 0x07	; 7
    2568:	41 f0       	breq	.+16     	; 0x257a <__ftoa_engine+0xf6>
    256a:	d6 95       	lsr	r29
    256c:	c7 95       	ror	r28
    256e:	57 95       	ror	r21
    2570:	47 95       	ror	r20
    2572:	f7 94       	ror	r15
    2574:	e7 94       	ror	r14
    2576:	1a 95       	dec	r17
    2578:	c1 f7       	brne	.-16     	; 0x256a <__ftoa_engine+0xe6>
    257a:	e8 e1       	ldi	r30, 0x18	; 24
    257c:	f2 e0       	ldi	r31, 0x02	; 2
    257e:	68 94       	set
    2580:	15 90       	lpm	r1, Z+
    2582:	15 91       	lpm	r17, Z+
    2584:	35 91       	lpm	r19, Z+
    2586:	65 91       	lpm	r22, Z+
    2588:	95 91       	lpm	r25, Z+
    258a:	05 90       	lpm	r0, Z+
    258c:	7f e2       	ldi	r23, 0x2F	; 47
    258e:	73 95       	inc	r23
    2590:	e1 18       	sub	r14, r1
    2592:	f1 0a       	sbc	r15, r17
    2594:	43 0b       	sbc	r20, r19
    2596:	56 0b       	sbc	r21, r22
    2598:	c9 0b       	sbc	r28, r25
    259a:	d0 09       	sbc	r29, r0
    259c:	c0 f7       	brcc	.-16     	; 0x258e <__ftoa_engine+0x10a>
    259e:	e1 0c       	add	r14, r1
    25a0:	f1 1e       	adc	r15, r17
    25a2:	43 1f       	adc	r20, r19
    25a4:	56 1f       	adc	r21, r22
    25a6:	c9 1f       	adc	r28, r25
    25a8:	d0 1d       	adc	r29, r0
    25aa:	7e f4       	brtc	.+30     	; 0x25ca <__ftoa_engine+0x146>
    25ac:	70 33       	cpi	r23, 0x30	; 48
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <__ftoa_engine+0x130>
    25b0:	8a 95       	dec	r24
    25b2:	e6 cf       	rjmp	.-52     	; 0x2580 <__ftoa_engine+0xfc>
    25b4:	e8 94       	clt
    25b6:	01 50       	subi	r16, 0x01	; 1
    25b8:	30 f0       	brcs	.+12     	; 0x25c6 <__ftoa_engine+0x142>
    25ba:	08 0f       	add	r16, r24
    25bc:	0a f4       	brpl	.+2      	; 0x25c0 <__ftoa_engine+0x13c>
    25be:	00 27       	eor	r16, r16
    25c0:	02 17       	cp	r16, r18
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <__ftoa_engine+0x142>
    25c4:	20 2f       	mov	r18, r16
    25c6:	23 95       	inc	r18
    25c8:	02 2f       	mov	r16, r18
    25ca:	7a 33       	cpi	r23, 0x3A	; 58
    25cc:	28 f0       	brcs	.+10     	; 0x25d8 <__ftoa_engine+0x154>
    25ce:	79 e3       	ldi	r23, 0x39	; 57
    25d0:	7d 93       	st	X+, r23
    25d2:	2a 95       	dec	r18
    25d4:	e9 f7       	brne	.-6      	; 0x25d0 <__ftoa_engine+0x14c>
    25d6:	10 c0       	rjmp	.+32     	; 0x25f8 <__ftoa_engine+0x174>
    25d8:	7d 93       	st	X+, r23
    25da:	2a 95       	dec	r18
    25dc:	89 f6       	brne	.-94     	; 0x2580 <__ftoa_engine+0xfc>
    25de:	06 94       	lsr	r0
    25e0:	97 95       	ror	r25
    25e2:	67 95       	ror	r22
    25e4:	37 95       	ror	r19
    25e6:	17 95       	ror	r17
    25e8:	17 94       	ror	r1
    25ea:	e1 18       	sub	r14, r1
    25ec:	f1 0a       	sbc	r15, r17
    25ee:	43 0b       	sbc	r20, r19
    25f0:	56 0b       	sbc	r21, r22
    25f2:	c9 0b       	sbc	r28, r25
    25f4:	d0 09       	sbc	r29, r0
    25f6:	98 f0       	brcs	.+38     	; 0x261e <__ftoa_engine+0x19a>
    25f8:	23 95       	inc	r18
    25fa:	7e 91       	ld	r23, -X
    25fc:	73 95       	inc	r23
    25fe:	7a 33       	cpi	r23, 0x3A	; 58
    2600:	08 f0       	brcs	.+2      	; 0x2604 <__ftoa_engine+0x180>
    2602:	70 e3       	ldi	r23, 0x30	; 48
    2604:	7c 93       	st	X, r23
    2606:	20 13       	cpse	r18, r16
    2608:	b8 f7       	brcc	.-18     	; 0x25f8 <__ftoa_engine+0x174>
    260a:	7e 91       	ld	r23, -X
    260c:	70 61       	ori	r23, 0x10	; 16
    260e:	7d 93       	st	X+, r23
    2610:	30 f0       	brcs	.+12     	; 0x261e <__ftoa_engine+0x19a>
    2612:	83 95       	inc	r24
    2614:	71 e3       	ldi	r23, 0x31	; 49
    2616:	7d 93       	st	X+, r23
    2618:	70 e3       	ldi	r23, 0x30	; 48
    261a:	2a 95       	dec	r18
    261c:	e1 f7       	brne	.-8      	; 0x2616 <__ftoa_engine+0x192>
    261e:	11 24       	eor	r1, r1
    2620:	ef 90       	pop	r14
    2622:	ff 90       	pop	r15
    2624:	0f 91       	pop	r16
    2626:	1f 91       	pop	r17
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	99 27       	eor	r25, r25
    262e:	87 fd       	sbrc	r24, 7
    2630:	90 95       	com	r25
    2632:	08 95       	ret

00002634 <strnlen_P>:
    2634:	fc 01       	movw	r30, r24
    2636:	05 90       	lpm	r0, Z+
    2638:	61 50       	subi	r22, 0x01	; 1
    263a:	70 40       	sbci	r23, 0x00	; 0
    263c:	01 10       	cpse	r0, r1
    263e:	d8 f7       	brcc	.-10     	; 0x2636 <strnlen_P+0x2>
    2640:	80 95       	com	r24
    2642:	90 95       	com	r25
    2644:	8e 0f       	add	r24, r30
    2646:	9f 1f       	adc	r25, r31
    2648:	08 95       	ret

0000264a <memset>:
    264a:	dc 01       	movw	r26, r24
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <memset+0x6>
    264e:	6d 93       	st	X+, r22
    2650:	41 50       	subi	r20, 0x01	; 1
    2652:	50 40       	sbci	r21, 0x00	; 0
    2654:	e0 f7       	brcc	.-8      	; 0x264e <memset+0x4>
    2656:	08 95       	ret

00002658 <strcmp>:
    2658:	fb 01       	movw	r30, r22
    265a:	dc 01       	movw	r26, r24
    265c:	8d 91       	ld	r24, X+
    265e:	01 90       	ld	r0, Z+
    2660:	80 19       	sub	r24, r0
    2662:	01 10       	cpse	r0, r1
    2664:	d9 f3       	breq	.-10     	; 0x265c <strcmp+0x4>
    2666:	99 0b       	sbc	r25, r25
    2668:	08 95       	ret

0000266a <strcpy>:
    266a:	fb 01       	movw	r30, r22
    266c:	dc 01       	movw	r26, r24
    266e:	01 90       	ld	r0, Z+
    2670:	0d 92       	st	X+, r0
    2672:	00 20       	and	r0, r0
    2674:	e1 f7       	brne	.-8      	; 0x266e <strcpy+0x4>
    2676:	08 95       	ret

00002678 <strnlen>:
    2678:	fc 01       	movw	r30, r24
    267a:	61 50       	subi	r22, 0x01	; 1
    267c:	70 40       	sbci	r23, 0x00	; 0
    267e:	01 90       	ld	r0, Z+
    2680:	01 10       	cpse	r0, r1
    2682:	d8 f7       	brcc	.-10     	; 0x267a <strnlen+0x2>
    2684:	80 95       	com	r24
    2686:	90 95       	com	r25
    2688:	8e 0f       	add	r24, r30
    268a:	9f 1f       	adc	r25, r31
    268c:	08 95       	ret

0000268e <fputc>:
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	fb 01       	movw	r30, r22
    2698:	23 81       	ldd	r18, Z+3	; 0x03
    269a:	21 fd       	sbrc	r18, 1
    269c:	03 c0       	rjmp	.+6      	; 0x26a4 <fputc+0x16>
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	9f ef       	ldi	r25, 0xFF	; 255
    26a2:	2c c0       	rjmp	.+88     	; 0x26fc <fputc+0x6e>
    26a4:	22 ff       	sbrs	r18, 2
    26a6:	16 c0       	rjmp	.+44     	; 0x26d4 <fputc+0x46>
    26a8:	46 81       	ldd	r20, Z+6	; 0x06
    26aa:	57 81       	ldd	r21, Z+7	; 0x07
    26ac:	24 81       	ldd	r18, Z+4	; 0x04
    26ae:	35 81       	ldd	r19, Z+5	; 0x05
    26b0:	42 17       	cp	r20, r18
    26b2:	53 07       	cpc	r21, r19
    26b4:	44 f4       	brge	.+16     	; 0x26c6 <fputc+0x38>
    26b6:	a0 81       	ld	r26, Z
    26b8:	b1 81       	ldd	r27, Z+1	; 0x01
    26ba:	9d 01       	movw	r18, r26
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	20 83       	st	Z, r18
    26c2:	31 83       	std	Z+1, r19	; 0x01
    26c4:	8c 93       	st	X, r24
    26c6:	26 81       	ldd	r18, Z+6	; 0x06
    26c8:	37 81       	ldd	r19, Z+7	; 0x07
    26ca:	2f 5f       	subi	r18, 0xFF	; 255
    26cc:	3f 4f       	sbci	r19, 0xFF	; 255
    26ce:	26 83       	std	Z+6, r18	; 0x06
    26d0:	37 83       	std	Z+7, r19	; 0x07
    26d2:	14 c0       	rjmp	.+40     	; 0x26fc <fputc+0x6e>
    26d4:	8b 01       	movw	r16, r22
    26d6:	ec 01       	movw	r28, r24
    26d8:	fb 01       	movw	r30, r22
    26da:	00 84       	ldd	r0, Z+8	; 0x08
    26dc:	f1 85       	ldd	r31, Z+9	; 0x09
    26de:	e0 2d       	mov	r30, r0
    26e0:	19 95       	eicall
    26e2:	89 2b       	or	r24, r25
    26e4:	e1 f6       	brne	.-72     	; 0x269e <fputc+0x10>
    26e6:	d8 01       	movw	r26, r16
    26e8:	16 96       	adiw	r26, 0x06	; 6
    26ea:	8d 91       	ld	r24, X+
    26ec:	9c 91       	ld	r25, X
    26ee:	17 97       	sbiw	r26, 0x07	; 7
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	16 96       	adiw	r26, 0x06	; 6
    26f4:	8d 93       	st	X+, r24
    26f6:	9c 93       	st	X, r25
    26f8:	17 97       	sbiw	r26, 0x07	; 7
    26fa:	ce 01       	movw	r24, r28
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	08 95       	ret

00002706 <printf>:
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	ae 01       	movw	r20, r28
    2710:	4a 5f       	subi	r20, 0xFA	; 250
    2712:	5f 4f       	sbci	r21, 0xFF	; 255
    2714:	fa 01       	movw	r30, r20
    2716:	61 91       	ld	r22, Z+
    2718:	71 91       	ld	r23, Z+
    271a:	af 01       	movw	r20, r30
    271c:	80 91 ab 63 	lds	r24, 0x63AB	; 0x8063ab <__iob+0x2>
    2720:	90 91 ac 63 	lds	r25, 0x63AC	; 0x8063ac <__iob+0x3>
    2724:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <vfprintf>
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	08 95       	ret

0000272e <puts>:
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	e0 91 ab 63 	lds	r30, 0x63AB	; 0x8063ab <__iob+0x2>
    273a:	f0 91 ac 63 	lds	r31, 0x63AC	; 0x8063ac <__iob+0x3>
    273e:	23 81       	ldd	r18, Z+3	; 0x03
    2740:	21 ff       	sbrs	r18, 1
    2742:	1b c0       	rjmp	.+54     	; 0x277a <puts+0x4c>
    2744:	8c 01       	movw	r16, r24
    2746:	d0 e0       	ldi	r29, 0x00	; 0
    2748:	c0 e0       	ldi	r28, 0x00	; 0
    274a:	f8 01       	movw	r30, r16
    274c:	81 91       	ld	r24, Z+
    274e:	8f 01       	movw	r16, r30
    2750:	60 91 ab 63 	lds	r22, 0x63AB	; 0x8063ab <__iob+0x2>
    2754:	70 91 ac 63 	lds	r23, 0x63AC	; 0x8063ac <__iob+0x3>
    2758:	db 01       	movw	r26, r22
    275a:	18 96       	adiw	r26, 0x08	; 8
    275c:	ed 91       	ld	r30, X+
    275e:	fc 91       	ld	r31, X
    2760:	19 97       	sbiw	r26, 0x09	; 9
    2762:	88 23       	and	r24, r24
    2764:	31 f0       	breq	.+12     	; 0x2772 <puts+0x44>
    2766:	19 95       	eicall
    2768:	89 2b       	or	r24, r25
    276a:	79 f3       	breq	.-34     	; 0x274a <puts+0x1c>
    276c:	df ef       	ldi	r29, 0xFF	; 255
    276e:	cf ef       	ldi	r28, 0xFF	; 255
    2770:	ec cf       	rjmp	.-40     	; 0x274a <puts+0x1c>
    2772:	8a e0       	ldi	r24, 0x0A	; 10
    2774:	19 95       	eicall
    2776:	89 2b       	or	r24, r25
    2778:	19 f0       	breq	.+6      	; 0x2780 <puts+0x52>
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	9f ef       	ldi	r25, 0xFF	; 255
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <puts+0x56>
    2780:	8d 2f       	mov	r24, r29
    2782:	9c 2f       	mov	r25, r28
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	08 95       	ret

0000278e <scanf>:
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	ae 01       	movw	r20, r28
    2798:	4a 5f       	subi	r20, 0xFA	; 250
    279a:	5f 4f       	sbci	r21, 0xFF	; 255
    279c:	fa 01       	movw	r30, r20
    279e:	61 91       	ld	r22, Z+
    27a0:	71 91       	ld	r23, Z+
    27a2:	af 01       	movw	r20, r30
    27a4:	80 91 a9 63 	lds	r24, 0x63A9	; 0x8063a9 <__iob>
    27a8:	90 91 aa 63 	lds	r25, 0x63AA	; 0x8063aa <__iob+0x1>
    27ac:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vfscanf>
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

000027b6 <snprintf>:
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2e 97       	sbiw	r28, 0x0e	; 14
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0e 89       	ldd	r16, Y+22	; 0x16
    27ca:	1f 89       	ldd	r17, Y+23	; 0x17
    27cc:	88 8d       	ldd	r24, Y+24	; 0x18
    27ce:	99 8d       	ldd	r25, Y+25	; 0x19
    27d0:	26 e0       	ldi	r18, 0x06	; 6
    27d2:	2c 83       	std	Y+4, r18	; 0x04
    27d4:	09 83       	std	Y+1, r16	; 0x01
    27d6:	1a 83       	std	Y+2, r17	; 0x02
    27d8:	97 ff       	sbrs	r25, 7
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <snprintf+0x2a>
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e8       	ldi	r25, 0x80	; 128
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	ae 01       	movw	r20, r28
    27e8:	44 5e       	subi	r20, 0xE4	; 228
    27ea:	5f 4f       	sbci	r21, 0xFF	; 255
    27ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27f0:	ce 01       	movw	r24, r28
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <vfprintf>
    27f8:	4d 81       	ldd	r20, Y+5	; 0x05
    27fa:	5e 81       	ldd	r21, Y+6	; 0x06
    27fc:	57 fd       	sbrc	r21, 7
    27fe:	0a c0       	rjmp	.+20     	; 0x2814 <snprintf+0x5e>
    2800:	2f 81       	ldd	r18, Y+7	; 0x07
    2802:	38 85       	ldd	r19, Y+8	; 0x08
    2804:	42 17       	cp	r20, r18
    2806:	53 07       	cpc	r21, r19
    2808:	0c f4       	brge	.+2      	; 0x280c <snprintf+0x56>
    280a:	9a 01       	movw	r18, r20
    280c:	f8 01       	movw	r30, r16
    280e:	e2 0f       	add	r30, r18
    2810:	f3 1f       	adc	r31, r19
    2812:	10 82       	st	Z, r1
    2814:	2e 96       	adiw	r28, 0x0e	; 14
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	08 95       	ret

00002824 <sprintf>:
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	2e 97       	sbiw	r28, 0x0e	; 14
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0e 89       	ldd	r16, Y+22	; 0x16
    2838:	1f 89       	ldd	r17, Y+23	; 0x17
    283a:	86 e0       	ldi	r24, 0x06	; 6
    283c:	8c 83       	std	Y+4, r24	; 0x04
    283e:	09 83       	std	Y+1, r16	; 0x01
    2840:	1a 83       	std	Y+2, r17	; 0x02
    2842:	8f ef       	ldi	r24, 0xFF	; 255
    2844:	9f e7       	ldi	r25, 0x7F	; 127
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	ae 01       	movw	r20, r28
    284c:	46 5e       	subi	r20, 0xE6	; 230
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	68 8d       	ldd	r22, Y+24	; 0x18
    2852:	79 8d       	ldd	r23, Y+25	; 0x19
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <vfprintf>
    285c:	ef 81       	ldd	r30, Y+7	; 0x07
    285e:	f8 85       	ldd	r31, Y+8	; 0x08
    2860:	e0 0f       	add	r30, r16
    2862:	f1 1f       	adc	r31, r17
    2864:	10 82       	st	Z, r1
    2866:	2e 96       	adiw	r28, 0x0e	; 14
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	08 95       	ret

00002876 <__ultoa_invert>:
    2876:	fa 01       	movw	r30, r20
    2878:	aa 27       	eor	r26, r26
    287a:	28 30       	cpi	r18, 0x08	; 8
    287c:	51 f1       	breq	.+84     	; 0x28d2 <__ultoa_invert+0x5c>
    287e:	20 31       	cpi	r18, 0x10	; 16
    2880:	81 f1       	breq	.+96     	; 0x28e2 <__ultoa_invert+0x6c>
    2882:	e8 94       	clt
    2884:	6f 93       	push	r22
    2886:	6e 7f       	andi	r22, 0xFE	; 254
    2888:	6e 5f       	subi	r22, 0xFE	; 254
    288a:	7f 4f       	sbci	r23, 0xFF	; 255
    288c:	8f 4f       	sbci	r24, 0xFF	; 255
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	af 4f       	sbci	r26, 0xFF	; 255
    2892:	b1 e0       	ldi	r27, 0x01	; 1
    2894:	3e d0       	rcall	.+124    	; 0x2912 <__ultoa_invert+0x9c>
    2896:	b4 e0       	ldi	r27, 0x04	; 4
    2898:	3c d0       	rcall	.+120    	; 0x2912 <__ultoa_invert+0x9c>
    289a:	67 0f       	add	r22, r23
    289c:	78 1f       	adc	r23, r24
    289e:	89 1f       	adc	r24, r25
    28a0:	9a 1f       	adc	r25, r26
    28a2:	a1 1d       	adc	r26, r1
    28a4:	68 0f       	add	r22, r24
    28a6:	79 1f       	adc	r23, r25
    28a8:	8a 1f       	adc	r24, r26
    28aa:	91 1d       	adc	r25, r1
    28ac:	a1 1d       	adc	r26, r1
    28ae:	6a 0f       	add	r22, r26
    28b0:	71 1d       	adc	r23, r1
    28b2:	81 1d       	adc	r24, r1
    28b4:	91 1d       	adc	r25, r1
    28b6:	a1 1d       	adc	r26, r1
    28b8:	20 d0       	rcall	.+64     	; 0x28fa <__ultoa_invert+0x84>
    28ba:	09 f4       	brne	.+2      	; 0x28be <__ultoa_invert+0x48>
    28bc:	68 94       	set
    28be:	3f 91       	pop	r19
    28c0:	2a e0       	ldi	r18, 0x0A	; 10
    28c2:	26 9f       	mul	r18, r22
    28c4:	11 24       	eor	r1, r1
    28c6:	30 19       	sub	r19, r0
    28c8:	30 5d       	subi	r19, 0xD0	; 208
    28ca:	31 93       	st	Z+, r19
    28cc:	de f6       	brtc	.-74     	; 0x2884 <__ultoa_invert+0xe>
    28ce:	cf 01       	movw	r24, r30
    28d0:	08 95       	ret
    28d2:	46 2f       	mov	r20, r22
    28d4:	47 70       	andi	r20, 0x07	; 7
    28d6:	40 5d       	subi	r20, 0xD0	; 208
    28d8:	41 93       	st	Z+, r20
    28da:	b3 e0       	ldi	r27, 0x03	; 3
    28dc:	0f d0       	rcall	.+30     	; 0x28fc <__ultoa_invert+0x86>
    28de:	c9 f7       	brne	.-14     	; 0x28d2 <__ultoa_invert+0x5c>
    28e0:	f6 cf       	rjmp	.-20     	; 0x28ce <__ultoa_invert+0x58>
    28e2:	46 2f       	mov	r20, r22
    28e4:	4f 70       	andi	r20, 0x0F	; 15
    28e6:	40 5d       	subi	r20, 0xD0	; 208
    28e8:	4a 33       	cpi	r20, 0x3A	; 58
    28ea:	18 f0       	brcs	.+6      	; 0x28f2 <__ultoa_invert+0x7c>
    28ec:	49 5d       	subi	r20, 0xD9	; 217
    28ee:	31 fd       	sbrc	r19, 1
    28f0:	40 52       	subi	r20, 0x20	; 32
    28f2:	41 93       	st	Z+, r20
    28f4:	02 d0       	rcall	.+4      	; 0x28fa <__ultoa_invert+0x84>
    28f6:	a9 f7       	brne	.-22     	; 0x28e2 <__ultoa_invert+0x6c>
    28f8:	ea cf       	rjmp	.-44     	; 0x28ce <__ultoa_invert+0x58>
    28fa:	b4 e0       	ldi	r27, 0x04	; 4
    28fc:	a6 95       	lsr	r26
    28fe:	97 95       	ror	r25
    2900:	87 95       	ror	r24
    2902:	77 95       	ror	r23
    2904:	67 95       	ror	r22
    2906:	ba 95       	dec	r27
    2908:	c9 f7       	brne	.-14     	; 0x28fc <__ultoa_invert+0x86>
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	61 05       	cpc	r22, r1
    290e:	71 05       	cpc	r23, r1
    2910:	08 95       	ret
    2912:	9b 01       	movw	r18, r22
    2914:	ac 01       	movw	r20, r24
    2916:	0a 2e       	mov	r0, r26
    2918:	06 94       	lsr	r0
    291a:	57 95       	ror	r21
    291c:	47 95       	ror	r20
    291e:	37 95       	ror	r19
    2920:	27 95       	ror	r18
    2922:	ba 95       	dec	r27
    2924:	c9 f7       	brne	.-14     	; 0x2918 <__ultoa_invert+0xa2>
    2926:	62 0f       	add	r22, r18
    2928:	73 1f       	adc	r23, r19
    292a:	84 1f       	adc	r24, r20
    292c:	95 1f       	adc	r25, r21
    292e:	a0 1d       	adc	r26, r0
    2930:	08 95       	ret

00002932 <putval>:
    2932:	20 fd       	sbrc	r18, 0
    2934:	09 c0       	rjmp	.+18     	; 0x2948 <putval+0x16>
    2936:	fc 01       	movw	r30, r24
    2938:	23 fd       	sbrc	r18, 3
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <putval+0x14>
    293c:	22 ff       	sbrs	r18, 2
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <putval+0x12>
    2940:	73 83       	std	Z+3, r23	; 0x03
    2942:	62 83       	std	Z+2, r22	; 0x02
    2944:	51 83       	std	Z+1, r21	; 0x01
    2946:	40 83       	st	Z, r20
    2948:	08 95       	ret

0000294a <mulacc>:
    294a:	44 fd       	sbrc	r20, 4
    294c:	17 c0       	rjmp	.+46     	; 0x297c <mulacc+0x32>
    294e:	46 fd       	sbrc	r20, 6
    2950:	17 c0       	rjmp	.+46     	; 0x2980 <mulacc+0x36>
    2952:	ab 01       	movw	r20, r22
    2954:	bc 01       	movw	r22, r24
    2956:	da 01       	movw	r26, r20
    2958:	fb 01       	movw	r30, r22
    295a:	aa 0f       	add	r26, r26
    295c:	bb 1f       	adc	r27, r27
    295e:	ee 1f       	adc	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	10 94       	com	r1
    2964:	d1 f7       	brne	.-12     	; 0x295a <mulacc+0x10>
    2966:	4a 0f       	add	r20, r26
    2968:	5b 1f       	adc	r21, r27
    296a:	6e 1f       	adc	r22, r30
    296c:	7f 1f       	adc	r23, r31
    296e:	cb 01       	movw	r24, r22
    2970:	ba 01       	movw	r22, r20
    2972:	66 0f       	add	r22, r22
    2974:	77 1f       	adc	r23, r23
    2976:	88 1f       	adc	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	09 c0       	rjmp	.+18     	; 0x298e <mulacc+0x44>
    297c:	33 e0       	ldi	r19, 0x03	; 3
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <mulacc+0x38>
    2980:	34 e0       	ldi	r19, 0x04	; 4
    2982:	66 0f       	add	r22, r22
    2984:	77 1f       	adc	r23, r23
    2986:	88 1f       	adc	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	31 50       	subi	r19, 0x01	; 1
    298c:	d1 f7       	brne	.-12     	; 0x2982 <mulacc+0x38>
    298e:	62 0f       	add	r22, r18
    2990:	71 1d       	adc	r23, r1
    2992:	81 1d       	adc	r24, r1
    2994:	91 1d       	adc	r25, r1
    2996:	08 95       	ret

00002998 <skip_spaces>:
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	8c 01       	movw	r16, r24
    29a2:	c8 01       	movw	r24, r16
    29a4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    29a8:	ec 01       	movw	r28, r24
    29aa:	97 fd       	sbrc	r25, 7
    29ac:	08 c0       	rjmp	.+16     	; 0x29be <skip_spaces+0x26>
    29ae:	0e 94 77 17 	call	0x2eee	; 0x2eee <isspace>
    29b2:	89 2b       	or	r24, r25
    29b4:	b1 f7       	brne	.-20     	; 0x29a2 <skip_spaces+0xa>
    29b6:	b8 01       	movw	r22, r16
    29b8:	ce 01       	movw	r24, r28
    29ba:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <ungetc>
    29be:	ce 01       	movw	r24, r28
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	08 95       	ret

000029ca <conv_int>:
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	8c 01       	movw	r16, r24
    29e0:	d6 2f       	mov	r29, r22
    29e2:	7a 01       	movw	r14, r20
    29e4:	b2 2e       	mov	r11, r18
    29e6:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    29ea:	9c 01       	movw	r18, r24
    29ec:	33 27       	eor	r19, r19
    29ee:	2b 32       	cpi	r18, 0x2B	; 43
    29f0:	31 05       	cpc	r19, r1
    29f2:	31 f0       	breq	.+12     	; 0x2a00 <conv_int+0x36>
    29f4:	2d 32       	cpi	r18, 0x2D	; 45
    29f6:	31 05       	cpc	r19, r1
    29f8:	61 f4       	brne	.+24     	; 0x2a12 <conv_int+0x48>
    29fa:	8b 2d       	mov	r24, r11
    29fc:	80 68       	ori	r24, 0x80	; 128
    29fe:	b8 2e       	mov	r11, r24
    2a00:	d1 50       	subi	r29, 0x01	; 1
    2a02:	11 f4       	brne	.+4      	; 0x2a08 <conv_int+0x3e>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	68 c0       	rjmp	.+208    	; 0x2ad8 <conv_int+0x10e>
    2a08:	c8 01       	movw	r24, r16
    2a0a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2a0e:	97 fd       	sbrc	r25, 7
    2a10:	f9 cf       	rjmp	.-14     	; 0x2a04 <conv_int+0x3a>
    2a12:	cb 2d       	mov	r28, r11
    2a14:	cd 7f       	andi	r28, 0xFD	; 253
    2a16:	2b 2d       	mov	r18, r11
    2a18:	20 73       	andi	r18, 0x30	; 48
    2a1a:	09 f5       	brne	.+66     	; 0x2a5e <conv_int+0x94>
    2a1c:	80 33       	cpi	r24, 0x30	; 48
    2a1e:	f9 f4       	brne	.+62     	; 0x2a5e <conv_int+0x94>
    2a20:	aa 24       	eor	r10, r10
    2a22:	aa 94       	dec	r10
    2a24:	ad 0e       	add	r10, r29
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <conv_int+0x60>
    2a28:	43 c0       	rjmp	.+134    	; 0x2ab0 <conv_int+0xe6>
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2a30:	97 fd       	sbrc	r25, 7
    2a32:	3e c0       	rjmp	.+124    	; 0x2ab0 <conv_int+0xe6>
    2a34:	9c 01       	movw	r18, r24
    2a36:	2f 7d       	andi	r18, 0xDF	; 223
    2a38:	33 27       	eor	r19, r19
    2a3a:	28 35       	cpi	r18, 0x58	; 88
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	49 f4       	brne	.+18     	; 0x2a52 <conv_int+0x88>
    2a40:	c2 64       	ori	r28, 0x42	; 66
    2a42:	d2 50       	subi	r29, 0x02	; 2
    2a44:	a9 f1       	breq	.+106    	; 0x2ab0 <conv_int+0xe6>
    2a46:	c8 01       	movw	r24, r16
    2a48:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2a4c:	97 ff       	sbrs	r25, 7
    2a4e:	07 c0       	rjmp	.+14     	; 0x2a5e <conv_int+0x94>
    2a50:	2f c0       	rjmp	.+94     	; 0x2ab0 <conv_int+0xe6>
    2a52:	b6 fe       	sbrs	r11, 6
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <conv_int+0x90>
    2a56:	c2 60       	ori	r28, 0x02	; 2
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <conv_int+0x92>
    2a5a:	c2 61       	ori	r28, 0x12	; 18
    2a5c:	da 2d       	mov	r29, r10
    2a5e:	81 2c       	mov	r8, r1
    2a60:	91 2c       	mov	r9, r1
    2a62:	54 01       	movw	r10, r8
    2a64:	20 ed       	ldi	r18, 0xD0	; 208
    2a66:	28 0f       	add	r18, r24
    2a68:	28 30       	cpi	r18, 0x08	; 8
    2a6a:	80 f0       	brcs	.+32     	; 0x2a8c <conv_int+0xc2>
    2a6c:	c4 ff       	sbrs	r28, 4
    2a6e:	04 c0       	rjmp	.+8      	; 0x2a78 <conv_int+0xae>
    2a70:	b8 01       	movw	r22, r16
    2a72:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <ungetc>
    2a76:	19 c0       	rjmp	.+50     	; 0x2aaa <conv_int+0xe0>
    2a78:	2a 30       	cpi	r18, 0x0A	; 10
    2a7a:	40 f0       	brcs	.+16     	; 0x2a8c <conv_int+0xc2>
    2a7c:	c6 ff       	sbrs	r28, 6
    2a7e:	f8 cf       	rjmp	.-16     	; 0x2a70 <conv_int+0xa6>
    2a80:	2f 7d       	andi	r18, 0xDF	; 223
    2a82:	3f ee       	ldi	r19, 0xEF	; 239
    2a84:	32 0f       	add	r19, r18
    2a86:	36 30       	cpi	r19, 0x06	; 6
    2a88:	98 f7       	brcc	.-26     	; 0x2a70 <conv_int+0xa6>
    2a8a:	27 50       	subi	r18, 0x07	; 7
    2a8c:	4c 2f       	mov	r20, r28
    2a8e:	c5 01       	movw	r24, r10
    2a90:	b4 01       	movw	r22, r8
    2a92:	0e 94 a5 14 	call	0x294a	; 0x294a <mulacc>
    2a96:	4b 01       	movw	r8, r22
    2a98:	5c 01       	movw	r10, r24
    2a9a:	c2 60       	ori	r28, 0x02	; 2
    2a9c:	d1 50       	subi	r29, 0x01	; 1
    2a9e:	59 f0       	breq	.+22     	; 0x2ab6 <conv_int+0xec>
    2aa0:	c8 01       	movw	r24, r16
    2aa2:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2aa6:	97 ff       	sbrs	r25, 7
    2aa8:	dd cf       	rjmp	.-70     	; 0x2a64 <conv_int+0x9a>
    2aaa:	c1 fd       	sbrc	r28, 1
    2aac:	04 c0       	rjmp	.+8      	; 0x2ab6 <conv_int+0xec>
    2aae:	aa cf       	rjmp	.-172    	; 0x2a04 <conv_int+0x3a>
    2ab0:	81 2c       	mov	r8, r1
    2ab2:	91 2c       	mov	r9, r1
    2ab4:	54 01       	movw	r10, r8
    2ab6:	c7 ff       	sbrs	r28, 7
    2ab8:	08 c0       	rjmp	.+16     	; 0x2aca <conv_int+0x100>
    2aba:	b0 94       	com	r11
    2abc:	a0 94       	com	r10
    2abe:	90 94       	com	r9
    2ac0:	80 94       	com	r8
    2ac2:	81 1c       	adc	r8, r1
    2ac4:	91 1c       	adc	r9, r1
    2ac6:	a1 1c       	adc	r10, r1
    2ac8:	b1 1c       	adc	r11, r1
    2aca:	2c 2f       	mov	r18, r28
    2acc:	b5 01       	movw	r22, r10
    2ace:	a4 01       	movw	r20, r8
    2ad0:	c7 01       	movw	r24, r14
    2ad2:	0e 94 99 14 	call	0x2932	; 0x2932 <putval>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	bf 90       	pop	r11
    2ae6:	af 90       	pop	r10
    2ae8:	9f 90       	pop	r9
    2aea:	8f 90       	pop	r8
    2aec:	08 95       	ret

00002aee <conv_brk>:
    2aee:	5f 92       	push	r5
    2af0:	6f 92       	push	r6
    2af2:	7f 92       	push	r7
    2af4:	8f 92       	push	r8
    2af6:	9f 92       	push	r9
    2af8:	af 92       	push	r10
    2afa:	bf 92       	push	r11
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	a0 97       	sbiw	r28, 0x20	; 32
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	5c 01       	movw	r10, r24
    2b18:	96 2e       	mov	r9, r22
    2b1a:	7a 01       	movw	r14, r20
    2b1c:	f9 01       	movw	r30, r18
    2b1e:	8e 01       	movw	r16, r28
    2b20:	0f 5f       	subi	r16, 0xFF	; 255
    2b22:	1f 4f       	sbci	r17, 0xFF	; 255
    2b24:	68 01       	movw	r12, r16
    2b26:	80 e2       	ldi	r24, 0x20	; 32
    2b28:	d8 01       	movw	r26, r16
    2b2a:	1d 92       	st	X+, r1
    2b2c:	8a 95       	dec	r24
    2b2e:	e9 f7       	brne	.-6      	; 0x2b2a <conv_brk+0x3c>
    2b30:	d5 01       	movw	r26, r10
    2b32:	13 96       	adiw	r26, 0x03	; 3
    2b34:	8c 90       	ld	r8, X
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	61 2c       	mov	r6, r1
    2b3c:	71 2c       	mov	r7, r1
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	61 e0       	ldi	r22, 0x01	; 1
    2b42:	70 e0       	ldi	r23, 0x00	; 0
    2b44:	83 fc       	sbrc	r8, 3
    2b46:	25 91       	lpm	r18, Z+
    2b48:	83 fe       	sbrs	r8, 3
    2b4a:	21 91       	ld	r18, Z+
    2b4c:	8f 01       	movw	r16, r30
    2b4e:	52 2e       	mov	r5, r18
    2b50:	21 11       	cpse	r18, r1
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <conv_brk+0x6c>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	92 c0       	rjmp	.+292    	; 0x2c7e <conv_brk+0x190>
    2b5a:	2e 35       	cpi	r18, 0x5E	; 94
    2b5c:	11 f4       	brne	.+4      	; 0x2b62 <conv_brk+0x74>
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	51 f1       	breq	.+84     	; 0x2bb6 <conv_brk+0xc8>
    2b62:	43 2f       	mov	r20, r19
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	48 17       	cp	r20, r24
    2b68:	59 07       	cpc	r21, r25
    2b6a:	3c f4       	brge	.+14     	; 0x2b7a <conv_brk+0x8c>
    2b6c:	2d 35       	cpi	r18, 0x5D	; 93
    2b6e:	59 f1       	breq	.+86     	; 0x2bc6 <conv_brk+0xd8>
    2b70:	2d 32       	cpi	r18, 0x2D	; 45
    2b72:	19 f4       	brne	.+6      	; 0x2b7a <conv_brk+0x8c>
    2b74:	77 20       	and	r7, r7
    2b76:	09 f1       	breq	.+66     	; 0x2bba <conv_brk+0xcc>
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <conv_brk+0x92>
    2b7a:	77 20       	and	r7, r7
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <conv_brk+0x92>
    2b7e:	6a c0       	rjmp	.+212    	; 0x2c54 <conv_brk+0x166>
    2b80:	45 2d       	mov	r20, r5
    2b82:	46 95       	lsr	r20
    2b84:	46 95       	lsr	r20
    2b86:	46 95       	lsr	r20
    2b88:	d6 01       	movw	r26, r12
    2b8a:	a4 0f       	add	r26, r20
    2b8c:	b1 1d       	adc	r27, r1
    2b8e:	45 2d       	mov	r20, r5
    2b90:	47 70       	andi	r20, 0x07	; 7
    2b92:	8b 01       	movw	r16, r22
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <conv_brk+0xac>
    2b96:	00 0f       	add	r16, r16
    2b98:	11 1f       	adc	r17, r17
    2b9a:	4a 95       	dec	r20
    2b9c:	e2 f7       	brpl	.-8      	; 0x2b96 <conv_brk+0xa8>
    2b9e:	a8 01       	movw	r20, r16
    2ba0:	5c 91       	ld	r21, X
    2ba2:	45 2b       	or	r20, r21
    2ba4:	4c 93       	st	X, r20
    2ba6:	65 14       	cp	r6, r5
    2ba8:	59 f0       	breq	.+22     	; 0x2bc0 <conv_brk+0xd2>
    2baa:	56 14       	cp	r5, r6
    2bac:	10 f4       	brcc	.+4      	; 0x2bb2 <conv_brk+0xc4>
    2bae:	53 94       	inc	r5
    2bb0:	e7 cf       	rjmp	.-50     	; 0x2b80 <conv_brk+0x92>
    2bb2:	5a 94       	dec	r5
    2bb4:	e5 cf       	rjmp	.-54     	; 0x2b80 <conv_brk+0x92>
    2bb6:	31 e0       	ldi	r19, 0x01	; 1
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <conv_brk+0xd4>
    2bba:	77 24       	eor	r7, r7
    2bbc:	73 94       	inc	r7
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <conv_brk+0xd4>
    2bc0:	71 2c       	mov	r7, r1
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	bf cf       	rjmp	.-130    	; 0x2b44 <conv_brk+0x56>
    2bc6:	77 20       	and	r7, r7
    2bc8:	19 f0       	breq	.+6      	; 0x2bd0 <conv_brk+0xe2>
    2bca:	8e 81       	ldd	r24, Y+6	; 0x06
    2bcc:	80 62       	ori	r24, 0x20	; 32
    2bce:	8e 83       	std	Y+6, r24	; 0x06
    2bd0:	31 11       	cpse	r19, r1
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <conv_brk+0xec>
    2bd4:	88 24       	eor	r8, r8
    2bd6:	83 94       	inc	r8
    2bd8:	17 c0       	rjmp	.+46     	; 0x2c08 <conv_brk+0x11a>
    2bda:	f6 01       	movw	r30, r12
    2bdc:	9e 01       	movw	r18, r28
    2bde:	2f 5d       	subi	r18, 0xDF	; 223
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	80 95       	com	r24
    2be6:	81 93       	st	Z+, r24
    2be8:	2e 17       	cp	r18, r30
    2bea:	3f 07       	cpc	r19, r31
    2bec:	d1 f7       	brne	.-12     	; 0x2be2 <conv_brk+0xf4>
    2bee:	f2 cf       	rjmp	.-28     	; 0x2bd4 <conv_brk+0xe6>
    2bf0:	e1 14       	cp	r14, r1
    2bf2:	f1 04       	cpc	r15, r1
    2bf4:	29 f0       	breq	.+10     	; 0x2c00 <conv_brk+0x112>
    2bf6:	d7 01       	movw	r26, r14
    2bf8:	8c 93       	st	X, r24
    2bfa:	f7 01       	movw	r30, r14
    2bfc:	31 96       	adiw	r30, 0x01	; 1
    2bfe:	7f 01       	movw	r14, r30
    2c00:	9a 94       	dec	r9
    2c02:	81 2c       	mov	r8, r1
    2c04:	99 20       	and	r9, r9
    2c06:	f9 f0       	breq	.+62     	; 0x2c46 <conv_brk+0x158>
    2c08:	c5 01       	movw	r24, r10
    2c0a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2c0e:	97 fd       	sbrc	r25, 7
    2c10:	18 c0       	rjmp	.+48     	; 0x2c42 <conv_brk+0x154>
    2c12:	fc 01       	movw	r30, r24
    2c14:	ff 27       	eor	r31, r31
    2c16:	23 e0       	ldi	r18, 0x03	; 3
    2c18:	f5 95       	asr	r31
    2c1a:	e7 95       	ror	r30
    2c1c:	2a 95       	dec	r18
    2c1e:	e1 f7       	brne	.-8      	; 0x2c18 <conv_brk+0x12a>
    2c20:	ec 0d       	add	r30, r12
    2c22:	fd 1d       	adc	r31, r13
    2c24:	20 81       	ld	r18, Z
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	ac 01       	movw	r20, r24
    2c2a:	47 70       	andi	r20, 0x07	; 7
    2c2c:	55 27       	eor	r21, r21
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <conv_brk+0x146>
    2c30:	35 95       	asr	r19
    2c32:	27 95       	ror	r18
    2c34:	4a 95       	dec	r20
    2c36:	e2 f7       	brpl	.-8      	; 0x2c30 <conv_brk+0x142>
    2c38:	20 fd       	sbrc	r18, 0
    2c3a:	da cf       	rjmp	.-76     	; 0x2bf0 <conv_brk+0x102>
    2c3c:	b5 01       	movw	r22, r10
    2c3e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <ungetc>
    2c42:	81 10       	cpse	r8, r1
    2c44:	87 cf       	rjmp	.-242    	; 0x2b54 <conv_brk+0x66>
    2c46:	e1 14       	cp	r14, r1
    2c48:	f1 04       	cpc	r15, r1
    2c4a:	11 f0       	breq	.+4      	; 0x2c50 <conv_brk+0x162>
    2c4c:	d7 01       	movw	r26, r14
    2c4e:	1c 92       	st	X, r1
    2c50:	c8 01       	movw	r24, r16
    2c52:	15 c0       	rjmp	.+42     	; 0x2c7e <conv_brk+0x190>
    2c54:	42 2f       	mov	r20, r18
    2c56:	46 95       	lsr	r20
    2c58:	46 95       	lsr	r20
    2c5a:	46 95       	lsr	r20
    2c5c:	d6 01       	movw	r26, r12
    2c5e:	a4 0f       	add	r26, r20
    2c60:	b1 1d       	adc	r27, r1
    2c62:	42 2f       	mov	r20, r18
    2c64:	47 70       	andi	r20, 0x07	; 7
    2c66:	8b 01       	movw	r16, r22
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <conv_brk+0x180>
    2c6a:	00 0f       	add	r16, r16
    2c6c:	11 1f       	adc	r17, r17
    2c6e:	4a 95       	dec	r20
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <conv_brk+0x17c>
    2c72:	a8 01       	movw	r20, r16
    2c74:	5c 91       	ld	r21, X
    2c76:	45 2b       	or	r20, r21
    2c78:	4c 93       	st	X, r20
    2c7a:	62 2e       	mov	r6, r18
    2c7c:	a2 cf       	rjmp	.-188    	; 0x2bc2 <conv_brk+0xd4>
    2c7e:	a0 96       	adiw	r28, 0x20	; 32
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	1f 91       	pop	r17
    2c8a:	0f 91       	pop	r16
    2c8c:	ff 90       	pop	r15
    2c8e:	ef 90       	pop	r14
    2c90:	df 90       	pop	r13
    2c92:	cf 90       	pop	r12
    2c94:	bf 90       	pop	r11
    2c96:	af 90       	pop	r10
    2c98:	9f 90       	pop	r9
    2c9a:	8f 90       	pop	r8
    2c9c:	7f 90       	pop	r7
    2c9e:	6f 90       	pop	r6
    2ca0:	5f 90       	pop	r5
    2ca2:	08 95       	ret

00002ca4 <vfscanf>:
    2ca4:	5f 92       	push	r5
    2ca6:	6f 92       	push	r6
    2ca8:	7f 92       	push	r7
    2caa:	8f 92       	push	r8
    2cac:	9f 92       	push	r9
    2cae:	af 92       	push	r10
    2cb0:	bf 92       	push	r11
    2cb2:	cf 92       	push	r12
    2cb4:	df 92       	push	r13
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	6c 01       	movw	r12, r24
    2cc4:	eb 01       	movw	r28, r22
    2cc6:	5a 01       	movw	r10, r20
    2cc8:	fc 01       	movw	r30, r24
    2cca:	16 82       	std	Z+6, r1	; 0x06
    2ccc:	17 82       	std	Z+7, r1	; 0x07
    2cce:	51 2c       	mov	r5, r1
    2cd0:	f6 01       	movw	r30, r12
    2cd2:	e3 80       	ldd	r14, Z+3	; 0x03
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e3 fc       	sbrc	r14, 3
    2cd8:	85 91       	lpm	r24, Z+
    2cda:	e3 fe       	sbrs	r14, 3
    2cdc:	81 91       	ld	r24, Z+
    2cde:	18 2f       	mov	r17, r24
    2ce0:	ef 01       	movw	r28, r30
    2ce2:	88 23       	and	r24, r24
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <vfscanf+0x44>
    2ce6:	ee c0       	rjmp	.+476    	; 0x2ec4 <vfscanf+0x220>
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 77 17 	call	0x2eee	; 0x2eee <isspace>
    2cee:	89 2b       	or	r24, r25
    2cf0:	21 f0       	breq	.+8      	; 0x2cfa <vfscanf+0x56>
    2cf2:	c6 01       	movw	r24, r12
    2cf4:	0e 94 cc 14 	call	0x2998	; 0x2998 <skip_spaces>
    2cf8:	eb cf       	rjmp	.-42     	; 0x2cd0 <vfscanf+0x2c>
    2cfa:	15 32       	cpi	r17, 0x25	; 37
    2cfc:	41 f4       	brne	.+16     	; 0x2d0e <vfscanf+0x6a>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e3 fc       	sbrc	r14, 3
    2d02:	15 91       	lpm	r17, Z+
    2d04:	e3 fe       	sbrs	r14, 3
    2d06:	11 91       	ld	r17, Z+
    2d08:	ef 01       	movw	r28, r30
    2d0a:	15 32       	cpi	r17, 0x25	; 37
    2d0c:	81 f4       	brne	.+32     	; 0x2d2e <vfscanf+0x8a>
    2d0e:	c6 01       	movw	r24, r12
    2d10:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2d14:	97 fd       	sbrc	r25, 7
    2d16:	d4 c0       	rjmp	.+424    	; 0x2ec0 <vfscanf+0x21c>
    2d18:	41 2f       	mov	r20, r17
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	33 27       	eor	r19, r19
    2d20:	24 17       	cp	r18, r20
    2d22:	35 07       	cpc	r19, r21
    2d24:	a9 f2       	breq	.-86     	; 0x2cd0 <vfscanf+0x2c>
    2d26:	b6 01       	movw	r22, r12
    2d28:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <ungetc>
    2d2c:	cb c0       	rjmp	.+406    	; 0x2ec4 <vfscanf+0x220>
    2d2e:	1a 32       	cpi	r17, 0x2A	; 42
    2d30:	39 f4       	brne	.+14     	; 0x2d40 <vfscanf+0x9c>
    2d32:	e3 fc       	sbrc	r14, 3
    2d34:	15 91       	lpm	r17, Z+
    2d36:	e3 fe       	sbrs	r14, 3
    2d38:	11 91       	ld	r17, Z+
    2d3a:	ef 01       	movw	r28, r30
    2d3c:	01 e0       	ldi	r16, 0x01	; 1
    2d3e:	01 c0       	rjmp	.+2      	; 0x2d42 <vfscanf+0x9e>
    2d40:	00 e0       	ldi	r16, 0x00	; 0
    2d42:	f1 2c       	mov	r15, r1
    2d44:	20 ed       	ldi	r18, 0xD0	; 208
    2d46:	21 0f       	add	r18, r17
    2d48:	2a 30       	cpi	r18, 0x0A	; 10
    2d4a:	80 f4       	brcc	.+32     	; 0x2d6c <vfscanf+0xc8>
    2d4c:	02 60       	ori	r16, 0x02	; 2
    2d4e:	6f 2d       	mov	r22, r15
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	0e 94 a5 14 	call	0x294a	; 0x294a <mulacc>
    2d5c:	f6 2e       	mov	r15, r22
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e3 fc       	sbrc	r14, 3
    2d62:	15 91       	lpm	r17, Z+
    2d64:	e3 fe       	sbrs	r14, 3
    2d66:	11 91       	ld	r17, Z+
    2d68:	ef 01       	movw	r28, r30
    2d6a:	ec cf       	rjmp	.-40     	; 0x2d44 <vfscanf+0xa0>
    2d6c:	01 ff       	sbrs	r16, 1
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <vfscanf+0xd2>
    2d70:	f1 10       	cpse	r15, r1
    2d72:	03 c0       	rjmp	.+6      	; 0x2d7a <vfscanf+0xd6>
    2d74:	a7 c0       	rjmp	.+334    	; 0x2ec4 <vfscanf+0x220>
    2d76:	ff 24       	eor	r15, r15
    2d78:	fa 94       	dec	r15
    2d7a:	18 36       	cpi	r17, 0x68	; 104
    2d7c:	19 f0       	breq	.+6      	; 0x2d84 <vfscanf+0xe0>
    2d7e:	1c 36       	cpi	r17, 0x6C	; 108
    2d80:	51 f0       	breq	.+20     	; 0x2d96 <vfscanf+0xf2>
    2d82:	10 c0       	rjmp	.+32     	; 0x2da4 <vfscanf+0x100>
    2d84:	fe 01       	movw	r30, r28
    2d86:	e3 fc       	sbrc	r14, 3
    2d88:	15 91       	lpm	r17, Z+
    2d8a:	e3 fe       	sbrs	r14, 3
    2d8c:	11 91       	ld	r17, Z+
    2d8e:	ef 01       	movw	r28, r30
    2d90:	18 36       	cpi	r17, 0x68	; 104
    2d92:	41 f4       	brne	.+16     	; 0x2da4 <vfscanf+0x100>
    2d94:	08 60       	ori	r16, 0x08	; 8
    2d96:	04 60       	ori	r16, 0x04	; 4
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e3 fc       	sbrc	r14, 3
    2d9c:	15 91       	lpm	r17, Z+
    2d9e:	e3 fe       	sbrs	r14, 3
    2da0:	11 91       	ld	r17, Z+
    2da2:	ef 01       	movw	r28, r30
    2da4:	11 23       	and	r17, r17
    2da6:	09 f4       	brne	.+2      	; 0x2daa <vfscanf+0x106>
    2da8:	8d c0       	rjmp	.+282    	; 0x2ec4 <vfscanf+0x220>
    2daa:	61 2f       	mov	r22, r17
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	82 e1       	ldi	r24, 0x12	; 18
    2db0:	93 e0       	ldi	r25, 0x03	; 3
    2db2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <strchr_P>
    2db6:	89 2b       	or	r24, r25
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <vfscanf+0x118>
    2dba:	84 c0       	rjmp	.+264    	; 0x2ec4 <vfscanf+0x220>
    2dbc:	00 fd       	sbrc	r16, 0
    2dbe:	07 c0       	rjmp	.+14     	; 0x2dce <vfscanf+0x12a>
    2dc0:	f5 01       	movw	r30, r10
    2dc2:	80 80       	ld	r8, Z
    2dc4:	91 80       	ldd	r9, Z+1	; 0x01
    2dc6:	c5 01       	movw	r24, r10
    2dc8:	02 96       	adiw	r24, 0x02	; 2
    2dca:	5c 01       	movw	r10, r24
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <vfscanf+0x12e>
    2dce:	81 2c       	mov	r8, r1
    2dd0:	91 2c       	mov	r9, r1
    2dd2:	1e 36       	cpi	r17, 0x6E	; 110
    2dd4:	51 f4       	brne	.+20     	; 0x2dea <vfscanf+0x146>
    2dd6:	f6 01       	movw	r30, r12
    2dd8:	46 81       	ldd	r20, Z+6	; 0x06
    2dda:	57 81       	ldd	r21, Z+7	; 0x07
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	20 2f       	mov	r18, r16
    2de2:	c4 01       	movw	r24, r8
    2de4:	0e 94 99 14 	call	0x2932	; 0x2932 <putval>
    2de8:	73 cf       	rjmp	.-282    	; 0x2cd0 <vfscanf+0x2c>
    2dea:	13 36       	cpi	r17, 0x63	; 99
    2dec:	a9 f4       	brne	.+42     	; 0x2e18 <vfscanf+0x174>
    2dee:	01 fd       	sbrc	r16, 1
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <vfscanf+0x152>
    2df2:	ff 24       	eor	r15, r15
    2df4:	f3 94       	inc	r15
    2df6:	c6 01       	movw	r24, r12
    2df8:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2dfc:	97 fd       	sbrc	r25, 7
    2dfe:	60 c0       	rjmp	.+192    	; 0x2ec0 <vfscanf+0x21c>
    2e00:	81 14       	cp	r8, r1
    2e02:	91 04       	cpc	r9, r1
    2e04:	29 f0       	breq	.+10     	; 0x2e10 <vfscanf+0x16c>
    2e06:	f4 01       	movw	r30, r8
    2e08:	80 83       	st	Z, r24
    2e0a:	c4 01       	movw	r24, r8
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	4c 01       	movw	r8, r24
    2e10:	fa 94       	dec	r15
    2e12:	f1 10       	cpse	r15, r1
    2e14:	f0 cf       	rjmp	.-32     	; 0x2df6 <vfscanf+0x152>
    2e16:	50 c0       	rjmp	.+160    	; 0x2eb8 <vfscanf+0x214>
    2e18:	1b 35       	cpi	r17, 0x5B	; 91
    2e1a:	59 f4       	brne	.+22     	; 0x2e32 <vfscanf+0x18e>
    2e1c:	9e 01       	movw	r18, r28
    2e1e:	a4 01       	movw	r20, r8
    2e20:	6f 2d       	mov	r22, r15
    2e22:	c6 01       	movw	r24, r12
    2e24:	0e 94 77 15 	call	0x2aee	; 0x2aee <conv_brk>
    2e28:	ec 01       	movw	r28, r24
    2e2a:	89 2b       	or	r24, r25
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <vfscanf+0x18c>
    2e2e:	44 c0       	rjmp	.+136    	; 0x2eb8 <vfscanf+0x214>
    2e30:	3e c0       	rjmp	.+124    	; 0x2eae <vfscanf+0x20a>
    2e32:	c6 01       	movw	r24, r12
    2e34:	0e 94 cc 14 	call	0x2998	; 0x2998 <skip_spaces>
    2e38:	97 fd       	sbrc	r25, 7
    2e3a:	42 c0       	rjmp	.+132    	; 0x2ec0 <vfscanf+0x21c>
    2e3c:	1f 36       	cpi	r17, 0x6F	; 111
    2e3e:	61 f1       	breq	.+88     	; 0x2e98 <vfscanf+0x1f4>
    2e40:	28 f4       	brcc	.+10     	; 0x2e4c <vfscanf+0x1a8>
    2e42:	14 36       	cpi	r17, 0x64	; 100
    2e44:	39 f1       	breq	.+78     	; 0x2e94 <vfscanf+0x1f0>
    2e46:	19 36       	cpi	r17, 0x69	; 105
    2e48:	51 f1       	breq	.+84     	; 0x2e9e <vfscanf+0x1fa>
    2e4a:	28 c0       	rjmp	.+80     	; 0x2e9c <vfscanf+0x1f8>
    2e4c:	13 37       	cpi	r17, 0x73	; 115
    2e4e:	71 f0       	breq	.+28     	; 0x2e6c <vfscanf+0x1c8>
    2e50:	15 37       	cpi	r17, 0x75	; 117
    2e52:	01 f1       	breq	.+64     	; 0x2e94 <vfscanf+0x1f0>
    2e54:	23 c0       	rjmp	.+70     	; 0x2e9c <vfscanf+0x1f8>
    2e56:	81 14       	cp	r8, r1
    2e58:	91 04       	cpc	r9, r1
    2e5a:	29 f0       	breq	.+10     	; 0x2e66 <vfscanf+0x1c2>
    2e5c:	f4 01       	movw	r30, r8
    2e5e:	60 82       	st	Z, r6
    2e60:	c4 01       	movw	r24, r8
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	4c 01       	movw	r8, r24
    2e66:	fa 94       	dec	r15
    2e68:	ff 20       	and	r15, r15
    2e6a:	71 f0       	breq	.+28     	; 0x2e88 <vfscanf+0x1e4>
    2e6c:	c6 01       	movw	r24, r12
    2e6e:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fgetc>
    2e72:	3c 01       	movw	r6, r24
    2e74:	97 fd       	sbrc	r25, 7
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <vfscanf+0x1e4>
    2e78:	0e 94 77 17 	call	0x2eee	; 0x2eee <isspace>
    2e7c:	89 2b       	or	r24, r25
    2e7e:	59 f3       	breq	.-42     	; 0x2e56 <vfscanf+0x1b2>
    2e80:	b6 01       	movw	r22, r12
    2e82:	c3 01       	movw	r24, r6
    2e84:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <ungetc>
    2e88:	81 14       	cp	r8, r1
    2e8a:	91 04       	cpc	r9, r1
    2e8c:	a9 f0       	breq	.+42     	; 0x2eb8 <vfscanf+0x214>
    2e8e:	f4 01       	movw	r30, r8
    2e90:	10 82       	st	Z, r1
    2e92:	12 c0       	rjmp	.+36     	; 0x2eb8 <vfscanf+0x214>
    2e94:	00 62       	ori	r16, 0x20	; 32
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <vfscanf+0x1fa>
    2e98:	00 61       	ori	r16, 0x10	; 16
    2e9a:	01 c0       	rjmp	.+2      	; 0x2e9e <vfscanf+0x1fa>
    2e9c:	00 64       	ori	r16, 0x40	; 64
    2e9e:	20 2f       	mov	r18, r16
    2ea0:	a4 01       	movw	r20, r8
    2ea2:	6f 2d       	mov	r22, r15
    2ea4:	c6 01       	movw	r24, r12
    2ea6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <conv_int>
    2eaa:	81 11       	cpse	r24, r1
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <vfscanf+0x214>
    2eae:	f6 01       	movw	r30, r12
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	80 73       	andi	r24, 0x30	; 48
    2eb4:	29 f4       	brne	.+10     	; 0x2ec0 <vfscanf+0x21c>
    2eb6:	06 c0       	rjmp	.+12     	; 0x2ec4 <vfscanf+0x220>
    2eb8:	00 fd       	sbrc	r16, 0
    2eba:	0a cf       	rjmp	.-492    	; 0x2cd0 <vfscanf+0x2c>
    2ebc:	53 94       	inc	r5
    2ebe:	08 cf       	rjmp	.-496    	; 0x2cd0 <vfscanf+0x2c>
    2ec0:	55 20       	and	r5, r5
    2ec2:	19 f0       	breq	.+6      	; 0x2eca <vfscanf+0x226>
    2ec4:	85 2d       	mov	r24, r5
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <vfscanf+0x22a>
    2eca:	8f ef       	ldi	r24, 0xFF	; 255
    2ecc:	9f ef       	ldi	r25, 0xFF	; 255
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	df 90       	pop	r13
    2edc:	cf 90       	pop	r12
    2ede:	bf 90       	pop	r11
    2ee0:	af 90       	pop	r10
    2ee2:	9f 90       	pop	r9
    2ee4:	8f 90       	pop	r8
    2ee6:	7f 90       	pop	r7
    2ee8:	6f 90       	pop	r6
    2eea:	5f 90       	pop	r5
    2eec:	08 95       	ret

00002eee <isspace>:
    2eee:	91 11       	cpse	r25, r1
    2ef0:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__ctype_isfalse>
    2ef4:	80 32       	cpi	r24, 0x20	; 32
    2ef6:	19 f0       	breq	.+6      	; 0x2efe <isspace+0x10>
    2ef8:	89 50       	subi	r24, 0x09	; 9
    2efa:	85 50       	subi	r24, 0x05	; 5
    2efc:	c8 f7       	brcc	.-14     	; 0x2ef0 <isspace+0x2>
    2efe:	08 95       	ret

00002f00 <strchr_P>:
    2f00:	fc 01       	movw	r30, r24
    2f02:	05 90       	lpm	r0, Z+
    2f04:	06 16       	cp	r0, r22
    2f06:	21 f0       	breq	.+8      	; 0x2f10 <strchr_P+0x10>
    2f08:	00 20       	and	r0, r0
    2f0a:	d9 f7       	brne	.-10     	; 0x2f02 <strchr_P+0x2>
    2f0c:	c0 01       	movw	r24, r0
    2f0e:	08 95       	ret
    2f10:	31 97       	sbiw	r30, 0x01	; 1
    2f12:	cf 01       	movw	r24, r30
    2f14:	08 95       	ret

00002f16 <fgetc>:
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	ec 01       	movw	r28, r24
    2f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1e:	20 ff       	sbrs	r18, 0
    2f20:	33 c0       	rjmp	.+102    	; 0x2f88 <fgetc+0x72>
    2f22:	26 ff       	sbrs	r18, 6
    2f24:	0a c0       	rjmp	.+20     	; 0x2f3a <fgetc+0x24>
    2f26:	2f 7b       	andi	r18, 0xBF	; 191
    2f28:	2b 83       	std	Y+3, r18	; 0x03
    2f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	8e 83       	std	Y+6, r24	; 0x06
    2f32:	9f 83       	std	Y+7, r25	; 0x07
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	29 c0       	rjmp	.+82     	; 0x2f8c <fgetc+0x76>
    2f3a:	22 ff       	sbrs	r18, 2
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <fgetc+0x46>
    2f3e:	e8 81       	ld	r30, Y
    2f40:	f9 81       	ldd	r31, Y+1	; 0x01
    2f42:	80 81       	ld	r24, Z
    2f44:	08 2e       	mov	r0, r24
    2f46:	00 0c       	add	r0, r0
    2f48:	99 0b       	sbc	r25, r25
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	19 f4       	brne	.+6      	; 0x2f54 <fgetc+0x3e>
    2f4e:	20 62       	ori	r18, 0x20	; 32
    2f50:	2b 83       	std	Y+3, r18	; 0x03
    2f52:	1a c0       	rjmp	.+52     	; 0x2f88 <fgetc+0x72>
    2f54:	31 96       	adiw	r30, 0x01	; 1
    2f56:	e8 83       	st	Y, r30
    2f58:	f9 83       	std	Y+1, r31	; 0x01
    2f5a:	0e c0       	rjmp	.+28     	; 0x2f78 <fgetc+0x62>
    2f5c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2f5e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2f60:	19 95       	eicall
    2f62:	97 ff       	sbrs	r25, 7
    2f64:	09 c0       	rjmp	.+18     	; 0x2f78 <fgetc+0x62>
    2f66:	2b 81       	ldd	r18, Y+3	; 0x03
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	11 f0       	breq	.+4      	; 0x2f70 <fgetc+0x5a>
    2f6c:	80 e2       	ldi	r24, 0x20	; 32
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <fgetc+0x5c>
    2f70:	80 e1       	ldi	r24, 0x10	; 16
    2f72:	82 2b       	or	r24, r18
    2f74:	8b 83       	std	Y+3, r24	; 0x03
    2f76:	08 c0       	rjmp	.+16     	; 0x2f88 <fgetc+0x72>
    2f78:	2e 81       	ldd	r18, Y+6	; 0x06
    2f7a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f7c:	2f 5f       	subi	r18, 0xFF	; 255
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	2e 83       	std	Y+6, r18	; 0x06
    2f82:	3f 83       	std	Y+7, r19	; 0x07
    2f84:	99 27       	eor	r25, r25
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <fgetc+0x76>
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	9f ef       	ldi	r25, 0xFF	; 255
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	08 95       	ret

00002f92 <ungetc>:
    2f92:	fb 01       	movw	r30, r22
    2f94:	23 81       	ldd	r18, Z+3	; 0x03
    2f96:	20 ff       	sbrs	r18, 0
    2f98:	12 c0       	rjmp	.+36     	; 0x2fbe <ungetc+0x2c>
    2f9a:	26 fd       	sbrc	r18, 6
    2f9c:	10 c0       	rjmp	.+32     	; 0x2fbe <ungetc+0x2c>
    2f9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	93 07       	cpc	r25, r19
    2fa4:	61 f0       	breq	.+24     	; 0x2fbe <ungetc+0x2c>
    2fa6:	82 83       	std	Z+2, r24	; 0x02
    2fa8:	2f 7d       	andi	r18, 0xDF	; 223
    2faa:	20 64       	ori	r18, 0x40	; 64
    2fac:	23 83       	std	Z+3, r18	; 0x03
    2fae:	26 81       	ldd	r18, Z+6	; 0x06
    2fb0:	37 81       	ldd	r19, Z+7	; 0x07
    2fb2:	21 50       	subi	r18, 0x01	; 1
    2fb4:	31 09       	sbc	r19, r1
    2fb6:	26 83       	std	Z+6, r18	; 0x06
    2fb8:	37 83       	std	Z+7, r19	; 0x07
    2fba:	99 27       	eor	r25, r25
    2fbc:	08 95       	ret
    2fbe:	8f ef       	ldi	r24, 0xFF	; 255
    2fc0:	9f ef       	ldi	r25, 0xFF	; 255
    2fc2:	08 95       	ret

00002fc4 <__ctype_isfalse>:
    2fc4:	99 27       	eor	r25, r25
    2fc6:	88 27       	eor	r24, r24

00002fc8 <__ctype_istrue>:
    2fc8:	08 95       	ret

00002fca <_exit>:
    2fca:	f8 94       	cli

00002fcc <__stop_program>:
    2fcc:	ff cf       	rjmp	.-2      	; 0x2fcc <__stop_program>
