
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00802000  000049f8  00004a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000428e  00802172  00802172  00004bfe  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00004bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00004ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000077ae  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039b0  00000000  00000000  0000c992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003dd3  00000000  00000000  00010342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001064  00000000  00000000  00014118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ab2  00000000  00000000  0001517c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002048  00000000  00000000  00018c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0001ac76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 01 	jmp	0x322	; 0x322 <__ctors_end>
       4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
       8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
       c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      10:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      14:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      18:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      1c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      20:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      24:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      28:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      30:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      38:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_14>
      3c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      40:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      44:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      48:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      4c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      50:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_20>
      54:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      58:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      5c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      60:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      64:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      68:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      6c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      70:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      74:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      78:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      7c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      80:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      84:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      88:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      8c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      90:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      94:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      98:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      9c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      a0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      a4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      a8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      ac:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      b0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      b4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      b8:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_46>
      bc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      c0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      c4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      c8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      cc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      d0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      d4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      d8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      dc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      e0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      e4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      e8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      ec:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      f0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      f4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      f8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      fc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     100:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     104:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     108:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     10c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     110:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     114:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     118:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     11c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     120:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     124:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     128:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     12c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     130:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     134:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     138:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     13c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     140:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     144:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     148:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     14c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     150:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     154:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     158:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     15c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     160:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     164:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     168:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     16c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     170:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     174:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     178:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     17c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     180:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     184:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     188:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     18c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     190:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     194:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     198:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     19c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1a0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1a4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1a8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1ac:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1b0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1b4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1b8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1bc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1c0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1c4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1c8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1cc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1d0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1d4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1d8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1dc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1e0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1e4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1e8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1ec:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1f0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1f4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1f8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <WorkerRecursie>
     200:	0c 94 48 19 	jmp	0x3290	; 0x3290 <WorkerLooplicht>
     204:	0c 94 00 04 	jmp	0x800	; 0x800 <stdio_putchar>
     208:	0c 94 25 04 	jmp	0x84a	; 0x84a <stdio_getchar>
     20c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <prvIdleTask>
     210:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <WorkerTerminal>

00000214 <__trampolines_end>:
     214:	6e 61       	ori	r22, 0x1E	; 30
     216:	6e 00       	.word	0x006e	; ????

00000218 <__c.2332>:
     218:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     228:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     238:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     248:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     258:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     268:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     278:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     288:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     298:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     308:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000316 <__c.2474>:
     316:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000322 <__ctors_end>:
     322:	11 24       	eor	r1, r1
     324:	1f be       	out	0x3f, r1	; 63
     326:	cf ef       	ldi	r28, 0xFF	; 255
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df e9       	ldi	r29, 0x9F	; 159
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	00 e0       	ldi	r16, 0x00	; 0
     330:	0c bf       	out	0x3c, r16	; 60

00000332 <__do_copy_data>:
     332:	11 e2       	ldi	r17, 0x21	; 33
     334:	a0 e0       	ldi	r26, 0x00	; 0
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	e8 ef       	ldi	r30, 0xF8	; 248
     33a:	f9 e4       	ldi	r31, 0x49	; 73
     33c:	00 e0       	ldi	r16, 0x00	; 0
     33e:	0b bf       	out	0x3b, r16	; 59
     340:	02 c0       	rjmp	.+4      	; 0x346 <__do_copy_data+0x14>
     342:	07 90       	elpm	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	a2 37       	cpi	r26, 0x72	; 114
     348:	b1 07       	cpc	r27, r17
     34a:	d9 f7       	brne	.-10     	; 0x342 <__do_copy_data+0x10>

0000034c <__do_clear_bss>:
     34c:	24 e6       	ldi	r18, 0x64	; 100
     34e:	a2 e7       	ldi	r26, 0x72	; 114
     350:	b1 e2       	ldi	r27, 0x21	; 33
     352:	01 c0       	rjmp	.+2      	; 0x356 <.do_clear_bss_start>

00000354 <.do_clear_bss_loop>:
     354:	1d 92       	st	X+, r1

00000356 <.do_clear_bss_start>:
     356:	a0 30       	cpi	r26, 0x00	; 0
     358:	b2 07       	cpc	r27, r18
     35a:	e1 f7       	brne	.-8      	; 0x354 <.do_clear_bss_loop>
     35c:	0e 94 8d 18 	call	0x311a	; 0x311a <main>
     360:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <_exit>

00000364 <__bad_interrupt>:
     364:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000368 <DriverAdcInit>:
#include "DriverAdc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void DriverAdcInit(void)
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
	//ADCA.CTRLA=
	//ADCA.CTRLB=
	//ADCA.REFCTRL=
	//ADCA.PRESCALER=
	//ADCA.CH0.INTCTRL=	
}
     370:	00 00       	nop
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <DriverCursorstickInit>:
#include "DriverCursorstick.h"

void DriverCursorstickInit(void)
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	//PORTB.PIN3CTRL=
	//PORTB.PIN4CTRL=	
	//PORTB.PIN5CTRL=
	//PORTB.PIN6CTRL=
	//PORTB.PIN7CTRL=
}
     380:	00 00       	nop
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	25 97       	sbiw	r28, 0x05	; 5
     392:	cd bf       	out	0x3d, r28	; 61
     394:	de bf       	out	0x3e, r29	; 62
     396:	8c 83       	std	Y+4, r24	; 0x04
     398:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     39a:	80 ea       	ldi	r24, 0xA0	; 160
     39c:	9a e0       	ldi	r25, 0x0A	; 10
     39e:	fc 01       	movw	r30, r24
     3a0:	83 81       	ldd	r24, Z+3	; 0x03
     3a2:	89 83       	std	Y+1, r24	; 0x01
	CtrlBBack=USART.CTRLB;
     3a4:	80 ea       	ldi	r24, 0xA0	; 160
     3a6:	9a e0       	ldi	r25, 0x0A	; 10
     3a8:	fc 01       	movw	r30, r24
     3aa:	84 81       	ldd	r24, Z+4	; 0x04
     3ac:	8a 83       	std	Y+2, r24	; 0x02
	CtrlCBack=USART.CTRLC;
     3ae:	80 ea       	ldi	r24, 0xA0	; 160
     3b0:	9a e0       	ldi	r25, 0x0A	; 10
     3b2:	fc 01       	movw	r30, r24
     3b4:	85 81       	ldd	r24, Z+5	; 0x05
     3b6:	8b 83       	std	Y+3, r24	; 0x03
	
	while (*Text!=0)
     3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <DbgPrint+0x6c>
	{
		USART.DATA = *Text;
     3ba:	80 ea       	ldi	r24, 0xA0	; 160
     3bc:	9a e0       	ldi	r25, 0x0A	; 10
     3be:	2c 81       	ldd	r18, Y+4	; 0x04
     3c0:	3d 81       	ldd	r19, Y+5	; 0x05
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
		while (!(USART.STATUS & 0b01000000));
     3ca:	00 00       	nop
     3cc:	80 ea       	ldi	r24, 0xA0	; 160
     3ce:	9a e0       	ldi	r25, 0x0A	; 10
     3d0:	fc 01       	movw	r30, r24
     3d2:	81 81       	ldd	r24, Z+1	; 0x01
     3d4:	88 2f       	mov	r24, r24
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	80 74       	andi	r24, 0x40	; 64
     3da:	99 27       	eor	r25, r25
     3dc:	89 2b       	or	r24, r25
     3de:	b1 f3       	breq	.-20     	; 0x3cc <DbgPrint+0x44>
		USART.STATUS=0b01000000;
     3e0:	80 ea       	ldi	r24, 0xA0	; 160
     3e2:	9a e0       	ldi	r25, 0x0A	; 10
     3e4:	20 e4       	ldi	r18, 0x40	; 64
     3e6:	fc 01       	movw	r30, r24
     3e8:	21 83       	std	Z+1, r18	; 0x01
		Text++;
     3ea:	8c 81       	ldd	r24, Y+4	; 0x04
     3ec:	9d 81       	ldd	r25, Y+5	; 0x05
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	8c 83       	std	Y+4, r24	; 0x04
     3f2:	9d 83       	std	Y+5, r25	; 0x05
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	88 23       	and	r24, r24
     3fe:	e9 f6       	brne	.-70     	; 0x3ba <DbgPrint+0x32>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     400:	80 ea       	ldi	r24, 0xA0	; 160
     402:	9a e0       	ldi	r25, 0x0A	; 10
     404:	29 81       	ldd	r18, Y+1	; 0x01
     406:	fc 01       	movw	r30, r24
     408:	23 83       	std	Z+3, r18	; 0x03
	USART.CTRLB=CtrlBBack;
     40a:	80 ea       	ldi	r24, 0xA0	; 160
     40c:	9a e0       	ldi	r25, 0x0A	; 10
     40e:	2a 81       	ldd	r18, Y+2	; 0x02
     410:	fc 01       	movw	r30, r24
     412:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=CtrlCBack;
     414:	80 ea       	ldi	r24, 0xA0	; 160
     416:	9a e0       	ldi	r25, 0x0A	; 10
     418:	2b 81       	ldd	r18, Y+3	; 0x03
     41a:	fc 01       	movw	r30, r24
     41c:	25 83       	std	Z+5, r18	; 0x05
}
     41e:	00 00       	nop
     420:	25 96       	adiw	r28, 0x05	; 5
     422:	cd bf       	out	0x3d, r28	; 61
     424:	de bf       	out	0x3e, r29	; 62
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <DriverLedInit>:
#include "DriverLed.h"

void DriverLedInit(void)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	PORTB.DIRSET=0b00000111; // PB0-2 als uitgang zetten
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	96 e0       	ldi	r25, 0x06	; 6
     438:	27 e0       	ldi	r18, 0x07	; 7
     43a:	fc 01       	movw	r30, r24
     43c:	21 83       	std	Z+1, r18	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTB.PIN0CTRL=0b01000000;
     43e:	80 e2       	ldi	r24, 0x20	; 32
     440:	96 e0       	ldi	r25, 0x06	; 6
     442:	20 e4       	ldi	r18, 0x40	; 64
     444:	fc 01       	movw	r30, r24
     446:	20 8b       	std	Z+16, r18	; 0x10
	PORTB.PIN1CTRL=0b01000000;
     448:	80 e2       	ldi	r24, 0x20	; 32
     44a:	96 e0       	ldi	r25, 0x06	; 6
     44c:	20 e4       	ldi	r18, 0x40	; 64
     44e:	fc 01       	movw	r30, r24
     450:	21 8b       	std	Z+17, r18	; 0x11
	PORTB.PIN2CTRL=0b01000000;
     452:	80 e2       	ldi	r24, 0x20	; 32
     454:	96 e0       	ldi	r25, 0x06	; 6
     456:	20 e4       	ldi	r18, 0x40	; 64
     458:	fc 01       	movw	r30, r24
     45a:	22 8b       	std	Z+18, r18	; 0x12
	
	PORTA.DIRSET=0b10000000; // PA7 als uitgang zetten
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	20 e8       	ldi	r18, 0x80	; 128
     462:	fc 01       	movw	r30, r24
     464:	21 83       	std	Z+1, r18	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTA.PIN7CTRL=0b01000000;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	96 e0       	ldi	r25, 0x06	; 6
     46a:	20 e4       	ldi	r18, 0x40	; 64
     46c:	fc 01       	movw	r30, r24
     46e:	27 8b       	std	Z+23, r18	; 0x17
}
     470:	00 00       	nop
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <DriverLedWrite>:

void DriverLedWrite(uint8_t LedData)
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	1f 92       	push	r1
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	89 83       	std	Y+1, r24	; 0x01
	PORTB.OUT = LedData & 0b00000111;	// Alleen de de waarden van PB0-2 overhouden
     484:	80 e2       	ldi	r24, 0x20	; 32
     486:	96 e0       	ldi	r25, 0x06	; 6
     488:	29 81       	ldd	r18, Y+1	; 0x01
     48a:	27 70       	andi	r18, 0x07	; 7
     48c:	fc 01       	movw	r30, r24
     48e:	24 83       	std	Z+4, r18	; 0x04
	LedData = LedData<<4; // 4 nullen langs rechts inschuiven om de 4de bit op plaats 8 te krijgen voor PA7
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	82 95       	swap	r24
     494:	80 7f       	andi	r24, 0xF0	; 240
     496:	89 83       	std	Y+1, r24	; 0x01
	PORTA.OUT = LedData & 0b10000000; // Alleen waarde van PA7 overhouden
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	96 e0       	ldi	r25, 0x06	; 6
     49c:	29 81       	ldd	r18, Y+1	; 0x01
     49e:	20 78       	andi	r18, 0x80	; 128
     4a0:	fc 01       	movw	r30, r24
     4a2:	24 83       	std	Z+4, r18	; 0x04
}
     4a4:	00 00       	nop
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     4ae:	8b ec       	ldi	r24, 0xCB	; 203
     4b0:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     4ba:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     4be:	83 ff       	sbrs	r24, 3
     4c0:	fc cf       	rjmp	.-8      	; 0x4ba <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     4c2:	82 ec       	ldi	r24, 0xC2	; 194
     4c4:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     4c8:	88 e1       	ldi	r24, 0x18	; 24
     4ca:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     4ce:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     4d2:	84 ff       	sbrs	r24, 4
     4d4:	fc cf       	rjmp	.-8      	; 0x4ce <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     4d6:	88 ed       	ldi	r24, 0xD8	; 216
     4d8:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	08 95       	ret

000004e4 <DriverTWIMInit>:
	} 
	else 
	{
		return false;
	}
}
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <Twim_status>
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	96 e0       	ldi	r25, 0x06	; 6
     4f4:	28 e1       	ldi	r18, 0x18	; 24
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 8b       	std	Z+16, r18	; 0x10
     4fa:	80 e8       	ldi	r24, 0x80	; 128
     4fc:	96 e0       	ldi	r25, 0x06	; 6
     4fe:	28 e1       	ldi	r18, 0x18	; 24
     500:	fc 01       	movw	r30, r24
     502:	21 8b       	std	Z+17, r18	; 0x11
     504:	80 ea       	ldi	r24, 0xA0	; 160
     506:	94 e0       	ldi	r25, 0x04	; 4
     508:	28 e7       	ldi	r18, 0x78	; 120
     50a:	fc 01       	movw	r30, r24
     50c:	21 83       	std	Z+1, r18	; 0x01
     50e:	80 ea       	ldi	r24, 0xA0	; 160
     510:	94 e0       	ldi	r25, 0x04	; 4
     512:	23 e2       	ldi	r18, 0x23	; 35
     514:	fc 01       	movw	r30, r24
     516:	25 83       	std	Z+5, r18	; 0x05
     518:	80 ea       	ldi	r24, 0xA0	; 160
     51a:	94 e0       	ldi	r25, 0x04	; 4
     51c:	21 e0       	ldi	r18, 0x01	; 1
     51e:	fc 01       	movw	r30, r24
     520:	24 83       	std	Z+4, r18	; 0x04
     522:	00 00       	nop
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <TWIMArbitrationLostBusErrorHandler>:

void TWIMArbitrationLostBusErrorHandler()
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     534:	80 ea       	ldi	r24, 0xA0	; 160
     536:	94 e0       	ldi	r25, 0x04	; 4
     538:	fc 01       	movw	r30, r24
     53a:	84 81       	ldd	r24, Z+4	; 0x04
     53c:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	84 70       	andi	r24, 0x04	; 4
     546:	99 27       	eor	r25, r25
     548:	89 2b       	or	r24, r25
     54a:	21 f0       	breq	.+8      	; 0x554 <TWIMArbitrationLostBusErrorHandler+0x2a>
		Twim_result = TWIM_RESULT_BUS_ERROR;
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <Twim_result>
     552:	03 c0       	rjmp	.+6      	; 0x55a <TWIMArbitrationLostBusErrorHandler+0x30>
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     55a:	80 ea       	ldi	r24, 0xA0	; 160
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	29 81       	ldd	r18, Y+1	; 0x01
     560:	28 60       	ori	r18, 0x08	; 8
     562:	fc 01       	movw	r30, r24
     564:	24 83       	std	Z+4, r18	; 0x04

	Twim_status = TWIM_STATUS_READY;
     566:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <Twim_status>
}
     56a:	00 00       	nop
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <TWIMWriteHandler>:

void TWIMWriteHandler()
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <TWIMWriteHandler+0x6>
     57a:	1f 92       	push	r1
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = Twim_bytesToWrite;
     580:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <Twim_bytesToWrite>
     584:	89 83       	std	Y+1, r24	; 0x01
	uint8_t bytesToRead   = Twim_bytesToRead;
     586:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <Twim_bytesToRead>
     58a:	8a 83       	std	Y+2, r24	; 0x02

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (TWIM_BUS.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     58c:	80 ea       	ldi	r24, 0xA0	; 160
     58e:	94 e0       	ldi	r25, 0x04	; 4
     590:	fc 01       	movw	r30, r24
     592:	84 81       	ldd	r24, Z+4	; 0x04
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	80 71       	andi	r24, 0x10	; 16
     59a:	99 27       	eor	r25, r25
     59c:	89 2b       	or	r24, r25
     59e:	59 f0       	breq	.+22     	; 0x5b6 <TWIMWriteHandler+0x42>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	94 e0       	ldi	r25, 0x04	; 4
     5a4:	23 e0       	ldi	r18, 0x03	; 3
     5a6:	fc 01       	movw	r30, r24
     5a8:	23 83       	std	Z+3, r18	; 0x03
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
     5aa:	85 e0       	ldi	r24, 0x05	; 5
     5ac:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <Twim_result>
		Twim_status = TWIM_STATUS_READY;
     5b0:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <Twim_status>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     5b4:	34 c0       	rjmp	.+104    	; 0x61e <TWIMWriteHandler+0xaa>
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
		Twim_status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (Twim_bytesWritten < bytesToWrite) {
     5b6:	90 91 79 21 	lds	r25, 0x2179	; 0x802179 <Twim_bytesWritten>
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	98 17       	cp	r25, r24
     5be:	c0 f4       	brcc	.+48     	; 0x5f0 <TWIMWriteHandler+0x7c>
		uint8_t data = Twim_writeData[Twim_bytesWritten];
     5c0:	20 91 73 21 	lds	r18, 0x2173	; 0x802173 <Twim_writeData>
     5c4:	30 91 74 21 	lds	r19, 0x2174	; 0x802174 <Twim_writeData+0x1>
     5c8:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <Twim_bytesWritten>
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	82 0f       	add	r24, r18
     5d2:	93 1f       	adc	r25, r19
     5d4:	fc 01       	movw	r30, r24
     5d6:	80 81       	ld	r24, Z
     5d8:	8b 83       	std	Y+3, r24	; 0x03
			TWIM_BUS.MASTER.DATA = data;
     5da:	80 ea       	ldi	r24, 0xA0	; 160
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	2b 81       	ldd	r18, Y+3	; 0x03
     5e0:	fc 01       	movw	r30, r24
     5e2:	27 83       	std	Z+7, r18	; 0x07
		++Twim_bytesWritten;
     5e4:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <Twim_bytesWritten>
     5e8:	8f 5f       	subi	r24, 0xFF	; 255
     5ea:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <Twim_bytesWritten>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     5ee:	17 c0       	rjmp	.+46     	; 0x61e <TWIMWriteHandler+0xaa>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (Twim_bytesRead < bytesToRead) {
     5f0:	90 91 7a 21 	lds	r25, 0x217A	; 0x80217a <Twim_bytesRead>
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	98 17       	cp	r25, r24
     5f8:	50 f4       	brcc	.+20     	; 0x60e <TWIMWriteHandler+0x9a>
		uint8_t readAddress = Twim_address | 0x01;
     5fa:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <__data_end>
     5fe:	81 60       	ori	r24, 0x01	; 1
     600:	8c 83       	std	Y+4, r24	; 0x04
		TWIM_BUS.MASTER.ADDR = readAddress;
     602:	80 ea       	ldi	r24, 0xA0	; 160
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	2c 81       	ldd	r18, Y+4	; 0x04
     608:	fc 01       	movw	r30, r24
     60a:	26 83       	std	Z+6, r18	; 0x06
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     60c:	08 c0       	rjmp	.+16     	; 0x61e <TWIMWriteHandler+0xaa>
		TWIM_BUS.MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     60e:	80 ea       	ldi	r24, 0xA0	; 160
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	23 e0       	ldi	r18, 0x03	; 3
     614:	fc 01       	movw	r30, r24
     616:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_OK);
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWIMTransactionFinished>
	}
}
     61e:	00 00       	nop
     620:	24 96       	adiw	r28, 0x04	; 4
     622:	cd bf       	out	0x3d, r28	; 61
     624:	de bf       	out	0x3e, r29	; 62
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <TWIMReadHandler>:

void TWIMReadHandler()
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	1f 92       	push	r1
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
	/* Fetch data if bytes to be read. */
	if (Twim_bytesRead < TWIM_READ_BUFFER_SIZE) {
     638:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <Twim_bytesRead>
     63c:	80 32       	cpi	r24, 0x20	; 32
     63e:	c0 f4       	brcc	.+48     	; 0x670 <TWIMReadHandler+0x44>
		uint8_t data = TWIM_BUS.MASTER.DATA;
     640:	80 ea       	ldi	r24, 0xA0	; 160
     642:	94 e0       	ldi	r25, 0x04	; 4
     644:	fc 01       	movw	r30, r24
     646:	87 81       	ldd	r24, Z+7	; 0x07
     648:	89 83       	std	Y+1, r24	; 0x01
		Twim_readData[Twim_bytesRead] = data;
     64a:	20 91 75 21 	lds	r18, 0x2175	; 0x802175 <Twim_readData>
     64e:	30 91 76 21 	lds	r19, 0x2176	; 0x802176 <Twim_readData+0x1>
     652:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <Twim_bytesRead>
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	29 81       	ldd	r18, Y+1	; 0x01
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
		Twim_bytesRead++;
     664:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <Twim_bytesRead>
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <Twim_bytesRead>
     66e:	08 c0       	rjmp	.+16     	; 0x680 <TWIMReadHandler+0x54>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     670:	80 ea       	ldi	r24, 0xA0	; 160
     672:	94 e0       	ldi	r25, 0x04	; 4
     674:	23 e0       	ldi	r18, 0x03	; 3
     676:	fc 01       	movw	r30, r24
     678:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWIMTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = Twim_bytesToRead;
     680:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <Twim_bytesToRead>
     684:	8a 83       	std	Y+2, r24	; 0x02

	/* If more bytes to read, issue ACK and start a byte read. */
	if (Twim_bytesRead < bytesToRead) {
     686:	90 91 7a 21 	lds	r25, 0x217A	; 0x80217a <Twim_bytesRead>
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	98 17       	cp	r25, r24
     68e:	30 f4       	brcc	.+12     	; 0x69c <TWIMReadHandler+0x70>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	94 e0       	ldi	r25, 0x04	; 4
     694:	22 e0       	ldi	r18, 0x02	; 2
     696:	fc 01       	movw	r30, r24
     698:	23 83       	std	Z+3, r18	; 0x03
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     69a:	08 c0       	rjmp	.+16     	; 0x6ac <TWIMReadHandler+0x80>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     69c:	80 ea       	ldi	r24, 0xA0	; 160
     69e:	94 e0       	ldi	r25, 0x04	; 4
     6a0:	27 e0       	ldi	r18, 0x07	; 7
     6a2:	fc 01       	movw	r30, r24
     6a4:	23 83       	std	Z+3, r18	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWIMTransactionFinished>
	}
}
     6ac:	00 00       	nop
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <TWIMTransactionFinished>:

void TWIMTransactionFinished( uint8_t result)
{
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	1f 92       	push	r1
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	89 83       	std	Y+1, r24	; 0x01
	Twim_result = result;
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <Twim_result>
	Twim_status = TWIM_STATUS_READY;
     6ca:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <Twim_status>
}
     6ce:	00 00       	nop
     6d0:	0f 90       	pop	r0
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <__vector_46>:

ISR (TWIM_BUS_vect)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6e8:	0f 92       	push	r0
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	ef 93       	push	r30
     700:	ff 93       	push	r31
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     70c:	80 ea       	ldi	r24, 0xA0	; 160
     70e:	94 e0       	ldi	r25, 0x04	; 4
     710:	fc 01       	movw	r30, r24
     712:	84 81       	ldd	r24, Z+4	; 0x04
     714:	89 83       	std	Y+1, r24	; 0x01

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	88 2f       	mov	r24, r24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	88 70       	andi	r24, 0x08	; 8
     71e:	99 27       	eor	r25, r25
     720:	89 2b       	or	r24, r25
     722:	39 f4       	brne	.+14     	; 0x732 <__vector_46+0x5a>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	84 70       	andi	r24, 0x04	; 4
     72c:	99 27       	eor	r25, r25
ISR (TWIM_BUS_vect)
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     72e:	89 2b       	or	r24, r25
     730:	19 f0       	breq	.+6      	; 0x738 <__vector_46+0x60>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWIMArbitrationLostBusErrorHandler();
     732:	0e 94 95 02 	call	0x52a	; 0x52a <TWIMArbitrationLostBusErrorHandler>
     736:	13 c0       	rjmp	.+38     	; 0x75e <__vector_46+0x86>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	80 74       	andi	r24, 0x40	; 64
     740:	99 27       	eor	r25, r25
     742:	89 2b       	or	r24, r25
     744:	19 f0       	breq	.+6      	; 0x74c <__vector_46+0x74>
		TWIMWriteHandler();
     746:	0e 94 ba 02 	call	0x574	; 0x574 <TWIMWriteHandler>
     74a:	09 c0       	rjmp	.+18     	; 0x75e <__vector_46+0x86>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	88 23       	and	r24, r24
     750:	1c f4       	brge	.+6      	; 0x758 <__vector_46+0x80>
		TWIMReadHandler();
     752:	0e 94 16 03 	call	0x62c	; 0x62c <TWIMReadHandler>
     756:	03 c0       	rjmp	.+6      	; 0x75e <__vector_46+0x86>
	}

	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
     758:	86 e0       	ldi	r24, 0x06	; 6
     75a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWIMTransactionFinished>
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     75e:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <Twim_status>
	{	
	}
}
     762:	00 00       	nop
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	bf 91       	pop	r27
     770:	af 91       	pop	r26
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	7f 91       	pop	r23
     778:	6f 91       	pop	r22
     77a:	5f 91       	pop	r21
     77c:	4f 91       	pop	r20
     77e:	3f 91       	pop	r19
     780:	2f 91       	pop	r18
     782:	0f 90       	pop	r0
     784:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     788:	0f 90       	pop	r0
     78a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     78e:	0f 90       	pop	r0
     790:	1f 90       	pop	r1
     792:	18 95       	reti

00000794 <DriverUSARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     79c:	80 e8       	ldi	r24, 0x80	; 128
     79e:	96 e0       	ldi	r25, 0x06	; 6
     7a0:	28 e0       	ldi	r18, 0x08	; 8
     7a2:	fc 01       	movw	r30, r24
     7a4:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     7a6:	80 e8       	ldi	r24, 0x80	; 128
     7a8:	96 e0       	ldi	r25, 0x06	; 6
     7aa:	24 e0       	ldi	r18, 0x04	; 4
     7ac:	fc 01       	movw	r30, r24
     7ae:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     7b0:	80 ea       	ldi	r24, 0xA0	; 160
     7b2:	9a e0       	ldi	r25, 0x0A	; 10
     7b4:	fc 01       	movw	r30, r24
     7b6:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     7b8:	80 ea       	ldi	r24, 0xA0	; 160
     7ba:	9a e0       	ldi	r25, 0x0A	; 10
     7bc:	28 e1       	ldi	r18, 0x18	; 24
     7be:	fc 01       	movw	r30, r24
     7c0:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;	
     7c2:	80 ea       	ldi	r24, 0xA0	; 160
     7c4:	9a e0       	ldi	r25, 0x0A	; 10
     7c6:	23 e0       	ldi	r18, 0x03	; 3
     7c8:	fc 01       	movw	r30, r24
     7ca:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     7cc:	80 ea       	ldi	r24, 0xA0	; 160
     7ce:	9a e0       	ldi	r25, 0x0A	; 10
     7d0:	25 ee       	ldi	r18, 0xE5	; 229
     7d2:	fc 01       	movw	r30, r24
     7d4:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0xBC; 
     7d6:	80 ea       	ldi	r24, 0xA0	; 160
     7d8:	9a e0       	ldi	r25, 0x0A	; 10
     7da:	2c eb       	ldi	r18, 0xBC	; 188
     7dc:	fc 01       	movw	r30, r24
     7de:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e2       	ldi	r25, 0x20	; 32
     7e4:	80 93 fc 63 	sts	0x63FC, r24	; 0x8063fc <__iob+0x2>
     7e8:	90 93 fd 63 	sts	0x63FD, r25	; 0x8063fd <__iob+0x3>
	stdin=&UsartStdio;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e2       	ldi	r25, 0x20	; 32
     7f0:	80 93 fa 63 	sts	0x63FA, r24	; 0x8063fa <__iob>
     7f4:	90 93 fb 63 	sts	0x63FB, r25	; 0x8063fb <__iob+0x1>
}
     7f8:	00 00       	nop
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <stdio_putchar>:


static int stdio_putchar(char c, FILE * stream)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	00 d0       	rcall	.+0      	; 0x806 <stdio_putchar+0x6>
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	6a 83       	std	Y+2, r22	; 0x02
     80e:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     810:	80 ea       	ldi	r24, 0xA0	; 160
     812:	9a e0       	ldi	r25, 0x0A	; 10
     814:	29 81       	ldd	r18, Y+1	; 0x01
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     81a:	00 00       	nop
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	9a e0       	ldi	r25, 0x0A	; 10
     820:	fc 01       	movw	r30, r24
     822:	81 81       	ldd	r24, Z+1	; 0x01
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	80 74       	andi	r24, 0x40	; 64
     82a:	99 27       	eor	r25, r25
     82c:	89 2b       	or	r24, r25
     82e:	b1 f3       	breq	.-20     	; 0x81c <stdio_putchar+0x1c>
	USART.STATUS=0b01000000;
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	9a e0       	ldi	r25, 0x0A	; 10
     834:	20 e4       	ldi	r18, 0x40	; 64
     836:	fc 01       	movw	r30, r24
     838:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
}
     83e:	23 96       	adiw	r28, 0x03	; 3
     840:	cd bf       	out	0x3d, r28	; 61
     842:	de bf       	out	0x3e, r29	; 62
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	1f 92       	push	r1
     850:	1f 92       	push	r1
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     85a:	00 00       	nop
     85c:	80 ea       	ldi	r24, 0xA0	; 160
     85e:	9a e0       	ldi	r25, 0x0A	; 10
     860:	fc 01       	movw	r30, r24
     862:	81 81       	ldd	r24, Z+1	; 0x01
     864:	88 23       	and	r24, r24
     866:	d4 f7       	brge	.-12     	; 0x85c <stdio_getchar+0x12>
	return USART.DATA;
     868:	80 ea       	ldi	r24, 0xA0	; 160
     86a:	9a e0       	ldi	r25, 0x0A	; 10
     86c:	fc 01       	movw	r30, r24
     86e:	80 81       	ld	r24, Z
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	2e 97       	sbiw	r28, 0x0e	; 14
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	8d 87       	std	Y+13, r24	; 0x0d
     88e:	9e 87       	std	Y+14, r25	; 0x0e
     890:	1d 82       	std	Y+5, r1	; 0x05
     892:	1e 82       	std	Y+6, r1	; 0x06
     894:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspendAll>
     898:	80 91 85 61 	lds	r24, 0x6185	; 0x806185 <xHeapHasBeenInitialised.4117>
     89c:	88 23       	and	r24, r24
     89e:	29 f4       	brne	.+10     	; 0x8aa <pvPortMalloc+0x2c>
     8a0:	0e 94 a5 05 	call	0xb4a	; 0xb4a <prvHeapInit>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 85 61 	sts	0x6185, r24	; 0x806185 <xHeapHasBeenInitialised.4117>
     8aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ae:	89 2b       	or	r24, r25
     8b0:	41 f0       	breq	.+16     	; 0x8c2 <pvPortMalloc+0x44>
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2d 85       	ldd	r18, Y+13	; 0x0d
     8b8:	3e 85       	ldd	r19, Y+14	; 0x0e
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	8d 87       	std	Y+13, r24	; 0x0d
     8c0:	9e 87       	std	Y+14, r25	; 0x0e
     8c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c6:	89 2b       	or	r24, r25
     8c8:	09 f4       	brne	.+2      	; 0x8cc <pvPortMalloc+0x4e>
     8ca:	b8 c0       	rjmp	.+368    	; 0xa3c <pvPortMalloc+0x1be>
     8cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	9f 43       	sbci	r25, 0x3F	; 63
     8d4:	08 f0       	brcs	.+2      	; 0x8d8 <pvPortMalloc+0x5a>
     8d6:	b2 c0       	rjmp	.+356    	; 0xa3c <pvPortMalloc+0x1be>
     8d8:	8d e7       	ldi	r24, 0x7D	; 125
     8da:	91 e6       	ldi	r25, 0x61	; 97
     8dc:	8b 83       	std	Y+3, r24	; 0x03
     8de:	9c 83       	std	Y+4, r25	; 0x04
     8e0:	80 91 7d 61 	lds	r24, 0x617D	; 0x80617d <xStart>
     8e4:	90 91 7e 61 	lds	r25, 0x617E	; 0x80617e <xStart+0x1>
     8e8:	89 83       	std	Y+1, r24	; 0x01
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	0b c0       	rjmp	.+22     	; 0x904 <pvPortMalloc+0x86>
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	8b 83       	std	Y+3, r24	; 0x03
     8f4:	9c 83       	std	Y+4, r25	; 0x04
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	fc 01       	movw	r30, r24
     90a:	22 81       	ldd	r18, Z+2	; 0x02
     90c:	33 81       	ldd	r19, Z+3	; 0x03
     90e:	8d 85       	ldd	r24, Y+13	; 0x0d
     910:	9e 85       	ldd	r25, Y+14	; 0x0e
     912:	28 17       	cp	r18, r24
     914:	39 07       	cpc	r19, r25
     916:	38 f4       	brcc	.+14     	; 0x926 <pvPortMalloc+0xa8>
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	89 2b       	or	r24, r25
     924:	21 f7       	brne	.-56     	; 0x8ee <pvPortMalloc+0x70>
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	9a 81       	ldd	r25, Y+2	; 0x02
     92a:	81 58       	subi	r24, 0x81	; 129
     92c:	91 46       	sbci	r25, 0x61	; 97
     92e:	09 f4       	brne	.+2      	; 0x932 <pvPortMalloc+0xb4>
     930:	85 c0       	rjmp	.+266    	; 0xa3c <pvPortMalloc+0x1be>
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	9c 81       	ldd	r25, Y+4	; 0x04
     936:	fc 01       	movw	r30, r24
     938:	20 81       	ld	r18, Z
     93a:	31 81       	ldd	r19, Z+1	; 0x01
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	82 0f       	add	r24, r18
     942:	93 1f       	adc	r25, r19
     944:	8d 83       	std	Y+5, r24	; 0x05
     946:	9e 83       	std	Y+6, r25	; 0x06
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	fc 01       	movw	r30, r24
     94e:	20 81       	ld	r18, Z
     950:	31 81       	ldd	r19, Z+1	; 0x01
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	9c 81       	ldd	r25, Y+4	; 0x04
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
     95a:	31 83       	std	Z+1, r19	; 0x01
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	fc 01       	movw	r30, r24
     962:	22 81       	ldd	r18, Z+2	; 0x02
     964:	33 81       	ldd	r19, Z+3	; 0x03
     966:	8d 85       	ldd	r24, Y+13	; 0x0d
     968:	9e 85       	ldd	r25, Y+14	; 0x0e
     96a:	28 1b       	sub	r18, r24
     96c:	39 0b       	sbc	r19, r25
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	82 17       	cp	r24, r18
     978:	93 07       	cpc	r25, r19
     97a:	08 f0       	brcs	.+2      	; 0x97e <pvPortMalloc+0x100>
     97c:	4e c0       	rjmp	.+156    	; 0xa1a <pvPortMalloc+0x19c>
     97e:	29 81       	ldd	r18, Y+1	; 0x01
     980:	3a 81       	ldd	r19, Y+2	; 0x02
     982:	8d 85       	ldd	r24, Y+13	; 0x0d
     984:	9e 85       	ldd	r25, Y+14	; 0x0e
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	89 87       	std	Y+9, r24	; 0x09
     98c:	9a 87       	std	Y+10, r25	; 0x0a
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	fc 01       	movw	r30, r24
     994:	22 81       	ldd	r18, Z+2	; 0x02
     996:	33 81       	ldd	r19, Z+3	; 0x03
     998:	8d 85       	ldd	r24, Y+13	; 0x0d
     99a:	9e 85       	ldd	r25, Y+14	; 0x0e
     99c:	28 1b       	sub	r18, r24
     99e:	39 0b       	sbc	r19, r25
     9a0:	89 85       	ldd	r24, Y+9	; 0x09
     9a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a4:	fc 01       	movw	r30, r24
     9a6:	22 83       	std	Z+2, r18	; 0x02
     9a8:	33 83       	std	Z+3, r19	; 0x03
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	2d 85       	ldd	r18, Y+13	; 0x0d
     9b0:	3e 85       	ldd	r19, Y+14	; 0x0e
     9b2:	fc 01       	movw	r30, r24
     9b4:	22 83       	std	Z+2, r18	; 0x02
     9b6:	33 83       	std	Z+3, r19	; 0x03
     9b8:	89 85       	ldd	r24, Y+9	; 0x09
     9ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     9bc:	fc 01       	movw	r30, r24
     9be:	82 81       	ldd	r24, Z+2	; 0x02
     9c0:	93 81       	ldd	r25, Z+3	; 0x03
     9c2:	8b 87       	std	Y+11, r24	; 0x0b
     9c4:	9c 87       	std	Y+12, r25	; 0x0c
     9c6:	8d e7       	ldi	r24, 0x7D	; 125
     9c8:	91 e6       	ldi	r25, 0x61	; 97
     9ca:	8f 83       	std	Y+7, r24	; 0x07
     9cc:	98 87       	std	Y+8, r25	; 0x08
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <pvPortMalloc+0x160>
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
     9d2:	98 85       	ldd	r25, Y+8	; 0x08
     9d4:	fc 01       	movw	r30, r24
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	8f 83       	std	Y+7, r24	; 0x07
     9dc:	98 87       	std	Y+8, r25	; 0x08
     9de:	8f 81       	ldd	r24, Y+7	; 0x07
     9e0:	98 85       	ldd	r25, Y+8	; 0x08
     9e2:	fc 01       	movw	r30, r24
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	fc 01       	movw	r30, r24
     9ea:	22 81       	ldd	r18, Z+2	; 0x02
     9ec:	33 81       	ldd	r19, Z+3	; 0x03
     9ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f2:	28 17       	cp	r18, r24
     9f4:	39 07       	cpc	r19, r25
     9f6:	60 f3       	brcs	.-40     	; 0x9d0 <pvPortMalloc+0x152>
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 81       	ld	r18, Z
     a00:	31 81       	ldd	r19, Z+1	; 0x01
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	9a 85       	ldd	r25, Y+10	; 0x0a
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
     a0a:	31 83       	std	Z+1, r19	; 0x01
     a0c:	8f 81       	ldd	r24, Y+7	; 0x07
     a0e:	98 85       	ldd	r25, Y+8	; 0x08
     a10:	29 85       	ldd	r18, Y+9	; 0x09
     a12:	3a 85       	ldd	r19, Y+10	; 0x0a
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
     a18:	31 83       	std	Z+1, r19	; 0x01
     a1a:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <xFreeBytesRemaining>
     a1e:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	fc 01       	movw	r30, r24
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	a9 01       	movw	r20, r18
     a2e:	48 1b       	sub	r20, r24
     a30:	59 0b       	sbc	r21, r25
     a32:	ca 01       	movw	r24, r20
     a34:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     a38:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
     a3c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xTaskResumeAll>
     a40:	8d 81       	ldd	r24, Y+5	; 0x05
     a42:	9e 81       	ldd	r25, Y+6	; 0x06
     a44:	89 2b       	or	r24, r25
     a46:	11 f4       	brne	.+4      	; 0xa4c <pvPortMalloc+0x1ce>
     a48:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <vApplicationMallocFailedHook>
     a4c:	8d 81       	ldd	r24, Y+5	; 0x05
     a4e:	9e 81       	ldd	r25, Y+6	; 0x06
     a50:	2e 96       	adiw	r28, 0x0e	; 14
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <vPortFree>:
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	2a 97       	sbiw	r28, 0x0a	; 10
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	89 87       	std	Y+9, r24	; 0x09
     a6c:	9a 87       	std	Y+10, r25	; 0x0a
     a6e:	89 85       	ldd	r24, Y+9	; 0x09
     a70:	9a 85       	ldd	r25, Y+10	; 0x0a
     a72:	8b 83       	std	Y+3, r24	; 0x03
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	89 85       	ldd	r24, Y+9	; 0x09
     a78:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7a:	89 2b       	or	r24, r25
     a7c:	09 f4       	brne	.+2      	; 0xa80 <vPortFree+0x24>
     a7e:	53 c0       	rjmp	.+166    	; 0xb26 <vPortFree+0xca>
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	91 95       	neg	r25
     a86:	81 95       	neg	r24
     a88:	91 09       	sbc	r25, r1
     a8a:	2b 81       	ldd	r18, Y+3	; 0x03
     a8c:	3c 81       	ldd	r19, Y+4	; 0x04
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	9c 81       	ldd	r25, Y+4	; 0x04
     a9a:	8d 83       	std	Y+5, r24	; 0x05
     a9c:	9e 83       	std	Y+6, r25	; 0x06
     a9e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspendAll>
     aa2:	8d 81       	ldd	r24, Y+5	; 0x05
     aa4:	9e 81       	ldd	r25, Y+6	; 0x06
     aa6:	fc 01       	movw	r30, r24
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	8f 83       	std	Y+7, r24	; 0x07
     aae:	98 87       	std	Y+8, r25	; 0x08
     ab0:	8d e7       	ldi	r24, 0x7D	; 125
     ab2:	91 e6       	ldi	r25, 0x61	; 97
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <vPortFree+0x6c>
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	fc 01       	movw	r30, r24
     ad4:	22 81       	ldd	r18, Z+2	; 0x02
     ad6:	33 81       	ldd	r19, Z+3	; 0x03
     ad8:	8f 81       	ldd	r24, Y+7	; 0x07
     ada:	98 85       	ldd	r25, Y+8	; 0x08
     adc:	28 17       	cp	r18, r24
     ade:	39 07       	cpc	r19, r25
     ae0:	60 f3       	brcs	.-40     	; 0xaba <vPortFree+0x5e>
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	9e 81       	ldd	r25, Y+6	; 0x06
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
     af4:	31 83       	std	Z+1, r19	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	2d 81       	ldd	r18, Y+5	; 0x05
     afc:	3e 81       	ldd	r19, Y+6	; 0x06
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
     b02:	31 83       	std	Z+1, r19	; 0x01
     b04:	8d 81       	ldd	r24, Y+5	; 0x05
     b06:	9e 81       	ldd	r25, Y+6	; 0x06
     b08:	fc 01       	movw	r30, r24
     b0a:	22 81       	ldd	r18, Z+2	; 0x02
     b0c:	33 81       	ldd	r19, Z+3	; 0x03
     b0e:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     b12:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     b1e:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
     b22:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xTaskResumeAll>
     b26:	00 00       	nop
     b28:	2a 96       	adiw	r28, 0x0a	; 10
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <xPortGetFreeHeapSize>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     b40:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <prvHeapInit+0x6>
     b50:	1f 92       	push	r1
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     b56:	8e e7       	ldi	r24, 0x7E	; 126
     b58:	91 e2       	ldi	r25, 0x21	; 33
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	9a 83       	std	Y+2, r25	; 0x02

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	80 93 7d 61 	sts	0x617D, r24	; 0x80617d <xStart>
     b66:	90 93 7e 61 	sts	0x617E, r25	; 0x80617e <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     b6a:	10 92 7f 61 	sts	0x617F, r1	; 0x80617f <xStart+0x2>
     b6e:	10 92 80 61 	sts	0x6180, r1	; 0x806180 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	9f e3       	ldi	r25, 0x3F	; 63
     b76:	80 93 83 61 	sts	0x6183, r24	; 0x806183 <xEnd+0x2>
     b7a:	90 93 84 61 	sts	0x6184, r25	; 0x806184 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     b7e:	10 92 81 61 	sts	0x6181, r1	; 0x806181 <xEnd>
     b82:	10 92 82 61 	sts	0x6182, r1	; 0x806182 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	8b 83       	std	Y+3, r24	; 0x03
     b8c:	9c 83       	std	Y+4, r25	; 0x04
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	2f ef       	ldi	r18, 0xFF	; 255
     b94:	3f e3       	ldi	r19, 0x3F	; 63
     b96:	fc 01       	movw	r30, r24
     b98:	22 83       	std	Z+2, r18	; 0x02
     b9a:	33 83       	std	Z+3, r19	; 0x03
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	21 e8       	ldi	r18, 0x81	; 129
     ba2:	31 e6       	ldi	r19, 0x61	; 97
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
     ba8:	31 83       	std	Z+1, r19	; 0x01
}
     baa:	00 00       	nop
     bac:	24 96       	adiw	r28, 0x04	; 4
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	1f 92       	push	r1
     bbe:	1f 92       	push	r1
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	9c 01       	movw	r18, r24
     bce:	2d 5f       	subi	r18, 0xFD	; 253
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	fc 01       	movw	r30, r24
     bd8:	21 83       	std	Z+1, r18	; 0x01
     bda:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	fc 01       	movw	r30, r24
     be6:	23 83       	std	Z+3, r18	; 0x03
     be8:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	9c 01       	movw	r18, r24
     bf0:	2d 5f       	subi	r18, 0xFD	; 253
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	fc 01       	movw	r30, r24
     bfa:	25 83       	std	Z+5, r18	; 0x05
     bfc:	36 83       	std	Z+6, r19	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	9c 01       	movw	r18, r24
     c04:	2d 5f       	subi	r18, 0xFD	; 253
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	fc 01       	movw	r30, r24
     c0e:	27 83       	std	Z+7, r18	; 0x07
     c10:	30 87       	std	Z+8, r19	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	fc 01       	movw	r30, r24
     c18:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     c1a:	00 00       	nop
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	1f 92       	push	r1
     c2c:	1f 92       	push	r1
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	fc 01       	movw	r30, r24
     c3c:	10 86       	std	Z+8, r1	; 0x08
     c3e:	11 86       	std	Z+9, r1	; 0x09

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     c40:	00 00       	nop
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	00 d0       	rcall	.+0      	; 0xc52 <vListInsertEnd+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <vListInsertEnd+0x8>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	6d 83       	std	Y+5, r22	; 0x05
     c5e:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	fc 01       	movw	r30, r24
     c66:	81 81       	ldd	r24, Z+1	; 0x01
     c68:	92 81       	ldd	r25, Z+2	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	29 81       	ldd	r18, Y+1	; 0x01
     c74:	3a 81       	ldd	r19, Y+2	; 0x02
     c76:	fc 01       	movw	r30, r24
     c78:	22 83       	std	Z+2, r18	; 0x02
     c7a:	33 83       	std	Z+3, r19	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	fc 01       	movw	r30, r24
     c82:	24 81       	ldd	r18, Z+4	; 0x04
     c84:	35 81       	ldd	r19, Z+5	; 0x05
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	fc 01       	movw	r30, r24
     c8c:	24 83       	std	Z+4, r18	; 0x04
     c8e:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	fc 01       	movw	r30, r24
     c96:	84 81       	ldd	r24, Z+4	; 0x04
     c98:	95 81       	ldd	r25, Z+5	; 0x05
     c9a:	2d 81       	ldd	r18, Y+5	; 0x05
     c9c:	3e 81       	ldd	r19, Y+6	; 0x06
     c9e:	fc 01       	movw	r30, r24
     ca0:	22 83       	std	Z+2, r18	; 0x02
     ca2:	33 83       	std	Z+3, r19	; 0x03
	pxIndex->pxPrevious = pxNewListItem;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	2d 81       	ldd	r18, Y+5	; 0x05
     caa:	3e 81       	ldd	r19, Y+6	; 0x06
     cac:	fc 01       	movw	r30, r24
     cae:	24 83       	std	Z+4, r18	; 0x04
     cb0:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     cb2:	8d 81       	ldd	r24, Y+5	; 0x05
     cb4:	9e 81       	ldd	r25, Y+6	; 0x06
     cb6:	2b 81       	ldd	r18, Y+3	; 0x03
     cb8:	3c 81       	ldd	r19, Y+4	; 0x04
     cba:	fc 01       	movw	r30, r24
     cbc:	20 87       	std	Z+8, r18	; 0x08
     cbe:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	fc 01       	movw	r30, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	28 0f       	add	r18, r24
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
}
     cd4:	00 00       	nop
     cd6:	26 96       	adiw	r28, 0x06	; 6
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	28 97       	sbiw	r28, 0x08	; 8
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	9e 83       	std	Y+6, r25	; 0x06
     cf4:	6f 83       	std	Y+7, r22	; 0x07
     cf6:	78 87       	std	Y+8, r23	; 0x08
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cf8:	8f 81       	ldd	r24, Y+7	; 0x07
     cfa:	98 85       	ldd	r25, Y+8	; 0x08
     cfc:	fc 01       	movw	r30, r24
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	8b 83       	std	Y+3, r24	; 0x03
     d04:	9c 83       	std	Y+4, r25	; 0x04
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	41 f4       	brne	.+16     	; 0xd1e <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	fc 01       	movw	r30, r24
     d14:	87 81       	ldd	r24, Z+7	; 0x07
     d16:	90 85       	ldd	r25, Z+8	; 0x08
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	1a c0       	rjmp	.+52     	; 0xd52 <vListInsert+0x70>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	03 96       	adiw	r24, 0x03	; 3
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <vListInsert+0x56>
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	fc 01       	movw	r30, r24
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	fc 01       	movw	r30, r24
     d44:	20 81       	ld	r18, Z
     d46:	31 81       	ldd	r19, Z+1	; 0x01
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	9c 81       	ldd	r25, Y+4	; 0x04
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	60 f7       	brcc	.-40     	; 0xd2a <vListInsert+0x48>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	22 81       	ldd	r18, Z+2	; 0x02
     d5a:	33 81       	ldd	r19, Z+3	; 0x03
     d5c:	8f 81       	ldd	r24, Y+7	; 0x07
     d5e:	98 85       	ldd	r25, Y+8	; 0x08
     d60:	fc 01       	movw	r30, r24
     d62:	22 83       	std	Z+2, r18	; 0x02
     d64:	33 83       	std	Z+3, r19	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d66:	8f 81       	ldd	r24, Y+7	; 0x07
     d68:	98 85       	ldd	r25, Y+8	; 0x08
     d6a:	fc 01       	movw	r30, r24
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	2f 81       	ldd	r18, Y+7	; 0x07
     d72:	38 85       	ldd	r19, Y+8	; 0x08
     d74:	fc 01       	movw	r30, r24
     d76:	24 83       	std	Z+4, r18	; 0x04
     d78:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     d7a:	8f 81       	ldd	r24, Y+7	; 0x07
     d7c:	98 85       	ldd	r25, Y+8	; 0x08
     d7e:	29 81       	ldd	r18, Y+1	; 0x01
     d80:	3a 81       	ldd	r19, Y+2	; 0x02
     d82:	fc 01       	movw	r30, r24
     d84:	24 83       	std	Z+4, r18	; 0x04
     d86:	35 83       	std	Z+5, r19	; 0x05
	pxIterator->pxNext = pxNewListItem;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	2f 81       	ldd	r18, Y+7	; 0x07
     d8e:	38 85       	ldd	r19, Y+8	; 0x08
     d90:	fc 01       	movw	r30, r24
     d92:	22 83       	std	Z+2, r18	; 0x02
     d94:	33 83       	std	Z+3, r19	; 0x03

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     d96:	8f 81       	ldd	r24, Y+7	; 0x07
     d98:	98 85       	ldd	r25, Y+8	; 0x08
     d9a:	2d 81       	ldd	r18, Y+5	; 0x05
     d9c:	3e 81       	ldd	r19, Y+6	; 0x06
     d9e:	fc 01       	movw	r30, r24
     da0:	20 87       	std	Z+8, r18	; 0x08
     da2:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	28 0f       	add	r18, r24
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
}
     db8:	00 00       	nop
     dba:	28 96       	adiw	r28, 0x08	; 8
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <uxListRemove+0x6>
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8b 83       	std	Y+3, r24	; 0x03
     dd4:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	9c 81       	ldd	r25, Y+4	; 0x04
     dda:	fc 01       	movw	r30, r24
     ddc:	80 85       	ldd	r24, Z+8	; 0x08
     dde:	91 85       	ldd	r25, Z+9	; 0x09
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	fc 01       	movw	r30, r24
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	2b 81       	ldd	r18, Y+3	; 0x03
     df0:	3c 81       	ldd	r19, Y+4	; 0x04
     df2:	f9 01       	movw	r30, r18
     df4:	24 81       	ldd	r18, Z+4	; 0x04
     df6:	35 81       	ldd	r19, Z+5	; 0x05
     df8:	fc 01       	movw	r30, r24
     dfa:	24 83       	std	Z+4, r18	; 0x04
     dfc:	35 83       	std	Z+5, r19	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	fc 01       	movw	r30, r24
     e04:	84 81       	ldd	r24, Z+4	; 0x04
     e06:	95 81       	ldd	r25, Z+5	; 0x05
     e08:	2b 81       	ldd	r18, Y+3	; 0x03
     e0a:	3c 81       	ldd	r19, Y+4	; 0x04
     e0c:	f9 01       	movw	r30, r18
     e0e:	22 81       	ldd	r18, Z+2	; 0x02
     e10:	33 81       	ldd	r19, Z+3	; 0x03
     e12:	fc 01       	movw	r30, r24
     e14:	22 83       	std	Z+2, r18	; 0x02
     e16:	33 83       	std	Z+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	fc 01       	movw	r30, r24
     e1e:	21 81       	ldd	r18, Z+1	; 0x01
     e20:	32 81       	ldd	r19, Z+2	; 0x02
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	28 17       	cp	r18, r24
     e28:	39 07       	cpc	r19, r25
     e2a:	51 f4       	brne	.+20     	; 0xe40 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	fc 01       	movw	r30, r24
     e32:	24 81       	ldd	r18, Z+4	; 0x04
     e34:	35 81       	ldd	r19, Z+5	; 0x05
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	fc 01       	movw	r30, r24
     e3c:	21 83       	std	Z+1, r18	; 0x01
     e3e:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	fc 01       	movw	r30, r24
     e46:	10 86       	std	Z+8, r1	; 0x08
     e48:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	fc 01       	movw	r30, r24
     e50:	80 81       	ld	r24, Z
     e52:	2f ef       	ldi	r18, 0xFF	; 255
     e54:	28 0f       	add	r18, r24
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	fc 01       	movw	r30, r24
     e64:	80 81       	ld	r24, Z
}
     e66:	24 96       	adiw	r28, 0x04	; 4
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <pxPortInitialiseStack>:
	portSAVE_CONTEXT();
	vTaskSwitchContext();
	portRESTORE_CONTEXT();
	asm volatile ( "reti" );

}
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	28 97       	sbiw	r28, 0x08	; 8
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	8b 83       	std	Y+3, r24	; 0x03
     e82:	9c 83       	std	Y+4, r25	; 0x04
     e84:	6d 83       	std	Y+5, r22	; 0x05
     e86:	7e 83       	std	Y+6, r23	; 0x06
     e88:	4f 83       	std	Y+7, r20	; 0x07
     e8a:	58 87       	std	Y+8, r21	; 0x08
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	21 e1       	ldi	r18, 0x11	; 17
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	22 e2       	ldi	r18, 0x22	; 34
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 83       	st	Z, r18
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	23 e3       	ldi	r18, 0x33	; 51
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	9c 81       	ldd	r25, Y+4	; 0x04
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	29 81       	ldd	r18, Y+1	; 0x01
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	8b 83       	std	Y+3, r24	; 0x03
     ee2:	9c 83       	std	Y+4, r25	; 0x04
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	89 2f       	mov	r24, r25
     eea:	99 27       	eor	r25, r25
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	29 81       	ldd	r18, Y+1	; 0x01
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	89 2f       	mov	r24, r25
     f0a:	99 27       	eor	r25, r25
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	29 81       	ldd	r18, Y+1	; 0x01
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	fc 01       	movw	r30, r24
     f2a:	10 82       	st	Z, r1
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	8b 83       	std	Y+3, r24	; 0x03
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	20 e8       	ldi	r18, 0x80	; 128
     f3c:	fc 01       	movw	r30, r24
     f3e:	20 83       	st	Z, r18
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	8b 83       	std	Y+3, r24	; 0x03
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	fc 01       	movw	r30, r24
     f50:	10 82       	st	Z, r1
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	22 e0       	ldi	r18, 0x02	; 2
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	9c 83       	std	Y+4, r25	; 0x04
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	23 e0       	ldi	r18, 0x03	; 3
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	9c 83       	std	Y+4, r25	; 0x04
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	24 e0       	ldi	r18, 0x04	; 4
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	8b 83       	std	Y+3, r24	; 0x03
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	25 e0       	ldi	r18, 0x05	; 5
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	26 e0       	ldi	r18, 0x06	; 6
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	8b 83       	std	Y+3, r24	; 0x03
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	27 e0       	ldi	r18, 0x07	; 7
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	8b 83       	std	Y+3, r24	; 0x03
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	28 e0       	ldi	r18, 0x08	; 8
     fda:	fc 01       	movw	r30, r24
     fdc:	20 83       	st	Z, r18
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	29 e0       	ldi	r18, 0x09	; 9
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	8b 83       	std	Y+3, r24	; 0x03
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	20 e1       	ldi	r18, 0x10	; 16
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	8b 83       	std	Y+3, r24	; 0x03
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	21 e1       	ldi	r18, 0x11	; 17
    1016:	fc 01       	movw	r30, r24
    1018:	20 83       	st	Z, r18
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	8b 83       	std	Y+3, r24	; 0x03
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	22 e1       	ldi	r18, 0x12	; 18
    102a:	fc 01       	movw	r30, r24
    102c:	20 83       	st	Z, r18
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	8b 83       	std	Y+3, r24	; 0x03
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	23 e1       	ldi	r18, 0x13	; 19
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	24 e1       	ldi	r18, 0x14	; 20
    1052:	fc 01       	movw	r30, r24
    1054:	20 83       	st	Z, r18
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	25 e1       	ldi	r18, 0x15	; 21
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	26 e1       	ldi	r18, 0x16	; 22
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	27 e1       	ldi	r18, 0x17	; 23
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	28 e1       	ldi	r18, 0x18	; 24
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	8b 83       	std	Y+3, r24	; 0x03
    10ae:	9c 83       	std	Y+4, r25	; 0x04
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	29 e1       	ldi	r18, 0x19	; 25
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	20 e2       	ldi	r18, 0x20	; 32
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	21 e2       	ldi	r18, 0x21	; 33
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	22 e2       	ldi	r18, 0x22	; 34
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 83       	st	Z, r18
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	23 e2       	ldi	r18, 0x23	; 35
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8f 81       	ldd	r24, Y+7	; 0x07
    1116:	98 85       	ldd	r25, Y+8	; 0x08
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	29 81       	ldd	r18, Y+1	; 0x01
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	89 2f       	mov	r24, r25
    1136:	99 27       	eor	r25, r25
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	29 81       	ldd	r18, Y+1	; 0x01
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	26 e2       	ldi	r18, 0x26	; 38
    1156:	fc 01       	movw	r30, r24
    1158:	20 83       	st	Z, r18
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	27 e2       	ldi	r18, 0x27	; 39
    116a:	fc 01       	movw	r30, r24
    116c:	20 83       	st	Z, r18
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	28 e2       	ldi	r18, 0x28	; 40
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	8b 83       	std	Y+3, r24	; 0x03
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	29 e2       	ldi	r18, 0x29	; 41
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	8b 83       	std	Y+3, r24	; 0x03
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	20 e3       	ldi	r18, 0x30	; 48
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	21 e3       	ldi	r18, 0x31	; 49
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	28 96       	adiw	r28, 0x08	; 8
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <xPortStartScheduler>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <prvSetupTimerInterrupt>
    11e4:	a0 91 86 61 	lds	r26, 0x6186	; 0x806186 <pxCurrentTCB>
    11e8:	b0 91 87 61 	lds	r27, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    11ec:	cd 91       	ld	r28, X+
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	dd 91       	ld	r29, X+
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	9f 90       	pop	r9
    1222:	8f 90       	pop	r8
    1224:	7f 90       	pop	r7
    1226:	6f 90       	pop	r6
    1228:	5f 90       	pop	r5
    122a:	4f 90       	pop	r4
    122c:	3f 90       	pop	r3
    122e:	2f 90       	pop	r2
    1230:	1f 90       	pop	r1
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	08 95       	ret
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <vPortYield>:
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	0f 92       	push	r0
    124a:	1f 92       	push	r1
    124c:	11 24       	eor	r1, r1
    124e:	2f 92       	push	r2
    1250:	3f 92       	push	r3
    1252:	4f 92       	push	r4
    1254:	5f 92       	push	r5
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    128a:	a0 91 86 61 	lds	r26, 0x6186	; 0x806186 <pxCurrentTCB>
    128e:	b0 91 87 61 	lds	r27, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1292:	0d b6       	in	r0, 0x3d	; 61
    1294:	0d 92       	st	X+, r0
    1296:	0e b6       	in	r0, 0x3e	; 62
    1298:	0d 92       	st	X+, r0
    129a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <vTaskSwitchContext>
    129e:	a0 91 86 61 	lds	r26, 0x6186	; 0x806186 <pxCurrentTCB>
    12a2:	b0 91 87 61 	lds	r27, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    12a6:	cd 91       	ld	r28, X+
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	dd 91       	ld	r29, X+
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	5f 90       	pop	r5
    12e4:	4f 90       	pop	r4
    12e6:	3f 90       	pop	r3
    12e8:	2f 90       	pop	r2
    12ea:	1f 90       	pop	r1
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	08 95       	ret
	...

000012f6 <prvSetupTimerInterrupt>:
/*
 * Setup timer to generate a tick timer interrupt
 */

static void prvSetupTimerInterrupt( void )
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	//TCC0 is used as tick timer
	TCC0.CTRLA=0b00000001; //DIV1
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	98 e0       	ldi	r25, 0x08	; 8
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
	TCC0.INTCTRLA=0b00000001; //OVF priority LOW
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	98 e0       	ldi	r25, 0x08	; 8
    130c:	21 e0       	ldi	r18, 0x01	; 1
    130e:	fc 01       	movw	r30, r24
    1310:	26 83       	std	Z+6, r18	; 0x06
	TCC0.PER=configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	98 e0       	ldi	r25, 0x08	; 8
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3d e7       	ldi	r19, 0x7D	; 125
    131a:	fc 01       	movw	r30, r24
    131c:	26 a3       	std	Z+38, r18	; 0x26
    131e:	37 a3       	std	Z+39, r19	; 0x27
	//TCC0.PER=configCPU_CLOCK_HZ / 1000;

}
    1320:	00 00       	nop
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	0f 92       	push	r0
    1330:	1f 92       	push	r1
    1332:	11 24       	eor	r1, r1
    1334:	2f 92       	push	r2
    1336:	3f 92       	push	r3
    1338:	4f 92       	push	r4
    133a:	5f 92       	push	r5
    133c:	6f 92       	push	r6
    133e:	7f 92       	push	r7
    1340:	8f 92       	push	r8
    1342:	9f 92       	push	r9
    1344:	af 92       	push	r10
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	a0 91 86 61 	lds	r26, 0x6186	; 0x806186 <pxCurrentTCB>
    1374:	b0 91 87 61 	lds	r27, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1378:	0d b6       	in	r0, 0x3d	; 61
    137a:	0d 92       	st	X+, r0
    137c:	0e b6       	in	r0, 0x3e	; 62
    137e:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	98 e0       	ldi	r25, 0x08	; 8
    1384:	fc 01       	movw	r30, r24
    1386:	86 a1       	ldd	r24, Z+38	; 0x26
    1388:	97 a1       	ldd	r25, Z+39	; 0x27
    138a:	9c 01       	movw	r18, r24
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	80 91 f4 63 	lds	r24, 0x63F4	; 0x8063f4 <StatsTimer>
    1394:	90 91 f5 63 	lds	r25, 0x63F5	; 0x8063f5 <StatsTimer+0x1>
    1398:	a0 91 f6 63 	lds	r26, 0x63F6	; 0x8063f6 <StatsTimer+0x2>
    139c:	b0 91 f7 63 	lds	r27, 0x63F7	; 0x8063f7 <StatsTimer+0x3>
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	a4 1f       	adc	r26, r20
    13a6:	b5 1f       	adc	r27, r21
    13a8:	80 93 f4 63 	sts	0x63F4, r24	; 0x8063f4 <StatsTimer>
    13ac:	90 93 f5 63 	sts	0x63F5, r25	; 0x8063f5 <StatsTimer+0x1>
    13b0:	a0 93 f6 63 	sts	0x63F6, r26	; 0x8063f6 <StatsTimer+0x2>
    13b4:	b0 93 f7 63 	sts	0x63F7, r27	; 0x8063f7 <StatsTimer+0x3>
		xTaskIncrementTick();
    13b8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <xTaskIncrementTick>
		vTaskSwitchContext();
    13bc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
    13c0:	a0 91 86 61 	lds	r26, 0x6186	; 0x806186 <pxCurrentTCB>
    13c4:	b0 91 87 61 	lds	r27, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    13c8:	cd 91       	ld	r28, X+
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	dd 91       	ld	r29, X+
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	bf 90       	pop	r11
    13fa:	af 90       	pop	r10
    13fc:	9f 90       	pop	r9
    13fe:	8f 90       	pop	r8
    1400:	7f 90       	pop	r7
    1402:	6f 90       	pop	r6
    1404:	5f 90       	pop	r5
    1406:	4f 90       	pop	r4
    1408:	3f 90       	pop	r3
    140a:	2f 90       	pop	r2
    140c:	1f 90       	pop	r1
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0

		asm volatile ( "reti" );
    1414:	18 95       	reti
	...

00001418 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	//TCC1 is used as stats timer
	//TCC1.CTRLA=0b0111; //DIV1024	
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}
    1420:	00 00       	nop
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <__vector_20>:

ISR(TCC1_OVF_vect)
{
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	//StatsTimer++;
}
    143c:	00 00       	nop
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	0f 90       	pop	r0
    1444:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	60 97       	sbiw	r28, 0x10	; 16
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	8e 83       	std	Y+6, r24	; 0x06
    1472:	9f 83       	std	Y+7, r25	; 0x07
    1474:	68 87       	std	Y+8, r22	; 0x08
    1476:	79 87       	std	Y+9, r23	; 0x09
    1478:	4a 87       	std	Y+10, r20	; 0x0a
    147a:	5b 87       	std	Y+11, r21	; 0x0b
    147c:	2c 87       	std	Y+12, r18	; 0x0c
    147e:	3d 87       	std	Y+13, r19	; 0x0d
    1480:	0e 87       	std	Y+14, r16	; 0x0e
    1482:	ef 86       	std	Y+15, r14	; 0x0f
    1484:	f8 8a       	std	Y+16, r15	; 0x10
    1486:	8a 85       	ldd	r24, Y+10	; 0x0a
    1488:	9b 85       	ldd	r25, Y+11	; 0x0b
    148a:	0e 94 3f 04 	call	0x87e	; 0x87e <pvPortMalloc>
    148e:	8c 83       	std	Y+4, r24	; 0x04
    1490:	9d 83       	std	Y+5, r25	; 0x05
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	89 2b       	or	r24, r25
    1498:	b9 f0       	breq	.+46     	; 0x14c8 <xTaskCreate+0x7a>
    149a:	8e e2       	ldi	r24, 0x2E	; 46
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 3f 04 	call	0x87e	; 0x87e <pvPortMalloc>
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	89 2b       	or	r24, r25
    14ac:	41 f0       	breq	.+16     	; 0x14be <xTaskCreate+0x70>
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	fc 01       	movw	r30, r24
    14b8:	27 8b       	std	Z+23, r18	; 0x17
    14ba:	30 8f       	std	Z+24, r19	; 0x18
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <xTaskCreate+0x7e>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <vPortFree>
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <xTaskCreate+0x7e>
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	1a 82       	std	Y+2, r1	; 0x02
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f1       	breq	.+66     	; 0x1516 <xTaskCreate+0xc8>
    14d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14d8:	cc 01       	movw	r24, r24
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	09 81       	ldd	r16, Y+1	; 0x01
    14e0:	1a 81       	ldd	r17, Y+2	; 0x02
    14e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    14e4:	58 89       	ldd	r21, Y+16	; 0x10
    14e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    14ea:	68 85       	ldd	r22, Y+8	; 0x08
    14ec:	79 85       	ldd	r23, Y+9	; 0x09
    14ee:	ee 81       	ldd	r30, Y+6	; 0x06
    14f0:	ff 81       	ldd	r31, Y+7	; 0x07
    14f2:	81 2c       	mov	r8, r1
    14f4:	91 2c       	mov	r9, r1
    14f6:	58 01       	movw	r10, r16
    14f8:	6a 01       	movw	r12, r20
    14fa:	ee 84       	ldd	r14, Y+14	; 0x0e
    14fc:	89 01       	movw	r16, r18
    14fe:	9c 01       	movw	r18, r24
    1500:	ad 01       	movw	r20, r26
    1502:	cf 01       	movw	r24, r30
    1504:	0e 94 9e 0a 	call	0x153c	; 0x153c <prvInitialiseNewTask>
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	0e 94 80 0b 	call	0x1700	; 0x1700 <prvAddNewTaskToReadyList>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	8b 83       	std	Y+3, r24	; 0x03
    1514:	02 c0       	rjmp	.+4      	; 0x151a <xTaskCreate+0xcc>
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	60 96       	adiw	r28, 0x10	; 16
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	08 95       	ret

0000153c <prvInitialiseNewTask>:
    153c:	8f 92       	push	r8
    153e:	9f 92       	push	r9
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	64 97       	sbiw	r28, 0x14	; 20
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	8c 83       	std	Y+4, r24	; 0x04
    155e:	9d 83       	std	Y+5, r25	; 0x05
    1560:	6e 83       	std	Y+6, r22	; 0x06
    1562:	7f 83       	std	Y+7, r23	; 0x07
    1564:	28 87       	std	Y+8, r18	; 0x08
    1566:	39 87       	std	Y+9, r19	; 0x09
    1568:	4a 87       	std	Y+10, r20	; 0x0a
    156a:	5b 87       	std	Y+11, r21	; 0x0b
    156c:	0c 87       	std	Y+12, r16	; 0x0c
    156e:	1d 87       	std	Y+13, r17	; 0x0d
    1570:	ee 86       	std	Y+14, r14	; 0x0e
    1572:	cf 86       	std	Y+15, r12	; 0x0f
    1574:	d8 8a       	std	Y+16, r13	; 0x10
    1576:	a9 8a       	std	Y+17, r10	; 0x11
    1578:	ba 8a       	std	Y+18, r11	; 0x12
    157a:	8b 8a       	std	Y+19, r8	; 0x13
    157c:	9c 8a       	std	Y+20, r9	; 0x14
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	89 2b       	or	r24, r25
    1584:	31 f4       	brne	.+12     	; 0x1592 <prvInitialiseNewTask+0x56>
    1586:	60 e6       	ldi	r22, 0x60	; 96
    1588:	73 e0       	ldi	r23, 0x03	; 3
    158a:	85 e2       	ldi	r24, 0x25	; 37
    158c:	90 e2       	ldi	r25, 0x20	; 32
    158e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    1592:	28 85       	ldd	r18, Y+8	; 0x08
    1594:	39 85       	ldd	r19, Y+9	; 0x09
    1596:	89 89       	ldd	r24, Y+17	; 0x11
    1598:	9a 89       	ldd	r25, Y+18	; 0x12
    159a:	fc 01       	movw	r30, r24
    159c:	87 89       	ldd	r24, Z+23	; 0x17
    159e:	90 8d       	ldd	r25, Z+24	; 0x18
    15a0:	a9 01       	movw	r20, r18
    15a2:	65 ea       	ldi	r22, 0xA5	; 165
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0e 94 31 20 	call	0x4062	; 0x4062 <memset>
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
    15ac:	9a 89       	ldd	r25, Y+18	; 0x12
    15ae:	fc 01       	movw	r30, r24
    15b0:	27 89       	ldd	r18, Z+23	; 0x17
    15b2:	30 8d       	ldd	r19, Z+24	; 0x18
    15b4:	88 85       	ldd	r24, Y+8	; 0x08
    15b6:	99 85       	ldd	r25, Y+9	; 0x09
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	9b 83       	std	Y+3, r25	; 0x03
    15c2:	19 82       	std	Y+1, r1	; 0x01
    15c4:	21 c0       	rjmp	.+66     	; 0x1608 <prvInitialiseNewTask+0xcc>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	29 81       	ldd	r18, Y+1	; 0x01
    15ce:	22 2f       	mov	r18, r18
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4e 81       	ldd	r20, Y+6	; 0x06
    15d4:	5f 81       	ldd	r21, Y+7	; 0x07
    15d6:	24 0f       	add	r18, r20
    15d8:	35 1f       	adc	r19, r21
    15da:	f9 01       	movw	r30, r18
    15dc:	40 81       	ld	r20, Z
    15de:	29 89       	ldd	r18, Y+17	; 0x11
    15e0:	3a 89       	ldd	r19, Y+18	; 0x12
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	49 96       	adiw	r24, 0x19	; 25
    15e8:	fc 01       	movw	r30, r24
    15ea:	40 83       	st	Z, r20
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	2e 81       	ldd	r18, Y+6	; 0x06
    15f4:	3f 81       	ldd	r19, Y+7	; 0x07
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	88 23       	and	r24, r24
    1600:	39 f0       	breq	.+14     	; 0x1610 <prvInitialiseNewTask+0xd4>
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	88 30       	cpi	r24, 0x08	; 8
    160c:	e0 f2       	brcs	.-72     	; 0x15c6 <prvInitialiseNewTask+0x8a>
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <prvInitialiseNewTask+0xd6>
    1610:	00 00       	nop
    1612:	89 89       	ldd	r24, Y+17	; 0x11
    1614:	9a 89       	ldd	r25, Y+18	; 0x12
    1616:	fc 01       	movw	r30, r24
    1618:	10 a2       	std	Z+32, r1	; 0x20
    161a:	8e 85       	ldd	r24, Y+14	; 0x0e
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	10 f0       	brcs	.+4      	; 0x1624 <prvInitialiseNewTask+0xe8>
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	8e 87       	std	Y+14, r24	; 0x0e
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	9a 89       	ldd	r25, Y+18	; 0x12
    1628:	2e 85       	ldd	r18, Y+14	; 0x0e
    162a:	fc 01       	movw	r30, r24
    162c:	26 8b       	std	Z+22, r18	; 0x16
    162e:	89 89       	ldd	r24, Y+17	; 0x11
    1630:	9a 89       	ldd	r25, Y+18	; 0x12
    1632:	2e 85       	ldd	r18, Y+14	; 0x0e
    1634:	fc 01       	movw	r30, r24
    1636:	23 a3       	std	Z+35, r18	; 0x23
    1638:	89 89       	ldd	r24, Y+17	; 0x11
    163a:	9a 89       	ldd	r25, Y+18	; 0x12
    163c:	fc 01       	movw	r30, r24
    163e:	14 a2       	std	Z+36, r1	; 0x24
    1640:	89 89       	ldd	r24, Y+17	; 0x11
    1642:	9a 89       	ldd	r25, Y+18	; 0x12
    1644:	02 96       	adiw	r24, 0x02	; 2
    1646:	0e 94 13 06 	call	0xc26	; 0xc26 <vListInitialiseItem>
    164a:	89 89       	ldd	r24, Y+17	; 0x11
    164c:	9a 89       	ldd	r25, Y+18	; 0x12
    164e:	0c 96       	adiw	r24, 0x0c	; 12
    1650:	0e 94 13 06 	call	0xc26	; 0xc26 <vListInitialiseItem>
    1654:	89 89       	ldd	r24, Y+17	; 0x11
    1656:	9a 89       	ldd	r25, Y+18	; 0x12
    1658:	29 89       	ldd	r18, Y+17	; 0x11
    165a:	3a 89       	ldd	r19, Y+18	; 0x12
    165c:	fc 01       	movw	r30, r24
    165e:	20 87       	std	Z+8, r18	; 0x08
    1660:	31 87       	std	Z+9, r19	; 0x09
    1662:	8e 85       	ldd	r24, Y+14	; 0x0e
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	24 e0       	ldi	r18, 0x04	; 4
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	28 1b       	sub	r18, r24
    166e:	39 0b       	sbc	r19, r25
    1670:	89 89       	ldd	r24, Y+17	; 0x11
    1672:	9a 89       	ldd	r25, Y+18	; 0x12
    1674:	fc 01       	movw	r30, r24
    1676:	24 87       	std	Z+12, r18	; 0x0c
    1678:	35 87       	std	Z+13, r19	; 0x0d
    167a:	89 89       	ldd	r24, Y+17	; 0x11
    167c:	9a 89       	ldd	r25, Y+18	; 0x12
    167e:	29 89       	ldd	r18, Y+17	; 0x11
    1680:	3a 89       	ldd	r19, Y+18	; 0x12
    1682:	fc 01       	movw	r30, r24
    1684:	22 8b       	std	Z+18, r18	; 0x12
    1686:	33 8b       	std	Z+19, r19	; 0x13
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	9a 89       	ldd	r25, Y+18	; 0x12
    168c:	fc 01       	movw	r30, r24
    168e:	15 a2       	std	Z+37, r1	; 0x25
    1690:	16 a2       	std	Z+38, r1	; 0x26
    1692:	17 a2       	std	Z+39, r1	; 0x27
    1694:	10 a6       	std	Z+40, r1	; 0x28
    1696:	89 89       	ldd	r24, Y+17	; 0x11
    1698:	9a 89       	ldd	r25, Y+18	; 0x12
    169a:	fc 01       	movw	r30, r24
    169c:	11 a6       	std	Z+41, r1	; 0x29
    169e:	12 a6       	std	Z+42, r1	; 0x2a
    16a0:	13 a6       	std	Z+43, r1	; 0x2b
    16a2:	14 a6       	std	Z+44, r1	; 0x2c
    16a4:	89 89       	ldd	r24, Y+17	; 0x11
    16a6:	9a 89       	ldd	r25, Y+18	; 0x12
    16a8:	fc 01       	movw	r30, r24
    16aa:	15 a6       	std	Z+45, r1	; 0x2d
    16ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    16ae:	5d 85       	ldd	r21, Y+13	; 0x0d
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	9b 81       	ldd	r25, Y+3	; 0x03
    16b8:	b9 01       	movw	r22, r18
    16ba:	0e 94 39 07 	call	0xe72	; 0xe72 <pxPortInitialiseStack>
    16be:	9c 01       	movw	r18, r24
    16c0:	89 89       	ldd	r24, Y+17	; 0x11
    16c2:	9a 89       	ldd	r25, Y+18	; 0x12
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    16cc:	98 89       	ldd	r25, Y+16	; 0x10
    16ce:	89 2b       	or	r24, r25
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <prvInitialiseNewTask+0x1a4>
    16d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d4:	98 89       	ldd	r25, Y+16	; 0x10
    16d6:	29 89       	ldd	r18, Y+17	; 0x11
    16d8:	3a 89       	ldd	r19, Y+18	; 0x12
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
    16de:	31 83       	std	Z+1, r19	; 0x01
    16e0:	00 00       	nop
    16e2:	64 96       	adiw	r28, 0x14	; 20
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	9f 90       	pop	r9
    16fc:	8f 90       	pop	r8
    16fe:	08 95       	ret

00001700 <prvAddNewTaskToReadyList>:
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	1f 92       	push	r1
    1706:	1f 92       	push	r1
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	0f 92       	push	r0
    1716:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 de 61 	sts	0x61DE, r24	; 0x8061de <uxCurrentNumberOfTasks>
    1720:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    1724:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1728:	89 2b       	or	r24, r25
    172a:	69 f4       	brne	.+26     	; 0x1746 <prvAddNewTaskToReadyList+0x46>
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	80 93 86 61 	sts	0x6186, r24	; 0x806186 <pxCurrentTCB>
    1734:	90 93 87 61 	sts	0x6187, r25	; 0x806187 <pxCurrentTCB+0x1>
    1738:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	c9 f4       	brne	.+50     	; 0x1772 <prvAddNewTaskToReadyList+0x72>
    1740:	0e 94 26 11 	call	0x224c	; 0x224c <prvInitialiseTaskLists>
    1744:	16 c0       	rjmp	.+44     	; 0x1772 <prvAddNewTaskToReadyList+0x72>
    1746:	80 91 e2 61 	lds	r24, 0x61E2	; 0x8061e2 <xSchedulerRunning>
    174a:	88 23       	and	r24, r24
    174c:	91 f4       	brne	.+36     	; 0x1772 <prvAddNewTaskToReadyList+0x72>
    174e:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    1752:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1756:	fc 01       	movw	r30, r24
    1758:	26 89       	ldd	r18, Z+22	; 0x16
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	fc 01       	movw	r30, r24
    1760:	86 89       	ldd	r24, Z+22	; 0x16
    1762:	82 17       	cp	r24, r18
    1764:	30 f0       	brcs	.+12     	; 0x1772 <prvAddNewTaskToReadyList+0x72>
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	80 93 86 61 	sts	0x6186, r24	; 0x806186 <pxCurrentTCB>
    176e:	90 93 87 61 	sts	0x6187, r25	; 0x806187 <pxCurrentTCB+0x1>
    1772:	80 91 e6 61 	lds	r24, 0x61E6	; 0x8061e6 <uxTaskNumber>
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	80 93 e6 61 	sts	0x61E6, r24	; 0x8061e6 <uxTaskNumber>
    177c:	20 91 e6 61 	lds	r18, 0x61E6	; 0x8061e6 <uxTaskNumber>
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	fc 01       	movw	r30, r24
    1786:	21 a3       	std	Z+33, r18	; 0x21
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	fc 01       	movw	r30, r24
    178e:	96 89       	ldd	r25, Z+22	; 0x16
    1790:	80 91 e1 61 	lds	r24, 0x61E1	; 0x8061e1 <uxTopReadyPriority>
    1794:	89 17       	cp	r24, r25
    1796:	30 f4       	brcc	.+12     	; 0x17a4 <prvAddNewTaskToReadyList+0xa4>
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	fc 01       	movw	r30, r24
    179e:	86 89       	ldd	r24, Z+22	; 0x16
    17a0:	80 93 e1 61 	sts	0x61E1, r24	; 0x8061e1 <uxTopReadyPriority>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	ac 01       	movw	r20, r24
    17aa:	4e 5f       	subi	r20, 0xFE	; 254
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	fc 01       	movw	r30, r24
    17b4:	86 89       	ldd	r24, Z+22	; 0x16
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	c9 01       	movw	r24, r18
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	88 57       	subi	r24, 0x78	; 120
    17ce:	9e 49       	sbci	r25, 0x9E	; 158
    17d0:	ba 01       	movw	r22, r20
    17d2:	0e 94 26 06 	call	0xc4c	; 0xc4c <vListInsertEnd>
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	80 91 e2 61 	lds	r24, 0x61E2	; 0x8061e2 <xSchedulerRunning>
    17de:	88 23       	and	r24, r24
    17e0:	71 f0       	breq	.+28     	; 0x17fe <prvAddNewTaskToReadyList+0xfe>
    17e2:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    17e6:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    17ea:	fc 01       	movw	r30, r24
    17ec:	26 89       	ldd	r18, Z+22	; 0x16
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	fc 01       	movw	r30, r24
    17f4:	86 89       	ldd	r24, Z+22	; 0x16
    17f6:	28 17       	cp	r18, r24
    17f8:	10 f4       	brcc	.+4      	; 0x17fe <prvAddNewTaskToReadyList+0xfe>
    17fa:	0e 94 21 09 	call	0x1242	; 0x1242 <vPortYield>
    17fe:	00 00       	nop
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <vTaskDelayUntil>:
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	2a 97       	sbiw	r28, 0x0a	; 10
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	8f 83       	std	Y+7, r24	; 0x07
    181a:	98 87       	std	Y+8, r25	; 0x08
    181c:	69 87       	std	Y+9, r22	; 0x09
    181e:	7a 87       	std	Y+10, r23	; 0x0a
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	8f 81       	ldd	r24, Y+7	; 0x07
    1824:	98 85       	ldd	r25, Y+8	; 0x08
    1826:	89 2b       	or	r24, r25
    1828:	31 f4       	brne	.+12     	; 0x1836 <vTaskDelayUntil+0x2c>
    182a:	6a ec       	ldi	r22, 0xCA	; 202
    182c:	74 e0       	ldi	r23, 0x04	; 4
    182e:	85 e2       	ldi	r24, 0x25	; 37
    1830:	90 e2       	ldi	r25, 0x20	; 32
    1832:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	89 2b       	or	r24, r25
    183c:	31 f4       	brne	.+12     	; 0x184a <vTaskDelayUntil+0x40>
    183e:	6b ec       	ldi	r22, 0xCB	; 203
    1840:	74 e0       	ldi	r23, 0x04	; 4
    1842:	85 e2       	ldi	r24, 0x25	; 37
    1844:	90 e2       	ldi	r25, 0x20	; 32
    1846:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    184a:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    184e:	88 23       	and	r24, r24
    1850:	31 f0       	breq	.+12     	; 0x185e <vTaskDelayUntil+0x54>
    1852:	6c ec       	ldi	r22, 0xCC	; 204
    1854:	74 e0       	ldi	r23, 0x04	; 4
    1856:	85 e2       	ldi	r24, 0x25	; 37
    1858:	90 e2       	ldi	r25, 0x20	; 32
    185a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    185e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspendAll>
    1862:	80 91 df 61 	lds	r24, 0x61DF	; 0x8061df <xTickCount>
    1866:	90 91 e0 61 	lds	r25, 0x61E0	; 0x8061e0 <xTickCount+0x1>
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	9b 83       	std	Y+3, r25	; 0x03
    186e:	8f 81       	ldd	r24, Y+7	; 0x07
    1870:	98 85       	ldd	r25, Y+8	; 0x08
    1872:	fc 01       	movw	r30, r24
    1874:	20 81       	ld	r18, Z
    1876:	31 81       	ldd	r19, Z+1	; 0x01
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	8c 83       	std	Y+4, r24	; 0x04
    1882:	9d 83       	std	Y+5, r25	; 0x05
    1884:	8f 81       	ldd	r24, Y+7	; 0x07
    1886:	98 85       	ldd	r25, Y+8	; 0x08
    1888:	fc 01       	movw	r30, r24
    188a:	20 81       	ld	r18, Z
    188c:	31 81       	ldd	r19, Z+1	; 0x01
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	82 17       	cp	r24, r18
    1894:	93 07       	cpc	r25, r19
    1896:	a0 f4       	brcc	.+40     	; 0x18c0 <vTaskDelayUntil+0xb6>
    1898:	8f 81       	ldd	r24, Y+7	; 0x07
    189a:	98 85       	ldd	r25, Y+8	; 0x08
    189c:	fc 01       	movw	r30, r24
    189e:	20 81       	ld	r18, Z
    18a0:	31 81       	ldd	r19, Z+1	; 0x01
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	82 17       	cp	r24, r18
    18a8:	93 07       	cpc	r25, r19
    18aa:	e8 f4       	brcc	.+58     	; 0x18e6 <vTaskDelayUntil+0xdc>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	82 17       	cp	r24, r18
    18b6:	93 07       	cpc	r25, r19
    18b8:	b0 f4       	brcc	.+44     	; 0x18e6 <vTaskDelayUntil+0xdc>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	13 c0       	rjmp	.+38     	; 0x18e6 <vTaskDelayUntil+0xdc>
    18c0:	8f 81       	ldd	r24, Y+7	; 0x07
    18c2:	98 85       	ldd	r25, Y+8	; 0x08
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 81       	ld	r18, Z
    18c8:	31 81       	ldd	r19, Z+1	; 0x01
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	82 17       	cp	r24, r18
    18d0:	93 07       	cpc	r25, r19
    18d2:	38 f0       	brcs	.+14     	; 0x18e2 <vTaskDelayUntil+0xd8>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	82 17       	cp	r24, r18
    18de:	93 07       	cpc	r25, r19
    18e0:	10 f4       	brcc	.+4      	; 0x18e6 <vTaskDelayUntil+0xdc>
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	8f 81       	ldd	r24, Y+7	; 0x07
    18e8:	98 85       	ldd	r25, Y+8	; 0x08
    18ea:	2c 81       	ldd	r18, Y+4	; 0x04
    18ec:	3d 81       	ldd	r19, Y+5	; 0x05
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
    18f2:	31 83       	std	Z+1, r19	; 0x01
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 23       	and	r24, r24
    18f8:	59 f0       	breq	.+22     	; 0x1910 <vTaskDelayUntil+0x106>
    18fa:	2c 81       	ldd	r18, Y+4	; 0x04
    18fc:	3d 81       	ldd	r19, Y+5	; 0x05
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	9b 81       	ldd	r25, Y+3	; 0x03
    1902:	a9 01       	movw	r20, r18
    1904:	48 1b       	sub	r20, r24
    1906:	59 0b       	sbc	r21, r25
    1908:	ca 01       	movw	r24, r20
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	0e 94 b0 14 	call	0x2960	; 0x2960 <prvAddCurrentTaskToDelayedList>
    1910:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xTaskResumeAll>
    1914:	8e 83       	std	Y+6, r24	; 0x06
    1916:	8e 81       	ldd	r24, Y+6	; 0x06
    1918:	88 23       	and	r24, r24
    191a:	11 f4       	brne	.+4      	; 0x1920 <vTaskDelayUntil+0x116>
    191c:	0e 94 21 09 	call	0x1242	; 0x1242 <vPortYield>
    1920:	00 00       	nop
    1922:	2a 96       	adiw	r28, 0x0a	; 10
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	08 95       	ret

0000192e <eTaskGetState>:
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	2b 97       	sbiw	r28, 0x0b	; 11
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	8a 87       	std	Y+10, r24	; 0x0a
    193e:	9b 87       	std	Y+11, r25	; 0x0b
    1940:	8a 85       	ldd	r24, Y+10	; 0x0a
    1942:	9b 85       	ldd	r25, Y+11	; 0x0b
    1944:	8a 83       	std	Y+2, r24	; 0x02
    1946:	9b 83       	std	Y+3, r25	; 0x03
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	89 2b       	or	r24, r25
    194e:	31 f4       	brne	.+12     	; 0x195c <eTaskGetState+0x2e>
    1950:	6c e4       	ldi	r22, 0x4C	; 76
    1952:	75 e0       	ldi	r23, 0x05	; 5
    1954:	85 e2       	ldi	r24, 0x25	; 37
    1956:	90 e2       	ldi	r25, 0x20	; 32
    1958:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    195c:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    1960:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1964:	2a 81       	ldd	r18, Y+2	; 0x02
    1966:	3b 81       	ldd	r19, Y+3	; 0x03
    1968:	28 17       	cp	r18, r24
    196a:	39 07       	cpc	r19, r25
    196c:	11 f4       	brne	.+4      	; 0x1972 <eTaskGetState+0x44>
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	52 c0       	rjmp	.+164    	; 0x1a16 <eTaskGetState+0xe8>
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	0f 92       	push	r0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	fc 01       	movw	r30, r24
    197e:	82 85       	ldd	r24, Z+10	; 0x0a
    1980:	93 85       	ldd	r25, Z+11	; 0x0b
    1982:	8c 83       	std	Y+4, r24	; 0x04
    1984:	9d 83       	std	Y+5, r25	; 0x05
    1986:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    198a:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    198e:	8e 83       	std	Y+6, r24	; 0x06
    1990:	9f 83       	std	Y+7, r25	; 0x07
    1992:	80 91 c0 61 	lds	r24, 0x61C0	; 0x8061c0 <pxOverflowDelayedTaskList>
    1996:	90 91 c1 61 	lds	r25, 0x61C1	; 0x8061c1 <pxOverflowDelayedTaskList+0x1>
    199a:	88 87       	std	Y+8, r24	; 0x08
    199c:	99 87       	std	Y+9, r25	; 0x09
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	8e 81       	ldd	r24, Y+6	; 0x06
    19a8:	9f 81       	ldd	r25, Y+7	; 0x07
    19aa:	28 17       	cp	r18, r24
    19ac:	39 07       	cpc	r19, r25
    19ae:	39 f0       	breq	.+14     	; 0x19be <eTaskGetState+0x90>
    19b0:	2c 81       	ldd	r18, Y+4	; 0x04
    19b2:	3d 81       	ldd	r19, Y+5	; 0x05
    19b4:	88 85       	ldd	r24, Y+8	; 0x08
    19b6:	99 85       	ldd	r25, Y+9	; 0x09
    19b8:	28 17       	cp	r18, r24
    19ba:	39 07       	cpc	r19, r25
    19bc:	19 f4       	brne	.+6      	; 0x19c4 <eTaskGetState+0x96>
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	29 c0       	rjmp	.+82     	; 0x1a16 <eTaskGetState+0xe8>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	85 5d       	subi	r24, 0xD5	; 213
    19ca:	91 46       	sbci	r25, 0x61	; 97
    19cc:	b1 f4       	brne	.+44     	; 0x19fa <eTaskGetState+0xcc>
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	9b 81       	ldd	r25, Y+3	; 0x03
    19d2:	fc 01       	movw	r30, r24
    19d4:	84 89       	ldd	r24, Z+20	; 0x14
    19d6:	95 89       	ldd	r25, Z+21	; 0x15
    19d8:	89 2b       	or	r24, r25
    19da:	61 f4       	brne	.+24     	; 0x19f4 <eTaskGetState+0xc6>
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	fc 01       	movw	r30, r24
    19e2:	85 a5       	ldd	r24, Z+45	; 0x2d
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	19 f4       	brne	.+6      	; 0x19ee <eTaskGetState+0xc0>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <eTaskGetState+0xe8>
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	11 c0       	rjmp	.+34     	; 0x1a16 <eTaskGetState+0xe8>
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <eTaskGetState+0xe8>
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	8b 5c       	subi	r24, 0xCB	; 203
    1a00:	91 46       	sbci	r25, 0x61	; 97
    1a02:	21 f0       	breq	.+8      	; 0x1a0c <eTaskGetState+0xde>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	89 2b       	or	r24, r25
    1a0a:	19 f4       	brne	.+6      	; 0x1a12 <eTaskGetState+0xe4>
    1a0c:	84 e0       	ldi	r24, 0x04	; 4
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <eTaskGetState+0xe8>
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	2b 96       	adiw	r28, 0x0b	; 11
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <vTaskStartScheduler>:
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	1f 92       	push	r1
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	0f 2e       	mov	r0, r31
    1a36:	f9 ee       	ldi	r31, 0xE9	; 233
    1a38:	ef 2e       	mov	r14, r31
    1a3a:	f1 e6       	ldi	r31, 0x61	; 97
    1a3c:	ff 2e       	mov	r15, r31
    1a3e:	f0 2d       	mov	r31, r0
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	51 e0       	ldi	r21, 0x01	; 1
    1a4a:	69 e3       	ldi	r22, 0x39	; 57
    1a4c:	70 e2       	ldi	r23, 0x20	; 32
    1a4e:	83 e1       	ldi	r24, 0x13	; 19
    1a50:	91 e1       	ldi	r25, 0x11	; 17
    1a52:	0e 94 27 0a 	call	0x144e	; 0x144e <xTaskCreate>
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	99 f4       	brne	.+38     	; 0x1a84 <vTaskStartScheduler+0x60>
    1a5e:	f8 94       	cli
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f ef       	ldi	r25, 0xFF	; 255
    1a64:	80 93 e7 61 	sts	0x61E7, r24	; 0x8061e7 <xNextTaskUnblockTime>
    1a68:	90 93 e8 61 	sts	0x61E8, r25	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 e2 61 	sts	0x61E2, r24	; 0x8061e2 <xSchedulerRunning>
    1a72:	10 92 df 61 	sts	0x61DF, r1	; 0x8061df <xTickCount>
    1a76:	10 92 e0 61 	sts	0x61E0, r1	; 0x8061e0 <xTickCount+0x1>
    1a7a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <vConfigureTimerForRunTimeStats>
    1a7e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <xPortStartScheduler>
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <vTaskStartScheduler+0x72>
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	8f 3f       	cpi	r24, 0xFF	; 255
    1a88:	31 f4       	brne	.+12     	; 0x1a96 <vTaskStartScheduler+0x72>
    1a8a:	67 e0       	ldi	r22, 0x07	; 7
    1a8c:	78 e0       	ldi	r23, 0x08	; 8
    1a8e:	85 e2       	ldi	r24, 0x25	; 37
    1a90:	90 e2       	ldi	r25, 0x20	; 32
    1a92:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    1a96:	00 00       	nop
    1a98:	0f 90       	pop	r0
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	08 95       	ret

00001aa6 <vTaskSuspendAll>:
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	80 93 eb 61 	sts	0x61EB, r24	; 0x8061eb <uxSchedulerSuspended>
    1ab8:	00 00       	nop
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <xTaskResumeAll>:
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <xTaskResumeAll+0x6>
    1ac6:	1f 92       	push	r1
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	19 82       	std	Y+1, r1	; 0x01
    1ace:	1a 82       	std	Y+2, r1	; 0x02
    1ad0:	1b 82       	std	Y+3, r1	; 0x03
    1ad2:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    1ad6:	88 23       	and	r24, r24
    1ad8:	31 f4       	brne	.+12     	; 0x1ae6 <xTaskResumeAll+0x26>
    1ada:	6c e6       	ldi	r22, 0x6C	; 108
    1adc:	78 e0       	ldi	r23, 0x08	; 8
    1ade:	85 e2       	ldi	r24, 0x25	; 37
    1ae0:	90 e2       	ldi	r25, 0x20	; 32
    1ae2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	0f 92       	push	r0
    1aec:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    1af0:	81 50       	subi	r24, 0x01	; 1
    1af2:	80 93 eb 61 	sts	0x61EB, r24	; 0x8061eb <uxSchedulerSuspended>
    1af6:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    1afa:	88 23       	and	r24, r24
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <xTaskResumeAll+0x40>
    1afe:	77 c0       	rjmp	.+238    	; 0x1bee <xTaskResumeAll+0x12e>
    1b00:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <xTaskResumeAll+0x4a>
    1b08:	72 c0       	rjmp	.+228    	; 0x1bee <xTaskResumeAll+0x12e>
    1b0a:	49 c0       	rjmp	.+146    	; 0x1b9e <xTaskResumeAll+0xde>
    1b0c:	80 91 c7 61 	lds	r24, 0x61C7	; 0x8061c7 <xPendingReadyList+0x5>
    1b10:	90 91 c8 61 	lds	r25, 0x61C8	; 0x8061c8 <xPendingReadyList+0x6>
    1b14:	fc 01       	movw	r30, r24
    1b16:	86 81       	ldd	r24, Z+6	; 0x06
    1b18:	97 81       	ldd	r25, Z+7	; 0x07
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	0c 96       	adiw	r24, 0x0c	; 12
    1b24:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <uxListRemove>
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	02 96       	adiw	r24, 0x02	; 2
    1b2e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <uxListRemove>
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	fc 01       	movw	r30, r24
    1b38:	96 89       	ldd	r25, Z+22	; 0x16
    1b3a:	80 91 e1 61 	lds	r24, 0x61E1	; 0x8061e1 <uxTopReadyPriority>
    1b3e:	89 17       	cp	r24, r25
    1b40:	30 f4       	brcc	.+12     	; 0x1b4e <xTaskResumeAll+0x8e>
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	fc 01       	movw	r30, r24
    1b48:	86 89       	ldd	r24, Z+22	; 0x16
    1b4a:	80 93 e1 61 	sts	0x61E1, r24	; 0x8061e1 <uxTopReadyPriority>
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	ac 01       	movw	r20, r24
    1b54:	4e 5f       	subi	r20, 0xFE	; 254
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	86 89       	ldd	r24, Z+22	; 0x16
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	c9 01       	movw	r24, r18
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	82 0f       	add	r24, r18
    1b74:	93 1f       	adc	r25, r19
    1b76:	88 57       	subi	r24, 0x78	; 120
    1b78:	9e 49       	sbci	r25, 0x9E	; 158
    1b7a:	ba 01       	movw	r22, r20
    1b7c:	0e 94 26 06 	call	0xc4c	; 0xc4c <vListInsertEnd>
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	fc 01       	movw	r30, r24
    1b86:	26 89       	ldd	r18, Z+22	; 0x16
    1b88:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    1b8c:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1b90:	fc 01       	movw	r30, r24
    1b92:	86 89       	ldd	r24, Z+22	; 0x16
    1b94:	28 17       	cp	r18, r24
    1b96:	18 f0       	brcs	.+6      	; 0x1b9e <xTaskResumeAll+0xde>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 e4 61 	sts	0x61E4, r24	; 0x8061e4 <xYieldPending>
    1b9e:	80 91 c2 61 	lds	r24, 0x61C2	; 0x8061c2 <xPendingReadyList>
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <xTaskResumeAll+0xe8>
    1ba6:	b2 cf       	rjmp	.-156    	; 0x1b0c <xTaskResumeAll+0x4c>
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	89 2b       	or	r24, r25
    1bae:	11 f0       	breq	.+4      	; 0x1bb4 <xTaskResumeAll+0xf4>
    1bb0:	0e 94 29 13 	call	0x2652	; 0x2652 <prvResetNextTaskUnblockTime>
    1bb4:	80 91 e3 61 	lds	r24, 0x61E3	; 0x8061e3 <uxPendedTicks>
    1bb8:	8c 83       	std	Y+4, r24	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	88 23       	and	r24, r24
    1bbe:	79 f0       	breq	.+30     	; 0x1bde <xTaskResumeAll+0x11e>
    1bc0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <xTaskIncrementTick>
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f0       	breq	.+6      	; 0x1bce <xTaskResumeAll+0x10e>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	80 93 e4 61 	sts	0x61E4, r24	; 0x8061e4 <xYieldPending>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	81 50       	subi	r24, 0x01	; 1
    1bd2:	8c 83       	std	Y+4, r24	; 0x04
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	88 23       	and	r24, r24
    1bd8:	99 f7       	brne	.-26     	; 0x1bc0 <xTaskResumeAll+0x100>
    1bda:	10 92 e3 61 	sts	0x61E3, r1	; 0x8061e3 <uxPendedTicks>
    1bde:	80 91 e4 61 	lds	r24, 0x61E4	; 0x8061e4 <xYieldPending>
    1be2:	88 23       	and	r24, r24
    1be4:	21 f0       	breq	.+8      	; 0x1bee <xTaskResumeAll+0x12e>
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	0e 94 21 09 	call	0x1242	; 0x1242 <vPortYield>
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	24 96       	adiw	r28, 0x04	; 4
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	08 95       	ret

00001c00 <uxTaskGetSystemState>:
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	27 97       	sbiw	r28, 0x07	; 7
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
    1c10:	9c 83       	std	Y+4, r25	; 0x04
    1c12:	6d 83       	std	Y+5, r22	; 0x05
    1c14:	4e 83       	std	Y+6, r20	; 0x06
    1c16:	5f 83       	std	Y+7, r21	; 0x07
    1c18:	19 82       	std	Y+1, r1	; 0x01
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
    1c1e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspendAll>
    1c22:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    1c26:	9d 81       	ldd	r25, Y+5	; 0x05
    1c28:	98 17       	cp	r25, r24
    1c2a:	08 f4       	brcc	.+2      	; 0x1c2e <uxTaskGetSystemState+0x2e>
    1c2c:	a4 c0       	rjmp	.+328    	; 0x1d76 <uxTaskGetSystemState+0x176>
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	81 50       	subi	r24, 0x01	; 1
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	c9 01       	movw	r24, r18
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	68 57       	subi	r22, 0x78	; 120
    1c50:	7e 49       	sbci	r23, 0x9E	; 158
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	82 95       	swap	r24
    1c5a:	92 95       	swap	r25
    1c5c:	90 7f       	andi	r25, 0xF0	; 240
    1c5e:	98 27       	eor	r25, r24
    1c60:	80 7f       	andi	r24, 0xF0	; 240
    1c62:	98 27       	eor	r25, r24
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	82 0f       	add	r24, r18
    1c6a:	93 1f       	adc	r25, r19
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 45 12 	call	0x248a	; 0x248a <prvListTasksWithinSingleList>
    1c72:	98 2f       	mov	r25, r24
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	89 0f       	add	r24, r25
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	88 23       	and	r24, r24
    1c7e:	b9 f6       	brne	.-82     	; 0x1c2e <uxTaskGetSystemState+0x2e>
    1c80:	60 91 be 61 	lds	r22, 0x61BE	; 0x8061be <pxDelayedTaskList>
    1c84:	70 91 bf 61 	lds	r23, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	82 95       	swap	r24
    1c90:	92 95       	swap	r25
    1c92:	90 7f       	andi	r25, 0xF0	; 240
    1c94:	98 27       	eor	r25, r24
    1c96:	80 7f       	andi	r24, 0xF0	; 240
    1c98:	98 27       	eor	r25, r24
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	82 0f       	add	r24, r18
    1ca0:	93 1f       	adc	r25, r19
    1ca2:	42 e0       	ldi	r20, 0x02	; 2
    1ca4:	0e 94 45 12 	call	0x248a	; 0x248a <prvListTasksWithinSingleList>
    1ca8:	98 2f       	mov	r25, r24
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	89 0f       	add	r24, r25
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	60 91 c0 61 	lds	r22, 0x61C0	; 0x8061c0 <pxOverflowDelayedTaskList>
    1cb4:	70 91 c1 61 	lds	r23, 0x61C1	; 0x8061c1 <pxOverflowDelayedTaskList+0x1>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	82 95       	swap	r24
    1cc0:	92 95       	swap	r25
    1cc2:	90 7f       	andi	r25, 0xF0	; 240
    1cc4:	98 27       	eor	r25, r24
    1cc6:	80 7f       	andi	r24, 0xF0	; 240
    1cc8:	98 27       	eor	r25, r24
    1cca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	82 0f       	add	r24, r18
    1cd0:	93 1f       	adc	r25, r19
    1cd2:	42 e0       	ldi	r20, 0x02	; 2
    1cd4:	0e 94 45 12 	call	0x248a	; 0x248a <prvListTasksWithinSingleList>
    1cd8:	98 2f       	mov	r25, r24
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	89 0f       	add	r24, r25
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	82 95       	swap	r24
    1ce8:	92 95       	swap	r25
    1cea:	90 7f       	andi	r25, 0xF0	; 240
    1cec:	98 27       	eor	r25, r24
    1cee:	80 7f       	andi	r24, 0xF0	; 240
    1cf0:	98 27       	eor	r25, r24
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	82 0f       	add	r24, r18
    1cf8:	93 1f       	adc	r25, r19
    1cfa:	44 e0       	ldi	r20, 0x04	; 4
    1cfc:	6b ec       	ldi	r22, 0xCB	; 203
    1cfe:	71 e6       	ldi	r23, 0x61	; 97
    1d00:	0e 94 45 12 	call	0x248a	; 0x248a <prvListTasksWithinSingleList>
    1d04:	98 2f       	mov	r25, r24
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	89 0f       	add	r24, r25
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	82 95       	swap	r24
    1d14:	92 95       	swap	r25
    1d16:	90 7f       	andi	r25, 0xF0	; 240
    1d18:	98 27       	eor	r25, r24
    1d1a:	80 7f       	andi	r24, 0xF0	; 240
    1d1c:	98 27       	eor	r25, r24
    1d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d20:	3c 81       	ldd	r19, Y+4	; 0x04
    1d22:	82 0f       	add	r24, r18
    1d24:	93 1f       	adc	r25, r19
    1d26:	43 e0       	ldi	r20, 0x03	; 3
    1d28:	65 ed       	ldi	r22, 0xD5	; 213
    1d2a:	71 e6       	ldi	r23, 0x61	; 97
    1d2c:	0e 94 45 12 	call	0x248a	; 0x248a <prvListTasksWithinSingleList>
    1d30:	98 2f       	mov	r25, r24
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	89 0f       	add	r24, r25
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3c:	89 2b       	or	r24, r25
    1d3e:	d9 f0       	breq	.+54     	; 0x1d76 <uxTaskGetSystemState+0x176>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	98 e0       	ldi	r25, 0x08	; 8
    1d44:	fc 01       	movw	r30, r24
    1d46:	80 a1       	ldd	r24, Z+32	; 0x20
    1d48:	91 a1       	ldd	r25, Z+33	; 0x21
    1d4a:	9c 01       	movw	r18, r24
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	80 91 f4 63 	lds	r24, 0x63F4	; 0x8063f4 <StatsTimer>
    1d54:	90 91 f5 63 	lds	r25, 0x63F5	; 0x8063f5 <StatsTimer+0x1>
    1d58:	a0 91 f6 63 	lds	r26, 0x63F6	; 0x8063f6 <StatsTimer+0x2>
    1d5c:	b0 91 f7 63 	lds	r27, 0x63F7	; 0x8063f7 <StatsTimer+0x3>
    1d60:	82 0f       	add	r24, r18
    1d62:	93 1f       	adc	r25, r19
    1d64:	a4 1f       	adc	r26, r20
    1d66:	b5 1f       	adc	r27, r21
    1d68:	2e 81       	ldd	r18, Y+6	; 0x06
    1d6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d6c:	f9 01       	movw	r30, r18
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
    1d76:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xTaskResumeAll>
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	27 96       	adiw	r28, 0x07	; 7
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <xTaskIncrementTick>:
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	29 97       	sbiw	r28, 0x09	; 9
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	19 82       	std	Y+1, r1	; 0x01
    1d98:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <xTaskIncrementTick+0x1a>
    1da0:	d6 c0       	rjmp	.+428    	; 0x1f4e <xTaskIncrementTick+0x1c6>
    1da2:	80 91 df 61 	lds	r24, 0x61DF	; 0x8061df <xTickCount>
    1da6:	90 91 e0 61 	lds	r25, 0x61E0	; 0x8061e0 <xTickCount+0x1>
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	8a 83       	std	Y+2, r24	; 0x02
    1dae:	9b 83       	std	Y+3, r25	; 0x03
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	80 93 df 61 	sts	0x61DF, r24	; 0x8061df <xTickCount>
    1db8:	90 93 e0 61 	sts	0x61E0, r25	; 0x8061e0 <xTickCount+0x1>
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	89 2b       	or	r24, r25
    1dc2:	49 f5       	brne	.+82     	; 0x1e16 <xTaskIncrementTick+0x8e>
    1dc4:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    1dc8:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    1dcc:	fc 01       	movw	r30, r24
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 23       	and	r24, r24
    1dd2:	31 f0       	breq	.+12     	; 0x1de0 <xTaskIncrementTick+0x58>
    1dd4:	66 e6       	ldi	r22, 0x66	; 102
    1dd6:	7a e0       	ldi	r23, 0x0A	; 10
    1dd8:	85 e2       	ldi	r24, 0x25	; 37
    1dda:	90 e2       	ldi	r25, 0x20	; 32
    1ddc:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    1de0:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    1de4:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    1de8:	8c 83       	std	Y+4, r24	; 0x04
    1dea:	9d 83       	std	Y+5, r25	; 0x05
    1dec:	80 91 c0 61 	lds	r24, 0x61C0	; 0x8061c0 <pxOverflowDelayedTaskList>
    1df0:	90 91 c1 61 	lds	r25, 0x61C1	; 0x8061c1 <pxOverflowDelayedTaskList+0x1>
    1df4:	80 93 be 61 	sts	0x61BE, r24	; 0x8061be <pxDelayedTaskList>
    1df8:	90 93 bf 61 	sts	0x61BF, r25	; 0x8061bf <pxDelayedTaskList+0x1>
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	80 93 c0 61 	sts	0x61C0, r24	; 0x8061c0 <pxOverflowDelayedTaskList>
    1e04:	90 93 c1 61 	sts	0x61C1, r25	; 0x8061c1 <pxOverflowDelayedTaskList+0x1>
    1e08:	80 91 e5 61 	lds	r24, 0x61E5	; 0x8061e5 <xNumOfOverflows>
    1e0c:	8f 5f       	subi	r24, 0xFF	; 255
    1e0e:	80 93 e5 61 	sts	0x61E5, r24	; 0x8061e5 <xNumOfOverflows>
    1e12:	0e 94 29 13 	call	0x2652	; 0x2652 <prvResetNextTaskUnblockTime>
    1e16:	80 91 e7 61 	lds	r24, 0x61E7	; 0x8061e7 <xNextTaskUnblockTime>
    1e1a:	90 91 e8 61 	lds	r25, 0x61E8	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    1e1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e20:	3b 81       	ldd	r19, Y+3	; 0x03
    1e22:	28 17       	cp	r18, r24
    1e24:	39 07       	cpc	r19, r25
    1e26:	08 f4       	brcc	.+2      	; 0x1e2a <xTaskIncrementTick+0xa2>
    1e28:	78 c0       	rjmp	.+240    	; 0x1f1a <xTaskIncrementTick+0x192>
    1e2a:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    1e2e:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    1e32:	fc 01       	movw	r30, r24
    1e34:	80 81       	ld	r24, Z
    1e36:	88 23       	and	r24, r24
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <xTaskIncrementTick+0xc0>
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	80 93 e7 61 	sts	0x61E7, r24	; 0x8061e7 <xNextTaskUnblockTime>
    1e42:	90 93 e8 61 	sts	0x61E8, r25	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    1e46:	69 c0       	rjmp	.+210    	; 0x1f1a <xTaskIncrementTick+0x192>
    1e48:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    1e4c:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    1e50:	fc 01       	movw	r30, r24
    1e52:	85 81       	ldd	r24, Z+5	; 0x05
    1e54:	96 81       	ldd	r25, Z+6	; 0x06
    1e56:	fc 01       	movw	r30, r24
    1e58:	86 81       	ldd	r24, Z+6	; 0x06
    1e5a:	97 81       	ldd	r25, Z+7	; 0x07
    1e5c:	8e 83       	std	Y+6, r24	; 0x06
    1e5e:	9f 83       	std	Y+7, r25	; 0x07
    1e60:	8e 81       	ldd	r24, Y+6	; 0x06
    1e62:	9f 81       	ldd	r25, Y+7	; 0x07
    1e64:	fc 01       	movw	r30, r24
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	88 87       	std	Y+8, r24	; 0x08
    1e6c:	99 87       	std	Y+9, r25	; 0x09
    1e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e70:	3b 81       	ldd	r19, Y+3	; 0x03
    1e72:	88 85       	ldd	r24, Y+8	; 0x08
    1e74:	99 85       	ldd	r25, Y+9	; 0x09
    1e76:	28 17       	cp	r18, r24
    1e78:	39 07       	cpc	r19, r25
    1e7a:	38 f4       	brcc	.+14     	; 0x1e8a <xTaskIncrementTick+0x102>
    1e7c:	88 85       	ldd	r24, Y+8	; 0x08
    1e7e:	99 85       	ldd	r25, Y+9	; 0x09
    1e80:	80 93 e7 61 	sts	0x61E7, r24	; 0x8061e7 <xNextTaskUnblockTime>
    1e84:	90 93 e8 61 	sts	0x61E8, r25	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    1e88:	48 c0       	rjmp	.+144    	; 0x1f1a <xTaskIncrementTick+0x192>
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	02 96       	adiw	r24, 0x02	; 2
    1e90:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <uxListRemove>
    1e94:	8e 81       	ldd	r24, Y+6	; 0x06
    1e96:	9f 81       	ldd	r25, Y+7	; 0x07
    1e98:	fc 01       	movw	r30, r24
    1e9a:	84 89       	ldd	r24, Z+20	; 0x14
    1e9c:	95 89       	ldd	r25, Z+21	; 0x15
    1e9e:	89 2b       	or	r24, r25
    1ea0:	29 f0       	breq	.+10     	; 0x1eac <xTaskIncrementTick+0x124>
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	0c 96       	adiw	r24, 0x0c	; 12
    1ea8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <uxListRemove>
    1eac:	8e 81       	ldd	r24, Y+6	; 0x06
    1eae:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	96 89       	ldd	r25, Z+22	; 0x16
    1eb4:	80 91 e1 61 	lds	r24, 0x61E1	; 0x8061e1 <uxTopReadyPriority>
    1eb8:	89 17       	cp	r24, r25
    1eba:	30 f4       	brcc	.+12     	; 0x1ec8 <xTaskIncrementTick+0x140>
    1ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	86 89       	ldd	r24, Z+22	; 0x16
    1ec4:	80 93 e1 61 	sts	0x61E1, r24	; 0x8061e1 <uxTopReadyPriority>
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ecc:	ac 01       	movw	r20, r24
    1ece:	4e 5f       	subi	r20, 0xFE	; 254
    1ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	86 89       	ldd	r24, Z+22	; 0x16
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	c9 01       	movw	r24, r18
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	82 0f       	add	r24, r18
    1eee:	93 1f       	adc	r25, r19
    1ef0:	88 57       	subi	r24, 0x78	; 120
    1ef2:	9e 49       	sbci	r25, 0x9E	; 158
    1ef4:	ba 01       	movw	r22, r20
    1ef6:	0e 94 26 06 	call	0xc4c	; 0xc4c <vListInsertEnd>
    1efa:	8e 81       	ldd	r24, Y+6	; 0x06
    1efc:	9f 81       	ldd	r25, Y+7	; 0x07
    1efe:	fc 01       	movw	r30, r24
    1f00:	26 89       	ldd	r18, Z+22	; 0x16
    1f02:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    1f06:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	86 89       	ldd	r24, Z+22	; 0x16
    1f0e:	28 17       	cp	r18, r24
    1f10:	08 f4       	brcc	.+2      	; 0x1f14 <xTaskIncrementTick+0x18c>
    1f12:	8b cf       	rjmp	.-234    	; 0x1e2a <xTaskIncrementTick+0xa2>
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	88 cf       	rjmp	.-240    	; 0x1e2a <xTaskIncrementTick+0xa2>
    1f1a:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    1f1e:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    1f22:	fc 01       	movw	r30, r24
    1f24:	86 89       	ldd	r24, Z+22	; 0x16
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	c9 01       	movw	r24, r18
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	82 0f       	add	r24, r18
    1f3a:	93 1f       	adc	r25, r19
    1f3c:	88 57       	subi	r24, 0x78	; 120
    1f3e:	9e 49       	sbci	r25, 0x9E	; 158
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	40 f0       	brcs	.+16     	; 0x1f58 <xTaskIncrementTick+0x1d0>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	05 c0       	rjmp	.+10     	; 0x1f58 <xTaskIncrementTick+0x1d0>
    1f4e:	80 91 e3 61 	lds	r24, 0x61E3	; 0x8061e3 <uxPendedTicks>
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	80 93 e3 61 	sts	0x61E3, r24	; 0x8061e3 <uxPendedTicks>
    1f58:	80 91 e4 61 	lds	r24, 0x61E4	; 0x8061e4 <xYieldPending>
    1f5c:	88 23       	and	r24, r24
    1f5e:	11 f0       	breq	.+4      	; 0x1f64 <xTaskIncrementTick+0x1dc>
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	29 96       	adiw	r28, 0x09	; 9
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret

00001f72 <vTaskSwitchContext>:
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	29 97       	sbiw	r28, 0x09	; 9
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	80 91 eb 61 	lds	r24, 0x61EB	; 0x8061eb <uxSchedulerSuspended>
    1f94:	88 23       	and	r24, r24
    1f96:	21 f0       	breq	.+8      	; 0x1fa0 <vTaskSwitchContext+0x2e>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	80 93 e4 61 	sts	0x61E4, r24	; 0x8061e4 <xYieldPending>
    1f9e:	34 c1       	rjmp	.+616    	; 0x2208 <vTaskSwitchContext+0x296>
    1fa0:	10 92 e4 61 	sts	0x61E4, r1	; 0x8061e4 <xYieldPending>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	98 e0       	ldi	r25, 0x08	; 8
    1fa8:	fc 01       	movw	r30, r24
    1faa:	80 a1       	ldd	r24, Z+32	; 0x20
    1fac:	91 a1       	ldd	r25, Z+33	; 0x21
    1fae:	9c 01       	movw	r18, r24
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	80 91 f4 63 	lds	r24, 0x63F4	; 0x8063f4 <StatsTimer>
    1fb8:	90 91 f5 63 	lds	r25, 0x63F5	; 0x8063f5 <StatsTimer+0x1>
    1fbc:	a0 91 f6 63 	lds	r26, 0x63F6	; 0x8063f6 <StatsTimer+0x2>
    1fc0:	b0 91 f7 63 	lds	r27, 0x63F7	; 0x8063f7 <StatsTimer+0x3>
    1fc4:	82 0f       	add	r24, r18
    1fc6:	93 1f       	adc	r25, r19
    1fc8:	a4 1f       	adc	r26, r20
    1fca:	b5 1f       	adc	r27, r21
    1fcc:	80 93 f0 61 	sts	0x61F0, r24	; 0x8061f0 <ulTotalRunTime>
    1fd0:	90 93 f1 61 	sts	0x61F1, r25	; 0x8061f1 <ulTotalRunTime+0x1>
    1fd4:	a0 93 f2 61 	sts	0x61F2, r26	; 0x8061f2 <ulTotalRunTime+0x2>
    1fd8:	b0 93 f3 61 	sts	0x61F3, r27	; 0x8061f3 <ulTotalRunTime+0x3>
    1fdc:	20 91 f0 61 	lds	r18, 0x61F0	; 0x8061f0 <ulTotalRunTime>
    1fe0:	30 91 f1 61 	lds	r19, 0x61F1	; 0x8061f1 <ulTotalRunTime+0x1>
    1fe4:	40 91 f2 61 	lds	r20, 0x61F2	; 0x8061f2 <ulTotalRunTime+0x2>
    1fe8:	50 91 f3 61 	lds	r21, 0x61F3	; 0x8061f3 <ulTotalRunTime+0x3>
    1fec:	80 91 ec 61 	lds	r24, 0x61EC	; 0x8061ec <ulTaskSwitchedInTime>
    1ff0:	90 91 ed 61 	lds	r25, 0x61ED	; 0x8061ed <ulTaskSwitchedInTime+0x1>
    1ff4:	a0 91 ee 61 	lds	r26, 0x61EE	; 0x8061ee <ulTaskSwitchedInTime+0x2>
    1ff8:	b0 91 ef 61 	lds	r27, 0x61EF	; 0x8061ef <ulTaskSwitchedInTime+0x3>
    1ffc:	82 17       	cp	r24, r18
    1ffe:	93 07       	cpc	r25, r19
    2000:	a4 07       	cpc	r26, r20
    2002:	b5 07       	cpc	r27, r21
    2004:	50 f5       	brcc	.+84     	; 0x205a <vTaskSwitchContext+0xe8>
    2006:	60 91 86 61 	lds	r22, 0x6186	; 0x806186 <pxCurrentTCB>
    200a:	70 91 87 61 	lds	r23, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    200e:	fb 01       	movw	r30, r22
    2010:	25 a1       	ldd	r18, Z+37	; 0x25
    2012:	36 a1       	ldd	r19, Z+38	; 0x26
    2014:	47 a1       	ldd	r20, Z+39	; 0x27
    2016:	50 a5       	ldd	r21, Z+40	; 0x28
    2018:	e0 90 f0 61 	lds	r14, 0x61F0	; 0x8061f0 <ulTotalRunTime>
    201c:	f0 90 f1 61 	lds	r15, 0x61F1	; 0x8061f1 <ulTotalRunTime+0x1>
    2020:	00 91 f2 61 	lds	r16, 0x61F2	; 0x8061f2 <ulTotalRunTime+0x2>
    2024:	10 91 f3 61 	lds	r17, 0x61F3	; 0x8061f3 <ulTotalRunTime+0x3>
    2028:	80 91 ec 61 	lds	r24, 0x61EC	; 0x8061ec <ulTaskSwitchedInTime>
    202c:	90 91 ed 61 	lds	r25, 0x61ED	; 0x8061ed <ulTaskSwitchedInTime+0x1>
    2030:	a0 91 ee 61 	lds	r26, 0x61EE	; 0x8061ee <ulTaskSwitchedInTime+0x2>
    2034:	b0 91 ef 61 	lds	r27, 0x61EF	; 0x8061ef <ulTaskSwitchedInTime+0x3>
    2038:	57 01       	movw	r10, r14
    203a:	68 01       	movw	r12, r16
    203c:	a8 1a       	sub	r10, r24
    203e:	b9 0a       	sbc	r11, r25
    2040:	ca 0a       	sbc	r12, r26
    2042:	db 0a       	sbc	r13, r27
    2044:	d6 01       	movw	r26, r12
    2046:	c5 01       	movw	r24, r10
    2048:	82 0f       	add	r24, r18
    204a:	93 1f       	adc	r25, r19
    204c:	a4 1f       	adc	r26, r20
    204e:	b5 1f       	adc	r27, r21
    2050:	fb 01       	movw	r30, r22
    2052:	85 a3       	std	Z+37, r24	; 0x25
    2054:	96 a3       	std	Z+38, r25	; 0x26
    2056:	a7 a3       	std	Z+39, r26	; 0x27
    2058:	b0 a7       	std	Z+40, r27	; 0x28
    205a:	80 91 f0 61 	lds	r24, 0x61F0	; 0x8061f0 <ulTotalRunTime>
    205e:	90 91 f1 61 	lds	r25, 0x61F1	; 0x8061f1 <ulTotalRunTime+0x1>
    2062:	a0 91 f2 61 	lds	r26, 0x61F2	; 0x8061f2 <ulTotalRunTime+0x2>
    2066:	b0 91 f3 61 	lds	r27, 0x61F3	; 0x8061f3 <ulTotalRunTime+0x3>
    206a:	80 93 ec 61 	sts	0x61EC, r24	; 0x8061ec <ulTaskSwitchedInTime>
    206e:	90 93 ed 61 	sts	0x61ED, r25	; 0x8061ed <ulTaskSwitchedInTime+0x1>
    2072:	a0 93 ee 61 	sts	0x61EE, r26	; 0x8061ee <ulTaskSwitchedInTime+0x2>
    2076:	b0 93 ef 61 	sts	0x61EF, r27	; 0x8061ef <ulTaskSwitchedInTime+0x3>
    207a:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    207e:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    2082:	fc 01       	movw	r30, r24
    2084:	87 89       	ldd	r24, Z+23	; 0x17
    2086:	90 8d       	ldd	r25, Z+24	; 0x18
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	9b 83       	std	Y+3, r25	; 0x03
    208c:	85 ea       	ldi	r24, 0xA5	; 165
    208e:	95 ea       	ldi	r25, 0xA5	; 165
    2090:	dc 01       	movw	r26, r24
    2092:	8c 83       	std	Y+4, r24	; 0x04
    2094:	9d 83       	std	Y+5, r25	; 0x05
    2096:	ae 83       	std	Y+6, r26	; 0x06
    2098:	bf 83       	std	Y+7, r27	; 0x07
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	fc 01       	movw	r30, r24
    20a0:	20 81       	ld	r18, Z
    20a2:	31 81       	ldd	r19, Z+1	; 0x01
    20a4:	42 81       	ldd	r20, Z+2	; 0x02
    20a6:	53 81       	ldd	r21, Z+3	; 0x03
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	ae 81       	ldd	r26, Y+6	; 0x06
    20ae:	bf 81       	ldd	r27, Y+7	; 0x07
    20b0:	28 17       	cp	r18, r24
    20b2:	39 07       	cpc	r19, r25
    20b4:	4a 07       	cpc	r20, r26
    20b6:	5b 07       	cpc	r21, r27
    20b8:	99 f5       	brne	.+102    	; 0x2120 <vTaskSwitchContext+0x1ae>
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	04 96       	adiw	r24, 0x04	; 4
    20c0:	fc 01       	movw	r30, r24
    20c2:	20 81       	ld	r18, Z
    20c4:	31 81       	ldd	r19, Z+1	; 0x01
    20c6:	42 81       	ldd	r20, Z+2	; 0x02
    20c8:	53 81       	ldd	r21, Z+3	; 0x03
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	ae 81       	ldd	r26, Y+6	; 0x06
    20d0:	bf 81       	ldd	r27, Y+7	; 0x07
    20d2:	28 17       	cp	r18, r24
    20d4:	39 07       	cpc	r19, r25
    20d6:	4a 07       	cpc	r20, r26
    20d8:	5b 07       	cpc	r21, r27
    20da:	11 f5       	brne	.+68     	; 0x2120 <vTaskSwitchContext+0x1ae>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	08 96       	adiw	r24, 0x08	; 8
    20e2:	fc 01       	movw	r30, r24
    20e4:	20 81       	ld	r18, Z
    20e6:	31 81       	ldd	r19, Z+1	; 0x01
    20e8:	42 81       	ldd	r20, Z+2	; 0x02
    20ea:	53 81       	ldd	r21, Z+3	; 0x03
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	9d 81       	ldd	r25, Y+5	; 0x05
    20f0:	ae 81       	ldd	r26, Y+6	; 0x06
    20f2:	bf 81       	ldd	r27, Y+7	; 0x07
    20f4:	28 17       	cp	r18, r24
    20f6:	39 07       	cpc	r19, r25
    20f8:	4a 07       	cpc	r20, r26
    20fa:	5b 07       	cpc	r21, r27
    20fc:	89 f4       	brne	.+34     	; 0x2120 <vTaskSwitchContext+0x1ae>
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	0c 96       	adiw	r24, 0x0c	; 12
    2104:	fc 01       	movw	r30, r24
    2106:	20 81       	ld	r18, Z
    2108:	31 81       	ldd	r19, Z+1	; 0x01
    210a:	42 81       	ldd	r20, Z+2	; 0x02
    210c:	53 81       	ldd	r21, Z+3	; 0x03
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	ae 81       	ldd	r26, Y+6	; 0x06
    2114:	bf 81       	ldd	r27, Y+7	; 0x07
    2116:	28 17       	cp	r18, r24
    2118:	39 07       	cpc	r19, r25
    211a:	4a 07       	cpc	r20, r26
    211c:	5b 07       	cpc	r21, r27
    211e:	71 f0       	breq	.+28     	; 0x213c <vTaskSwitchContext+0x1ca>
    2120:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    2124:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    2128:	9c 01       	movw	r18, r24
    212a:	27 5e       	subi	r18, 0xE7	; 231
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    2132:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    2136:	b9 01       	movw	r22, r18
    2138:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <vApplicationStackOverflowHook>
    213c:	80 91 e1 61 	lds	r24, 0x61E1	; 0x8061e1 <uxTopReadyPriority>
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	0c c0       	rjmp	.+24     	; 0x215c <vTaskSwitchContext+0x1ea>
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	88 23       	and	r24, r24
    2148:	31 f4       	brne	.+12     	; 0x2156 <vTaskSwitchContext+0x1e4>
    214a:	6c e8       	ldi	r22, 0x8C	; 140
    214c:	7b e0       	ldi	r23, 0x0B	; 11
    214e:	85 e2       	ldi	r24, 0x25	; 37
    2150:	90 e2       	ldi	r25, 0x20	; 32
    2152:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vAssertCalled>
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	81 50       	subi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	c9 01       	movw	r24, r18
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	82 0f       	add	r24, r18
    2172:	93 1f       	adc	r25, r19
    2174:	88 57       	subi	r24, 0x78	; 120
    2176:	9e 49       	sbci	r25, 0x9E	; 158
    2178:	fc 01       	movw	r30, r24
    217a:	80 81       	ld	r24, Z
    217c:	88 23       	and	r24, r24
    217e:	11 f3       	breq	.-60     	; 0x2144 <vTaskSwitchContext+0x1d2>
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	c9 01       	movw	r24, r18
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	82 0f       	add	r24, r18
    2196:	93 1f       	adc	r25, r19
    2198:	88 57       	subi	r24, 0x78	; 120
    219a:	9e 49       	sbci	r25, 0x9E	; 158
    219c:	88 87       	std	Y+8, r24	; 0x08
    219e:	99 87       	std	Y+9, r25	; 0x09
    21a0:	88 85       	ldd	r24, Y+8	; 0x08
    21a2:	99 85       	ldd	r25, Y+9	; 0x09
    21a4:	fc 01       	movw	r30, r24
    21a6:	81 81       	ldd	r24, Z+1	; 0x01
    21a8:	92 81       	ldd	r25, Z+2	; 0x02
    21aa:	fc 01       	movw	r30, r24
    21ac:	22 81       	ldd	r18, Z+2	; 0x02
    21ae:	33 81       	ldd	r19, Z+3	; 0x03
    21b0:	88 85       	ldd	r24, Y+8	; 0x08
    21b2:	99 85       	ldd	r25, Y+9	; 0x09
    21b4:	fc 01       	movw	r30, r24
    21b6:	21 83       	std	Z+1, r18	; 0x01
    21b8:	32 83       	std	Z+2, r19	; 0x02
    21ba:	88 85       	ldd	r24, Y+8	; 0x08
    21bc:	99 85       	ldd	r25, Y+9	; 0x09
    21be:	fc 01       	movw	r30, r24
    21c0:	21 81       	ldd	r18, Z+1	; 0x01
    21c2:	32 81       	ldd	r19, Z+2	; 0x02
    21c4:	88 85       	ldd	r24, Y+8	; 0x08
    21c6:	99 85       	ldd	r25, Y+9	; 0x09
    21c8:	03 96       	adiw	r24, 0x03	; 3
    21ca:	28 17       	cp	r18, r24
    21cc:	39 07       	cpc	r19, r25
    21ce:	69 f4       	brne	.+26     	; 0x21ea <vTaskSwitchContext+0x278>
    21d0:	88 85       	ldd	r24, Y+8	; 0x08
    21d2:	99 85       	ldd	r25, Y+9	; 0x09
    21d4:	fc 01       	movw	r30, r24
    21d6:	81 81       	ldd	r24, Z+1	; 0x01
    21d8:	92 81       	ldd	r25, Z+2	; 0x02
    21da:	fc 01       	movw	r30, r24
    21dc:	22 81       	ldd	r18, Z+2	; 0x02
    21de:	33 81       	ldd	r19, Z+3	; 0x03
    21e0:	88 85       	ldd	r24, Y+8	; 0x08
    21e2:	99 85       	ldd	r25, Y+9	; 0x09
    21e4:	fc 01       	movw	r30, r24
    21e6:	21 83       	std	Z+1, r18	; 0x01
    21e8:	32 83       	std	Z+2, r19	; 0x02
    21ea:	88 85       	ldd	r24, Y+8	; 0x08
    21ec:	99 85       	ldd	r25, Y+9	; 0x09
    21ee:	fc 01       	movw	r30, r24
    21f0:	81 81       	ldd	r24, Z+1	; 0x01
    21f2:	92 81       	ldd	r25, Z+2	; 0x02
    21f4:	fc 01       	movw	r30, r24
    21f6:	86 81       	ldd	r24, Z+6	; 0x06
    21f8:	97 81       	ldd	r25, Z+7	; 0x07
    21fa:	80 93 86 61 	sts	0x6186, r24	; 0x806186 <pxCurrentTCB>
    21fe:	90 93 87 61 	sts	0x6187, r25	; 0x806187 <pxCurrentTCB+0x1>
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	80 93 e1 61 	sts	0x61E1, r24	; 0x8061e1 <uxTopReadyPriority>
    2208:	00 00       	nop
    220a:	29 96       	adiw	r28, 0x09	; 9
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	ff 90       	pop	r15
    221a:	ef 90       	pop	r14
    221c:	df 90       	pop	r13
    221e:	cf 90       	pop	r12
    2220:	bf 90       	pop	r11
    2222:	af 90       	pop	r10
    2224:	08 95       	ret

00002226 <prvIdleTask>:
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	1f 92       	push	r1
    222c:	1f 92       	push	r1
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	0e 94 68 11 	call	0x22d0	; 0x22d0 <prvCheckTasksWaitingTermination>
    223a:	80 91 88 61 	lds	r24, 0x6188	; 0x806188 <pxReadyTasksLists>
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	10 f0       	brcs	.+4      	; 0x2246 <prvIdleTask+0x20>
    2242:	0e 94 21 09 	call	0x1242	; 0x1242 <vPortYield>
    2246:	0e 94 24 15 	call	0x2a48	; 0x2a48 <vApplicationIdleHook>
    224a:	f5 cf       	rjmp	.-22     	; 0x2236 <prvIdleTask+0x10>

0000224c <prvInitialiseTaskLists>:
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	1f 92       	push	r1
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	19 82       	std	Y+1, r1	; 0x01
    2258:	13 c0       	rjmp	.+38     	; 0x2280 <prvInitialiseTaskLists+0x34>
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	c9 01       	movw	r24, r18
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	88 57       	subi	r24, 0x78	; 120
    2274:	9e 49       	sbci	r25, 0x9E	; 158
    2276:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialise>
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	50 f3       	brcs	.-44     	; 0x225a <prvInitialiseTaskLists+0xe>
    2286:	8c ea       	ldi	r24, 0xAC	; 172
    2288:	91 e6       	ldi	r25, 0x61	; 97
    228a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialise>
    228e:	85 eb       	ldi	r24, 0xB5	; 181
    2290:	91 e6       	ldi	r25, 0x61	; 97
    2292:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialise>
    2296:	82 ec       	ldi	r24, 0xC2	; 194
    2298:	91 e6       	ldi	r25, 0x61	; 97
    229a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialise>
    229e:	8b ec       	ldi	r24, 0xCB	; 203
    22a0:	91 e6       	ldi	r25, 0x61	; 97
    22a2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialise>
    22a6:	85 ed       	ldi	r24, 0xD5	; 213
    22a8:	91 e6       	ldi	r25, 0x61	; 97
    22aa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialise>
    22ae:	8c ea       	ldi	r24, 0xAC	; 172
    22b0:	91 e6       	ldi	r25, 0x61	; 97
    22b2:	80 93 be 61 	sts	0x61BE, r24	; 0x8061be <pxDelayedTaskList>
    22b6:	90 93 bf 61 	sts	0x61BF, r25	; 0x8061bf <pxDelayedTaskList+0x1>
    22ba:	85 eb       	ldi	r24, 0xB5	; 181
    22bc:	91 e6       	ldi	r25, 0x61	; 97
    22be:	80 93 c0 61 	sts	0x61C0, r24	; 0x8061c0 <pxOverflowDelayedTaskList>
    22c2:	90 93 c1 61 	sts	0x61C1, r25	; 0x8061c1 <pxOverflowDelayedTaskList+0x1>
    22c6:	00 00       	nop
    22c8:	0f 90       	pop	r0
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <prvCheckTasksWaitingTermination>:
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	1f 92       	push	r1
    22d6:	1f 92       	push	r1
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	21 c0       	rjmp	.+66     	; 0x2320 <prvCheckTasksWaitingTermination+0x50>
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	0f 92       	push	r0
    22e4:	80 91 d0 61 	lds	r24, 0x61D0	; 0x8061d0 <xTasksWaitingTermination+0x5>
    22e8:	90 91 d1 61 	lds	r25, 0x61D1	; 0x8061d1 <xTasksWaitingTermination+0x6>
    22ec:	fc 01       	movw	r30, r24
    22ee:	86 81       	ldd	r24, Z+6	; 0x06
    22f0:	97 81       	ldd	r25, Z+7	; 0x07
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	02 96       	adiw	r24, 0x02	; 2
    22fc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <uxListRemove>
    2300:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    2304:	81 50       	subi	r24, 0x01	; 1
    2306:	80 93 de 61 	sts	0x61DE, r24	; 0x8061de <uxCurrentNumberOfTasks>
    230a:	80 91 d4 61 	lds	r24, 0x61D4	; 0x8061d4 <uxDeletedTasksWaitingCleanUp>
    230e:	81 50       	subi	r24, 0x01	; 1
    2310:	80 93 d4 61 	sts	0x61D4, r24	; 0x8061d4 <uxDeletedTasksWaitingCleanUp>
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	0e 94 10 13 	call	0x2620	; 0x2620 <prvDeleteTCB>
    2320:	80 91 d4 61 	lds	r24, 0x61D4	; 0x8061d4 <uxDeletedTasksWaitingCleanUp>
    2324:	88 23       	and	r24, r24
    2326:	d9 f6       	brne	.-74     	; 0x22de <prvCheckTasksWaitingTermination+0xe>
    2328:	00 00       	nop
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	08 95       	ret

00002334 <vTaskGetInfo>:
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	28 97       	sbiw	r28, 0x08	; 8
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	8b 83       	std	Y+3, r24	; 0x03
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	6d 83       	std	Y+5, r22	; 0x05
    2348:	7e 83       	std	Y+6, r23	; 0x06
    234a:	4f 83       	std	Y+7, r20	; 0x07
    234c:	28 87       	std	Y+8, r18	; 0x08
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	89 2b       	or	r24, r25
    2354:	29 f4       	brne	.+10     	; 0x2360 <vTaskGetInfo+0x2c>
    2356:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    235a:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <vTaskGetInfo+0x30>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	29 81       	ldd	r18, Y+1	; 0x01
    236e:	3a 81       	ldd	r19, Y+2	; 0x02
    2370:	fc 01       	movw	r30, r24
    2372:	20 83       	st	Z, r18
    2374:	31 83       	std	Z+1, r19	; 0x01
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	9c 01       	movw	r18, r24
    237c:	27 5e       	subi	r18, 0xE7	; 231
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	fc 01       	movw	r30, r24
    2386:	22 83       	std	Z+2, r18	; 0x02
    2388:	33 83       	std	Z+3, r19	; 0x03
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	fc 01       	movw	r30, r24
    2390:	26 89       	ldd	r18, Z+22	; 0x16
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	fc 01       	movw	r30, r24
    2398:	26 83       	std	Z+6, r18	; 0x06
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	fc 01       	movw	r30, r24
    23a0:	27 89       	ldd	r18, Z+23	; 0x17
    23a2:	30 8d       	ldd	r19, Z+24	; 0x18
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	fc 01       	movw	r30, r24
    23aa:	24 87       	std	Z+12, r18	; 0x0c
    23ac:	35 87       	std	Z+13, r19	; 0x0d
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	fc 01       	movw	r30, r24
    23b4:	21 a1       	ldd	r18, Z+33	; 0x21
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	fc 01       	movw	r30, r24
    23bc:	24 83       	std	Z+4, r18	; 0x04
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	fc 01       	movw	r30, r24
    23c4:	23 a1       	ldd	r18, Z+35	; 0x23
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	fc 01       	movw	r30, r24
    23cc:	27 83       	std	Z+7, r18	; 0x07
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	fc 01       	movw	r30, r24
    23d4:	85 a1       	ldd	r24, Z+37	; 0x25
    23d6:	96 a1       	ldd	r25, Z+38	; 0x26
    23d8:	a7 a1       	ldd	r26, Z+39	; 0x27
    23da:	b0 a5       	ldd	r27, Z+40	; 0x28
    23dc:	2d 81       	ldd	r18, Y+5	; 0x05
    23de:	3e 81       	ldd	r19, Y+6	; 0x06
    23e0:	f9 01       	movw	r30, r18
    23e2:	80 87       	std	Z+8, r24	; 0x08
    23e4:	91 87       	std	Z+9, r25	; 0x09
    23e6:	a2 87       	std	Z+10, r26	; 0x0a
    23e8:	b3 87       	std	Z+11, r27	; 0x0b
    23ea:	88 85       	ldd	r24, Y+8	; 0x08
    23ec:	85 30       	cpi	r24, 0x05	; 5
    23ee:	39 f1       	breq	.+78     	; 0x243e <vTaskGetInfo+0x10a>
    23f0:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    23f4:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    23f8:	29 81       	ldd	r18, Y+1	; 0x01
    23fa:	3a 81       	ldd	r19, Y+2	; 0x02
    23fc:	28 17       	cp	r18, r24
    23fe:	39 07       	cpc	r19, r25
    2400:	29 f4       	brne	.+10     	; 0x240c <vTaskGetInfo+0xd8>
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	9e 81       	ldd	r25, Y+6	; 0x06
    2406:	fc 01       	movw	r30, r24
    2408:	15 82       	std	Z+5, r1	; 0x05
    240a:	22 c0       	rjmp	.+68     	; 0x2450 <vTaskGetInfo+0x11c>
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	28 85       	ldd	r18, Y+8	; 0x08
    2412:	fc 01       	movw	r30, r24
    2414:	25 83       	std	Z+5, r18	; 0x05
    2416:	88 85       	ldd	r24, Y+8	; 0x08
    2418:	83 30       	cpi	r24, 0x03	; 3
    241a:	d1 f4       	brne	.+52     	; 0x2450 <vTaskGetInfo+0x11c>
    241c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspendAll>
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	fc 01       	movw	r30, r24
    2426:	84 89       	ldd	r24, Z+20	; 0x14
    2428:	95 89       	ldd	r25, Z+21	; 0x15
    242a:	89 2b       	or	r24, r25
    242c:	29 f0       	breq	.+10     	; 0x2438 <vTaskGetInfo+0x104>
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	22 e0       	ldi	r18, 0x02	; 2
    2434:	fc 01       	movw	r30, r24
    2436:	25 83       	std	Z+5, r18	; 0x05
    2438:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xTaskResumeAll>
    243c:	09 c0       	rjmp	.+18     	; 0x2450 <vTaskGetInfo+0x11c>
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	0e 94 97 0c 	call	0x192e	; 0x192e <eTaskGetState>
    2446:	28 2f       	mov	r18, r24
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	fc 01       	movw	r30, r24
    244e:	25 83       	std	Z+5, r18	; 0x05
    2450:	8f 81       	ldd	r24, Y+7	; 0x07
    2452:	88 23       	and	r24, r24
    2454:	71 f0       	breq	.+28     	; 0x2472 <vTaskGetInfo+0x13e>
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	fc 01       	movw	r30, r24
    245c:	87 89       	ldd	r24, Z+23	; 0x17
    245e:	90 8d       	ldd	r25, Z+24	; 0x18
    2460:	0e 94 e5 12 	call	0x25ca	; 0x25ca <prvTaskCheckFreeStackSpace>
    2464:	9c 01       	movw	r18, r24
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	fc 01       	movw	r30, r24
    246c:	26 87       	std	Z+14, r18	; 0x0e
    246e:	37 87       	std	Z+15, r19	; 0x0f
    2470:	05 c0       	rjmp	.+10     	; 0x247c <vTaskGetInfo+0x148>
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	fc 01       	movw	r30, r24
    2478:	16 86       	std	Z+14, r1	; 0x0e
    247a:	17 86       	std	Z+15, r1	; 0x0f
    247c:	00 00       	nop
    247e:	28 96       	adiw	r28, 0x08	; 8
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	08 95       	ret

0000248a <prvListTasksWithinSingleList>:
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	2e 97       	sbiw	r28, 0x0e	; 14
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	8a 87       	std	Y+10, r24	; 0x0a
    249a:	9b 87       	std	Y+11, r25	; 0x0b
    249c:	6c 87       	std	Y+12, r22	; 0x0c
    249e:	7d 87       	std	Y+13, r23	; 0x0d
    24a0:	4e 87       	std	Y+14, r20	; 0x0e
    24a2:	19 82       	std	Y+1, r1	; 0x01
    24a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    24a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    24a8:	fc 01       	movw	r30, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	88 23       	and	r24, r24
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <prvListTasksWithinSingleList+0x28>
    24b0:	85 c0       	rjmp	.+266    	; 0x25bc <prvListTasksWithinSingleList+0x132>
    24b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    24b6:	8a 83       	std	Y+2, r24	; 0x02
    24b8:	9b 83       	std	Y+3, r25	; 0x03
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	fc 01       	movw	r30, r24
    24c0:	81 81       	ldd	r24, Z+1	; 0x01
    24c2:	92 81       	ldd	r25, Z+2	; 0x02
    24c4:	fc 01       	movw	r30, r24
    24c6:	22 81       	ldd	r18, Z+2	; 0x02
    24c8:	33 81       	ldd	r19, Z+3	; 0x03
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	fc 01       	movw	r30, r24
    24d0:	21 83       	std	Z+1, r18	; 0x01
    24d2:	32 83       	std	Z+2, r19	; 0x02
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	fc 01       	movw	r30, r24
    24da:	21 81       	ldd	r18, Z+1	; 0x01
    24dc:	32 81       	ldd	r19, Z+2	; 0x02
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	03 96       	adiw	r24, 0x03	; 3
    24e4:	28 17       	cp	r18, r24
    24e6:	39 07       	cpc	r19, r25
    24e8:	69 f4       	brne	.+26     	; 0x2504 <prvListTasksWithinSingleList+0x7a>
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	fc 01       	movw	r30, r24
    24f0:	81 81       	ldd	r24, Z+1	; 0x01
    24f2:	92 81       	ldd	r25, Z+2	; 0x02
    24f4:	fc 01       	movw	r30, r24
    24f6:	22 81       	ldd	r18, Z+2	; 0x02
    24f8:	33 81       	ldd	r19, Z+3	; 0x03
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	fc 01       	movw	r30, r24
    2500:	21 83       	std	Z+1, r18	; 0x01
    2502:	32 83       	std	Z+2, r19	; 0x02
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	fc 01       	movw	r30, r24
    250a:	81 81       	ldd	r24, Z+1	; 0x01
    250c:	92 81       	ldd	r25, Z+2	; 0x02
    250e:	fc 01       	movw	r30, r24
    2510:	86 81       	ldd	r24, Z+6	; 0x06
    2512:	97 81       	ldd	r25, Z+7	; 0x07
    2514:	8c 83       	std	Y+4, r24	; 0x04
    2516:	9d 83       	std	Y+5, r25	; 0x05
    2518:	8c 85       	ldd	r24, Y+12	; 0x0c
    251a:	9d 85       	ldd	r25, Y+13	; 0x0d
    251c:	8e 83       	std	Y+6, r24	; 0x06
    251e:	9f 83       	std	Y+7, r25	; 0x07
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	9f 81       	ldd	r25, Y+7	; 0x07
    2524:	fc 01       	movw	r30, r24
    2526:	81 81       	ldd	r24, Z+1	; 0x01
    2528:	92 81       	ldd	r25, Z+2	; 0x02
    252a:	fc 01       	movw	r30, r24
    252c:	22 81       	ldd	r18, Z+2	; 0x02
    252e:	33 81       	ldd	r19, Z+3	; 0x03
    2530:	8e 81       	ldd	r24, Y+6	; 0x06
    2532:	9f 81       	ldd	r25, Y+7	; 0x07
    2534:	fc 01       	movw	r30, r24
    2536:	21 83       	std	Z+1, r18	; 0x01
    2538:	32 83       	std	Z+2, r19	; 0x02
    253a:	8e 81       	ldd	r24, Y+6	; 0x06
    253c:	9f 81       	ldd	r25, Y+7	; 0x07
    253e:	fc 01       	movw	r30, r24
    2540:	21 81       	ldd	r18, Z+1	; 0x01
    2542:	32 81       	ldd	r19, Z+2	; 0x02
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	03 96       	adiw	r24, 0x03	; 3
    254a:	28 17       	cp	r18, r24
    254c:	39 07       	cpc	r19, r25
    254e:	69 f4       	brne	.+26     	; 0x256a <prvListTasksWithinSingleList+0xe0>
    2550:	8e 81       	ldd	r24, Y+6	; 0x06
    2552:	9f 81       	ldd	r25, Y+7	; 0x07
    2554:	fc 01       	movw	r30, r24
    2556:	81 81       	ldd	r24, Z+1	; 0x01
    2558:	92 81       	ldd	r25, Z+2	; 0x02
    255a:	fc 01       	movw	r30, r24
    255c:	22 81       	ldd	r18, Z+2	; 0x02
    255e:	33 81       	ldd	r19, Z+3	; 0x03
    2560:	8e 81       	ldd	r24, Y+6	; 0x06
    2562:	9f 81       	ldd	r25, Y+7	; 0x07
    2564:	fc 01       	movw	r30, r24
    2566:	21 83       	std	Z+1, r18	; 0x01
    2568:	32 83       	std	Z+2, r19	; 0x02
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	fc 01       	movw	r30, r24
    2570:	81 81       	ldd	r24, Z+1	; 0x01
    2572:	92 81       	ldd	r25, Z+2	; 0x02
    2574:	fc 01       	movw	r30, r24
    2576:	86 81       	ldd	r24, Z+6	; 0x06
    2578:	97 81       	ldd	r25, Z+7	; 0x07
    257a:	88 87       	std	Y+8, r24	; 0x08
    257c:	99 87       	std	Y+9, r25	; 0x09
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	88 2f       	mov	r24, r24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	82 95       	swap	r24
    2586:	92 95       	swap	r25
    2588:	90 7f       	andi	r25, 0xF0	; 240
    258a:	98 27       	eor	r25, r24
    258c:	80 7f       	andi	r24, 0xF0	; 240
    258e:	98 27       	eor	r25, r24
    2590:	2a 85       	ldd	r18, Y+10	; 0x0a
    2592:	3b 85       	ldd	r19, Y+11	; 0x0b
    2594:	b9 01       	movw	r22, r18
    2596:	68 0f       	add	r22, r24
    2598:	79 1f       	adc	r23, r25
    259a:	88 85       	ldd	r24, Y+8	; 0x08
    259c:	99 85       	ldd	r25, Y+9	; 0x09
    259e:	2e 85       	ldd	r18, Y+14	; 0x0e
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 9a 11 	call	0x2334	; 0x2334 <vTaskGetInfo>
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	28 85       	ldd	r18, Y+8	; 0x08
    25ae:	39 85       	ldd	r19, Y+9	; 0x09
    25b0:	8c 81       	ldd	r24, Y+4	; 0x04
    25b2:	9d 81       	ldd	r25, Y+5	; 0x05
    25b4:	28 17       	cp	r18, r24
    25b6:	39 07       	cpc	r19, r25
    25b8:	09 f0       	breq	.+2      	; 0x25bc <prvListTasksWithinSingleList+0x132>
    25ba:	ae cf       	rjmp	.-164    	; 0x2518 <prvListTasksWithinSingleList+0x8e>
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	2e 96       	adiw	r28, 0x0e	; 14
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	08 95       	ret

000025ca <prvTaskCheckFreeStackSpace>:
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <prvTaskCheckFreeStackSpace+0x6>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <prvTaskCheckFreeStackSpace+0x8>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	19 82       	std	Y+1, r1	; 0x01
    25dc:	1a 82       	std	Y+2, r1	; 0x02
    25de:	1b 82       	std	Y+3, r1	; 0x03
    25e0:	1c 82       	std	Y+4, r1	; 0x04
    25e2:	10 c0       	rjmp	.+32     	; 0x2604 <prvTaskCheckFreeStackSpace+0x3a>
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	ab 81       	ldd	r26, Y+3	; 0x03
    25f4:	bc 81       	ldd	r27, Y+4	; 0x04
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	a1 1d       	adc	r26, r1
    25fa:	b1 1d       	adc	r27, r1
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	ab 83       	std	Y+3, r26	; 0x03
    2602:	bc 83       	std	Y+4, r27	; 0x04
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	fc 01       	movw	r30, r24
    260a:	80 81       	ld	r24, Z
    260c:	85 3a       	cpi	r24, 0xA5	; 165
    260e:	51 f3       	breq	.-44     	; 0x25e4 <prvTaskCheckFreeStackSpace+0x1a>
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	26 96       	adiw	r28, 0x06	; 6
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <prvDeleteTCB>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	1f 92       	push	r1
    2626:	1f 92       	push	r1
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	fc 01       	movw	r30, r24
    2636:	87 89       	ldd	r24, Z+23	; 0x17
    2638:	90 8d       	ldd	r25, Z+24	; 0x18
    263a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <vPortFree>
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	0e 94 2e 05 	call	0xa5c	; 0xa5c <vPortFree>
    2646:	00 00       	nop
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <prvResetNextTaskUnblockTime>:
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	1f 92       	push	r1
    2658:	1f 92       	push	r1
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    2662:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    2666:	fc 01       	movw	r30, r24
    2668:	80 81       	ld	r24, Z
    266a:	88 23       	and	r24, r24
    266c:	39 f4       	brne	.+14     	; 0x267c <prvResetNextTaskUnblockTime+0x2a>
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	9f ef       	ldi	r25, 0xFF	; 255
    2672:	80 93 e7 61 	sts	0x61E7, r24	; 0x8061e7 <xNextTaskUnblockTime>
    2676:	90 93 e8 61 	sts	0x61E8, r25	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    267a:	15 c0       	rjmp	.+42     	; 0x26a6 <prvResetNextTaskUnblockTime+0x54>
    267c:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    2680:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    2684:	fc 01       	movw	r30, r24
    2686:	85 81       	ldd	r24, Z+5	; 0x05
    2688:	96 81       	ldd	r25, Z+6	; 0x06
    268a:	fc 01       	movw	r30, r24
    268c:	86 81       	ldd	r24, Z+6	; 0x06
    268e:	97 81       	ldd	r25, Z+7	; 0x07
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	fc 01       	movw	r30, r24
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	80 93 e7 61 	sts	0x61E7, r24	; 0x8061e7 <xNextTaskUnblockTime>
    26a2:	90 93 e8 61 	sts	0x61E8, r25	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    26a6:	00 00       	nop
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <xTaskGetCurrentTaskHandle>:
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	1f 92       	push	r1
    26b8:	1f 92       	push	r1
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    26c2:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <prvWriteNameToBuffer>:
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	00 d0       	rcall	.+0      	; 0x26de <prvWriteNameToBuffer+0x6>
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <prvWriteNameToBuffer+0x8>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	8b 83       	std	Y+3, r24	; 0x03
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	6d 83       	std	Y+5, r22	; 0x05
    26ea:	7e 83       	std	Y+6, r23	; 0x06
    26ec:	2d 81       	ldd	r18, Y+5	; 0x05
    26ee:	3e 81       	ldd	r19, Y+6	; 0x06
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9c 81       	ldd	r25, Y+4	; 0x04
    26f4:	b9 01       	movw	r22, r18
    26f6:	0e 94 41 20 	call	0x4082	; 0x4082 <strcpy>
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	0e 94 48 20 	call	0x4090	; 0x4090 <strlen>
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	0e c0       	rjmp	.+28     	; 0x2724 <prvWriteNameToBuffer+0x4c>
    2708:	2b 81       	ldd	r18, Y+3	; 0x03
    270a:	3c 81       	ldd	r19, Y+4	; 0x04
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	82 0f       	add	r24, r18
    2712:	93 1f       	adc	r25, r19
    2714:	20 e2       	ldi	r18, 0x20	; 32
    2716:	fc 01       	movw	r30, r24
    2718:	20 83       	st	Z, r18
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	07 97       	sbiw	r24, 0x07	; 7
    272a:	70 f3       	brcs	.-36     	; 0x2708 <prvWriteNameToBuffer+0x30>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	82 0f       	add	r24, r18
    2736:	93 1f       	adc	r25, r19
    2738:	fc 01       	movw	r30, r24
    273a:	10 82       	st	Z, r1
    273c:	2b 81       	ldd	r18, Y+3	; 0x03
    273e:	3c 81       	ldd	r19, Y+4	; 0x04
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	82 0f       	add	r24, r18
    2746:	93 1f       	adc	r25, r19
    2748:	26 96       	adiw	r28, 0x06	; 6
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <vTaskGetRunTimeStats>:
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	2e 97       	sbiw	r28, 0x0e	; 14
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	8d 87       	std	Y+13, r24	; 0x0d
    2764:	9e 87       	std	Y+14, r25	; 0x0e
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	fc 01       	movw	r30, r24
    276c:	10 82       	st	Z, r1
    276e:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    2772:	8a 83       	std	Y+2, r24	; 0x02
    2774:	80 91 de 61 	lds	r24, 0x61DE	; 0x8061de <uxCurrentNumberOfTasks>
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	82 95       	swap	r24
    277e:	92 95       	swap	r25
    2780:	90 7f       	andi	r25, 0xF0	; 240
    2782:	98 27       	eor	r25, r24
    2784:	80 7f       	andi	r24, 0xF0	; 240
    2786:	98 27       	eor	r25, r24
    2788:	0e 94 3f 04 	call	0x87e	; 0x87e <pvPortMalloc>
    278c:	8b 83       	std	Y+3, r24	; 0x03
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	89 2b       	or	r24, r25
    2796:	09 f4       	brne	.+2      	; 0x279a <vTaskGetRunTimeStats+0x46>
    2798:	dc c0       	rjmp	.+440    	; 0x2952 <vTaskGetRunTimeStats+0x1fe>
    279a:	9e 01       	movw	r18, r28
    279c:	27 5f       	subi	r18, 0xF7	; 247
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	9c 81       	ldd	r25, Y+4	; 0x04
    27a4:	a9 01       	movw	r20, r18
    27a6:	6a 81       	ldd	r22, Y+2	; 0x02
    27a8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <uxTaskGetSystemState>
    27ac:	8a 83       	std	Y+2, r24	; 0x02
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    27b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    27b6:	24 e6       	ldi	r18, 0x64	; 100
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__udivmodsi4>
    27c6:	da 01       	movw	r26, r20
    27c8:	c9 01       	movw	r24, r18
    27ca:	89 87       	std	Y+9, r24	; 0x09
    27cc:	9a 87       	std	Y+10, r25	; 0x0a
    27ce:	ab 87       	std	Y+11, r26	; 0x0b
    27d0:	bc 87       	std	Y+12, r27	; 0x0c
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    27d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    27da:	89 2b       	or	r24, r25
    27dc:	8a 2b       	or	r24, r26
    27de:	8b 2b       	or	r24, r27
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <vTaskGetRunTimeStats+0x90>
    27e2:	b3 c0       	rjmp	.+358    	; 0x294a <vTaskGetRunTimeStats+0x1f6>
    27e4:	19 82       	std	Y+1, r1	; 0x01
    27e6:	ac c0       	rjmp	.+344    	; 0x2940 <vTaskGetRunTimeStats+0x1ec>
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	82 95       	swap	r24
    27f0:	92 95       	swap	r25
    27f2:	90 7f       	andi	r25, 0xF0	; 240
    27f4:	98 27       	eor	r25, r24
    27f6:	80 7f       	andi	r24, 0xF0	; 240
    27f8:	98 27       	eor	r25, r24
    27fa:	2b 81       	ldd	r18, Y+3	; 0x03
    27fc:	3c 81       	ldd	r19, Y+4	; 0x04
    27fe:	82 0f       	add	r24, r18
    2800:	93 1f       	adc	r25, r19
    2802:	fc 01       	movw	r30, r24
    2804:	80 85       	ldd	r24, Z+8	; 0x08
    2806:	91 85       	ldd	r25, Z+9	; 0x09
    2808:	a2 85       	ldd	r26, Z+10	; 0x0a
    280a:	b3 85       	ldd	r27, Z+11	; 0x0b
    280c:	29 85       	ldd	r18, Y+9	; 0x09
    280e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2810:	4b 85       	ldd	r20, Y+11	; 0x0b
    2812:	5c 85       	ldd	r21, Y+12	; 0x0c
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__udivmodsi4>
    281c:	da 01       	movw	r26, r20
    281e:	c9 01       	movw	r24, r18
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	af 83       	std	Y+7, r26	; 0x07
    2826:	b8 87       	std	Y+8, r27	; 0x08
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	82 95       	swap	r24
    2830:	92 95       	swap	r25
    2832:	90 7f       	andi	r25, 0xF0	; 240
    2834:	98 27       	eor	r25, r24
    2836:	80 7f       	andi	r24, 0xF0	; 240
    2838:	98 27       	eor	r25, r24
    283a:	2b 81       	ldd	r18, Y+3	; 0x03
    283c:	3c 81       	ldd	r19, Y+4	; 0x04
    283e:	82 0f       	add	r24, r18
    2840:	93 1f       	adc	r25, r19
    2842:	fc 01       	movw	r30, r24
    2844:	22 81       	ldd	r18, Z+2	; 0x02
    2846:	33 81       	ldd	r19, Z+3	; 0x03
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <prvWriteNameToBuffer>
    2852:	8d 87       	std	Y+13, r24	; 0x0d
    2854:	9e 87       	std	Y+14, r25	; 0x0e
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	af 81       	ldd	r26, Y+7	; 0x07
    285c:	b8 85       	ldd	r27, Y+8	; 0x08
    285e:	89 2b       	or	r24, r25
    2860:	8a 2b       	or	r24, r26
    2862:	8b 2b       	or	r24, r27
    2864:	a1 f1       	breq	.+104    	; 0x28ce <vTaskGetRunTimeStats+0x17a>
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	82 95       	swap	r24
    286e:	92 95       	swap	r25
    2870:	90 7f       	andi	r25, 0xF0	; 240
    2872:	98 27       	eor	r25, r24
    2874:	80 7f       	andi	r24, 0xF0	; 240
    2876:	98 27       	eor	r25, r24
    2878:	2b 81       	ldd	r18, Y+3	; 0x03
    287a:	3c 81       	ldd	r19, Y+4	; 0x04
    287c:	82 0f       	add	r24, r18
    287e:	93 1f       	adc	r25, r19
    2880:	fc 01       	movw	r30, r24
    2882:	80 85       	ldd	r24, Z+8	; 0x08
    2884:	91 85       	ldd	r25, Z+9	; 0x09
    2886:	a2 85       	ldd	r26, Z+10	; 0x0a
    2888:	b3 85       	ldd	r27, Z+11	; 0x0b
    288a:	28 85       	ldd	r18, Y+8	; 0x08
    288c:	2f 93       	push	r18
    288e:	2f 81       	ldd	r18, Y+7	; 0x07
    2890:	2f 93       	push	r18
    2892:	2e 81       	ldd	r18, Y+6	; 0x06
    2894:	2f 93       	push	r18
    2896:	2d 81       	ldd	r18, Y+5	; 0x05
    2898:	2f 93       	push	r18
    289a:	2b 2f       	mov	r18, r27
    289c:	2f 93       	push	r18
    289e:	2a 2f       	mov	r18, r26
    28a0:	2f 93       	push	r18
    28a2:	29 2f       	mov	r18, r25
    28a4:	2f 93       	push	r18
    28a6:	8f 93       	push	r24
    28a8:	8d e4       	ldi	r24, 0x4D	; 77
    28aa:	90 e2       	ldi	r25, 0x20	; 32
    28ac:	89 2f       	mov	r24, r25
    28ae:	8f 93       	push	r24
    28b0:	8d e4       	ldi	r24, 0x4D	; 77
    28b2:	90 e2       	ldi	r25, 0x20	; 32
    28b4:	8f 93       	push	r24
    28b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    28b8:	8f 93       	push	r24
    28ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    28bc:	8f 93       	push	r24
    28be:	0e 94 27 21 	call	0x424e	; 0x424e <sprintf>
    28c2:	8d b7       	in	r24, 0x3d	; 61
    28c4:	9e b7       	in	r25, 0x3e	; 62
    28c6:	0c 96       	adiw	r24, 0x0c	; 12
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	2b c0       	rjmp	.+86     	; 0x2924 <vTaskGetRunTimeStats+0x1d0>
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	82 95       	swap	r24
    28d6:	92 95       	swap	r25
    28d8:	90 7f       	andi	r25, 0xF0	; 240
    28da:	98 27       	eor	r25, r24
    28dc:	80 7f       	andi	r24, 0xF0	; 240
    28de:	98 27       	eor	r25, r24
    28e0:	2b 81       	ldd	r18, Y+3	; 0x03
    28e2:	3c 81       	ldd	r19, Y+4	; 0x04
    28e4:	82 0f       	add	r24, r18
    28e6:	93 1f       	adc	r25, r19
    28e8:	fc 01       	movw	r30, r24
    28ea:	80 85       	ldd	r24, Z+8	; 0x08
    28ec:	91 85       	ldd	r25, Z+9	; 0x09
    28ee:	a2 85       	ldd	r26, Z+10	; 0x0a
    28f0:	b3 85       	ldd	r27, Z+11	; 0x0b
    28f2:	2b 2f       	mov	r18, r27
    28f4:	2f 93       	push	r18
    28f6:	2a 2f       	mov	r18, r26
    28f8:	2f 93       	push	r18
    28fa:	29 2f       	mov	r18, r25
    28fc:	2f 93       	push	r18
    28fe:	8f 93       	push	r24
    2900:	8b e5       	ldi	r24, 0x5B	; 91
    2902:	90 e2       	ldi	r25, 0x20	; 32
    2904:	89 2f       	mov	r24, r25
    2906:	8f 93       	push	r24
    2908:	8b e5       	ldi	r24, 0x5B	; 91
    290a:	90 e2       	ldi	r25, 0x20	; 32
    290c:	8f 93       	push	r24
    290e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2910:	8f 93       	push	r24
    2912:	8d 85       	ldd	r24, Y+13	; 0x0d
    2914:	8f 93       	push	r24
    2916:	0e 94 27 21 	call	0x424e	; 0x424e <sprintf>
    291a:	8d b7       	in	r24, 0x3d	; 61
    291c:	9e b7       	in	r25, 0x3e	; 62
    291e:	08 96       	adiw	r24, 0x08	; 8
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	8d 85       	ldd	r24, Y+13	; 0x0d
    2926:	9e 85       	ldd	r25, Y+14	; 0x0e
    2928:	0e 94 48 20 	call	0x4090	; 0x4090 <strlen>
    292c:	9c 01       	movw	r18, r24
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	82 0f       	add	r24, r18
    2934:	93 1f       	adc	r25, r19
    2936:	8d 87       	std	Y+13, r24	; 0x0d
    2938:	9e 87       	std	Y+14, r25	; 0x0e
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	99 81       	ldd	r25, Y+1	; 0x01
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	98 17       	cp	r25, r24
    2946:	08 f4       	brcc	.+2      	; 0x294a <vTaskGetRunTimeStats+0x1f6>
    2948:	4f cf       	rjmp	.-354    	; 0x27e8 <vTaskGetRunTimeStats+0x94>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <vPortFree>
    2952:	00 00       	nop
    2954:	2e 96       	adiw	r28, 0x0e	; 14
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	08 95       	ret

00002960 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	27 97       	sbiw	r28, 0x07	; 7
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2974:	80 91 df 61 	lds	r24, 0x61DF	; 0x8061df <xTickCount>
    2978:	90 91 e0 61 	lds	r25, 0x61E0	; 0x8061e0 <xTickCount+0x1>
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	9a 83       	std	Y+2, r25	; 0x02
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2980:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    2984:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    2988:	02 96       	adiw	r24, 0x02	; 2
    298a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	71 f4       	brne	.+28     	; 0x29b2 <prvAddCurrentTaskToDelayedList+0x52>
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	88 23       	and	r24, r24
    299a:	59 f0       	breq	.+22     	; 0x29b2 <prvAddCurrentTaskToDelayedList+0x52>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    299c:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    29a0:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    29a4:	02 96       	adiw	r24, 0x02	; 2
    29a6:	bc 01       	movw	r22, r24
    29a8:	85 ed       	ldi	r24, 0xD5	; 213
    29aa:	91 e6       	ldi	r25, 0x61	; 97
    29ac:	0e 94 26 06 	call	0xc4c	; 0xc4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    29b0:	44 c0       	rjmp	.+136    	; 0x2a3a <prvAddCurrentTaskToDelayedList+0xda>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    29b2:	29 81       	ldd	r18, Y+1	; 0x01
    29b4:	3a 81       	ldd	r19, Y+2	; 0x02
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	8b 83       	std	Y+3, r24	; 0x03
    29c0:	9c 83       	std	Y+4, r25	; 0x04

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    29c2:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    29c6:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    29ca:	2b 81       	ldd	r18, Y+3	; 0x03
    29cc:	3c 81       	ldd	r19, Y+4	; 0x04
    29ce:	fc 01       	movw	r30, r24
    29d0:	22 83       	std	Z+2, r18	; 0x02
    29d2:	33 83       	std	Z+3, r19	; 0x03

			if( xTimeToWake < xConstTickCount )
    29d4:	2b 81       	ldd	r18, Y+3	; 0x03
    29d6:	3c 81       	ldd	r19, Y+4	; 0x04
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	28 17       	cp	r18, r24
    29de:	39 07       	cpc	r19, r25
    29e0:	78 f4       	brcc	.+30     	; 0x2a00 <prvAddCurrentTaskToDelayedList+0xa0>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    29e2:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    29e6:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    29ea:	9c 01       	movw	r18, r24
    29ec:	2e 5f       	subi	r18, 0xFE	; 254
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	80 91 c0 61 	lds	r24, 0x61C0	; 0x8061c0 <pxOverflowDelayedTaskList>
    29f4:	90 91 c1 61 	lds	r25, 0x61C1	; 0x8061c1 <pxOverflowDelayedTaskList+0x1>
    29f8:	b9 01       	movw	r22, r18
    29fa:	0e 94 71 06 	call	0xce2	; 0xce2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    29fe:	1d c0       	rjmp	.+58     	; 0x2a3a <prvAddCurrentTaskToDelayedList+0xda>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2a00:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <pxCurrentTCB>
    2a04:	90 91 87 61 	lds	r25, 0x6187	; 0x806187 <pxCurrentTCB+0x1>
    2a08:	9c 01       	movw	r18, r24
    2a0a:	2e 5f       	subi	r18, 0xFE	; 254
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	80 91 be 61 	lds	r24, 0x61BE	; 0x8061be <pxDelayedTaskList>
    2a12:	90 91 bf 61 	lds	r25, 0x61BF	; 0x8061bf <pxDelayedTaskList+0x1>
    2a16:	b9 01       	movw	r22, r18
    2a18:	0e 94 71 06 	call	0xce2	; 0xce2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2a1c:	80 91 e7 61 	lds	r24, 0x61E7	; 0x8061e7 <xNextTaskUnblockTime>
    2a20:	90 91 e8 61 	lds	r25, 0x61E8	; 0x8061e8 <xNextTaskUnblockTime+0x1>
    2a24:	2b 81       	ldd	r18, Y+3	; 0x03
    2a26:	3c 81       	ldd	r19, Y+4	; 0x04
    2a28:	28 17       	cp	r18, r24
    2a2a:	39 07       	cpc	r19, r25
    2a2c:	30 f4       	brcc	.+12     	; 0x2a3a <prvAddCurrentTaskToDelayedList+0xda>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	80 93 e7 61 	sts	0x61E7, r24	; 0x8061e7 <xNextTaskUnblockTime>
    2a36:	90 93 e8 61 	sts	0x61E8, r25	; 0x8061e8 <xNextTaskUnblockTime+0x1>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2a3a:	00 00       	nop
    2a3c:	27 96       	adiw	r28, 0x07	; 7
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	08 95       	ret

00002a48 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
	
}
    2a50:	00 00       	nop
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	6c 97       	sbiw	r28, 0x1c	; 28
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	de bf       	out	0x3e, r29	; 62
	taskDISABLE_INTERRUPTS();
    2a66:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    2a68:	88 e6       	ldi	r24, 0x68	; 104
    2a6a:	90 e2       	ldi	r25, 0x20	; 32
    2a6c:	0e 94 c4 01 	call	0x388	; 0x388 <DbgPrint>
	CFG_ERR_LED();
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	96 e0       	ldi	r25, 0x06	; 6
    2a74:	20 e8       	ldi	r18, 0x80	; 128
    2a76:	fc 01       	movw	r30, r24
    2a78:	21 83       	std	Z+1, r18	; 0x01
	while (1)
	{
		SET_ERR_LED();
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	96 e0       	ldi	r25, 0x06	; 6
    2a7e:	20 e8       	ldi	r18, 0x80	; 128
    2a80:	fc 01       	movw	r30, r24
    2a82:	25 83       	std	Z+5, r18	; 0x05
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	a8 ec       	ldi	r26, 0xC8	; 200
    2a8a:	b2 e4       	ldi	r27, 0x42	; 66
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	ab 83       	std	Y+3, r26	; 0x03
    2a92:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a ef       	ldi	r20, 0xFA	; 250
    2a9a:	55 e4       	ldi	r21, 0x45	; 69
    2a9c:	69 81       	ldd	r22, Y+1	; 0x01
    2a9e:	7a 81       	ldd	r23, Y+2	; 0x02
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	ad 8b       	std	Y+21, r26	; 0x15
    2ab2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e8       	ldi	r20, 0x80	; 128
    2aba:	5f e3       	ldi	r21, 0x3F	; 63
    2abc:	6b 89       	ldd	r22, Y+19	; 0x13
    2abe:	7c 89       	ldd	r23, Y+20	; 0x14
    2ac0:	8d 89       	ldd	r24, Y+21	; 0x15
    2ac2:	9e 89       	ldd	r25, Y+22	; 0x16
    2ac4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	2c f4       	brge	.+10     	; 0x2ad6 <vApplicationMallocFailedHook+0x7e>
		__ticks = 1;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	8f 8b       	std	Y+23, r24	; 0x17
    2ad2:	98 8f       	std	Y+24, r25	; 0x18
    2ad4:	3f c0       	rjmp	.+126    	; 0x2b54 <vApplicationMallocFailedHook+0xfc>
	else if (__tmp > 65535)
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	6b 89       	ldd	r22, Y+19	; 0x13
    2ae0:	7c 89       	ldd	r23, Y+20	; 0x14
    2ae2:	8d 89       	ldd	r24, Y+21	; 0x15
    2ae4:	9e 89       	ldd	r25, Y+22	; 0x16
    2ae6:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    2aea:	18 16       	cp	r1, r24
    2aec:	4c f5       	brge	.+82     	; 0x2b40 <vApplicationMallocFailedHook+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e2       	ldi	r20, 0x20	; 32
    2af4:	51 e4       	ldi	r21, 0x41	; 65
    2af6:	69 81       	ldd	r22, Y+1	; 0x01
    2af8:	7a 81       	ldd	r23, Y+2	; 0x02
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8f 8b       	std	Y+23, r24	; 0x17
    2b14:	98 8f       	std	Y+24, r25	; 0x18
    2b16:	0f c0       	rjmp	.+30     	; 0x2b36 <vApplicationMallocFailedHook+0xde>
    2b18:	80 e2       	ldi	r24, 0x20	; 32
    2b1a:	93 e0       	ldi	r25, 0x03	; 3
    2b1c:	89 8f       	std	Y+25, r24	; 0x19
    2b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b20:	89 8d       	ldd	r24, Y+25	; 0x19
    2b22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <vApplicationMallocFailedHook+0xcc>
    2b28:	89 8f       	std	Y+25, r24	; 0x19
    2b2a:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	8f 8b       	std	Y+23, r24	; 0x17
    2b34:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b36:	8f 89       	ldd	r24, Y+23	; 0x17
    2b38:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3a:	89 2b       	or	r24, r25
    2b3c:	69 f7       	brne	.-38     	; 0x2b18 <vApplicationMallocFailedHook+0xc0>
    2b3e:	14 c0       	rjmp	.+40     	; 0x2b68 <vApplicationMallocFailedHook+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b40:	6b 89       	ldd	r22, Y+19	; 0x13
    2b42:	7c 89       	ldd	r23, Y+20	; 0x14
    2b44:	8d 89       	ldd	r24, Y+21	; 0x15
    2b46:	9e 89       	ldd	r25, Y+22	; 0x16
    2b48:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8f 8b       	std	Y+23, r24	; 0x17
    2b52:	98 8f       	std	Y+24, r25	; 0x18
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	8b 8f       	std	Y+27, r24	; 0x1b
    2b5a:	9c 8f       	std	Y+28, r25	; 0x1c
    2b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <vApplicationMallocFailedHook+0x108>
    2b64:	8b 8f       	std	Y+27, r24	; 0x1b
    2b66:	9c 8f       	std	Y+28, r25	; 0x1c
		_delay_ms(100);
		CLR_ERR_LED();
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	20 e8       	ldi	r18, 0x80	; 128
    2b6e:	fc 01       	movw	r30, r24
    2b70:	26 83       	std	Z+6, r18	; 0x06
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a8 ec       	ldi	r26, 0xC8	; 200
    2b78:	b2 e4       	ldi	r27, 0x42	; 66
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	af 83       	std	Y+7, r26	; 0x07
    2b80:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a ef       	ldi	r20, 0xFA	; 250
    2b88:	55 e4       	ldi	r21, 0x45	; 69
    2b8a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b8c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	98 85       	ldd	r25, Y+8	; 0x08
    2b92:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	89 87       	std	Y+9, r24	; 0x09
    2b9c:	9a 87       	std	Y+10, r25	; 0x0a
    2b9e:	ab 87       	std	Y+11, r26	; 0x0b
    2ba0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	69 85       	ldd	r22, Y+9	; 0x09
    2bac:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bb2:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <vApplicationMallocFailedHook+0x16c>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	8d 87       	std	Y+13, r24	; 0x0d
    2bc0:	9e 87       	std	Y+14, r25	; 0x0e
    2bc2:	3f c0       	rjmp	.+126    	; 0x2c42 <vApplicationMallocFailedHook+0x1ea>
	else if (__tmp > 65535)
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	69 85       	ldd	r22, Y+9	; 0x09
    2bce:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bd4:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	4c f5       	brge	.+82     	; 0x2c2e <vApplicationMallocFailedHook+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	6d 81       	ldd	r22, Y+5	; 0x05
    2be6:	7e 81       	ldd	r23, Y+6	; 0x06
    2be8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bea:	98 85       	ldd	r25, Y+8	; 0x08
    2bec:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8d 87       	std	Y+13, r24	; 0x0d
    2c02:	9e 87       	std	Y+14, r25	; 0x0e
    2c04:	0f c0       	rjmp	.+30     	; 0x2c24 <vApplicationMallocFailedHook+0x1cc>
    2c06:	80 e2       	ldi	r24, 0x20	; 32
    2c08:	93 e0       	ldi	r25, 0x03	; 3
    2c0a:	8f 87       	std	Y+15, r24	; 0x0f
    2c0c:	98 8b       	std	Y+16, r25	; 0x10
    2c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c10:	98 89       	ldd	r25, Y+16	; 0x10
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <vApplicationMallocFailedHook+0x1ba>
    2c16:	8f 87       	std	Y+15, r24	; 0x0f
    2c18:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	8d 87       	std	Y+13, r24	; 0x0d
    2c22:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	89 2b       	or	r24, r25
    2c2a:	69 f7       	brne	.-38     	; 0x2c06 <vApplicationMallocFailedHook+0x1ae>
    2c2c:	14 c0       	rjmp	.+40     	; 0x2c56 <vApplicationMallocFailedHook+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2e:	69 85       	ldd	r22, Y+9	; 0x09
    2c30:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c36:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	8d 87       	std	Y+13, r24	; 0x0d
    2c40:	9e 87       	std	Y+14, r25	; 0x0e
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	89 8b       	std	Y+17, r24	; 0x11
    2c48:	9a 8b       	std	Y+18, r25	; 0x12
    2c4a:	89 89       	ldd	r24, Y+17	; 0x11
    2c4c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <vApplicationMallocFailedHook+0x1f6>
    2c52:	89 8b       	std	Y+17, r24	; 0x11
    2c54:	9a 8b       	std	Y+18, r25	; 0x12
		_delay_ms(100);
	}
    2c56:	11 cf       	rjmp	.-478    	; 0x2a7a <vApplicationMallocFailedHook+0x22>

00002c58 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	c0 5a       	subi	r28, 0xA0	; 160
    2c62:	d1 09       	sbc	r29, r1
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	9e 01       	movw	r18, r28
    2c6a:	23 56       	subi	r18, 0x63	; 99
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	f9 01       	movw	r30, r18
    2c70:	80 83       	st	Z, r24
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	ce 01       	movw	r24, r28
    2c76:	81 56       	subi	r24, 0x61	; 97
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	60 83       	st	Z, r22
    2c7e:	71 83       	std	Z+1, r23	; 0x01
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    2c80:	f8 94       	cli
	CFG_ERR_LED();
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	96 e0       	ldi	r25, 0x06	; 6
    2c86:	20 e8       	ldi	r18, 0x80	; 128
    2c88:	fc 01       	movw	r30, r24
    2c8a:	21 83       	std	Z+1, r18	; 0x01
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	81 56       	subi	r24, 0x61	; 97
    2c90:	9f 4f       	sbci	r25, 0xFF	; 255
    2c92:	fc 01       	movw	r30, r24
    2c94:	21 81       	ldd	r18, Z+1	; 0x01
    2c96:	2f 93       	push	r18
    2c98:	fc 01       	movw	r30, r24
    2c9a:	80 81       	ld	r24, Z
    2c9c:	8f 93       	push	r24
    2c9e:	8a e8       	ldi	r24, 0x8A	; 138
    2ca0:	90 e2       	ldi	r25, 0x20	; 32
    2ca2:	89 2f       	mov	r24, r25
    2ca4:	8f 93       	push	r24
    2ca6:	8a e8       	ldi	r24, 0x8A	; 138
    2ca8:	90 e2       	ldi	r25, 0x20	; 32
    2caa:	8f 93       	push	r24
    2cac:	1f 92       	push	r1
    2cae:	80 e8       	ldi	r24, 0x80	; 128
    2cb0:	8f 93       	push	r24
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	4d 96       	adiw	r24, 0x1d	; 29
    2cb6:	29 2f       	mov	r18, r25
    2cb8:	2f 93       	push	r18
    2cba:	8f 93       	push	r24
    2cbc:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <snprintf>
    2cc0:	8d b7       	in	r24, 0x3d	; 61
    2cc2:	9e b7       	in	r25, 0x3e	; 62
    2cc4:	08 96       	adiw	r24, 0x08	; 8
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	de bf       	out	0x3e, r29	; 62
	DbgPrint(Dbg);
    2cca:	ce 01       	movw	r24, r28
    2ccc:	4d 96       	adiw	r24, 0x1d	; 29
    2cce:	0e 94 c4 01 	call	0x388	; 0x388 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	96 e0       	ldi	r25, 0x06	; 6
    2cd6:	20 e8       	ldi	r18, 0x80	; 128
    2cd8:	fc 01       	movw	r30, r24
    2cda:	25 83       	std	Z+5, r18	; 0x05
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	aa ef       	ldi	r26, 0xFA	; 250
    2ce2:	b3 e4       	ldi	r27, 0x43	; 67
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	ab 83       	std	Y+3, r26	; 0x03
    2cea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	55 e4       	ldi	r21, 0x45	; 69
    2cf4:	69 81       	ldd	r22, Y+1	; 0x01
    2cf6:	7a 81       	ldd	r23, Y+2	; 0x02
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfc:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8b 8b       	std	Y+19, r24	; 0x13
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	ad 8b       	std	Y+21, r26	; 0x15
    2d0a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	6b 89       	ldd	r22, Y+19	; 0x13
    2d16:	7c 89       	ldd	r23, Y+20	; 0x14
    2d18:	8d 89       	ldd	r24, Y+21	; 0x15
    2d1a:	9e 89       	ldd	r25, Y+22	; 0x16
    2d1c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <vApplicationStackOverflowHook+0xd6>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	8f 8b       	std	Y+23, r24	; 0x17
    2d2a:	98 8f       	std	Y+24, r25	; 0x18
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <vApplicationStackOverflowHook+0x154>
	else if (__tmp > 65535)
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	6b 89       	ldd	r22, Y+19	; 0x13
    2d38:	7c 89       	ldd	r23, Y+20	; 0x14
    2d3a:	8d 89       	ldd	r24, Y+21	; 0x15
    2d3c:	9e 89       	ldd	r25, Y+22	; 0x16
    2d3e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <vApplicationStackOverflowHook+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	69 81       	ldd	r22, Y+1	; 0x01
    2d50:	7a 81       	ldd	r23, Y+2	; 0x02
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	8f 8b       	std	Y+23, r24	; 0x17
    2d6c:	98 8f       	std	Y+24, r25	; 0x18
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <vApplicationStackOverflowHook+0x136>
    2d70:	80 e2       	ldi	r24, 0x20	; 32
    2d72:	93 e0       	ldi	r25, 0x03	; 3
    2d74:	89 8f       	std	Y+25, r24	; 0x19
    2d76:	9a 8f       	std	Y+26, r25	; 0x1a
    2d78:	89 8d       	ldd	r24, Y+25	; 0x19
    2d7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <vApplicationStackOverflowHook+0x124>
    2d80:	89 8f       	std	Y+25, r24	; 0x19
    2d82:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8f 89       	ldd	r24, Y+23	; 0x17
    2d86:	98 8d       	ldd	r25, Y+24	; 0x18
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	8f 8b       	std	Y+23, r24	; 0x17
    2d8c:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	98 8d       	ldd	r25, Y+24	; 0x18
    2d92:	89 2b       	or	r24, r25
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <vApplicationStackOverflowHook+0x118>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <vApplicationStackOverflowHook+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6b 89       	ldd	r22, Y+19	; 0x13
    2d9a:	7c 89       	ldd	r23, Y+20	; 0x14
    2d9c:	8d 89       	ldd	r24, Y+21	; 0x15
    2d9e:	9e 89       	ldd	r25, Y+22	; 0x16
    2da0:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	8f 8b       	std	Y+23, r24	; 0x17
    2daa:	98 8f       	std	Y+24, r25	; 0x18
    2dac:	8f 89       	ldd	r24, Y+23	; 0x17
    2dae:	98 8d       	ldd	r25, Y+24	; 0x18
    2db0:	8b 8f       	std	Y+27, r24	; 0x1b
    2db2:	9c 8f       	std	Y+28, r25	; 0x1c
    2db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <vApplicationStackOverflowHook+0x160>
    2dbc:	8b 8f       	std	Y+27, r24	; 0x1b
    2dbe:	9c 8f       	std	Y+28, r25	; 0x1c
		_delay_ms(500);
		CLR_ERR_LED();
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	96 e0       	ldi	r25, 0x06	; 6
    2dc4:	20 e8       	ldi	r18, 0x80	; 128
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	26 83       	std	Z+6, r18	; 0x06
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	aa ef       	ldi	r26, 0xFA	; 250
    2dd0:	b3 e4       	ldi	r27, 0x43	; 67
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	af 83       	std	Y+7, r26	; 0x07
    2dd8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4a ef       	ldi	r20, 0xFA	; 250
    2de0:	55 e4       	ldi	r21, 0x45	; 69
    2de2:	6d 81       	ldd	r22, Y+5	; 0x05
    2de4:	7e 81       	ldd	r23, Y+6	; 0x06
    2de6:	8f 81       	ldd	r24, Y+7	; 0x07
    2de8:	98 85       	ldd	r25, Y+8	; 0x08
    2dea:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	89 87       	std	Y+9, r24	; 0x09
    2df4:	9a 87       	std	Y+10, r25	; 0x0a
    2df6:	ab 87       	std	Y+11, r26	; 0x0b
    2df8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	69 85       	ldd	r22, Y+9	; 0x09
    2e04:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e06:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e08:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e0a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <vApplicationStackOverflowHook+0x1c4>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	8d 87       	std	Y+13, r24	; 0x0d
    2e18:	9e 87       	std	Y+14, r25	; 0x0e
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <vApplicationStackOverflowHook+0x242>
	else if (__tmp > 65535)
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	69 85       	ldd	r22, Y+9	; 0x09
    2e26:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e2c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <vApplicationStackOverflowHook+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e2       	ldi	r20, 0x20	; 32
    2e3a:	51 e4       	ldi	r21, 0x41	; 65
    2e3c:	6d 81       	ldd	r22, Y+5	; 0x05
    2e3e:	7e 81       	ldd	r23, Y+6	; 0x06
    2e40:	8f 81       	ldd	r24, Y+7	; 0x07
    2e42:	98 85       	ldd	r25, Y+8	; 0x08
    2e44:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8d 87       	std	Y+13, r24	; 0x0d
    2e5a:	9e 87       	std	Y+14, r25	; 0x0e
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <vApplicationStackOverflowHook+0x224>
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	93 e0       	ldi	r25, 0x03	; 3
    2e62:	8f 87       	std	Y+15, r24	; 0x0f
    2e64:	98 8b       	std	Y+16, r25	; 0x10
    2e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e68:	98 89       	ldd	r25, Y+16	; 0x10
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <vApplicationStackOverflowHook+0x212>
    2e6e:	8f 87       	std	Y+15, r24	; 0x0f
    2e70:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	8d 87       	std	Y+13, r24	; 0x0d
    2e7a:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	89 2b       	or	r24, r25
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <vApplicationStackOverflowHook+0x206>
    2e84:	14 c0       	rjmp	.+40     	; 0x2eae <vApplicationStackOverflowHook+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	69 85       	ldd	r22, Y+9	; 0x09
    2e88:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e8e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	8d 87       	std	Y+13, r24	; 0x0d
    2e98:	9e 87       	std	Y+14, r25	; 0x0e
    2e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9e:	89 8b       	std	Y+17, r24	; 0x11
    2ea0:	9a 8b       	std	Y+18, r25	; 0x12
    2ea2:	89 89       	ldd	r24, Y+17	; 0x11
    2ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <vApplicationStackOverflowHook+0x24e>
    2eaa:	89 8b       	std	Y+17, r24	; 0x11
    2eac:	9a 8b       	std	Y+18, r25	; 0x12
		_delay_ms(500);
	}
    2eae:	11 cf       	rjmp	.-478    	; 0x2cd2 <vApplicationStackOverflowHook+0x7a>

00002eb0 <vAssertCalled>:
}

void vAssertCalled( char *File, int Line)
{
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	c0 5a       	subi	r28, 0xA0	; 160
    2eba:	d1 09       	sbc	r29, r1
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	9e 01       	movw	r18, r28
    2ec2:	23 56       	subi	r18, 0x63	; 99
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	f9 01       	movw	r30, r18
    2ec8:	80 83       	st	Z, r24
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	ce 01       	movw	r24, r28
    2ece:	81 56       	subi	r24, 0x61	; 97
    2ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	60 83       	st	Z, r22
    2ed6:	71 83       	std	Z+1, r23	; 0x01
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    2ed8:	f8 94       	cli
	CFG_ERR_LED();
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	96 e0       	ldi	r25, 0x06	; 6
    2ede:	20 e8       	ldi	r18, 0x80	; 128
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	21 83       	std	Z+1, r18	; 0x01
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	81 56       	subi	r24, 0x61	; 97
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	fc 01       	movw	r30, r24
    2eec:	21 81       	ldd	r18, Z+1	; 0x01
    2eee:	2f 93       	push	r18
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	80 81       	ld	r24, Z
    2ef4:	8f 93       	push	r24
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	83 56       	subi	r24, 0x63	; 99
    2efa:	9f 4f       	sbci	r25, 0xFF	; 255
    2efc:	fc 01       	movw	r30, r24
    2efe:	21 81       	ldd	r18, Z+1	; 0x01
    2f00:	2f 93       	push	r18
    2f02:	fc 01       	movw	r30, r24
    2f04:	80 81       	ld	r24, Z
    2f06:	8f 93       	push	r24
    2f08:	86 ea       	ldi	r24, 0xA6	; 166
    2f0a:	90 e2       	ldi	r25, 0x20	; 32
    2f0c:	89 2f       	mov	r24, r25
    2f0e:	8f 93       	push	r24
    2f10:	86 ea       	ldi	r24, 0xA6	; 166
    2f12:	90 e2       	ldi	r25, 0x20	; 32
    2f14:	8f 93       	push	r24
    2f16:	1f 92       	push	r1
    2f18:	80 e8       	ldi	r24, 0x80	; 128
    2f1a:	8f 93       	push	r24
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	4d 96       	adiw	r24, 0x1d	; 29
    2f20:	29 2f       	mov	r18, r25
    2f22:	2f 93       	push	r18
    2f24:	8f 93       	push	r24
    2f26:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <snprintf>
    2f2a:	8d b7       	in	r24, 0x3d	; 61
    2f2c:	9e b7       	in	r25, 0x3e	; 62
    2f2e:	0a 96       	adiw	r24, 0x0a	; 10
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	de bf       	out	0x3e, r29	; 62
	DbgPrint(Dbg);
    2f34:	ce 01       	movw	r24, r28
    2f36:	4d 96       	adiw	r24, 0x1d	; 29
    2f38:	0e 94 c4 01 	call	0x388	; 0x388 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	96 e0       	ldi	r25, 0x06	; 6
    2f40:	20 e8       	ldi	r18, 0x80	; 128
    2f42:	fc 01       	movw	r30, r24
    2f44:	25 83       	std	Z+5, r18	; 0x05
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a8 ec       	ldi	r26, 0xC8	; 200
    2f4c:	b2 e4       	ldi	r27, 0x42	; 66
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	9a 83       	std	Y+2, r25	; 0x02
    2f52:	ab 83       	std	Y+3, r26	; 0x03
    2f54:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4a ef       	ldi	r20, 0xFA	; 250
    2f5c:	55 e4       	ldi	r21, 0x45	; 69
    2f5e:	69 81       	ldd	r22, Y+1	; 0x01
    2f60:	7a 81       	ldd	r23, Y+2	; 0x02
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8b 8b       	std	Y+19, r24	; 0x13
    2f70:	9c 8b       	std	Y+20, r25	; 0x14
    2f72:	ad 8b       	std	Y+21, r26	; 0x15
    2f74:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	6b 89       	ldd	r22, Y+19	; 0x13
    2f80:	7c 89       	ldd	r23, Y+20	; 0x14
    2f82:	8d 89       	ldd	r24, Y+21	; 0x15
    2f84:	9e 89       	ldd	r25, Y+22	; 0x16
    2f86:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <vAssertCalled+0xe8>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	8f 8b       	std	Y+23, r24	; 0x17
    2f94:	98 8f       	std	Y+24, r25	; 0x18
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <vAssertCalled+0x166>
	else if (__tmp > 65535)
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	3f ef       	ldi	r19, 0xFF	; 255
    2f9c:	4f e7       	ldi	r20, 0x7F	; 127
    2f9e:	57 e4       	ldi	r21, 0x47	; 71
    2fa0:	6b 89       	ldd	r22, Y+19	; 0x13
    2fa2:	7c 89       	ldd	r23, Y+20	; 0x14
    2fa4:	8d 89       	ldd	r24, Y+21	; 0x15
    2fa6:	9e 89       	ldd	r25, Y+22	; 0x16
    2fa8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <vAssertCalled+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	69 81       	ldd	r22, Y+1	; 0x01
    2fba:	7a 81       	ldd	r23, Y+2	; 0x02
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc0:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8f 8b       	std	Y+23, r24	; 0x17
    2fd6:	98 8f       	std	Y+24, r25	; 0x18
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <vAssertCalled+0x148>
    2fda:	80 e2       	ldi	r24, 0x20	; 32
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
    2fde:	89 8f       	std	Y+25, r24	; 0x19
    2fe0:	9a 8f       	std	Y+26, r25	; 0x1a
    2fe2:	89 8d       	ldd	r24, Y+25	; 0x19
    2fe4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <vAssertCalled+0x136>
    2fea:	89 8f       	std	Y+25, r24	; 0x19
    2fec:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	8f 8b       	std	Y+23, r24	; 0x17
    2ff6:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	89 2b       	or	r24, r25
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <vAssertCalled+0x12a>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <vAssertCalled+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6b 89       	ldd	r22, Y+19	; 0x13
    3004:	7c 89       	ldd	r23, Y+20	; 0x14
    3006:	8d 89       	ldd	r24, Y+21	; 0x15
    3008:	9e 89       	ldd	r25, Y+22	; 0x16
    300a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8f 8b       	std	Y+23, r24	; 0x17
    3014:	98 8f       	std	Y+24, r25	; 0x18
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	8b 8f       	std	Y+27, r24	; 0x1b
    301c:	9c 8f       	std	Y+28, r25	; 0x1c
    301e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <vAssertCalled+0x172>
    3026:	8b 8f       	std	Y+27, r24	; 0x1b
    3028:	9c 8f       	std	Y+28, r25	; 0x1c
		_delay_ms(100);
		CLR_ERR_LED();
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	96 e0       	ldi	r25, 0x06	; 6
    302e:	20 e8       	ldi	r18, 0x80	; 128
    3030:	fc 01       	movw	r30, r24
    3032:	26 83       	std	Z+6, r18	; 0x06
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	aa ef       	ldi	r26, 0xFA	; 250
    303a:	b3 e4       	ldi	r27, 0x43	; 67
    303c:	8d 83       	std	Y+5, r24	; 0x05
    303e:	9e 83       	std	Y+6, r25	; 0x06
    3040:	af 83       	std	Y+7, r26	; 0x07
    3042:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a ef       	ldi	r20, 0xFA	; 250
    304a:	55 e4       	ldi	r21, 0x45	; 69
    304c:	6d 81       	ldd	r22, Y+5	; 0x05
    304e:	7e 81       	ldd	r23, Y+6	; 0x06
    3050:	8f 81       	ldd	r24, Y+7	; 0x07
    3052:	98 85       	ldd	r25, Y+8	; 0x08
    3054:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	89 87       	std	Y+9, r24	; 0x09
    305e:	9a 87       	std	Y+10, r25	; 0x0a
    3060:	ab 87       	std	Y+11, r26	; 0x0b
    3062:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	69 85       	ldd	r22, Y+9	; 0x09
    306e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3070:	8b 85       	ldd	r24, Y+11	; 0x0b
    3072:	9c 85       	ldd	r25, Y+12	; 0x0c
    3074:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <vAssertCalled+0x1d6>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	8d 87       	std	Y+13, r24	; 0x0d
    3082:	9e 87       	std	Y+14, r25	; 0x0e
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <vAssertCalled+0x254>
	else if (__tmp > 65535)
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	69 85       	ldd	r22, Y+9	; 0x09
    3090:	7a 85       	ldd	r23, Y+10	; 0x0a
    3092:	8b 85       	ldd	r24, Y+11	; 0x0b
    3094:	9c 85       	ldd	r25, Y+12	; 0x0c
    3096:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <vAssertCalled+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	6d 81       	ldd	r22, Y+5	; 0x05
    30a8:	7e 81       	ldd	r23, Y+6	; 0x06
    30aa:	8f 81       	ldd	r24, Y+7	; 0x07
    30ac:	98 85       	ldd	r25, Y+8	; 0x08
    30ae:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8d 87       	std	Y+13, r24	; 0x0d
    30c4:	9e 87       	std	Y+14, r25	; 0x0e
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <vAssertCalled+0x236>
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	8f 87       	std	Y+15, r24	; 0x0f
    30ce:	98 8b       	std	Y+16, r25	; 0x10
    30d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d2:	98 89       	ldd	r25, Y+16	; 0x10
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <vAssertCalled+0x224>
    30d8:	8f 87       	std	Y+15, r24	; 0x0f
    30da:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30de:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	8d 87       	std	Y+13, r24	; 0x0d
    30e4:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ea:	89 2b       	or	r24, r25
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <vAssertCalled+0x218>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <vAssertCalled+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	69 85       	ldd	r22, Y+9	; 0x09
    30f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    30f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    30f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    30f8:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	8d 87       	std	Y+13, r24	; 0x0d
    3102:	9e 87       	std	Y+14, r25	; 0x0e
    3104:	8d 85       	ldd	r24, Y+13	; 0x0d
    3106:	9e 85       	ldd	r25, Y+14	; 0x0e
    3108:	89 8b       	std	Y+17, r24	; 0x11
    310a:	9a 8b       	std	Y+18, r25	; 0x12
    310c:	89 89       	ldd	r24, Y+17	; 0x11
    310e:	9a 89       	ldd	r25, Y+18	; 0x12
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <vAssertCalled+0x260>
    3114:	89 8b       	std	Y+17, r24	; 0x11
    3116:	9a 8b       	std	Y+18, r25	; 0x12
		_delay_ms(500);
	}
    3118:	11 cf       	rjmp	.-478    	; 0x2f3c <vAssertCalled+0x8c>

0000311a <main>:
#include <util/delay.h>

#include <stdio.h>

int main(void)
{
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	2e 97       	sbiw	r28, 0x0e	; 14
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	de bf       	out	0x3e, r29	; 62
	DriverSysClkXtalInit();	//Clock init
    3128:	0e 94 57 02 	call	0x4ae	; 0x4ae <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    312c:	0e 94 ca 03 	call	0x794	; 0x794 <DriverUSARTInit>
	DriverTWIMInit();		//Initialize TWI in master mode
    3130:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DriverTWIMInit>
	DriverCursorstickInit();//Initialize cursor stick
    3134:	0e 94 bc 01 	call	0x378	; 0x378 <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    3138:	0e 94 16 02 	call	0x42c	; 0x42c <DriverLedInit>
	DriverPowerInit();		//Initialize aux power driver
    313c:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <DriverPowerInit>
	DriverAdcInit();		//Initialize ADC driver
    3140:	0e 94 b4 01 	call	0x368	; 0x368 <DriverAdcInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	0e 94 82 1b 	call	0x3704	; 0x3704 <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    314a:	80 ea       	ldi	r24, 0xA0	; 160
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	27 e0       	ldi	r18, 0x07	; 7
    3150:	fc 01       	movw	r30, r24
    3152:	22 83       	std	Z+2, r18	; 0x02
	sei();
    3154:	78 94       	sei
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a0 e2       	ldi	r26, 0x20	; 32
    315c:	b1 e4       	ldi	r27, 0x41	; 65
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	9a 83       	std	Y+2, r25	; 0x02
    3162:	ab 83       	std	Y+3, r26	; 0x03
    3164:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	4a ef       	ldi	r20, 0xFA	; 250
    316c:	55 e4       	ldi	r21, 0x45	; 69
    316e:	69 81       	ldd	r22, Y+1	; 0x01
    3170:	7a 81       	ldd	r23, Y+2	; 0x02
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	8d 83       	std	Y+5, r24	; 0x05
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	af 83       	std	Y+7, r26	; 0x07
    3184:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e8       	ldi	r20, 0x80	; 128
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	6d 81       	ldd	r22, Y+5	; 0x05
    3190:	7e 81       	ldd	r23, Y+6	; 0x06
    3192:	8f 81       	ldd	r24, Y+7	; 0x07
    3194:	98 85       	ldd	r25, Y+8	; 0x08
    3196:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__cmpsf2>
    319a:	88 23       	and	r24, r24
    319c:	2c f4       	brge	.+10     	; 0x31a8 <main+0x8e>
		__ticks = 1;
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	89 87       	std	Y+9, r24	; 0x09
    31a4:	9a 87       	std	Y+10, r25	; 0x0a
    31a6:	3f c0       	rjmp	.+126    	; 0x3226 <main+0x10c>
	else if (__tmp > 65535)
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	3f ef       	ldi	r19, 0xFF	; 255
    31ac:	4f e7       	ldi	r20, 0x7F	; 127
    31ae:	57 e4       	ldi	r21, 0x47	; 71
    31b0:	6d 81       	ldd	r22, Y+5	; 0x05
    31b2:	7e 81       	ldd	r23, Y+6	; 0x06
    31b4:	8f 81       	ldd	r24, Y+7	; 0x07
    31b6:	98 85       	ldd	r25, Y+8	; 0x08
    31b8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__gesf2>
    31bc:	18 16       	cp	r1, r24
    31be:	4c f5       	brge	.+82     	; 0x3212 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e2       	ldi	r20, 0x20	; 32
    31c6:	51 e4       	ldi	r21, 0x41	; 65
    31c8:	69 81       	ldd	r22, Y+1	; 0x01
    31ca:	7a 81       	ldd	r23, Y+2	; 0x02
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	bc 01       	movw	r22, r24
    31da:	cd 01       	movw	r24, r26
    31dc:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	89 87       	std	Y+9, r24	; 0x09
    31e6:	9a 87       	std	Y+10, r25	; 0x0a
    31e8:	0f c0       	rjmp	.+30     	; 0x3208 <main+0xee>
    31ea:	80 e2       	ldi	r24, 0x20	; 32
    31ec:	93 e0       	ldi	r25, 0x03	; 3
    31ee:	8b 87       	std	Y+11, r24	; 0x0b
    31f0:	9c 87       	std	Y+12, r25	; 0x0c
    31f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    31f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <main+0xdc>
    31fa:	8b 87       	std	Y+11, r24	; 0x0b
    31fc:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	89 87       	std	Y+9, r24	; 0x09
    3206:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3208:	89 85       	ldd	r24, Y+9	; 0x09
    320a:	9a 85       	ldd	r25, Y+10	; 0x0a
    320c:	89 2b       	or	r24, r25
    320e:	69 f7       	brne	.-38     	; 0x31ea <main+0xd0>
    3210:	14 c0       	rjmp	.+40     	; 0x323a <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3212:	6d 81       	ldd	r22, Y+5	; 0x05
    3214:	7e 81       	ldd	r23, Y+6	; 0x06
    3216:	8f 81       	ldd	r24, Y+7	; 0x07
    3218:	98 85       	ldd	r25, Y+8	; 0x08
    321a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	89 87       	std	Y+9, r24	; 0x09
    3224:	9a 87       	std	Y+10, r25	; 0x0a
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	8d 87       	std	Y+13, r24	; 0x0d
    322c:	9e 87       	std	Y+14, r25	; 0x0e
    322e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3230:	9e 85       	ldd	r25, Y+14	; 0x0e
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <main+0x118>
    3236:	8d 87       	std	Y+13, r24	; 0x0d
    3238:	9e 87       	std	Y+14, r25	; 0x0e

	_delay_ms(10);

	//Init tasks
	InitLooplichtTask(); // Looplicht task oproepen
    323a:	0e 94 2d 19 	call	0x325a	; 0x325a <InitLooplichtTask>
	InitTerminalTask(); // Terminal task oproepen
    323e:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <InitTerminalTask>
	InitRecursieTask(); // Recursie task oproepen
    3242:	0e 94 89 19 	call	0x3312	; 0x3312 <InitRecursieTask>
	vTaskStartScheduler();	//Start scheduler loop
    3246:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <vTaskStartScheduler>

	return 0;
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
}
    324e:	2e 96       	adiw	r28, 0x0e	; 14
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	08 95       	ret

0000325a <InitLooplichtTask>:
//Private function prototypes
static void WorkerLooplicht(void *pvParameters);

//Function definitions
void InitLooplichtTask()
{
    325a:	ef 92       	push	r14
    325c:	ff 92       	push	r15
    325e:	0f 93       	push	r16
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate( WorkerLooplicht, "looplicht", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL );	
    3268:	e1 2c       	mov	r14, r1
    326a:	f1 2c       	mov	r15, r1
    326c:	02 e0       	ldi	r16, 0x02	; 2
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	51 e0       	ldi	r21, 0x01	; 1
    3276:	66 ec       	ldi	r22, 0xC6	; 198
    3278:	70 e2       	ldi	r23, 0x20	; 32
    327a:	88 e4       	ldi	r24, 0x48	; 72
    327c:	99 e1       	ldi	r25, 0x19	; 25
    327e:	0e 94 27 0a 	call	0x144e	; 0x144e <xTaskCreate>
}
    3282:	00 00       	nop
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	0f 91       	pop	r16
    328a:	ff 90       	pop	r15
    328c:	ef 90       	pop	r14
    328e:	08 95       	ret

00003290 <WorkerLooplicht>:

static void WorkerLooplicht(void *pvParameters)
{
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	1f 92       	push	r1
    3296:	1f 92       	push	r1
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	9a 83       	std	Y+2, r25	; 0x02
	while (1)
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
    32a0:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <xTimeIncrement>
    32a4:	90 91 24 20 	lds	r25, 0x2024	; 0x802024 <xTimeIncrement+0x1>
    32a8:	bc 01       	movw	r22, r24
    32aa:	88 ef       	ldi	r24, 0xF8	; 248
    32ac:	93 e6       	ldi	r25, 0x63	; 99
    32ae:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskDelayUntil>
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
    32b2:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LedData>
    32b6:	0e 94 3c 02 	call	0x478	; 0x478 <DriverLedWrite>
		if (RichtingInt == 1) {
    32ba:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <RichtingInt>
    32be:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <RichtingInt+0x1>
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	71 f4       	brne	.+28     	; 0x32e2 <WorkerLooplicht+0x52>
			if (LedData == 0b1000) {
    32c6:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LedData>
    32ca:	88 30       	cpi	r24, 0x08	; 8
    32cc:	21 f4       	brne	.+8      	; 0x32d6 <WorkerLooplicht+0x46>
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <LedData>
    32d4:	e5 cf       	rjmp	.-54     	; 0x32a0 <WorkerLooplicht+0x10>
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
    32d6:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LedData>
    32da:	88 0f       	add	r24, r24
    32dc:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <LedData>
    32e0:	df cf       	rjmp	.-66     	; 0x32a0 <WorkerLooplicht+0x10>
			}
		} else if (RichtingInt == 2){
    32e2:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <RichtingInt>
    32e6:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <RichtingInt+0x1>
    32ea:	02 97       	sbiw	r24, 0x02	; 2
    32ec:	71 f4       	brne	.+28     	; 0x330a <WorkerLooplicht+0x7a>
			if (LedData == 0b0001) {
    32ee:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LedData>
    32f2:	81 30       	cpi	r24, 0x01	; 1
    32f4:	21 f4       	brne	.+8      	; 0x32fe <WorkerLooplicht+0x6e>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    32f6:	88 e0       	ldi	r24, 0x08	; 8
    32f8:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <LedData>
    32fc:	d1 cf       	rjmp	.-94     	; 0x32a0 <WorkerLooplicht+0x10>
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
    32fe:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LedData>
    3302:	86 95       	lsr	r24
    3304:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <LedData>
    3308:	cb cf       	rjmp	.-106    	; 0x32a0 <WorkerLooplicht+0x10>
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    330a:	8f e0       	ldi	r24, 0x0F	; 15
    330c:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <LedData>
		}
	}
    3310:	c7 cf       	rjmp	.-114    	; 0x32a0 <WorkerLooplicht+0x10>

00003312 <InitRecursieTask>:
//Private function prototypes
static void WorkerRecursie(void *pvParameters);

//Function definitions
void InitRecursieTask()
{
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate( WorkerRecursie, "recursie", configMINIMAL_STACK_SIZE+512, NULL, tskIDLE_PRIORITY+2, NULL );	
    3320:	e1 2c       	mov	r14, r1
    3322:	f1 2c       	mov	r15, r1
    3324:	02 e0       	ldi	r16, 0x02	; 2
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	53 e0       	ldi	r21, 0x03	; 3
    332e:	60 ed       	ldi	r22, 0xD0	; 208
    3330:	70 e2       	ldi	r23, 0x20	; 32
    3332:	84 ea       	ldi	r24, 0xA4	; 164
    3334:	99 e1       	ldi	r25, 0x19	; 25
    3336:	0e 94 27 0a 	call	0x144e	; 0x144e <xTaskCreate>
}
    333a:	00 00       	nop
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	0f 91       	pop	r16
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	08 95       	ret

00003348 <WorkerRecursie>:

static void WorkerRecursie(void *pvParameters)
{
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	66 97       	sbiw	r28, 0x16	; 22
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	8d 8b       	std	Y+21, r24	; 0x15
    3358:	9e 8b       	std	Y+22, r25	; 0x16
	int LocaleVariabele;
	TaskStatus_t pxTaskStatus;
	TaskHandle_t xTask;
	while (1)
	{	
		LocaleVariabele = 1;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	8b 83       	std	Y+3, r24	; 0x03
    3360:	9c 83       	std	Y+4, r25	; 0x04
		xTask = xTaskGetCurrentTaskHandle(); // Pointer naar begin TCB
    3362:	0e 94 59 13 	call	0x26b2	; 0x26b2 <xTaskGetCurrentTaskHandle>
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	9a 83       	std	Y+2, r25	; 0x02
		vTaskGetTaskInfo(xTask, &pxTaskStatus, pdTRUE, eInvalid);
    336a:	be 01       	movw	r22, r28
    336c:	6b 5f       	subi	r22, 0xFB	; 251
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	25 e0       	ldi	r18, 0x05	; 5
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	0e 94 9a 11 	call	0x2334	; 0x2334 <vTaskGetInfo>
		printf("Hoeveelheid vrije heap: %d pointer variabele: %d pointer TCB: %d \r", pxTaskStatus.usStackHighWaterMark, &LocaleVariabele, xTask);
    337c:	8b 89       	ldd	r24, Y+19	; 0x13
    337e:	9c 89       	ldd	r25, Y+20	; 0x14
    3380:	2a 81       	ldd	r18, Y+2	; 0x02
    3382:	2f 93       	push	r18
    3384:	29 81       	ldd	r18, Y+1	; 0x01
    3386:	2f 93       	push	r18
    3388:	9e 01       	movw	r18, r28
    338a:	2d 5f       	subi	r18, 0xFD	; 253
    338c:	3f 4f       	sbci	r19, 0xFF	; 255
    338e:	43 2f       	mov	r20, r19
    3390:	4f 93       	push	r20
    3392:	2f 93       	push	r18
    3394:	29 2f       	mov	r18, r25
    3396:	2f 93       	push	r18
    3398:	8f 93       	push	r24
    339a:	89 ed       	ldi	r24, 0xD9	; 217
    339c:	90 e2       	ldi	r25, 0x20	; 32
    339e:	89 2f       	mov	r24, r25
    33a0:	8f 93       	push	r24
    33a2:	89 ed       	ldi	r24, 0xD9	; 217
    33a4:	90 e2       	ldi	r25, 0x20	; 32
    33a6:	8f 93       	push	r24
    33a8:	0e 94 98 20 	call	0x4130	; 0x4130 <printf>
    33ac:	8d b7       	in	r24, 0x3d	; 61
    33ae:	9e b7       	in	r25, 0x3e	; 62
    33b0:	08 96       	adiw	r24, 0x08	; 8
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	de bf       	out	0x3e, r29	; 62
		WorkerRecursie(pvParameters); // Functie terug oproepen om erin te blijven
    33b6:	8d 89       	ldd	r24, Y+21	; 0x15
    33b8:	9e 89       	ldd	r25, Y+22	; 0x16
    33ba:	0e 94 a4 19 	call	0x3348	; 0x3348 <WorkerRecursie>
	}
    33be:	cd cf       	rjmp	.-102    	; 0x335a <WorkerRecursie+0x12>

000033c0 <InitTerminalTask>:
//Private function prototypes
static void WorkerTerminal(void *pvParameters);

//Function definitions
void InitTerminalTask()
{
    33c0:	ef 92       	push	r14
    33c2:	ff 92       	push	r15
    33c4:	0f 93       	push	r16
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate( WorkerTerminal, "terminal", configMINIMAL_STACK_SIZE+512 , NULL, tskIDLE_PRIORITY+1, NULL );	
    33ce:	e1 2c       	mov	r14, r1
    33d0:	f1 2c       	mov	r15, r1
    33d2:	01 e0       	ldi	r16, 0x01	; 1
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	53 e0       	ldi	r21, 0x03	; 3
    33dc:	6c e1       	ldi	r22, 0x1C	; 28
    33de:	71 e2       	ldi	r23, 0x21	; 33
    33e0:	8b ef       	ldi	r24, 0xFB	; 251
    33e2:	99 e1       	ldi	r25, 0x19	; 25
    33e4:	0e 94 27 0a 	call	0x144e	; 0x144e <xTaskCreate>
}
    33e8:	00 00       	nop
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	ef 90       	pop	r14
    33f4:	08 95       	ret

000033f6 <WorkerTerminal>:

static void WorkerTerminal(void *pvParameters)
{
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	1f 92       	push	r1
    3400:	1f 92       	push	r1
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	89 83       	std	Y+1, r24	; 0x01
    3408:	9a 83       	std	Y+2, r25	; 0x02
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    340a:	80 e1       	ldi	r24, 0x10	; 16
    340c:	90 e2       	ldi	r25, 0x20	; 32
    340e:	89 2f       	mov	r24, r25
    3410:	8f 93       	push	r24
    3412:	80 e1       	ldi	r24, 0x10	; 16
    3414:	90 e2       	ldi	r25, 0x20	; 32
    3416:	8f 93       	push	r24
    3418:	85 e2       	ldi	r24, 0x25	; 37
    341a:	91 e2       	ldi	r25, 0x21	; 33
    341c:	89 2f       	mov	r24, r25
    341e:	8f 93       	push	r24
    3420:	85 e2       	ldi	r24, 0x25	; 37
    3422:	91 e2       	ldi	r25, 0x21	; 33
    3424:	8f 93       	push	r24
    3426:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <scanf>
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
    3432:	84 ef       	ldi	r24, 0xF4	; 244
    3434:	91 e6       	ldi	r25, 0x61	; 97
    3436:	0e 94 aa 13 	call	0x2754	; 0x2754 <vTaskGetRunTimeStats>
		if (strcmp(RichtingString, "looplicht_links") == 0) {
    343a:	68 e2       	ldi	r22, 0x28	; 40
    343c:	71 e2       	ldi	r23, 0x21	; 33
    343e:	80 e1       	ldi	r24, 0x10	; 16
    3440:	90 e2       	ldi	r25, 0x20	; 32
    3442:	0e 94 38 20 	call	0x4070	; 0x4070 <strcmp>
    3446:	89 2b       	or	r24, r25
    3448:	39 f4       	brne	.+14     	; 0x3458 <WorkerTerminal+0x62>
			RichtingInt = 1;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <RichtingInt>
    3452:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <RichtingInt+0x1>
    3456:	15 c0       	rjmp	.+42     	; 0x3482 <WorkerTerminal+0x8c>
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
    3458:	68 e3       	ldi	r22, 0x38	; 56
    345a:	71 e2       	ldi	r23, 0x21	; 33
    345c:	80 e1       	ldi	r24, 0x10	; 16
    345e:	90 e2       	ldi	r25, 0x20	; 32
    3460:	0e 94 38 20 	call	0x4070	; 0x4070 <strcmp>
    3464:	89 2b       	or	r24, r25
    3466:	39 f4       	brne	.+14     	; 0x3476 <WorkerTerminal+0x80>
			RichtingInt = 2;
    3468:	82 e0       	ldi	r24, 0x02	; 2
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <RichtingInt>
    3470:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <RichtingInt+0x1>
    3474:	06 c0       	rjmp	.+12     	; 0x3482 <WorkerTerminal+0x8c>
		} else {
			RichtingInt = 3;
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <RichtingInt>
    347e:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <RichtingInt+0x1>
		}
		printf("Resterende heap: %d en basisadres: %d \r", xPortGetFreeHeapSize(), pvPortMalloc(5000));
    3482:	88 e8       	ldi	r24, 0x88	; 136
    3484:	93 e1       	ldi	r25, 0x13	; 19
    3486:	0e 94 3f 04 	call	0x87e	; 0x87e <pvPortMalloc>
    348a:	8c 01       	movw	r16, r24
    348c:	0e 94 9a 05 	call	0xb34	; 0xb34 <xPortGetFreeHeapSize>
    3490:	21 2f       	mov	r18, r17
    3492:	2f 93       	push	r18
    3494:	20 2f       	mov	r18, r16
    3496:	2f 93       	push	r18
    3498:	29 2f       	mov	r18, r25
    349a:	2f 93       	push	r18
    349c:	8f 93       	push	r24
    349e:	89 e4       	ldi	r24, 0x49	; 73
    34a0:	91 e2       	ldi	r25, 0x21	; 33
    34a2:	89 2f       	mov	r24, r25
    34a4:	8f 93       	push	r24
    34a6:	89 e4       	ldi	r24, 0x49	; 73
    34a8:	91 e2       	ldi	r25, 0x21	; 33
    34aa:	8f 93       	push	r24
    34ac:	0e 94 98 20 	call	0x4130	; 0x4130 <printf>
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
		puts(Buffer); // Buffer afprinten
    34bc:	84 ef       	ldi	r24, 0xF4	; 244
    34be:	91 e6       	ldi	r25, 0x61	; 97
    34c0:	0e 94 ac 20 	call	0x4158	; 0x4158 <puts>
	}
    34c4:	a2 cf       	rjmp	.-188    	; 0x340a <WorkerTerminal+0x14>

000034c6 <__cmpsf2>:
    34c6:	0e 94 97 1a 	call	0x352e	; 0x352e <__fp_cmp>
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <__cmpsf2+0x8>
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	08 95       	ret

000034d0 <__fixunssfsi>:
    34d0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__fp_splitA>
    34d4:	88 f0       	brcs	.+34     	; 0x34f8 <__fixunssfsi+0x28>
    34d6:	9f 57       	subi	r25, 0x7F	; 127
    34d8:	98 f0       	brcs	.+38     	; 0x3500 <__fixunssfsi+0x30>
    34da:	b9 2f       	mov	r27, r25
    34dc:	99 27       	eor	r25, r25
    34de:	b7 51       	subi	r27, 0x17	; 23
    34e0:	b0 f0       	brcs	.+44     	; 0x350e <__fixunssfsi+0x3e>
    34e2:	e1 f0       	breq	.+56     	; 0x351c <__fixunssfsi+0x4c>
    34e4:	66 0f       	add	r22, r22
    34e6:	77 1f       	adc	r23, r23
    34e8:	88 1f       	adc	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	1a f0       	brmi	.+6      	; 0x34f4 <__fixunssfsi+0x24>
    34ee:	ba 95       	dec	r27
    34f0:	c9 f7       	brne	.-14     	; 0x34e4 <__fixunssfsi+0x14>
    34f2:	14 c0       	rjmp	.+40     	; 0x351c <__fixunssfsi+0x4c>
    34f4:	b1 30       	cpi	r27, 0x01	; 1
    34f6:	91 f0       	breq	.+36     	; 0x351c <__fixunssfsi+0x4c>
    34f8:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fp_zero>
    34fc:	b1 e0       	ldi	r27, 0x01	; 1
    34fe:	08 95       	ret
    3500:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__fp_zero>
    3504:	67 2f       	mov	r22, r23
    3506:	78 2f       	mov	r23, r24
    3508:	88 27       	eor	r24, r24
    350a:	b8 5f       	subi	r27, 0xF8	; 248
    350c:	39 f0       	breq	.+14     	; 0x351c <__fixunssfsi+0x4c>
    350e:	b9 3f       	cpi	r27, 0xF9	; 249
    3510:	cc f3       	brlt	.-14     	; 0x3504 <__fixunssfsi+0x34>
    3512:	86 95       	lsr	r24
    3514:	77 95       	ror	r23
    3516:	67 95       	ror	r22
    3518:	b3 95       	inc	r27
    351a:	d9 f7       	brne	.-10     	; 0x3512 <__fixunssfsi+0x42>
    351c:	3e f4       	brtc	.+14     	; 0x352c <__fixunssfsi+0x5c>
    351e:	90 95       	com	r25
    3520:	80 95       	com	r24
    3522:	70 95       	com	r23
    3524:	61 95       	neg	r22
    3526:	7f 4f       	sbci	r23, 0xFF	; 255
    3528:	8f 4f       	sbci	r24, 0xFF	; 255
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	08 95       	ret

0000352e <__fp_cmp>:
    352e:	99 0f       	add	r25, r25
    3530:	00 08       	sbc	r0, r0
    3532:	55 0f       	add	r21, r21
    3534:	aa 0b       	sbc	r26, r26
    3536:	e0 e8       	ldi	r30, 0x80	; 128
    3538:	fe ef       	ldi	r31, 0xFE	; 254
    353a:	16 16       	cp	r1, r22
    353c:	17 06       	cpc	r1, r23
    353e:	e8 07       	cpc	r30, r24
    3540:	f9 07       	cpc	r31, r25
    3542:	c0 f0       	brcs	.+48     	; 0x3574 <__fp_cmp+0x46>
    3544:	12 16       	cp	r1, r18
    3546:	13 06       	cpc	r1, r19
    3548:	e4 07       	cpc	r30, r20
    354a:	f5 07       	cpc	r31, r21
    354c:	98 f0       	brcs	.+38     	; 0x3574 <__fp_cmp+0x46>
    354e:	62 1b       	sub	r22, r18
    3550:	73 0b       	sbc	r23, r19
    3552:	84 0b       	sbc	r24, r20
    3554:	95 0b       	sbc	r25, r21
    3556:	39 f4       	brne	.+14     	; 0x3566 <__fp_cmp+0x38>
    3558:	0a 26       	eor	r0, r26
    355a:	61 f0       	breq	.+24     	; 0x3574 <__fp_cmp+0x46>
    355c:	23 2b       	or	r18, r19
    355e:	24 2b       	or	r18, r20
    3560:	25 2b       	or	r18, r21
    3562:	21 f4       	brne	.+8      	; 0x356c <__fp_cmp+0x3e>
    3564:	08 95       	ret
    3566:	0a 26       	eor	r0, r26
    3568:	09 f4       	brne	.+2      	; 0x356c <__fp_cmp+0x3e>
    356a:	a1 40       	sbci	r26, 0x01	; 1
    356c:	a6 95       	lsr	r26
    356e:	8f ef       	ldi	r24, 0xFF	; 255
    3570:	81 1d       	adc	r24, r1
    3572:	81 1d       	adc	r24, r1
    3574:	08 95       	ret

00003576 <__fp_split3>:
    3576:	57 fd       	sbrc	r21, 7
    3578:	90 58       	subi	r25, 0x80	; 128
    357a:	44 0f       	add	r20, r20
    357c:	55 1f       	adc	r21, r21
    357e:	59 f0       	breq	.+22     	; 0x3596 <__fp_splitA+0x10>
    3580:	5f 3f       	cpi	r21, 0xFF	; 255
    3582:	71 f0       	breq	.+28     	; 0x35a0 <__fp_splitA+0x1a>
    3584:	47 95       	ror	r20

00003586 <__fp_splitA>:
    3586:	88 0f       	add	r24, r24
    3588:	97 fb       	bst	r25, 7
    358a:	99 1f       	adc	r25, r25
    358c:	61 f0       	breq	.+24     	; 0x35a6 <__fp_splitA+0x20>
    358e:	9f 3f       	cpi	r25, 0xFF	; 255
    3590:	79 f0       	breq	.+30     	; 0x35b0 <__fp_splitA+0x2a>
    3592:	87 95       	ror	r24
    3594:	08 95       	ret
    3596:	12 16       	cp	r1, r18
    3598:	13 06       	cpc	r1, r19
    359a:	14 06       	cpc	r1, r20
    359c:	55 1f       	adc	r21, r21
    359e:	f2 cf       	rjmp	.-28     	; 0x3584 <__fp_split3+0xe>
    35a0:	46 95       	lsr	r20
    35a2:	f1 df       	rcall	.-30     	; 0x3586 <__fp_splitA>
    35a4:	08 c0       	rjmp	.+16     	; 0x35b6 <__fp_splitA+0x30>
    35a6:	16 16       	cp	r1, r22
    35a8:	17 06       	cpc	r1, r23
    35aa:	18 06       	cpc	r1, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	f1 cf       	rjmp	.-30     	; 0x3592 <__fp_splitA+0xc>
    35b0:	86 95       	lsr	r24
    35b2:	71 05       	cpc	r23, r1
    35b4:	61 05       	cpc	r22, r1
    35b6:	08 94       	sec
    35b8:	08 95       	ret

000035ba <__fp_zero>:
    35ba:	e8 94       	clt

000035bc <__fp_szero>:
    35bc:	bb 27       	eor	r27, r27
    35be:	66 27       	eor	r22, r22
    35c0:	77 27       	eor	r23, r23
    35c2:	cb 01       	movw	r24, r22
    35c4:	97 f9       	bld	r25, 7
    35c6:	08 95       	ret

000035c8 <__gesf2>:
    35c8:	0e 94 97 1a 	call	0x352e	; 0x352e <__fp_cmp>
    35cc:	08 f4       	brcc	.+2      	; 0x35d0 <__gesf2+0x8>
    35ce:	8f ef       	ldi	r24, 0xFF	; 255
    35d0:	08 95       	ret

000035d2 <__mulsf3>:
    35d2:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__mulsf3x>
    35d6:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_round>
    35da:	0e 94 5f 1b 	call	0x36be	; 0x36be <__fp_pscA>
    35de:	38 f0       	brcs	.+14     	; 0x35ee <__mulsf3+0x1c>
    35e0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fp_pscB>
    35e4:	20 f0       	brcs	.+8      	; 0x35ee <__mulsf3+0x1c>
    35e6:	95 23       	and	r25, r21
    35e8:	11 f0       	breq	.+4      	; 0x35ee <__mulsf3+0x1c>
    35ea:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__fp_inf>
    35ee:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__fp_nan>
    35f2:	11 24       	eor	r1, r1
    35f4:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__fp_szero>

000035f8 <__mulsf3x>:
    35f8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__fp_split3>
    35fc:	70 f3       	brcs	.-36     	; 0x35da <__mulsf3+0x8>

000035fe <__mulsf3_pse>:
    35fe:	95 9f       	mul	r25, r21
    3600:	c1 f3       	breq	.-16     	; 0x35f2 <__mulsf3+0x20>
    3602:	95 0f       	add	r25, r21
    3604:	50 e0       	ldi	r21, 0x00	; 0
    3606:	55 1f       	adc	r21, r21
    3608:	62 9f       	mul	r22, r18
    360a:	f0 01       	movw	r30, r0
    360c:	72 9f       	mul	r23, r18
    360e:	bb 27       	eor	r27, r27
    3610:	f0 0d       	add	r31, r0
    3612:	b1 1d       	adc	r27, r1
    3614:	63 9f       	mul	r22, r19
    3616:	aa 27       	eor	r26, r26
    3618:	f0 0d       	add	r31, r0
    361a:	b1 1d       	adc	r27, r1
    361c:	aa 1f       	adc	r26, r26
    361e:	64 9f       	mul	r22, r20
    3620:	66 27       	eor	r22, r22
    3622:	b0 0d       	add	r27, r0
    3624:	a1 1d       	adc	r26, r1
    3626:	66 1f       	adc	r22, r22
    3628:	82 9f       	mul	r24, r18
    362a:	22 27       	eor	r18, r18
    362c:	b0 0d       	add	r27, r0
    362e:	a1 1d       	adc	r26, r1
    3630:	62 1f       	adc	r22, r18
    3632:	73 9f       	mul	r23, r19
    3634:	b0 0d       	add	r27, r0
    3636:	a1 1d       	adc	r26, r1
    3638:	62 1f       	adc	r22, r18
    363a:	83 9f       	mul	r24, r19
    363c:	a0 0d       	add	r26, r0
    363e:	61 1d       	adc	r22, r1
    3640:	22 1f       	adc	r18, r18
    3642:	74 9f       	mul	r23, r20
    3644:	33 27       	eor	r19, r19
    3646:	a0 0d       	add	r26, r0
    3648:	61 1d       	adc	r22, r1
    364a:	23 1f       	adc	r18, r19
    364c:	84 9f       	mul	r24, r20
    364e:	60 0d       	add	r22, r0
    3650:	21 1d       	adc	r18, r1
    3652:	82 2f       	mov	r24, r18
    3654:	76 2f       	mov	r23, r22
    3656:	6a 2f       	mov	r22, r26
    3658:	11 24       	eor	r1, r1
    365a:	9f 57       	subi	r25, 0x7F	; 127
    365c:	50 40       	sbci	r21, 0x00	; 0
    365e:	9a f0       	brmi	.+38     	; 0x3686 <__mulsf3_pse+0x88>
    3660:	f1 f0       	breq	.+60     	; 0x369e <__mulsf3_pse+0xa0>
    3662:	88 23       	and	r24, r24
    3664:	4a f0       	brmi	.+18     	; 0x3678 <__mulsf3_pse+0x7a>
    3666:	ee 0f       	add	r30, r30
    3668:	ff 1f       	adc	r31, r31
    366a:	bb 1f       	adc	r27, r27
    366c:	66 1f       	adc	r22, r22
    366e:	77 1f       	adc	r23, r23
    3670:	88 1f       	adc	r24, r24
    3672:	91 50       	subi	r25, 0x01	; 1
    3674:	50 40       	sbci	r21, 0x00	; 0
    3676:	a9 f7       	brne	.-22     	; 0x3662 <__mulsf3_pse+0x64>
    3678:	9e 3f       	cpi	r25, 0xFE	; 254
    367a:	51 05       	cpc	r21, r1
    367c:	80 f0       	brcs	.+32     	; 0x369e <__mulsf3_pse+0xa0>
    367e:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__fp_inf>
    3682:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__fp_szero>
    3686:	5f 3f       	cpi	r21, 0xFF	; 255
    3688:	e4 f3       	brlt	.-8      	; 0x3682 <__mulsf3_pse+0x84>
    368a:	98 3e       	cpi	r25, 0xE8	; 232
    368c:	d4 f3       	brlt	.-12     	; 0x3682 <__mulsf3_pse+0x84>
    368e:	86 95       	lsr	r24
    3690:	77 95       	ror	r23
    3692:	67 95       	ror	r22
    3694:	b7 95       	ror	r27
    3696:	f7 95       	ror	r31
    3698:	e7 95       	ror	r30
    369a:	9f 5f       	subi	r25, 0xFF	; 255
    369c:	c1 f7       	brne	.-16     	; 0x368e <__mulsf3_pse+0x90>
    369e:	fe 2b       	or	r31, r30
    36a0:	88 0f       	add	r24, r24
    36a2:	91 1d       	adc	r25, r1
    36a4:	96 95       	lsr	r25
    36a6:	87 95       	ror	r24
    36a8:	97 f9       	bld	r25, 7
    36aa:	08 95       	ret

000036ac <__fp_inf>:
    36ac:	97 f9       	bld	r25, 7
    36ae:	9f 67       	ori	r25, 0x7F	; 127
    36b0:	80 e8       	ldi	r24, 0x80	; 128
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	08 95       	ret

000036b8 <__fp_nan>:
    36b8:	9f ef       	ldi	r25, 0xFF	; 255
    36ba:	80 ec       	ldi	r24, 0xC0	; 192
    36bc:	08 95       	ret

000036be <__fp_pscA>:
    36be:	00 24       	eor	r0, r0
    36c0:	0a 94       	dec	r0
    36c2:	16 16       	cp	r1, r22
    36c4:	17 06       	cpc	r1, r23
    36c6:	18 06       	cpc	r1, r24
    36c8:	09 06       	cpc	r0, r25
    36ca:	08 95       	ret

000036cc <__fp_pscB>:
    36cc:	00 24       	eor	r0, r0
    36ce:	0a 94       	dec	r0
    36d0:	12 16       	cp	r1, r18
    36d2:	13 06       	cpc	r1, r19
    36d4:	14 06       	cpc	r1, r20
    36d6:	05 06       	cpc	r0, r21
    36d8:	08 95       	ret

000036da <__fp_round>:
    36da:	09 2e       	mov	r0, r25
    36dc:	03 94       	inc	r0
    36de:	00 0c       	add	r0, r0
    36e0:	11 f4       	brne	.+4      	; 0x36e6 <__fp_round+0xc>
    36e2:	88 23       	and	r24, r24
    36e4:	52 f0       	brmi	.+20     	; 0x36fa <__fp_round+0x20>
    36e6:	bb 0f       	add	r27, r27
    36e8:	40 f4       	brcc	.+16     	; 0x36fa <__fp_round+0x20>
    36ea:	bf 2b       	or	r27, r31
    36ec:	11 f4       	brne	.+4      	; 0x36f2 <__fp_round+0x18>
    36ee:	60 ff       	sbrs	r22, 0
    36f0:	04 c0       	rjmp	.+8      	; 0x36fa <__fp_round+0x20>
    36f2:	6f 5f       	subi	r22, 0xFF	; 255
    36f4:	7f 4f       	sbci	r23, 0xFF	; 255
    36f6:	8f 4f       	sbci	r24, 0xFF	; 255
    36f8:	9f 4f       	sbci	r25, 0xFF	; 255
    36fa:	08 95       	ret

000036fc <DriverPowerInit>:
    36fc:	80 e2       	ldi	r24, 0x20	; 32
    36fe:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    3702:	08 95       	ret

00003704 <DriverPowerVccAuxSet>:
    3704:	81 11       	cpse	r24, r1
    3706:	04 c0       	rjmp	.+8      	; 0x3710 <DriverPowerVccAuxSet+0xc>
    3708:	80 e2       	ldi	r24, 0x20	; 32
    370a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    370e:	08 95       	ret
    3710:	80 e2       	ldi	r24, 0x20	; 32
    3712:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    3716:	08 95       	ret

00003718 <vfprintf>:
    3718:	2f 92       	push	r2
    371a:	3f 92       	push	r3
    371c:	4f 92       	push	r4
    371e:	5f 92       	push	r5
    3720:	6f 92       	push	r6
    3722:	7f 92       	push	r7
    3724:	8f 92       	push	r8
    3726:	9f 92       	push	r9
    3728:	af 92       	push	r10
    372a:	bf 92       	push	r11
    372c:	cf 92       	push	r12
    372e:	df 92       	push	r13
    3730:	ef 92       	push	r14
    3732:	ff 92       	push	r15
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	cf 93       	push	r28
    373a:	df 93       	push	r29
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	60 97       	sbiw	r28, 0x10	; 16
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	7c 01       	movw	r14, r24
    3748:	1b 01       	movw	r2, r22
    374a:	6a 01       	movw	r12, r20
    374c:	fc 01       	movw	r30, r24
    374e:	16 82       	std	Z+6, r1	; 0x06
    3750:	17 82       	std	Z+7, r1	; 0x07
    3752:	83 81       	ldd	r24, Z+3	; 0x03
    3754:	81 ff       	sbrs	r24, 1
    3756:	44 c3       	rjmp	.+1672   	; 0x3de0 <vfprintf+0x6c8>
    3758:	9e 01       	movw	r18, r28
    375a:	2f 5f       	subi	r18, 0xFF	; 255
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
    375e:	39 01       	movw	r6, r18
    3760:	f7 01       	movw	r30, r14
    3762:	93 81       	ldd	r25, Z+3	; 0x03
    3764:	f1 01       	movw	r30, r2
    3766:	93 fd       	sbrc	r25, 3
    3768:	85 91       	lpm	r24, Z+
    376a:	93 ff       	sbrs	r25, 3
    376c:	81 91       	ld	r24, Z+
    376e:	1f 01       	movw	r2, r30
    3770:	88 23       	and	r24, r24
    3772:	09 f4       	brne	.+2      	; 0x3776 <vfprintf+0x5e>
    3774:	31 c3       	rjmp	.+1634   	; 0x3dd8 <vfprintf+0x6c0>
    3776:	85 32       	cpi	r24, 0x25	; 37
    3778:	39 f4       	brne	.+14     	; 0x3788 <vfprintf+0x70>
    377a:	93 fd       	sbrc	r25, 3
    377c:	85 91       	lpm	r24, Z+
    377e:	93 ff       	sbrs	r25, 3
    3780:	81 91       	ld	r24, Z+
    3782:	1f 01       	movw	r2, r30
    3784:	85 32       	cpi	r24, 0x25	; 37
    3786:	39 f4       	brne	.+14     	; 0x3796 <vfprintf+0x7e>
    3788:	b7 01       	movw	r22, r14
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3790:	56 01       	movw	r10, r12
    3792:	65 01       	movw	r12, r10
    3794:	e5 cf       	rjmp	.-54     	; 0x3760 <vfprintf+0x48>
    3796:	10 e0       	ldi	r17, 0x00	; 0
    3798:	51 2c       	mov	r5, r1
    379a:	91 2c       	mov	r9, r1
    379c:	ff e1       	ldi	r31, 0x1F	; 31
    379e:	f9 15       	cp	r31, r9
    37a0:	d8 f0       	brcs	.+54     	; 0x37d8 <vfprintf+0xc0>
    37a2:	8b 32       	cpi	r24, 0x2B	; 43
    37a4:	79 f0       	breq	.+30     	; 0x37c4 <vfprintf+0xac>
    37a6:	38 f4       	brcc	.+14     	; 0x37b6 <vfprintf+0x9e>
    37a8:	80 32       	cpi	r24, 0x20	; 32
    37aa:	79 f0       	breq	.+30     	; 0x37ca <vfprintf+0xb2>
    37ac:	83 32       	cpi	r24, 0x23	; 35
    37ae:	a1 f4       	brne	.+40     	; 0x37d8 <vfprintf+0xc0>
    37b0:	f9 2d       	mov	r31, r9
    37b2:	f0 61       	ori	r31, 0x10	; 16
    37b4:	2e c0       	rjmp	.+92     	; 0x3812 <vfprintf+0xfa>
    37b6:	8d 32       	cpi	r24, 0x2D	; 45
    37b8:	61 f0       	breq	.+24     	; 0x37d2 <vfprintf+0xba>
    37ba:	80 33       	cpi	r24, 0x30	; 48
    37bc:	69 f4       	brne	.+26     	; 0x37d8 <vfprintf+0xc0>
    37be:	29 2d       	mov	r18, r9
    37c0:	21 60       	ori	r18, 0x01	; 1
    37c2:	2d c0       	rjmp	.+90     	; 0x381e <vfprintf+0x106>
    37c4:	39 2d       	mov	r19, r9
    37c6:	32 60       	ori	r19, 0x02	; 2
    37c8:	93 2e       	mov	r9, r19
    37ca:	89 2d       	mov	r24, r9
    37cc:	84 60       	ori	r24, 0x04	; 4
    37ce:	98 2e       	mov	r9, r24
    37d0:	2a c0       	rjmp	.+84     	; 0x3826 <vfprintf+0x10e>
    37d2:	e9 2d       	mov	r30, r9
    37d4:	e8 60       	ori	r30, 0x08	; 8
    37d6:	15 c0       	rjmp	.+42     	; 0x3802 <vfprintf+0xea>
    37d8:	97 fc       	sbrc	r9, 7
    37da:	2d c0       	rjmp	.+90     	; 0x3836 <vfprintf+0x11e>
    37dc:	20 ed       	ldi	r18, 0xD0	; 208
    37de:	28 0f       	add	r18, r24
    37e0:	2a 30       	cpi	r18, 0x0A	; 10
    37e2:	88 f4       	brcc	.+34     	; 0x3806 <vfprintf+0xee>
    37e4:	96 fe       	sbrs	r9, 6
    37e6:	06 c0       	rjmp	.+12     	; 0x37f4 <vfprintf+0xdc>
    37e8:	3a e0       	ldi	r19, 0x0A	; 10
    37ea:	13 9f       	mul	r17, r19
    37ec:	20 0d       	add	r18, r0
    37ee:	11 24       	eor	r1, r1
    37f0:	12 2f       	mov	r17, r18
    37f2:	19 c0       	rjmp	.+50     	; 0x3826 <vfprintf+0x10e>
    37f4:	8a e0       	ldi	r24, 0x0A	; 10
    37f6:	58 9e       	mul	r5, r24
    37f8:	20 0d       	add	r18, r0
    37fa:	11 24       	eor	r1, r1
    37fc:	52 2e       	mov	r5, r18
    37fe:	e9 2d       	mov	r30, r9
    3800:	e0 62       	ori	r30, 0x20	; 32
    3802:	9e 2e       	mov	r9, r30
    3804:	10 c0       	rjmp	.+32     	; 0x3826 <vfprintf+0x10e>
    3806:	8e 32       	cpi	r24, 0x2E	; 46
    3808:	31 f4       	brne	.+12     	; 0x3816 <vfprintf+0xfe>
    380a:	96 fc       	sbrc	r9, 6
    380c:	e5 c2       	rjmp	.+1482   	; 0x3dd8 <vfprintf+0x6c0>
    380e:	f9 2d       	mov	r31, r9
    3810:	f0 64       	ori	r31, 0x40	; 64
    3812:	9f 2e       	mov	r9, r31
    3814:	08 c0       	rjmp	.+16     	; 0x3826 <vfprintf+0x10e>
    3816:	8c 36       	cpi	r24, 0x6C	; 108
    3818:	21 f4       	brne	.+8      	; 0x3822 <vfprintf+0x10a>
    381a:	29 2d       	mov	r18, r9
    381c:	20 68       	ori	r18, 0x80	; 128
    381e:	92 2e       	mov	r9, r18
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <vfprintf+0x10e>
    3822:	88 36       	cpi	r24, 0x68	; 104
    3824:	41 f4       	brne	.+16     	; 0x3836 <vfprintf+0x11e>
    3826:	f1 01       	movw	r30, r2
    3828:	93 fd       	sbrc	r25, 3
    382a:	85 91       	lpm	r24, Z+
    382c:	93 ff       	sbrs	r25, 3
    382e:	81 91       	ld	r24, Z+
    3830:	1f 01       	movw	r2, r30
    3832:	81 11       	cpse	r24, r1
    3834:	b3 cf       	rjmp	.-154    	; 0x379c <vfprintf+0x84>
    3836:	9b eb       	ldi	r25, 0xBB	; 187
    3838:	98 0f       	add	r25, r24
    383a:	93 30       	cpi	r25, 0x03	; 3
    383c:	20 f4       	brcc	.+8      	; 0x3846 <vfprintf+0x12e>
    383e:	99 2d       	mov	r25, r9
    3840:	90 61       	ori	r25, 0x10	; 16
    3842:	80 5e       	subi	r24, 0xE0	; 224
    3844:	07 c0       	rjmp	.+14     	; 0x3854 <vfprintf+0x13c>
    3846:	9b e9       	ldi	r25, 0x9B	; 155
    3848:	98 0f       	add	r25, r24
    384a:	93 30       	cpi	r25, 0x03	; 3
    384c:	08 f0       	brcs	.+2      	; 0x3850 <vfprintf+0x138>
    384e:	66 c1       	rjmp	.+716    	; 0x3b1c <vfprintf+0x404>
    3850:	99 2d       	mov	r25, r9
    3852:	9f 7e       	andi	r25, 0xEF	; 239
    3854:	96 ff       	sbrs	r25, 6
    3856:	16 e0       	ldi	r17, 0x06	; 6
    3858:	9f 73       	andi	r25, 0x3F	; 63
    385a:	99 2e       	mov	r9, r25
    385c:	85 36       	cpi	r24, 0x65	; 101
    385e:	19 f4       	brne	.+6      	; 0x3866 <vfprintf+0x14e>
    3860:	90 64       	ori	r25, 0x40	; 64
    3862:	99 2e       	mov	r9, r25
    3864:	08 c0       	rjmp	.+16     	; 0x3876 <vfprintf+0x15e>
    3866:	86 36       	cpi	r24, 0x66	; 102
    3868:	21 f4       	brne	.+8      	; 0x3872 <vfprintf+0x15a>
    386a:	39 2f       	mov	r19, r25
    386c:	30 68       	ori	r19, 0x80	; 128
    386e:	93 2e       	mov	r9, r19
    3870:	02 c0       	rjmp	.+4      	; 0x3876 <vfprintf+0x15e>
    3872:	11 11       	cpse	r17, r1
    3874:	11 50       	subi	r17, 0x01	; 1
    3876:	97 fe       	sbrs	r9, 7
    3878:	07 c0       	rjmp	.+14     	; 0x3888 <vfprintf+0x170>
    387a:	1c 33       	cpi	r17, 0x3C	; 60
    387c:	50 f4       	brcc	.+20     	; 0x3892 <vfprintf+0x17a>
    387e:	44 24       	eor	r4, r4
    3880:	43 94       	inc	r4
    3882:	41 0e       	add	r4, r17
    3884:	27 e0       	ldi	r18, 0x07	; 7
    3886:	0b c0       	rjmp	.+22     	; 0x389e <vfprintf+0x186>
    3888:	18 30       	cpi	r17, 0x08	; 8
    388a:	38 f0       	brcs	.+14     	; 0x389a <vfprintf+0x182>
    388c:	27 e0       	ldi	r18, 0x07	; 7
    388e:	17 e0       	ldi	r17, 0x07	; 7
    3890:	05 c0       	rjmp	.+10     	; 0x389c <vfprintf+0x184>
    3892:	27 e0       	ldi	r18, 0x07	; 7
    3894:	9c e3       	ldi	r25, 0x3C	; 60
    3896:	49 2e       	mov	r4, r25
    3898:	02 c0       	rjmp	.+4      	; 0x389e <vfprintf+0x186>
    389a:	21 2f       	mov	r18, r17
    389c:	41 2c       	mov	r4, r1
    389e:	56 01       	movw	r10, r12
    38a0:	84 e0       	ldi	r24, 0x04	; 4
    38a2:	a8 0e       	add	r10, r24
    38a4:	b1 1c       	adc	r11, r1
    38a6:	f6 01       	movw	r30, r12
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	04 2d       	mov	r16, r4
    38b2:	a3 01       	movw	r20, r6
    38b4:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__ftoa_engine>
    38b8:	6c 01       	movw	r12, r24
    38ba:	f9 81       	ldd	r31, Y+1	; 0x01
    38bc:	fc 87       	std	Y+12, r31	; 0x0c
    38be:	f0 ff       	sbrs	r31, 0
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <vfprintf+0x1ae>
    38c2:	f3 ff       	sbrs	r31, 3
    38c4:	06 c0       	rjmp	.+12     	; 0x38d2 <vfprintf+0x1ba>
    38c6:	91 fc       	sbrc	r9, 1
    38c8:	06 c0       	rjmp	.+12     	; 0x38d6 <vfprintf+0x1be>
    38ca:	92 fe       	sbrs	r9, 2
    38cc:	06 c0       	rjmp	.+12     	; 0x38da <vfprintf+0x1c2>
    38ce:	00 e2       	ldi	r16, 0x20	; 32
    38d0:	05 c0       	rjmp	.+10     	; 0x38dc <vfprintf+0x1c4>
    38d2:	0d e2       	ldi	r16, 0x2D	; 45
    38d4:	03 c0       	rjmp	.+6      	; 0x38dc <vfprintf+0x1c4>
    38d6:	0b e2       	ldi	r16, 0x2B	; 43
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <vfprintf+0x1c4>
    38da:	00 e0       	ldi	r16, 0x00	; 0
    38dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    38de:	8c 70       	andi	r24, 0x0C	; 12
    38e0:	19 f0       	breq	.+6      	; 0x38e8 <vfprintf+0x1d0>
    38e2:	01 11       	cpse	r16, r1
    38e4:	5a c2       	rjmp	.+1204   	; 0x3d9a <vfprintf+0x682>
    38e6:	9b c2       	rjmp	.+1334   	; 0x3e1e <vfprintf+0x706>
    38e8:	97 fe       	sbrs	r9, 7
    38ea:	10 c0       	rjmp	.+32     	; 0x390c <vfprintf+0x1f4>
    38ec:	4c 0c       	add	r4, r12
    38ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    38f0:	f4 ff       	sbrs	r31, 4
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <vfprintf+0x1e4>
    38f4:	8a 81       	ldd	r24, Y+2	; 0x02
    38f6:	81 33       	cpi	r24, 0x31	; 49
    38f8:	09 f4       	brne	.+2      	; 0x38fc <vfprintf+0x1e4>
    38fa:	4a 94       	dec	r4
    38fc:	14 14       	cp	r1, r4
    38fe:	74 f5       	brge	.+92     	; 0x395c <vfprintf+0x244>
    3900:	28 e0       	ldi	r18, 0x08	; 8
    3902:	24 15       	cp	r18, r4
    3904:	78 f5       	brcc	.+94     	; 0x3964 <vfprintf+0x24c>
    3906:	88 e0       	ldi	r24, 0x08	; 8
    3908:	48 2e       	mov	r4, r24
    390a:	2c c0       	rjmp	.+88     	; 0x3964 <vfprintf+0x24c>
    390c:	96 fc       	sbrc	r9, 6
    390e:	2a c0       	rjmp	.+84     	; 0x3964 <vfprintf+0x24c>
    3910:	81 2f       	mov	r24, r17
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	8c 15       	cp	r24, r12
    3916:	9d 05       	cpc	r25, r13
    3918:	9c f0       	brlt	.+38     	; 0x3940 <vfprintf+0x228>
    391a:	3c ef       	ldi	r19, 0xFC	; 252
    391c:	c3 16       	cp	r12, r19
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	d3 06       	cpc	r13, r19
    3922:	74 f0       	brlt	.+28     	; 0x3940 <vfprintf+0x228>
    3924:	89 2d       	mov	r24, r9
    3926:	80 68       	ori	r24, 0x80	; 128
    3928:	98 2e       	mov	r9, r24
    392a:	0a c0       	rjmp	.+20     	; 0x3940 <vfprintf+0x228>
    392c:	e2 e0       	ldi	r30, 0x02	; 2
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	ec 0f       	add	r30, r28
    3932:	fd 1f       	adc	r31, r29
    3934:	e1 0f       	add	r30, r17
    3936:	f1 1d       	adc	r31, r1
    3938:	80 81       	ld	r24, Z
    393a:	80 33       	cpi	r24, 0x30	; 48
    393c:	19 f4       	brne	.+6      	; 0x3944 <vfprintf+0x22c>
    393e:	11 50       	subi	r17, 0x01	; 1
    3940:	11 11       	cpse	r17, r1
    3942:	f4 cf       	rjmp	.-24     	; 0x392c <vfprintf+0x214>
    3944:	97 fe       	sbrs	r9, 7
    3946:	0e c0       	rjmp	.+28     	; 0x3964 <vfprintf+0x24c>
    3948:	44 24       	eor	r4, r4
    394a:	43 94       	inc	r4
    394c:	41 0e       	add	r4, r17
    394e:	81 2f       	mov	r24, r17
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	c8 16       	cp	r12, r24
    3954:	d9 06       	cpc	r13, r25
    3956:	2c f4       	brge	.+10     	; 0x3962 <vfprintf+0x24a>
    3958:	1c 19       	sub	r17, r12
    395a:	04 c0       	rjmp	.+8      	; 0x3964 <vfprintf+0x24c>
    395c:	44 24       	eor	r4, r4
    395e:	43 94       	inc	r4
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <vfprintf+0x24c>
    3962:	10 e0       	ldi	r17, 0x00	; 0
    3964:	97 fe       	sbrs	r9, 7
    3966:	06 c0       	rjmp	.+12     	; 0x3974 <vfprintf+0x25c>
    3968:	1c 14       	cp	r1, r12
    396a:	1d 04       	cpc	r1, r13
    396c:	34 f4       	brge	.+12     	; 0x397a <vfprintf+0x262>
    396e:	c6 01       	movw	r24, r12
    3970:	01 96       	adiw	r24, 0x01	; 1
    3972:	05 c0       	rjmp	.+10     	; 0x397e <vfprintf+0x266>
    3974:	85 e0       	ldi	r24, 0x05	; 5
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	02 c0       	rjmp	.+4      	; 0x397e <vfprintf+0x266>
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	01 11       	cpse	r16, r1
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	11 23       	and	r17, r17
    3984:	31 f0       	breq	.+12     	; 0x3992 <vfprintf+0x27a>
    3986:	21 2f       	mov	r18, r17
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	2f 5f       	subi	r18, 0xFF	; 255
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	82 0f       	add	r24, r18
    3990:	93 1f       	adc	r25, r19
    3992:	25 2d       	mov	r18, r5
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	82 17       	cp	r24, r18
    3998:	93 07       	cpc	r25, r19
    399a:	14 f4       	brge	.+4      	; 0x39a0 <vfprintf+0x288>
    399c:	58 1a       	sub	r5, r24
    399e:	01 c0       	rjmp	.+2      	; 0x39a2 <vfprintf+0x28a>
    39a0:	51 2c       	mov	r5, r1
    39a2:	89 2d       	mov	r24, r9
    39a4:	89 70       	andi	r24, 0x09	; 9
    39a6:	49 f4       	brne	.+18     	; 0x39ba <vfprintf+0x2a2>
    39a8:	55 20       	and	r5, r5
    39aa:	39 f0       	breq	.+14     	; 0x39ba <vfprintf+0x2a2>
    39ac:	b7 01       	movw	r22, r14
    39ae:	80 e2       	ldi	r24, 0x20	; 32
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    39b6:	5a 94       	dec	r5
    39b8:	f7 cf       	rjmp	.-18     	; 0x39a8 <vfprintf+0x290>
    39ba:	00 23       	and	r16, r16
    39bc:	29 f0       	breq	.+10     	; 0x39c8 <vfprintf+0x2b0>
    39be:	b7 01       	movw	r22, r14
    39c0:	80 2f       	mov	r24, r16
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    39c8:	93 fc       	sbrc	r9, 3
    39ca:	09 c0       	rjmp	.+18     	; 0x39de <vfprintf+0x2c6>
    39cc:	55 20       	and	r5, r5
    39ce:	39 f0       	breq	.+14     	; 0x39de <vfprintf+0x2c6>
    39d0:	b7 01       	movw	r22, r14
    39d2:	80 e3       	ldi	r24, 0x30	; 48
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    39da:	5a 94       	dec	r5
    39dc:	f7 cf       	rjmp	.-18     	; 0x39cc <vfprintf+0x2b4>
    39de:	97 fe       	sbrs	r9, 7
    39e0:	4c c0       	rjmp	.+152    	; 0x3a7a <vfprintf+0x362>
    39e2:	46 01       	movw	r8, r12
    39e4:	d7 fe       	sbrs	r13, 7
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <vfprintf+0x2d4>
    39e8:	81 2c       	mov	r8, r1
    39ea:	91 2c       	mov	r9, r1
    39ec:	c6 01       	movw	r24, r12
    39ee:	88 19       	sub	r24, r8
    39f0:	99 09       	sbc	r25, r9
    39f2:	f3 01       	movw	r30, r6
    39f4:	e8 0f       	add	r30, r24
    39f6:	f9 1f       	adc	r31, r25
    39f8:	ed 87       	std	Y+13, r30	; 0x0d
    39fa:	fe 87       	std	Y+14, r31	; 0x0e
    39fc:	96 01       	movw	r18, r12
    39fe:	24 19       	sub	r18, r4
    3a00:	31 09       	sbc	r19, r1
    3a02:	2f 87       	std	Y+15, r18	; 0x0f
    3a04:	38 8b       	std	Y+16, r19	; 0x10
    3a06:	01 2f       	mov	r16, r17
    3a08:	10 e0       	ldi	r17, 0x00	; 0
    3a0a:	11 95       	neg	r17
    3a0c:	01 95       	neg	r16
    3a0e:	11 09       	sbc	r17, r1
    3a10:	3f ef       	ldi	r19, 0xFF	; 255
    3a12:	83 16       	cp	r8, r19
    3a14:	93 06       	cpc	r9, r19
    3a16:	29 f4       	brne	.+10     	; 0x3a22 <vfprintf+0x30a>
    3a18:	b7 01       	movw	r22, r14
    3a1a:	8e e2       	ldi	r24, 0x2E	; 46
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3a22:	c8 14       	cp	r12, r8
    3a24:	d9 04       	cpc	r13, r9
    3a26:	4c f0       	brlt	.+18     	; 0x3a3a <vfprintf+0x322>
    3a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a2a:	98 89       	ldd	r25, Y+16	; 0x10
    3a2c:	88 15       	cp	r24, r8
    3a2e:	99 05       	cpc	r25, r9
    3a30:	24 f4       	brge	.+8      	; 0x3a3a <vfprintf+0x322>
    3a32:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a34:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a36:	81 81       	ldd	r24, Z+1	; 0x01
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <vfprintf+0x324>
    3a3a:	80 e3       	ldi	r24, 0x30	; 48
    3a3c:	f1 e0       	ldi	r31, 0x01	; 1
    3a3e:	8f 1a       	sub	r8, r31
    3a40:	91 08       	sbc	r9, r1
    3a42:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a44:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a46:	2f 5f       	subi	r18, 0xFF	; 255
    3a48:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4a:	2d 87       	std	Y+13, r18	; 0x0d
    3a4c:	3e 87       	std	Y+14, r19	; 0x0e
    3a4e:	80 16       	cp	r8, r16
    3a50:	91 06       	cpc	r9, r17
    3a52:	2c f0       	brlt	.+10     	; 0x3a5e <vfprintf+0x346>
    3a54:	b7 01       	movw	r22, r14
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3a5c:	d9 cf       	rjmp	.-78     	; 0x3a10 <vfprintf+0x2f8>
    3a5e:	c8 14       	cp	r12, r8
    3a60:	d9 04       	cpc	r13, r9
    3a62:	41 f4       	brne	.+16     	; 0x3a74 <vfprintf+0x35c>
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	96 33       	cpi	r25, 0x36	; 54
    3a68:	20 f4       	brcc	.+8      	; 0x3a72 <vfprintf+0x35a>
    3a6a:	95 33       	cpi	r25, 0x35	; 53
    3a6c:	19 f4       	brne	.+6      	; 0x3a74 <vfprintf+0x35c>
    3a6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a70:	34 ff       	sbrs	r19, 4
    3a72:	81 e3       	ldi	r24, 0x31	; 49
    3a74:	b7 01       	movw	r22, r14
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	4e c0       	rjmp	.+156    	; 0x3b16 <vfprintf+0x3fe>
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7c:	81 33       	cpi	r24, 0x31	; 49
    3a7e:	19 f0       	breq	.+6      	; 0x3a86 <vfprintf+0x36e>
    3a80:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a82:	9f 7e       	andi	r25, 0xEF	; 239
    3a84:	9c 87       	std	Y+12, r25	; 0x0c
    3a86:	b7 01       	movw	r22, r14
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3a8e:	11 11       	cpse	r17, r1
    3a90:	05 c0       	rjmp	.+10     	; 0x3a9c <vfprintf+0x384>
    3a92:	94 fc       	sbrc	r9, 4
    3a94:	18 c0       	rjmp	.+48     	; 0x3ac6 <vfprintf+0x3ae>
    3a96:	85 e6       	ldi	r24, 0x65	; 101
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	17 c0       	rjmp	.+46     	; 0x3aca <vfprintf+0x3b2>
    3a9c:	b7 01       	movw	r22, r14
    3a9e:	8e e2       	ldi	r24, 0x2E	; 46
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3aa6:	1e 5f       	subi	r17, 0xFE	; 254
    3aa8:	82 e0       	ldi	r24, 0x02	; 2
    3aaa:	01 e0       	ldi	r16, 0x01	; 1
    3aac:	08 0f       	add	r16, r24
    3aae:	f3 01       	movw	r30, r6
    3ab0:	e8 0f       	add	r30, r24
    3ab2:	f1 1d       	adc	r31, r1
    3ab4:	80 81       	ld	r24, Z
    3ab6:	b7 01       	movw	r22, r14
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3abe:	80 2f       	mov	r24, r16
    3ac0:	01 13       	cpse	r16, r17
    3ac2:	f3 cf       	rjmp	.-26     	; 0x3aaa <vfprintf+0x392>
    3ac4:	e6 cf       	rjmp	.-52     	; 0x3a92 <vfprintf+0x37a>
    3ac6:	85 e4       	ldi	r24, 0x45	; 69
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	b7 01       	movw	r22, r14
    3acc:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3ad0:	d7 fc       	sbrc	r13, 7
    3ad2:	06 c0       	rjmp	.+12     	; 0x3ae0 <vfprintf+0x3c8>
    3ad4:	c1 14       	cp	r12, r1
    3ad6:	d1 04       	cpc	r13, r1
    3ad8:	41 f4       	brne	.+16     	; 0x3aea <vfprintf+0x3d2>
    3ada:	ec 85       	ldd	r30, Y+12	; 0x0c
    3adc:	e4 ff       	sbrs	r30, 4
    3ade:	05 c0       	rjmp	.+10     	; 0x3aea <vfprintf+0x3d2>
    3ae0:	d1 94       	neg	r13
    3ae2:	c1 94       	neg	r12
    3ae4:	d1 08       	sbc	r13, r1
    3ae6:	8d e2       	ldi	r24, 0x2D	; 45
    3ae8:	01 c0       	rjmp	.+2      	; 0x3aec <vfprintf+0x3d4>
    3aea:	8b e2       	ldi	r24, 0x2B	; 43
    3aec:	b7 01       	movw	r22, r14
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3af4:	80 e3       	ldi	r24, 0x30	; 48
    3af6:	2a e0       	ldi	r18, 0x0A	; 10
    3af8:	c2 16       	cp	r12, r18
    3afa:	d1 04       	cpc	r13, r1
    3afc:	2c f0       	brlt	.+10     	; 0x3b08 <vfprintf+0x3f0>
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	fa e0       	ldi	r31, 0x0A	; 10
    3b02:	cf 1a       	sub	r12, r31
    3b04:	d1 08       	sbc	r13, r1
    3b06:	f7 cf       	rjmp	.-18     	; 0x3af6 <vfprintf+0x3de>
    3b08:	b7 01       	movw	r22, r14
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3b10:	b7 01       	movw	r22, r14
    3b12:	c6 01       	movw	r24, r12
    3b14:	c0 96       	adiw	r24, 0x30	; 48
    3b16:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3b1a:	54 c1       	rjmp	.+680    	; 0x3dc4 <vfprintf+0x6ac>
    3b1c:	83 36       	cpi	r24, 0x63	; 99
    3b1e:	31 f0       	breq	.+12     	; 0x3b2c <vfprintf+0x414>
    3b20:	83 37       	cpi	r24, 0x73	; 115
    3b22:	79 f0       	breq	.+30     	; 0x3b42 <vfprintf+0x42a>
    3b24:	83 35       	cpi	r24, 0x53	; 83
    3b26:	09 f0       	breq	.+2      	; 0x3b2a <vfprintf+0x412>
    3b28:	56 c0       	rjmp	.+172    	; 0x3bd6 <vfprintf+0x4be>
    3b2a:	20 c0       	rjmp	.+64     	; 0x3b6c <vfprintf+0x454>
    3b2c:	56 01       	movw	r10, r12
    3b2e:	32 e0       	ldi	r19, 0x02	; 2
    3b30:	a3 0e       	add	r10, r19
    3b32:	b1 1c       	adc	r11, r1
    3b34:	f6 01       	movw	r30, r12
    3b36:	80 81       	ld	r24, Z
    3b38:	89 83       	std	Y+1, r24	; 0x01
    3b3a:	01 e0       	ldi	r16, 0x01	; 1
    3b3c:	10 e0       	ldi	r17, 0x00	; 0
    3b3e:	63 01       	movw	r12, r6
    3b40:	12 c0       	rjmp	.+36     	; 0x3b66 <vfprintf+0x44e>
    3b42:	56 01       	movw	r10, r12
    3b44:	f2 e0       	ldi	r31, 0x02	; 2
    3b46:	af 0e       	add	r10, r31
    3b48:	b1 1c       	adc	r11, r1
    3b4a:	f6 01       	movw	r30, r12
    3b4c:	c0 80       	ld	r12, Z
    3b4e:	d1 80       	ldd	r13, Z+1	; 0x01
    3b50:	96 fe       	sbrs	r9, 6
    3b52:	03 c0       	rjmp	.+6      	; 0x3b5a <vfprintf+0x442>
    3b54:	61 2f       	mov	r22, r17
    3b56:	70 e0       	ldi	r23, 0x00	; 0
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <vfprintf+0x446>
    3b5a:	6f ef       	ldi	r22, 0xFF	; 255
    3b5c:	7f ef       	ldi	r23, 0xFF	; 255
    3b5e:	c6 01       	movw	r24, r12
    3b60:	0e 94 51 20 	call	0x40a2	; 0x40a2 <strnlen>
    3b64:	8c 01       	movw	r16, r24
    3b66:	f9 2d       	mov	r31, r9
    3b68:	ff 77       	andi	r31, 0x7F	; 127
    3b6a:	14 c0       	rjmp	.+40     	; 0x3b94 <vfprintf+0x47c>
    3b6c:	56 01       	movw	r10, r12
    3b6e:	22 e0       	ldi	r18, 0x02	; 2
    3b70:	a2 0e       	add	r10, r18
    3b72:	b1 1c       	adc	r11, r1
    3b74:	f6 01       	movw	r30, r12
    3b76:	c0 80       	ld	r12, Z
    3b78:	d1 80       	ldd	r13, Z+1	; 0x01
    3b7a:	96 fe       	sbrs	r9, 6
    3b7c:	03 c0       	rjmp	.+6      	; 0x3b84 <vfprintf+0x46c>
    3b7e:	61 2f       	mov	r22, r17
    3b80:	70 e0       	ldi	r23, 0x00	; 0
    3b82:	02 c0       	rjmp	.+4      	; 0x3b88 <vfprintf+0x470>
    3b84:	6f ef       	ldi	r22, 0xFF	; 255
    3b86:	7f ef       	ldi	r23, 0xFF	; 255
    3b88:	c6 01       	movw	r24, r12
    3b8a:	0e 94 26 20 	call	0x404c	; 0x404c <strnlen_P>
    3b8e:	8c 01       	movw	r16, r24
    3b90:	f9 2d       	mov	r31, r9
    3b92:	f0 68       	ori	r31, 0x80	; 128
    3b94:	9f 2e       	mov	r9, r31
    3b96:	f3 fd       	sbrc	r31, 3
    3b98:	1a c0       	rjmp	.+52     	; 0x3bce <vfprintf+0x4b6>
    3b9a:	85 2d       	mov	r24, r5
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	08 17       	cp	r16, r24
    3ba0:	19 07       	cpc	r17, r25
    3ba2:	a8 f4       	brcc	.+42     	; 0x3bce <vfprintf+0x4b6>
    3ba4:	b7 01       	movw	r22, r14
    3ba6:	80 e2       	ldi	r24, 0x20	; 32
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3bae:	5a 94       	dec	r5
    3bb0:	f4 cf       	rjmp	.-24     	; 0x3b9a <vfprintf+0x482>
    3bb2:	f6 01       	movw	r30, r12
    3bb4:	97 fc       	sbrc	r9, 7
    3bb6:	85 91       	lpm	r24, Z+
    3bb8:	97 fe       	sbrs	r9, 7
    3bba:	81 91       	ld	r24, Z+
    3bbc:	6f 01       	movw	r12, r30
    3bbe:	b7 01       	movw	r22, r14
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3bc6:	51 10       	cpse	r5, r1
    3bc8:	5a 94       	dec	r5
    3bca:	01 50       	subi	r16, 0x01	; 1
    3bcc:	11 09       	sbc	r17, r1
    3bce:	01 15       	cp	r16, r1
    3bd0:	11 05       	cpc	r17, r1
    3bd2:	79 f7       	brne	.-34     	; 0x3bb2 <vfprintf+0x49a>
    3bd4:	f7 c0       	rjmp	.+494    	; 0x3dc4 <vfprintf+0x6ac>
    3bd6:	84 36       	cpi	r24, 0x64	; 100
    3bd8:	11 f0       	breq	.+4      	; 0x3bde <vfprintf+0x4c6>
    3bda:	89 36       	cpi	r24, 0x69	; 105
    3bdc:	61 f5       	brne	.+88     	; 0x3c36 <vfprintf+0x51e>
    3bde:	56 01       	movw	r10, r12
    3be0:	97 fe       	sbrs	r9, 7
    3be2:	09 c0       	rjmp	.+18     	; 0x3bf6 <vfprintf+0x4de>
    3be4:	24 e0       	ldi	r18, 0x04	; 4
    3be6:	a2 0e       	add	r10, r18
    3be8:	b1 1c       	adc	r11, r1
    3bea:	f6 01       	movw	r30, r12
    3bec:	60 81       	ld	r22, Z
    3bee:	71 81       	ldd	r23, Z+1	; 0x01
    3bf0:	82 81       	ldd	r24, Z+2	; 0x02
    3bf2:	93 81       	ldd	r25, Z+3	; 0x03
    3bf4:	0a c0       	rjmp	.+20     	; 0x3c0a <vfprintf+0x4f2>
    3bf6:	f2 e0       	ldi	r31, 0x02	; 2
    3bf8:	af 0e       	add	r10, r31
    3bfa:	b1 1c       	adc	r11, r1
    3bfc:	f6 01       	movw	r30, r12
    3bfe:	60 81       	ld	r22, Z
    3c00:	71 81       	ldd	r23, Z+1	; 0x01
    3c02:	07 2e       	mov	r0, r23
    3c04:	00 0c       	add	r0, r0
    3c06:	88 0b       	sbc	r24, r24
    3c08:	99 0b       	sbc	r25, r25
    3c0a:	f9 2d       	mov	r31, r9
    3c0c:	ff 76       	andi	r31, 0x6F	; 111
    3c0e:	9f 2e       	mov	r9, r31
    3c10:	97 ff       	sbrs	r25, 7
    3c12:	09 c0       	rjmp	.+18     	; 0x3c26 <vfprintf+0x50e>
    3c14:	90 95       	com	r25
    3c16:	80 95       	com	r24
    3c18:	70 95       	com	r23
    3c1a:	61 95       	neg	r22
    3c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	f0 68       	ori	r31, 0x80	; 128
    3c24:	9f 2e       	mov	r9, r31
    3c26:	2a e0       	ldi	r18, 0x0A	; 10
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	a3 01       	movw	r20, r6
    3c2c:	0e 94 50 21 	call	0x42a0	; 0x42a0 <__ultoa_invert>
    3c30:	c8 2e       	mov	r12, r24
    3c32:	c6 18       	sub	r12, r6
    3c34:	3f c0       	rjmp	.+126    	; 0x3cb4 <vfprintf+0x59c>
    3c36:	09 2d       	mov	r16, r9
    3c38:	85 37       	cpi	r24, 0x75	; 117
    3c3a:	21 f4       	brne	.+8      	; 0x3c44 <vfprintf+0x52c>
    3c3c:	0f 7e       	andi	r16, 0xEF	; 239
    3c3e:	2a e0       	ldi	r18, 0x0A	; 10
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	1d c0       	rjmp	.+58     	; 0x3c7e <vfprintf+0x566>
    3c44:	09 7f       	andi	r16, 0xF9	; 249
    3c46:	8f 36       	cpi	r24, 0x6F	; 111
    3c48:	91 f0       	breq	.+36     	; 0x3c6e <vfprintf+0x556>
    3c4a:	18 f4       	brcc	.+6      	; 0x3c52 <vfprintf+0x53a>
    3c4c:	88 35       	cpi	r24, 0x58	; 88
    3c4e:	59 f0       	breq	.+22     	; 0x3c66 <vfprintf+0x54e>
    3c50:	c3 c0       	rjmp	.+390    	; 0x3dd8 <vfprintf+0x6c0>
    3c52:	80 37       	cpi	r24, 0x70	; 112
    3c54:	19 f0       	breq	.+6      	; 0x3c5c <vfprintf+0x544>
    3c56:	88 37       	cpi	r24, 0x78	; 120
    3c58:	11 f0       	breq	.+4      	; 0x3c5e <vfprintf+0x546>
    3c5a:	be c0       	rjmp	.+380    	; 0x3dd8 <vfprintf+0x6c0>
    3c5c:	00 61       	ori	r16, 0x10	; 16
    3c5e:	04 ff       	sbrs	r16, 4
    3c60:	09 c0       	rjmp	.+18     	; 0x3c74 <vfprintf+0x55c>
    3c62:	04 60       	ori	r16, 0x04	; 4
    3c64:	07 c0       	rjmp	.+14     	; 0x3c74 <vfprintf+0x55c>
    3c66:	94 fe       	sbrs	r9, 4
    3c68:	08 c0       	rjmp	.+16     	; 0x3c7a <vfprintf+0x562>
    3c6a:	06 60       	ori	r16, 0x06	; 6
    3c6c:	06 c0       	rjmp	.+12     	; 0x3c7a <vfprintf+0x562>
    3c6e:	28 e0       	ldi	r18, 0x08	; 8
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <vfprintf+0x566>
    3c74:	20 e1       	ldi	r18, 0x10	; 16
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <vfprintf+0x566>
    3c7a:	20 e1       	ldi	r18, 0x10	; 16
    3c7c:	32 e0       	ldi	r19, 0x02	; 2
    3c7e:	56 01       	movw	r10, r12
    3c80:	07 ff       	sbrs	r16, 7
    3c82:	09 c0       	rjmp	.+18     	; 0x3c96 <vfprintf+0x57e>
    3c84:	84 e0       	ldi	r24, 0x04	; 4
    3c86:	a8 0e       	add	r10, r24
    3c88:	b1 1c       	adc	r11, r1
    3c8a:	f6 01       	movw	r30, r12
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	08 c0       	rjmp	.+16     	; 0x3ca6 <vfprintf+0x58e>
    3c96:	f2 e0       	ldi	r31, 0x02	; 2
    3c98:	af 0e       	add	r10, r31
    3c9a:	b1 1c       	adc	r11, r1
    3c9c:	f6 01       	movw	r30, r12
    3c9e:	60 81       	ld	r22, Z
    3ca0:	71 81       	ldd	r23, Z+1	; 0x01
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	a3 01       	movw	r20, r6
    3ca8:	0e 94 50 21 	call	0x42a0	; 0x42a0 <__ultoa_invert>
    3cac:	c8 2e       	mov	r12, r24
    3cae:	c6 18       	sub	r12, r6
    3cb0:	0f 77       	andi	r16, 0x7F	; 127
    3cb2:	90 2e       	mov	r9, r16
    3cb4:	96 fe       	sbrs	r9, 6
    3cb6:	0b c0       	rjmp	.+22     	; 0x3cce <vfprintf+0x5b6>
    3cb8:	09 2d       	mov	r16, r9
    3cba:	0e 7f       	andi	r16, 0xFE	; 254
    3cbc:	c1 16       	cp	r12, r17
    3cbe:	50 f4       	brcc	.+20     	; 0x3cd4 <vfprintf+0x5bc>
    3cc0:	94 fe       	sbrs	r9, 4
    3cc2:	0a c0       	rjmp	.+20     	; 0x3cd8 <vfprintf+0x5c0>
    3cc4:	92 fc       	sbrc	r9, 2
    3cc6:	08 c0       	rjmp	.+16     	; 0x3cd8 <vfprintf+0x5c0>
    3cc8:	09 2d       	mov	r16, r9
    3cca:	0e 7e       	andi	r16, 0xEE	; 238
    3ccc:	05 c0       	rjmp	.+10     	; 0x3cd8 <vfprintf+0x5c0>
    3cce:	dc 2c       	mov	r13, r12
    3cd0:	09 2d       	mov	r16, r9
    3cd2:	03 c0       	rjmp	.+6      	; 0x3cda <vfprintf+0x5c2>
    3cd4:	dc 2c       	mov	r13, r12
    3cd6:	01 c0       	rjmp	.+2      	; 0x3cda <vfprintf+0x5c2>
    3cd8:	d1 2e       	mov	r13, r17
    3cda:	04 ff       	sbrs	r16, 4
    3cdc:	0d c0       	rjmp	.+26     	; 0x3cf8 <vfprintf+0x5e0>
    3cde:	fe 01       	movw	r30, r28
    3ce0:	ec 0d       	add	r30, r12
    3ce2:	f1 1d       	adc	r31, r1
    3ce4:	80 81       	ld	r24, Z
    3ce6:	80 33       	cpi	r24, 0x30	; 48
    3ce8:	11 f4       	brne	.+4      	; 0x3cee <vfprintf+0x5d6>
    3cea:	09 7e       	andi	r16, 0xE9	; 233
    3cec:	09 c0       	rjmp	.+18     	; 0x3d00 <vfprintf+0x5e8>
    3cee:	02 ff       	sbrs	r16, 2
    3cf0:	06 c0       	rjmp	.+12     	; 0x3cfe <vfprintf+0x5e6>
    3cf2:	d3 94       	inc	r13
    3cf4:	d3 94       	inc	r13
    3cf6:	04 c0       	rjmp	.+8      	; 0x3d00 <vfprintf+0x5e8>
    3cf8:	80 2f       	mov	r24, r16
    3cfa:	86 78       	andi	r24, 0x86	; 134
    3cfc:	09 f0       	breq	.+2      	; 0x3d00 <vfprintf+0x5e8>
    3cfe:	d3 94       	inc	r13
    3d00:	03 fd       	sbrc	r16, 3
    3d02:	11 c0       	rjmp	.+34     	; 0x3d26 <vfprintf+0x60e>
    3d04:	00 ff       	sbrs	r16, 0
    3d06:	06 c0       	rjmp	.+12     	; 0x3d14 <vfprintf+0x5fc>
    3d08:	1c 2d       	mov	r17, r12
    3d0a:	d5 14       	cp	r13, r5
    3d0c:	80 f4       	brcc	.+32     	; 0x3d2e <vfprintf+0x616>
    3d0e:	15 0d       	add	r17, r5
    3d10:	1d 19       	sub	r17, r13
    3d12:	0d c0       	rjmp	.+26     	; 0x3d2e <vfprintf+0x616>
    3d14:	d5 14       	cp	r13, r5
    3d16:	58 f4       	brcc	.+22     	; 0x3d2e <vfprintf+0x616>
    3d18:	b7 01       	movw	r22, r14
    3d1a:	80 e2       	ldi	r24, 0x20	; 32
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3d22:	d3 94       	inc	r13
    3d24:	f7 cf       	rjmp	.-18     	; 0x3d14 <vfprintf+0x5fc>
    3d26:	d5 14       	cp	r13, r5
    3d28:	10 f4       	brcc	.+4      	; 0x3d2e <vfprintf+0x616>
    3d2a:	5d 18       	sub	r5, r13
    3d2c:	01 c0       	rjmp	.+2      	; 0x3d30 <vfprintf+0x618>
    3d2e:	51 2c       	mov	r5, r1
    3d30:	04 ff       	sbrs	r16, 4
    3d32:	10 c0       	rjmp	.+32     	; 0x3d54 <vfprintf+0x63c>
    3d34:	b7 01       	movw	r22, r14
    3d36:	80 e3       	ldi	r24, 0x30	; 48
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3d3e:	02 ff       	sbrs	r16, 2
    3d40:	17 c0       	rjmp	.+46     	; 0x3d70 <vfprintf+0x658>
    3d42:	01 fd       	sbrc	r16, 1
    3d44:	03 c0       	rjmp	.+6      	; 0x3d4c <vfprintf+0x634>
    3d46:	88 e7       	ldi	r24, 0x78	; 120
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	02 c0       	rjmp	.+4      	; 0x3d50 <vfprintf+0x638>
    3d4c:	88 e5       	ldi	r24, 0x58	; 88
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	b7 01       	movw	r22, r14
    3d52:	0c c0       	rjmp	.+24     	; 0x3d6c <vfprintf+0x654>
    3d54:	80 2f       	mov	r24, r16
    3d56:	86 78       	andi	r24, 0x86	; 134
    3d58:	59 f0       	breq	.+22     	; 0x3d70 <vfprintf+0x658>
    3d5a:	01 ff       	sbrs	r16, 1
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <vfprintf+0x64a>
    3d5e:	8b e2       	ldi	r24, 0x2B	; 43
    3d60:	01 c0       	rjmp	.+2      	; 0x3d64 <vfprintf+0x64c>
    3d62:	80 e2       	ldi	r24, 0x20	; 32
    3d64:	07 fd       	sbrc	r16, 7
    3d66:	8d e2       	ldi	r24, 0x2D	; 45
    3d68:	b7 01       	movw	r22, r14
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3d70:	c1 16       	cp	r12, r17
    3d72:	38 f4       	brcc	.+14     	; 0x3d82 <vfprintf+0x66a>
    3d74:	b7 01       	movw	r22, r14
    3d76:	80 e3       	ldi	r24, 0x30	; 48
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3d7e:	11 50       	subi	r17, 0x01	; 1
    3d80:	f7 cf       	rjmp	.-18     	; 0x3d70 <vfprintf+0x658>
    3d82:	ca 94       	dec	r12
    3d84:	f3 01       	movw	r30, r6
    3d86:	ec 0d       	add	r30, r12
    3d88:	f1 1d       	adc	r31, r1
    3d8a:	80 81       	ld	r24, Z
    3d8c:	b7 01       	movw	r22, r14
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3d94:	c1 10       	cpse	r12, r1
    3d96:	f5 cf       	rjmp	.-22     	; 0x3d82 <vfprintf+0x66a>
    3d98:	15 c0       	rjmp	.+42     	; 0x3dc4 <vfprintf+0x6ac>
    3d9a:	f4 e0       	ldi	r31, 0x04	; 4
    3d9c:	f5 15       	cp	r31, r5
    3d9e:	60 f5       	brcc	.+88     	; 0x3df8 <vfprintf+0x6e0>
    3da0:	84 e0       	ldi	r24, 0x04	; 4
    3da2:	58 1a       	sub	r5, r24
    3da4:	93 fe       	sbrs	r9, 3
    3da6:	1f c0       	rjmp	.+62     	; 0x3de6 <vfprintf+0x6ce>
    3da8:	01 11       	cpse	r16, r1
    3daa:	27 c0       	rjmp	.+78     	; 0x3dfa <vfprintf+0x6e2>
    3dac:	2c 85       	ldd	r18, Y+12	; 0x0c
    3dae:	23 ff       	sbrs	r18, 3
    3db0:	2a c0       	rjmp	.+84     	; 0x3e06 <vfprintf+0x6ee>
    3db2:	04 e1       	ldi	r16, 0x14	; 20
    3db4:	12 e0       	ldi	r17, 0x02	; 2
    3db6:	39 2d       	mov	r19, r9
    3db8:	30 71       	andi	r19, 0x10	; 16
    3dba:	93 2e       	mov	r9, r19
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	84 91       	lpm	r24, Z
    3dc0:	81 11       	cpse	r24, r1
    3dc2:	24 c0       	rjmp	.+72     	; 0x3e0c <vfprintf+0x6f4>
    3dc4:	55 20       	and	r5, r5
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <vfprintf+0x6b2>
    3dc8:	e4 cc       	rjmp	.-1592   	; 0x3792 <vfprintf+0x7a>
    3dca:	b7 01       	movw	r22, r14
    3dcc:	80 e2       	ldi	r24, 0x20	; 32
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3dd4:	5a 94       	dec	r5
    3dd6:	f6 cf       	rjmp	.-20     	; 0x3dc4 <vfprintf+0x6ac>
    3dd8:	f7 01       	movw	r30, r14
    3dda:	86 81       	ldd	r24, Z+6	; 0x06
    3ddc:	97 81       	ldd	r25, Z+7	; 0x07
    3dde:	26 c0       	rjmp	.+76     	; 0x3e2c <vfprintf+0x714>
    3de0:	8f ef       	ldi	r24, 0xFF	; 255
    3de2:	9f ef       	ldi	r25, 0xFF	; 255
    3de4:	23 c0       	rjmp	.+70     	; 0x3e2c <vfprintf+0x714>
    3de6:	b7 01       	movw	r22, r14
    3de8:	80 e2       	ldi	r24, 0x20	; 32
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3df0:	5a 94       	dec	r5
    3df2:	51 10       	cpse	r5, r1
    3df4:	f8 cf       	rjmp	.-16     	; 0x3de6 <vfprintf+0x6ce>
    3df6:	d8 cf       	rjmp	.-80     	; 0x3da8 <vfprintf+0x690>
    3df8:	51 2c       	mov	r5, r1
    3dfa:	b7 01       	movw	r22, r14
    3dfc:	80 2f       	mov	r24, r16
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3e04:	d3 cf       	rjmp	.-90     	; 0x3dac <vfprintf+0x694>
    3e06:	08 e1       	ldi	r16, 0x18	; 24
    3e08:	12 e0       	ldi	r17, 0x02	; 2
    3e0a:	d5 cf       	rjmp	.-86     	; 0x3db6 <vfprintf+0x69e>
    3e0c:	91 10       	cpse	r9, r1
    3e0e:	80 52       	subi	r24, 0x20	; 32
    3e10:	b7 01       	movw	r22, r14
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fputc>
    3e18:	0f 5f       	subi	r16, 0xFF	; 255
    3e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1c:	cf cf       	rjmp	.-98     	; 0x3dbc <vfprintf+0x6a4>
    3e1e:	23 e0       	ldi	r18, 0x03	; 3
    3e20:	25 15       	cp	r18, r5
    3e22:	10 f4       	brcc	.+4      	; 0x3e28 <vfprintf+0x710>
    3e24:	83 e0       	ldi	r24, 0x03	; 3
    3e26:	bd cf       	rjmp	.-134    	; 0x3da2 <vfprintf+0x68a>
    3e28:	51 2c       	mov	r5, r1
    3e2a:	c0 cf       	rjmp	.-128    	; 0x3dac <vfprintf+0x694>
    3e2c:	60 96       	adiw	r28, 0x10	; 16
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	df 91       	pop	r29
    3e34:	cf 91       	pop	r28
    3e36:	1f 91       	pop	r17
    3e38:	0f 91       	pop	r16
    3e3a:	ff 90       	pop	r15
    3e3c:	ef 90       	pop	r14
    3e3e:	df 90       	pop	r13
    3e40:	cf 90       	pop	r12
    3e42:	bf 90       	pop	r11
    3e44:	af 90       	pop	r10
    3e46:	9f 90       	pop	r9
    3e48:	8f 90       	pop	r8
    3e4a:	7f 90       	pop	r7
    3e4c:	6f 90       	pop	r6
    3e4e:	5f 90       	pop	r5
    3e50:	4f 90       	pop	r4
    3e52:	3f 90       	pop	r3
    3e54:	2f 90       	pop	r2
    3e56:	08 95       	ret

00003e58 <__udivmodsi4>:
    3e58:	a1 e2       	ldi	r26, 0x21	; 33
    3e5a:	1a 2e       	mov	r1, r26
    3e5c:	aa 1b       	sub	r26, r26
    3e5e:	bb 1b       	sub	r27, r27
    3e60:	fd 01       	movw	r30, r26
    3e62:	0d c0       	rjmp	.+26     	; 0x3e7e <__udivmodsi4_ep>

00003e64 <__udivmodsi4_loop>:
    3e64:	aa 1f       	adc	r26, r26
    3e66:	bb 1f       	adc	r27, r27
    3e68:	ee 1f       	adc	r30, r30
    3e6a:	ff 1f       	adc	r31, r31
    3e6c:	a2 17       	cp	r26, r18
    3e6e:	b3 07       	cpc	r27, r19
    3e70:	e4 07       	cpc	r30, r20
    3e72:	f5 07       	cpc	r31, r21
    3e74:	20 f0       	brcs	.+8      	; 0x3e7e <__udivmodsi4_ep>
    3e76:	a2 1b       	sub	r26, r18
    3e78:	b3 0b       	sbc	r27, r19
    3e7a:	e4 0b       	sbc	r30, r20
    3e7c:	f5 0b       	sbc	r31, r21

00003e7e <__udivmodsi4_ep>:
    3e7e:	66 1f       	adc	r22, r22
    3e80:	77 1f       	adc	r23, r23
    3e82:	88 1f       	adc	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	1a 94       	dec	r1
    3e88:	69 f7       	brne	.-38     	; 0x3e64 <__udivmodsi4_loop>
    3e8a:	60 95       	com	r22
    3e8c:	70 95       	com	r23
    3e8e:	80 95       	com	r24
    3e90:	90 95       	com	r25
    3e92:	9b 01       	movw	r18, r22
    3e94:	ac 01       	movw	r20, r24
    3e96:	bd 01       	movw	r22, r26
    3e98:	cf 01       	movw	r24, r30
    3e9a:	08 95       	ret

00003e9c <__ftoa_engine>:
    3e9c:	28 30       	cpi	r18, 0x08	; 8
    3e9e:	08 f0       	brcs	.+2      	; 0x3ea2 <__ftoa_engine+0x6>
    3ea0:	27 e0       	ldi	r18, 0x07	; 7
    3ea2:	33 27       	eor	r19, r19
    3ea4:	da 01       	movw	r26, r20
    3ea6:	99 0f       	add	r25, r25
    3ea8:	31 1d       	adc	r19, r1
    3eaa:	87 fd       	sbrc	r24, 7
    3eac:	91 60       	ori	r25, 0x01	; 1
    3eae:	00 96       	adiw	r24, 0x00	; 0
    3eb0:	61 05       	cpc	r22, r1
    3eb2:	71 05       	cpc	r23, r1
    3eb4:	39 f4       	brne	.+14     	; 0x3ec4 <__ftoa_engine+0x28>
    3eb6:	32 60       	ori	r19, 0x02	; 2
    3eb8:	2e 5f       	subi	r18, 0xFE	; 254
    3eba:	3d 93       	st	X+, r19
    3ebc:	30 e3       	ldi	r19, 0x30	; 48
    3ebe:	2a 95       	dec	r18
    3ec0:	e1 f7       	brne	.-8      	; 0x3eba <__ftoa_engine+0x1e>
    3ec2:	08 95       	ret
    3ec4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ec6:	30 f0       	brcs	.+12     	; 0x3ed4 <__ftoa_engine+0x38>
    3ec8:	80 38       	cpi	r24, 0x80	; 128
    3eca:	71 05       	cpc	r23, r1
    3ecc:	61 05       	cpc	r22, r1
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <__ftoa_engine+0x36>
    3ed0:	3c 5f       	subi	r19, 0xFC	; 252
    3ed2:	3c 5f       	subi	r19, 0xFC	; 252
    3ed4:	3d 93       	st	X+, r19
    3ed6:	91 30       	cpi	r25, 0x01	; 1
    3ed8:	08 f0       	brcs	.+2      	; 0x3edc <__ftoa_engine+0x40>
    3eda:	80 68       	ori	r24, 0x80	; 128
    3edc:	91 1d       	adc	r25, r1
    3ede:	df 93       	push	r29
    3ee0:	cf 93       	push	r28
    3ee2:	1f 93       	push	r17
    3ee4:	0f 93       	push	r16
    3ee6:	ff 92       	push	r15
    3ee8:	ef 92       	push	r14
    3eea:	19 2f       	mov	r17, r25
    3eec:	98 7f       	andi	r25, 0xF8	; 248
    3eee:	96 95       	lsr	r25
    3ef0:	e9 2f       	mov	r30, r25
    3ef2:	96 95       	lsr	r25
    3ef4:	96 95       	lsr	r25
    3ef6:	e9 0f       	add	r30, r25
    3ef8:	ff 27       	eor	r31, r31
    3efa:	ea 58       	subi	r30, 0x8A	; 138
    3efc:	fd 4f       	sbci	r31, 0xFD	; 253
    3efe:	99 27       	eor	r25, r25
    3f00:	33 27       	eor	r19, r19
    3f02:	ee 24       	eor	r14, r14
    3f04:	ff 24       	eor	r15, r15
    3f06:	a7 01       	movw	r20, r14
    3f08:	e7 01       	movw	r28, r14
    3f0a:	05 90       	lpm	r0, Z+
    3f0c:	08 94       	sec
    3f0e:	07 94       	ror	r0
    3f10:	28 f4       	brcc	.+10     	; 0x3f1c <__ftoa_engine+0x80>
    3f12:	36 0f       	add	r19, r22
    3f14:	e7 1e       	adc	r14, r23
    3f16:	f8 1e       	adc	r15, r24
    3f18:	49 1f       	adc	r20, r25
    3f1a:	51 1d       	adc	r21, r1
    3f1c:	66 0f       	add	r22, r22
    3f1e:	77 1f       	adc	r23, r23
    3f20:	88 1f       	adc	r24, r24
    3f22:	99 1f       	adc	r25, r25
    3f24:	06 94       	lsr	r0
    3f26:	a1 f7       	brne	.-24     	; 0x3f10 <__ftoa_engine+0x74>
    3f28:	05 90       	lpm	r0, Z+
    3f2a:	07 94       	ror	r0
    3f2c:	28 f4       	brcc	.+10     	; 0x3f38 <__ftoa_engine+0x9c>
    3f2e:	e7 0e       	add	r14, r23
    3f30:	f8 1e       	adc	r15, r24
    3f32:	49 1f       	adc	r20, r25
    3f34:	56 1f       	adc	r21, r22
    3f36:	c1 1d       	adc	r28, r1
    3f38:	77 0f       	add	r23, r23
    3f3a:	88 1f       	adc	r24, r24
    3f3c:	99 1f       	adc	r25, r25
    3f3e:	66 1f       	adc	r22, r22
    3f40:	06 94       	lsr	r0
    3f42:	a1 f7       	brne	.-24     	; 0x3f2c <__ftoa_engine+0x90>
    3f44:	05 90       	lpm	r0, Z+
    3f46:	07 94       	ror	r0
    3f48:	28 f4       	brcc	.+10     	; 0x3f54 <__ftoa_engine+0xb8>
    3f4a:	f8 0e       	add	r15, r24
    3f4c:	49 1f       	adc	r20, r25
    3f4e:	56 1f       	adc	r21, r22
    3f50:	c7 1f       	adc	r28, r23
    3f52:	d1 1d       	adc	r29, r1
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	66 1f       	adc	r22, r22
    3f5a:	77 1f       	adc	r23, r23
    3f5c:	06 94       	lsr	r0
    3f5e:	a1 f7       	brne	.-24     	; 0x3f48 <__ftoa_engine+0xac>
    3f60:	05 90       	lpm	r0, Z+
    3f62:	07 94       	ror	r0
    3f64:	20 f4       	brcc	.+8      	; 0x3f6e <__ftoa_engine+0xd2>
    3f66:	49 0f       	add	r20, r25
    3f68:	56 1f       	adc	r21, r22
    3f6a:	c7 1f       	adc	r28, r23
    3f6c:	d8 1f       	adc	r29, r24
    3f6e:	99 0f       	add	r25, r25
    3f70:	66 1f       	adc	r22, r22
    3f72:	77 1f       	adc	r23, r23
    3f74:	88 1f       	adc	r24, r24
    3f76:	06 94       	lsr	r0
    3f78:	a9 f7       	brne	.-22     	; 0x3f64 <__ftoa_engine+0xc8>
    3f7a:	84 91       	lpm	r24, Z
    3f7c:	10 95       	com	r17
    3f7e:	17 70       	andi	r17, 0x07	; 7
    3f80:	41 f0       	breq	.+16     	; 0x3f92 <__ftoa_engine+0xf6>
    3f82:	d6 95       	lsr	r29
    3f84:	c7 95       	ror	r28
    3f86:	57 95       	ror	r21
    3f88:	47 95       	ror	r20
    3f8a:	f7 94       	ror	r15
    3f8c:	e7 94       	ror	r14
    3f8e:	1a 95       	dec	r17
    3f90:	c1 f7       	brne	.-16     	; 0x3f82 <__ftoa_engine+0xe6>
    3f92:	ec e1       	ldi	r30, 0x1C	; 28
    3f94:	f2 e0       	ldi	r31, 0x02	; 2
    3f96:	68 94       	set
    3f98:	15 90       	lpm	r1, Z+
    3f9a:	15 91       	lpm	r17, Z+
    3f9c:	35 91       	lpm	r19, Z+
    3f9e:	65 91       	lpm	r22, Z+
    3fa0:	95 91       	lpm	r25, Z+
    3fa2:	05 90       	lpm	r0, Z+
    3fa4:	7f e2       	ldi	r23, 0x2F	; 47
    3fa6:	73 95       	inc	r23
    3fa8:	e1 18       	sub	r14, r1
    3faa:	f1 0a       	sbc	r15, r17
    3fac:	43 0b       	sbc	r20, r19
    3fae:	56 0b       	sbc	r21, r22
    3fb0:	c9 0b       	sbc	r28, r25
    3fb2:	d0 09       	sbc	r29, r0
    3fb4:	c0 f7       	brcc	.-16     	; 0x3fa6 <__ftoa_engine+0x10a>
    3fb6:	e1 0c       	add	r14, r1
    3fb8:	f1 1e       	adc	r15, r17
    3fba:	43 1f       	adc	r20, r19
    3fbc:	56 1f       	adc	r21, r22
    3fbe:	c9 1f       	adc	r28, r25
    3fc0:	d0 1d       	adc	r29, r0
    3fc2:	7e f4       	brtc	.+30     	; 0x3fe2 <__ftoa_engine+0x146>
    3fc4:	70 33       	cpi	r23, 0x30	; 48
    3fc6:	11 f4       	brne	.+4      	; 0x3fcc <__ftoa_engine+0x130>
    3fc8:	8a 95       	dec	r24
    3fca:	e6 cf       	rjmp	.-52     	; 0x3f98 <__ftoa_engine+0xfc>
    3fcc:	e8 94       	clt
    3fce:	01 50       	subi	r16, 0x01	; 1
    3fd0:	30 f0       	brcs	.+12     	; 0x3fde <__ftoa_engine+0x142>
    3fd2:	08 0f       	add	r16, r24
    3fd4:	0a f4       	brpl	.+2      	; 0x3fd8 <__ftoa_engine+0x13c>
    3fd6:	00 27       	eor	r16, r16
    3fd8:	02 17       	cp	r16, r18
    3fda:	08 f4       	brcc	.+2      	; 0x3fde <__ftoa_engine+0x142>
    3fdc:	20 2f       	mov	r18, r16
    3fde:	23 95       	inc	r18
    3fe0:	02 2f       	mov	r16, r18
    3fe2:	7a 33       	cpi	r23, 0x3A	; 58
    3fe4:	28 f0       	brcs	.+10     	; 0x3ff0 <__ftoa_engine+0x154>
    3fe6:	79 e3       	ldi	r23, 0x39	; 57
    3fe8:	7d 93       	st	X+, r23
    3fea:	2a 95       	dec	r18
    3fec:	e9 f7       	brne	.-6      	; 0x3fe8 <__ftoa_engine+0x14c>
    3fee:	10 c0       	rjmp	.+32     	; 0x4010 <__ftoa_engine+0x174>
    3ff0:	7d 93       	st	X+, r23
    3ff2:	2a 95       	dec	r18
    3ff4:	89 f6       	brne	.-94     	; 0x3f98 <__ftoa_engine+0xfc>
    3ff6:	06 94       	lsr	r0
    3ff8:	97 95       	ror	r25
    3ffa:	67 95       	ror	r22
    3ffc:	37 95       	ror	r19
    3ffe:	17 95       	ror	r17
    4000:	17 94       	ror	r1
    4002:	e1 18       	sub	r14, r1
    4004:	f1 0a       	sbc	r15, r17
    4006:	43 0b       	sbc	r20, r19
    4008:	56 0b       	sbc	r21, r22
    400a:	c9 0b       	sbc	r28, r25
    400c:	d0 09       	sbc	r29, r0
    400e:	98 f0       	brcs	.+38     	; 0x4036 <__ftoa_engine+0x19a>
    4010:	23 95       	inc	r18
    4012:	7e 91       	ld	r23, -X
    4014:	73 95       	inc	r23
    4016:	7a 33       	cpi	r23, 0x3A	; 58
    4018:	08 f0       	brcs	.+2      	; 0x401c <__ftoa_engine+0x180>
    401a:	70 e3       	ldi	r23, 0x30	; 48
    401c:	7c 93       	st	X, r23
    401e:	20 13       	cpse	r18, r16
    4020:	b8 f7       	brcc	.-18     	; 0x4010 <__ftoa_engine+0x174>
    4022:	7e 91       	ld	r23, -X
    4024:	70 61       	ori	r23, 0x10	; 16
    4026:	7d 93       	st	X+, r23
    4028:	30 f0       	brcs	.+12     	; 0x4036 <__ftoa_engine+0x19a>
    402a:	83 95       	inc	r24
    402c:	71 e3       	ldi	r23, 0x31	; 49
    402e:	7d 93       	st	X+, r23
    4030:	70 e3       	ldi	r23, 0x30	; 48
    4032:	2a 95       	dec	r18
    4034:	e1 f7       	brne	.-8      	; 0x402e <__ftoa_engine+0x192>
    4036:	11 24       	eor	r1, r1
    4038:	ef 90       	pop	r14
    403a:	ff 90       	pop	r15
    403c:	0f 91       	pop	r16
    403e:	1f 91       	pop	r17
    4040:	cf 91       	pop	r28
    4042:	df 91       	pop	r29
    4044:	99 27       	eor	r25, r25
    4046:	87 fd       	sbrc	r24, 7
    4048:	90 95       	com	r25
    404a:	08 95       	ret

0000404c <strnlen_P>:
    404c:	fc 01       	movw	r30, r24
    404e:	05 90       	lpm	r0, Z+
    4050:	61 50       	subi	r22, 0x01	; 1
    4052:	70 40       	sbci	r23, 0x00	; 0
    4054:	01 10       	cpse	r0, r1
    4056:	d8 f7       	brcc	.-10     	; 0x404e <strnlen_P+0x2>
    4058:	80 95       	com	r24
    405a:	90 95       	com	r25
    405c:	8e 0f       	add	r24, r30
    405e:	9f 1f       	adc	r25, r31
    4060:	08 95       	ret

00004062 <memset>:
    4062:	dc 01       	movw	r26, r24
    4064:	01 c0       	rjmp	.+2      	; 0x4068 <memset+0x6>
    4066:	6d 93       	st	X+, r22
    4068:	41 50       	subi	r20, 0x01	; 1
    406a:	50 40       	sbci	r21, 0x00	; 0
    406c:	e0 f7       	brcc	.-8      	; 0x4066 <memset+0x4>
    406e:	08 95       	ret

00004070 <strcmp>:
    4070:	fb 01       	movw	r30, r22
    4072:	dc 01       	movw	r26, r24
    4074:	8d 91       	ld	r24, X+
    4076:	01 90       	ld	r0, Z+
    4078:	80 19       	sub	r24, r0
    407a:	01 10       	cpse	r0, r1
    407c:	d9 f3       	breq	.-10     	; 0x4074 <strcmp+0x4>
    407e:	99 0b       	sbc	r25, r25
    4080:	08 95       	ret

00004082 <strcpy>:
    4082:	fb 01       	movw	r30, r22
    4084:	dc 01       	movw	r26, r24
    4086:	01 90       	ld	r0, Z+
    4088:	0d 92       	st	X+, r0
    408a:	00 20       	and	r0, r0
    408c:	e1 f7       	brne	.-8      	; 0x4086 <strcpy+0x4>
    408e:	08 95       	ret

00004090 <strlen>:
    4090:	fc 01       	movw	r30, r24
    4092:	01 90       	ld	r0, Z+
    4094:	00 20       	and	r0, r0
    4096:	e9 f7       	brne	.-6      	; 0x4092 <strlen+0x2>
    4098:	80 95       	com	r24
    409a:	90 95       	com	r25
    409c:	8e 0f       	add	r24, r30
    409e:	9f 1f       	adc	r25, r31
    40a0:	08 95       	ret

000040a2 <strnlen>:
    40a2:	fc 01       	movw	r30, r24
    40a4:	61 50       	subi	r22, 0x01	; 1
    40a6:	70 40       	sbci	r23, 0x00	; 0
    40a8:	01 90       	ld	r0, Z+
    40aa:	01 10       	cpse	r0, r1
    40ac:	d8 f7       	brcc	.-10     	; 0x40a4 <strnlen+0x2>
    40ae:	80 95       	com	r24
    40b0:	90 95       	com	r25
    40b2:	8e 0f       	add	r24, r30
    40b4:	9f 1f       	adc	r25, r31
    40b6:	08 95       	ret

000040b8 <fputc>:
    40b8:	0f 93       	push	r16
    40ba:	1f 93       	push	r17
    40bc:	cf 93       	push	r28
    40be:	df 93       	push	r29
    40c0:	fb 01       	movw	r30, r22
    40c2:	23 81       	ldd	r18, Z+3	; 0x03
    40c4:	21 fd       	sbrc	r18, 1
    40c6:	03 c0       	rjmp	.+6      	; 0x40ce <fputc+0x16>
    40c8:	8f ef       	ldi	r24, 0xFF	; 255
    40ca:	9f ef       	ldi	r25, 0xFF	; 255
    40cc:	2c c0       	rjmp	.+88     	; 0x4126 <fputc+0x6e>
    40ce:	22 ff       	sbrs	r18, 2
    40d0:	16 c0       	rjmp	.+44     	; 0x40fe <fputc+0x46>
    40d2:	46 81       	ldd	r20, Z+6	; 0x06
    40d4:	57 81       	ldd	r21, Z+7	; 0x07
    40d6:	24 81       	ldd	r18, Z+4	; 0x04
    40d8:	35 81       	ldd	r19, Z+5	; 0x05
    40da:	42 17       	cp	r20, r18
    40dc:	53 07       	cpc	r21, r19
    40de:	44 f4       	brge	.+16     	; 0x40f0 <fputc+0x38>
    40e0:	a0 81       	ld	r26, Z
    40e2:	b1 81       	ldd	r27, Z+1	; 0x01
    40e4:	9d 01       	movw	r18, r26
    40e6:	2f 5f       	subi	r18, 0xFF	; 255
    40e8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ea:	20 83       	st	Z, r18
    40ec:	31 83       	std	Z+1, r19	; 0x01
    40ee:	8c 93       	st	X, r24
    40f0:	26 81       	ldd	r18, Z+6	; 0x06
    40f2:	37 81       	ldd	r19, Z+7	; 0x07
    40f4:	2f 5f       	subi	r18, 0xFF	; 255
    40f6:	3f 4f       	sbci	r19, 0xFF	; 255
    40f8:	26 83       	std	Z+6, r18	; 0x06
    40fa:	37 83       	std	Z+7, r19	; 0x07
    40fc:	14 c0       	rjmp	.+40     	; 0x4126 <fputc+0x6e>
    40fe:	8b 01       	movw	r16, r22
    4100:	ec 01       	movw	r28, r24
    4102:	fb 01       	movw	r30, r22
    4104:	00 84       	ldd	r0, Z+8	; 0x08
    4106:	f1 85       	ldd	r31, Z+9	; 0x09
    4108:	e0 2d       	mov	r30, r0
    410a:	19 95       	eicall
    410c:	89 2b       	or	r24, r25
    410e:	e1 f6       	brne	.-72     	; 0x40c8 <fputc+0x10>
    4110:	d8 01       	movw	r26, r16
    4112:	16 96       	adiw	r26, 0x06	; 6
    4114:	8d 91       	ld	r24, X+
    4116:	9c 91       	ld	r25, X
    4118:	17 97       	sbiw	r26, 0x07	; 7
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	16 96       	adiw	r26, 0x06	; 6
    411e:	8d 93       	st	X+, r24
    4120:	9c 93       	st	X, r25
    4122:	17 97       	sbiw	r26, 0x07	; 7
    4124:	ce 01       	movw	r24, r28
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	08 95       	ret

00004130 <printf>:
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	ae 01       	movw	r20, r28
    413a:	4a 5f       	subi	r20, 0xFA	; 250
    413c:	5f 4f       	sbci	r21, 0xFF	; 255
    413e:	fa 01       	movw	r30, r20
    4140:	61 91       	ld	r22, Z+
    4142:	71 91       	ld	r23, Z+
    4144:	af 01       	movw	r20, r30
    4146:	80 91 fc 63 	lds	r24, 0x63FC	; 0x8063fc <__iob+0x2>
    414a:	90 91 fd 63 	lds	r25, 0x63FD	; 0x8063fd <__iob+0x3>
    414e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <vfprintf>
    4152:	df 91       	pop	r29
    4154:	cf 91       	pop	r28
    4156:	08 95       	ret

00004158 <puts>:
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	e0 91 fc 63 	lds	r30, 0x63FC	; 0x8063fc <__iob+0x2>
    4164:	f0 91 fd 63 	lds	r31, 0x63FD	; 0x8063fd <__iob+0x3>
    4168:	23 81       	ldd	r18, Z+3	; 0x03
    416a:	21 ff       	sbrs	r18, 1
    416c:	1b c0       	rjmp	.+54     	; 0x41a4 <puts+0x4c>
    416e:	8c 01       	movw	r16, r24
    4170:	d0 e0       	ldi	r29, 0x00	; 0
    4172:	c0 e0       	ldi	r28, 0x00	; 0
    4174:	f8 01       	movw	r30, r16
    4176:	81 91       	ld	r24, Z+
    4178:	8f 01       	movw	r16, r30
    417a:	60 91 fc 63 	lds	r22, 0x63FC	; 0x8063fc <__iob+0x2>
    417e:	70 91 fd 63 	lds	r23, 0x63FD	; 0x8063fd <__iob+0x3>
    4182:	db 01       	movw	r26, r22
    4184:	18 96       	adiw	r26, 0x08	; 8
    4186:	ed 91       	ld	r30, X+
    4188:	fc 91       	ld	r31, X
    418a:	19 97       	sbiw	r26, 0x09	; 9
    418c:	88 23       	and	r24, r24
    418e:	31 f0       	breq	.+12     	; 0x419c <puts+0x44>
    4190:	19 95       	eicall
    4192:	89 2b       	or	r24, r25
    4194:	79 f3       	breq	.-34     	; 0x4174 <puts+0x1c>
    4196:	df ef       	ldi	r29, 0xFF	; 255
    4198:	cf ef       	ldi	r28, 0xFF	; 255
    419a:	ec cf       	rjmp	.-40     	; 0x4174 <puts+0x1c>
    419c:	8a e0       	ldi	r24, 0x0A	; 10
    419e:	19 95       	eicall
    41a0:	89 2b       	or	r24, r25
    41a2:	19 f0       	breq	.+6      	; 0x41aa <puts+0x52>
    41a4:	8f ef       	ldi	r24, 0xFF	; 255
    41a6:	9f ef       	ldi	r25, 0xFF	; 255
    41a8:	02 c0       	rjmp	.+4      	; 0x41ae <puts+0x56>
    41aa:	8d 2f       	mov	r24, r29
    41ac:	9c 2f       	mov	r25, r28
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	1f 91       	pop	r17
    41b4:	0f 91       	pop	r16
    41b6:	08 95       	ret

000041b8 <scanf>:
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	ae 01       	movw	r20, r28
    41c2:	4a 5f       	subi	r20, 0xFA	; 250
    41c4:	5f 4f       	sbci	r21, 0xFF	; 255
    41c6:	fa 01       	movw	r30, r20
    41c8:	61 91       	ld	r22, Z+
    41ca:	71 91       	ld	r23, Z+
    41cc:	af 01       	movw	r20, r30
    41ce:	80 91 fa 63 	lds	r24, 0x63FA	; 0x8063fa <__iob>
    41d2:	90 91 fb 63 	lds	r25, 0x63FB	; 0x8063fb <__iob+0x1>
    41d6:	0e 94 67 23 	call	0x46ce	; 0x46ce <vfscanf>
    41da:	df 91       	pop	r29
    41dc:	cf 91       	pop	r28
    41de:	08 95       	ret

000041e0 <snprintf>:
    41e0:	0f 93       	push	r16
    41e2:	1f 93       	push	r17
    41e4:	cf 93       	push	r28
    41e6:	df 93       	push	r29
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	2e 97       	sbiw	r28, 0x0e	; 14
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	de bf       	out	0x3e, r29	; 62
    41f2:	0e 89       	ldd	r16, Y+22	; 0x16
    41f4:	1f 89       	ldd	r17, Y+23	; 0x17
    41f6:	88 8d       	ldd	r24, Y+24	; 0x18
    41f8:	99 8d       	ldd	r25, Y+25	; 0x19
    41fa:	26 e0       	ldi	r18, 0x06	; 6
    41fc:	2c 83       	std	Y+4, r18	; 0x04
    41fe:	09 83       	std	Y+1, r16	; 0x01
    4200:	1a 83       	std	Y+2, r17	; 0x02
    4202:	97 ff       	sbrs	r25, 7
    4204:	02 c0       	rjmp	.+4      	; 0x420a <snprintf+0x2a>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e8       	ldi	r25, 0x80	; 128
    420a:	01 97       	sbiw	r24, 0x01	; 1
    420c:	8d 83       	std	Y+5, r24	; 0x05
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	ae 01       	movw	r20, r28
    4212:	44 5e       	subi	r20, 0xE4	; 228
    4214:	5f 4f       	sbci	r21, 0xFF	; 255
    4216:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4218:	7b 8d       	ldd	r23, Y+27	; 0x1b
    421a:	ce 01       	movw	r24, r28
    421c:	01 96       	adiw	r24, 0x01	; 1
    421e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <vfprintf>
    4222:	4d 81       	ldd	r20, Y+5	; 0x05
    4224:	5e 81       	ldd	r21, Y+6	; 0x06
    4226:	57 fd       	sbrc	r21, 7
    4228:	0a c0       	rjmp	.+20     	; 0x423e <snprintf+0x5e>
    422a:	2f 81       	ldd	r18, Y+7	; 0x07
    422c:	38 85       	ldd	r19, Y+8	; 0x08
    422e:	42 17       	cp	r20, r18
    4230:	53 07       	cpc	r21, r19
    4232:	0c f4       	brge	.+2      	; 0x4236 <snprintf+0x56>
    4234:	9a 01       	movw	r18, r20
    4236:	f8 01       	movw	r30, r16
    4238:	e2 0f       	add	r30, r18
    423a:	f3 1f       	adc	r31, r19
    423c:	10 82       	st	Z, r1
    423e:	2e 96       	adiw	r28, 0x0e	; 14
    4240:	cd bf       	out	0x3d, r28	; 61
    4242:	de bf       	out	0x3e, r29	; 62
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	1f 91       	pop	r17
    424a:	0f 91       	pop	r16
    424c:	08 95       	ret

0000424e <sprintf>:
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	cf 93       	push	r28
    4254:	df 93       	push	r29
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	2e 97       	sbiw	r28, 0x0e	; 14
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0e 89       	ldd	r16, Y+22	; 0x16
    4262:	1f 89       	ldd	r17, Y+23	; 0x17
    4264:	86 e0       	ldi	r24, 0x06	; 6
    4266:	8c 83       	std	Y+4, r24	; 0x04
    4268:	09 83       	std	Y+1, r16	; 0x01
    426a:	1a 83       	std	Y+2, r17	; 0x02
    426c:	8f ef       	ldi	r24, 0xFF	; 255
    426e:	9f e7       	ldi	r25, 0x7F	; 127
    4270:	8d 83       	std	Y+5, r24	; 0x05
    4272:	9e 83       	std	Y+6, r25	; 0x06
    4274:	ae 01       	movw	r20, r28
    4276:	46 5e       	subi	r20, 0xE6	; 230
    4278:	5f 4f       	sbci	r21, 0xFF	; 255
    427a:	68 8d       	ldd	r22, Y+24	; 0x18
    427c:	79 8d       	ldd	r23, Y+25	; 0x19
    427e:	ce 01       	movw	r24, r28
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	0e 94 8c 1b 	call	0x3718	; 0x3718 <vfprintf>
    4286:	ef 81       	ldd	r30, Y+7	; 0x07
    4288:	f8 85       	ldd	r31, Y+8	; 0x08
    428a:	e0 0f       	add	r30, r16
    428c:	f1 1f       	adc	r31, r17
    428e:	10 82       	st	Z, r1
    4290:	2e 96       	adiw	r28, 0x0e	; 14
    4292:	cd bf       	out	0x3d, r28	; 61
    4294:	de bf       	out	0x3e, r29	; 62
    4296:	df 91       	pop	r29
    4298:	cf 91       	pop	r28
    429a:	1f 91       	pop	r17
    429c:	0f 91       	pop	r16
    429e:	08 95       	ret

000042a0 <__ultoa_invert>:
    42a0:	fa 01       	movw	r30, r20
    42a2:	aa 27       	eor	r26, r26
    42a4:	28 30       	cpi	r18, 0x08	; 8
    42a6:	51 f1       	breq	.+84     	; 0x42fc <__ultoa_invert+0x5c>
    42a8:	20 31       	cpi	r18, 0x10	; 16
    42aa:	81 f1       	breq	.+96     	; 0x430c <__ultoa_invert+0x6c>
    42ac:	e8 94       	clt
    42ae:	6f 93       	push	r22
    42b0:	6e 7f       	andi	r22, 0xFE	; 254
    42b2:	6e 5f       	subi	r22, 0xFE	; 254
    42b4:	7f 4f       	sbci	r23, 0xFF	; 255
    42b6:	8f 4f       	sbci	r24, 0xFF	; 255
    42b8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ba:	af 4f       	sbci	r26, 0xFF	; 255
    42bc:	b1 e0       	ldi	r27, 0x01	; 1
    42be:	3e d0       	rcall	.+124    	; 0x433c <__ultoa_invert+0x9c>
    42c0:	b4 e0       	ldi	r27, 0x04	; 4
    42c2:	3c d0       	rcall	.+120    	; 0x433c <__ultoa_invert+0x9c>
    42c4:	67 0f       	add	r22, r23
    42c6:	78 1f       	adc	r23, r24
    42c8:	89 1f       	adc	r24, r25
    42ca:	9a 1f       	adc	r25, r26
    42cc:	a1 1d       	adc	r26, r1
    42ce:	68 0f       	add	r22, r24
    42d0:	79 1f       	adc	r23, r25
    42d2:	8a 1f       	adc	r24, r26
    42d4:	91 1d       	adc	r25, r1
    42d6:	a1 1d       	adc	r26, r1
    42d8:	6a 0f       	add	r22, r26
    42da:	71 1d       	adc	r23, r1
    42dc:	81 1d       	adc	r24, r1
    42de:	91 1d       	adc	r25, r1
    42e0:	a1 1d       	adc	r26, r1
    42e2:	20 d0       	rcall	.+64     	; 0x4324 <__ultoa_invert+0x84>
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <__ultoa_invert+0x48>
    42e6:	68 94       	set
    42e8:	3f 91       	pop	r19
    42ea:	2a e0       	ldi	r18, 0x0A	; 10
    42ec:	26 9f       	mul	r18, r22
    42ee:	11 24       	eor	r1, r1
    42f0:	30 19       	sub	r19, r0
    42f2:	30 5d       	subi	r19, 0xD0	; 208
    42f4:	31 93       	st	Z+, r19
    42f6:	de f6       	brtc	.-74     	; 0x42ae <__ultoa_invert+0xe>
    42f8:	cf 01       	movw	r24, r30
    42fa:	08 95       	ret
    42fc:	46 2f       	mov	r20, r22
    42fe:	47 70       	andi	r20, 0x07	; 7
    4300:	40 5d       	subi	r20, 0xD0	; 208
    4302:	41 93       	st	Z+, r20
    4304:	b3 e0       	ldi	r27, 0x03	; 3
    4306:	0f d0       	rcall	.+30     	; 0x4326 <__ultoa_invert+0x86>
    4308:	c9 f7       	brne	.-14     	; 0x42fc <__ultoa_invert+0x5c>
    430a:	f6 cf       	rjmp	.-20     	; 0x42f8 <__ultoa_invert+0x58>
    430c:	46 2f       	mov	r20, r22
    430e:	4f 70       	andi	r20, 0x0F	; 15
    4310:	40 5d       	subi	r20, 0xD0	; 208
    4312:	4a 33       	cpi	r20, 0x3A	; 58
    4314:	18 f0       	brcs	.+6      	; 0x431c <__ultoa_invert+0x7c>
    4316:	49 5d       	subi	r20, 0xD9	; 217
    4318:	31 fd       	sbrc	r19, 1
    431a:	40 52       	subi	r20, 0x20	; 32
    431c:	41 93       	st	Z+, r20
    431e:	02 d0       	rcall	.+4      	; 0x4324 <__ultoa_invert+0x84>
    4320:	a9 f7       	brne	.-22     	; 0x430c <__ultoa_invert+0x6c>
    4322:	ea cf       	rjmp	.-44     	; 0x42f8 <__ultoa_invert+0x58>
    4324:	b4 e0       	ldi	r27, 0x04	; 4
    4326:	a6 95       	lsr	r26
    4328:	97 95       	ror	r25
    432a:	87 95       	ror	r24
    432c:	77 95       	ror	r23
    432e:	67 95       	ror	r22
    4330:	ba 95       	dec	r27
    4332:	c9 f7       	brne	.-14     	; 0x4326 <__ultoa_invert+0x86>
    4334:	00 97       	sbiw	r24, 0x00	; 0
    4336:	61 05       	cpc	r22, r1
    4338:	71 05       	cpc	r23, r1
    433a:	08 95       	ret
    433c:	9b 01       	movw	r18, r22
    433e:	ac 01       	movw	r20, r24
    4340:	0a 2e       	mov	r0, r26
    4342:	06 94       	lsr	r0
    4344:	57 95       	ror	r21
    4346:	47 95       	ror	r20
    4348:	37 95       	ror	r19
    434a:	27 95       	ror	r18
    434c:	ba 95       	dec	r27
    434e:	c9 f7       	brne	.-14     	; 0x4342 <__ultoa_invert+0xa2>
    4350:	62 0f       	add	r22, r18
    4352:	73 1f       	adc	r23, r19
    4354:	84 1f       	adc	r24, r20
    4356:	95 1f       	adc	r25, r21
    4358:	a0 1d       	adc	r26, r0
    435a:	08 95       	ret

0000435c <putval>:
    435c:	20 fd       	sbrc	r18, 0
    435e:	09 c0       	rjmp	.+18     	; 0x4372 <putval+0x16>
    4360:	fc 01       	movw	r30, r24
    4362:	23 fd       	sbrc	r18, 3
    4364:	05 c0       	rjmp	.+10     	; 0x4370 <putval+0x14>
    4366:	22 ff       	sbrs	r18, 2
    4368:	02 c0       	rjmp	.+4      	; 0x436e <putval+0x12>
    436a:	73 83       	std	Z+3, r23	; 0x03
    436c:	62 83       	std	Z+2, r22	; 0x02
    436e:	51 83       	std	Z+1, r21	; 0x01
    4370:	40 83       	st	Z, r20
    4372:	08 95       	ret

00004374 <mulacc>:
    4374:	44 fd       	sbrc	r20, 4
    4376:	17 c0       	rjmp	.+46     	; 0x43a6 <mulacc+0x32>
    4378:	46 fd       	sbrc	r20, 6
    437a:	17 c0       	rjmp	.+46     	; 0x43aa <mulacc+0x36>
    437c:	ab 01       	movw	r20, r22
    437e:	bc 01       	movw	r22, r24
    4380:	da 01       	movw	r26, r20
    4382:	fb 01       	movw	r30, r22
    4384:	aa 0f       	add	r26, r26
    4386:	bb 1f       	adc	r27, r27
    4388:	ee 1f       	adc	r30, r30
    438a:	ff 1f       	adc	r31, r31
    438c:	10 94       	com	r1
    438e:	d1 f7       	brne	.-12     	; 0x4384 <mulacc+0x10>
    4390:	4a 0f       	add	r20, r26
    4392:	5b 1f       	adc	r21, r27
    4394:	6e 1f       	adc	r22, r30
    4396:	7f 1f       	adc	r23, r31
    4398:	cb 01       	movw	r24, r22
    439a:	ba 01       	movw	r22, r20
    439c:	66 0f       	add	r22, r22
    439e:	77 1f       	adc	r23, r23
    43a0:	88 1f       	adc	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	09 c0       	rjmp	.+18     	; 0x43b8 <mulacc+0x44>
    43a6:	33 e0       	ldi	r19, 0x03	; 3
    43a8:	01 c0       	rjmp	.+2      	; 0x43ac <mulacc+0x38>
    43aa:	34 e0       	ldi	r19, 0x04	; 4
    43ac:	66 0f       	add	r22, r22
    43ae:	77 1f       	adc	r23, r23
    43b0:	88 1f       	adc	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	31 50       	subi	r19, 0x01	; 1
    43b6:	d1 f7       	brne	.-12     	; 0x43ac <mulacc+0x38>
    43b8:	62 0f       	add	r22, r18
    43ba:	71 1d       	adc	r23, r1
    43bc:	81 1d       	adc	r24, r1
    43be:	91 1d       	adc	r25, r1
    43c0:	08 95       	ret

000043c2 <skip_spaces>:
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	cf 93       	push	r28
    43c8:	df 93       	push	r29
    43ca:	8c 01       	movw	r16, r24
    43cc:	c8 01       	movw	r24, r16
    43ce:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    43d2:	ec 01       	movw	r28, r24
    43d4:	97 fd       	sbrc	r25, 7
    43d6:	08 c0       	rjmp	.+16     	; 0x43e8 <skip_spaces+0x26>
    43d8:	0e 94 8c 24 	call	0x4918	; 0x4918 <isspace>
    43dc:	89 2b       	or	r24, r25
    43de:	b1 f7       	brne	.-20     	; 0x43cc <skip_spaces+0xa>
    43e0:	b8 01       	movw	r22, r16
    43e2:	ce 01       	movw	r24, r28
    43e4:	0e 94 de 24 	call	0x49bc	; 0x49bc <ungetc>
    43e8:	ce 01       	movw	r24, r28
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	08 95       	ret

000043f4 <conv_int>:
    43f4:	8f 92       	push	r8
    43f6:	9f 92       	push	r9
    43f8:	af 92       	push	r10
    43fa:	bf 92       	push	r11
    43fc:	ef 92       	push	r14
    43fe:	ff 92       	push	r15
    4400:	0f 93       	push	r16
    4402:	1f 93       	push	r17
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	8c 01       	movw	r16, r24
    440a:	d6 2f       	mov	r29, r22
    440c:	7a 01       	movw	r14, r20
    440e:	b2 2e       	mov	r11, r18
    4410:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    4414:	9c 01       	movw	r18, r24
    4416:	33 27       	eor	r19, r19
    4418:	2b 32       	cpi	r18, 0x2B	; 43
    441a:	31 05       	cpc	r19, r1
    441c:	31 f0       	breq	.+12     	; 0x442a <conv_int+0x36>
    441e:	2d 32       	cpi	r18, 0x2D	; 45
    4420:	31 05       	cpc	r19, r1
    4422:	61 f4       	brne	.+24     	; 0x443c <conv_int+0x48>
    4424:	8b 2d       	mov	r24, r11
    4426:	80 68       	ori	r24, 0x80	; 128
    4428:	b8 2e       	mov	r11, r24
    442a:	d1 50       	subi	r29, 0x01	; 1
    442c:	11 f4       	brne	.+4      	; 0x4432 <conv_int+0x3e>
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	68 c0       	rjmp	.+208    	; 0x4502 <conv_int+0x10e>
    4432:	c8 01       	movw	r24, r16
    4434:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    4438:	97 fd       	sbrc	r25, 7
    443a:	f9 cf       	rjmp	.-14     	; 0x442e <conv_int+0x3a>
    443c:	cb 2d       	mov	r28, r11
    443e:	cd 7f       	andi	r28, 0xFD	; 253
    4440:	2b 2d       	mov	r18, r11
    4442:	20 73       	andi	r18, 0x30	; 48
    4444:	09 f5       	brne	.+66     	; 0x4488 <conv_int+0x94>
    4446:	80 33       	cpi	r24, 0x30	; 48
    4448:	f9 f4       	brne	.+62     	; 0x4488 <conv_int+0x94>
    444a:	aa 24       	eor	r10, r10
    444c:	aa 94       	dec	r10
    444e:	ad 0e       	add	r10, r29
    4450:	09 f4       	brne	.+2      	; 0x4454 <conv_int+0x60>
    4452:	43 c0       	rjmp	.+134    	; 0x44da <conv_int+0xe6>
    4454:	c8 01       	movw	r24, r16
    4456:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    445a:	97 fd       	sbrc	r25, 7
    445c:	3e c0       	rjmp	.+124    	; 0x44da <conv_int+0xe6>
    445e:	9c 01       	movw	r18, r24
    4460:	2f 7d       	andi	r18, 0xDF	; 223
    4462:	33 27       	eor	r19, r19
    4464:	28 35       	cpi	r18, 0x58	; 88
    4466:	31 05       	cpc	r19, r1
    4468:	49 f4       	brne	.+18     	; 0x447c <conv_int+0x88>
    446a:	c2 64       	ori	r28, 0x42	; 66
    446c:	d2 50       	subi	r29, 0x02	; 2
    446e:	a9 f1       	breq	.+106    	; 0x44da <conv_int+0xe6>
    4470:	c8 01       	movw	r24, r16
    4472:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    4476:	97 ff       	sbrs	r25, 7
    4478:	07 c0       	rjmp	.+14     	; 0x4488 <conv_int+0x94>
    447a:	2f c0       	rjmp	.+94     	; 0x44da <conv_int+0xe6>
    447c:	b6 fe       	sbrs	r11, 6
    447e:	02 c0       	rjmp	.+4      	; 0x4484 <conv_int+0x90>
    4480:	c2 60       	ori	r28, 0x02	; 2
    4482:	01 c0       	rjmp	.+2      	; 0x4486 <conv_int+0x92>
    4484:	c2 61       	ori	r28, 0x12	; 18
    4486:	da 2d       	mov	r29, r10
    4488:	81 2c       	mov	r8, r1
    448a:	91 2c       	mov	r9, r1
    448c:	54 01       	movw	r10, r8
    448e:	20 ed       	ldi	r18, 0xD0	; 208
    4490:	28 0f       	add	r18, r24
    4492:	28 30       	cpi	r18, 0x08	; 8
    4494:	80 f0       	brcs	.+32     	; 0x44b6 <conv_int+0xc2>
    4496:	c4 ff       	sbrs	r28, 4
    4498:	04 c0       	rjmp	.+8      	; 0x44a2 <conv_int+0xae>
    449a:	b8 01       	movw	r22, r16
    449c:	0e 94 de 24 	call	0x49bc	; 0x49bc <ungetc>
    44a0:	19 c0       	rjmp	.+50     	; 0x44d4 <conv_int+0xe0>
    44a2:	2a 30       	cpi	r18, 0x0A	; 10
    44a4:	40 f0       	brcs	.+16     	; 0x44b6 <conv_int+0xc2>
    44a6:	c6 ff       	sbrs	r28, 6
    44a8:	f8 cf       	rjmp	.-16     	; 0x449a <conv_int+0xa6>
    44aa:	2f 7d       	andi	r18, 0xDF	; 223
    44ac:	3f ee       	ldi	r19, 0xEF	; 239
    44ae:	32 0f       	add	r19, r18
    44b0:	36 30       	cpi	r19, 0x06	; 6
    44b2:	98 f7       	brcc	.-26     	; 0x449a <conv_int+0xa6>
    44b4:	27 50       	subi	r18, 0x07	; 7
    44b6:	4c 2f       	mov	r20, r28
    44b8:	c5 01       	movw	r24, r10
    44ba:	b4 01       	movw	r22, r8
    44bc:	0e 94 ba 21 	call	0x4374	; 0x4374 <mulacc>
    44c0:	4b 01       	movw	r8, r22
    44c2:	5c 01       	movw	r10, r24
    44c4:	c2 60       	ori	r28, 0x02	; 2
    44c6:	d1 50       	subi	r29, 0x01	; 1
    44c8:	59 f0       	breq	.+22     	; 0x44e0 <conv_int+0xec>
    44ca:	c8 01       	movw	r24, r16
    44cc:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    44d0:	97 ff       	sbrs	r25, 7
    44d2:	dd cf       	rjmp	.-70     	; 0x448e <conv_int+0x9a>
    44d4:	c1 fd       	sbrc	r28, 1
    44d6:	04 c0       	rjmp	.+8      	; 0x44e0 <conv_int+0xec>
    44d8:	aa cf       	rjmp	.-172    	; 0x442e <conv_int+0x3a>
    44da:	81 2c       	mov	r8, r1
    44dc:	91 2c       	mov	r9, r1
    44de:	54 01       	movw	r10, r8
    44e0:	c7 ff       	sbrs	r28, 7
    44e2:	08 c0       	rjmp	.+16     	; 0x44f4 <conv_int+0x100>
    44e4:	b0 94       	com	r11
    44e6:	a0 94       	com	r10
    44e8:	90 94       	com	r9
    44ea:	80 94       	com	r8
    44ec:	81 1c       	adc	r8, r1
    44ee:	91 1c       	adc	r9, r1
    44f0:	a1 1c       	adc	r10, r1
    44f2:	b1 1c       	adc	r11, r1
    44f4:	2c 2f       	mov	r18, r28
    44f6:	b5 01       	movw	r22, r10
    44f8:	a4 01       	movw	r20, r8
    44fa:	c7 01       	movw	r24, r14
    44fc:	0e 94 ae 21 	call	0x435c	; 0x435c <putval>
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	ff 90       	pop	r15
    450c:	ef 90       	pop	r14
    450e:	bf 90       	pop	r11
    4510:	af 90       	pop	r10
    4512:	9f 90       	pop	r9
    4514:	8f 90       	pop	r8
    4516:	08 95       	ret

00004518 <conv_brk>:
    4518:	5f 92       	push	r5
    451a:	6f 92       	push	r6
    451c:	7f 92       	push	r7
    451e:	8f 92       	push	r8
    4520:	9f 92       	push	r9
    4522:	af 92       	push	r10
    4524:	bf 92       	push	r11
    4526:	cf 92       	push	r12
    4528:	df 92       	push	r13
    452a:	ef 92       	push	r14
    452c:	ff 92       	push	r15
    452e:	0f 93       	push	r16
    4530:	1f 93       	push	r17
    4532:	cf 93       	push	r28
    4534:	df 93       	push	r29
    4536:	cd b7       	in	r28, 0x3d	; 61
    4538:	de b7       	in	r29, 0x3e	; 62
    453a:	a0 97       	sbiw	r28, 0x20	; 32
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	5c 01       	movw	r10, r24
    4542:	96 2e       	mov	r9, r22
    4544:	7a 01       	movw	r14, r20
    4546:	f9 01       	movw	r30, r18
    4548:	8e 01       	movw	r16, r28
    454a:	0f 5f       	subi	r16, 0xFF	; 255
    454c:	1f 4f       	sbci	r17, 0xFF	; 255
    454e:	68 01       	movw	r12, r16
    4550:	80 e2       	ldi	r24, 0x20	; 32
    4552:	d8 01       	movw	r26, r16
    4554:	1d 92       	st	X+, r1
    4556:	8a 95       	dec	r24
    4558:	e9 f7       	brne	.-6      	; 0x4554 <conv_brk+0x3c>
    455a:	d5 01       	movw	r26, r10
    455c:	13 96       	adiw	r26, 0x03	; 3
    455e:	8c 90       	ld	r8, X
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	61 2c       	mov	r6, r1
    4566:	71 2c       	mov	r7, r1
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	61 e0       	ldi	r22, 0x01	; 1
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	83 fc       	sbrc	r8, 3
    4570:	25 91       	lpm	r18, Z+
    4572:	83 fe       	sbrs	r8, 3
    4574:	21 91       	ld	r18, Z+
    4576:	8f 01       	movw	r16, r30
    4578:	52 2e       	mov	r5, r18
    457a:	21 11       	cpse	r18, r1
    457c:	03 c0       	rjmp	.+6      	; 0x4584 <conv_brk+0x6c>
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	92 c0       	rjmp	.+292    	; 0x46a8 <conv_brk+0x190>
    4584:	2e 35       	cpi	r18, 0x5E	; 94
    4586:	11 f4       	brne	.+4      	; 0x458c <conv_brk+0x74>
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	51 f1       	breq	.+84     	; 0x45e0 <conv_brk+0xc8>
    458c:	43 2f       	mov	r20, r19
    458e:	50 e0       	ldi	r21, 0x00	; 0
    4590:	48 17       	cp	r20, r24
    4592:	59 07       	cpc	r21, r25
    4594:	3c f4       	brge	.+14     	; 0x45a4 <conv_brk+0x8c>
    4596:	2d 35       	cpi	r18, 0x5D	; 93
    4598:	59 f1       	breq	.+86     	; 0x45f0 <conv_brk+0xd8>
    459a:	2d 32       	cpi	r18, 0x2D	; 45
    459c:	19 f4       	brne	.+6      	; 0x45a4 <conv_brk+0x8c>
    459e:	77 20       	and	r7, r7
    45a0:	09 f1       	breq	.+66     	; 0x45e4 <conv_brk+0xcc>
    45a2:	03 c0       	rjmp	.+6      	; 0x45aa <conv_brk+0x92>
    45a4:	77 20       	and	r7, r7
    45a6:	09 f4       	brne	.+2      	; 0x45aa <conv_brk+0x92>
    45a8:	6a c0       	rjmp	.+212    	; 0x467e <conv_brk+0x166>
    45aa:	45 2d       	mov	r20, r5
    45ac:	46 95       	lsr	r20
    45ae:	46 95       	lsr	r20
    45b0:	46 95       	lsr	r20
    45b2:	d6 01       	movw	r26, r12
    45b4:	a4 0f       	add	r26, r20
    45b6:	b1 1d       	adc	r27, r1
    45b8:	45 2d       	mov	r20, r5
    45ba:	47 70       	andi	r20, 0x07	; 7
    45bc:	8b 01       	movw	r16, r22
    45be:	02 c0       	rjmp	.+4      	; 0x45c4 <conv_brk+0xac>
    45c0:	00 0f       	add	r16, r16
    45c2:	11 1f       	adc	r17, r17
    45c4:	4a 95       	dec	r20
    45c6:	e2 f7       	brpl	.-8      	; 0x45c0 <conv_brk+0xa8>
    45c8:	a8 01       	movw	r20, r16
    45ca:	5c 91       	ld	r21, X
    45cc:	45 2b       	or	r20, r21
    45ce:	4c 93       	st	X, r20
    45d0:	65 14       	cp	r6, r5
    45d2:	59 f0       	breq	.+22     	; 0x45ea <conv_brk+0xd2>
    45d4:	56 14       	cp	r5, r6
    45d6:	10 f4       	brcc	.+4      	; 0x45dc <conv_brk+0xc4>
    45d8:	53 94       	inc	r5
    45da:	e7 cf       	rjmp	.-50     	; 0x45aa <conv_brk+0x92>
    45dc:	5a 94       	dec	r5
    45de:	e5 cf       	rjmp	.-54     	; 0x45aa <conv_brk+0x92>
    45e0:	31 e0       	ldi	r19, 0x01	; 1
    45e2:	04 c0       	rjmp	.+8      	; 0x45ec <conv_brk+0xd4>
    45e4:	77 24       	eor	r7, r7
    45e6:	73 94       	inc	r7
    45e8:	01 c0       	rjmp	.+2      	; 0x45ec <conv_brk+0xd4>
    45ea:	71 2c       	mov	r7, r1
    45ec:	01 96       	adiw	r24, 0x01	; 1
    45ee:	bf cf       	rjmp	.-130    	; 0x456e <conv_brk+0x56>
    45f0:	77 20       	and	r7, r7
    45f2:	19 f0       	breq	.+6      	; 0x45fa <conv_brk+0xe2>
    45f4:	8e 81       	ldd	r24, Y+6	; 0x06
    45f6:	80 62       	ori	r24, 0x20	; 32
    45f8:	8e 83       	std	Y+6, r24	; 0x06
    45fa:	31 11       	cpse	r19, r1
    45fc:	03 c0       	rjmp	.+6      	; 0x4604 <conv_brk+0xec>
    45fe:	88 24       	eor	r8, r8
    4600:	83 94       	inc	r8
    4602:	17 c0       	rjmp	.+46     	; 0x4632 <conv_brk+0x11a>
    4604:	f6 01       	movw	r30, r12
    4606:	9e 01       	movw	r18, r28
    4608:	2f 5d       	subi	r18, 0xDF	; 223
    460a:	3f 4f       	sbci	r19, 0xFF	; 255
    460c:	80 81       	ld	r24, Z
    460e:	80 95       	com	r24
    4610:	81 93       	st	Z+, r24
    4612:	2e 17       	cp	r18, r30
    4614:	3f 07       	cpc	r19, r31
    4616:	d1 f7       	brne	.-12     	; 0x460c <conv_brk+0xf4>
    4618:	f2 cf       	rjmp	.-28     	; 0x45fe <conv_brk+0xe6>
    461a:	e1 14       	cp	r14, r1
    461c:	f1 04       	cpc	r15, r1
    461e:	29 f0       	breq	.+10     	; 0x462a <conv_brk+0x112>
    4620:	d7 01       	movw	r26, r14
    4622:	8c 93       	st	X, r24
    4624:	f7 01       	movw	r30, r14
    4626:	31 96       	adiw	r30, 0x01	; 1
    4628:	7f 01       	movw	r14, r30
    462a:	9a 94       	dec	r9
    462c:	81 2c       	mov	r8, r1
    462e:	99 20       	and	r9, r9
    4630:	f9 f0       	breq	.+62     	; 0x4670 <conv_brk+0x158>
    4632:	c5 01       	movw	r24, r10
    4634:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    4638:	97 fd       	sbrc	r25, 7
    463a:	18 c0       	rjmp	.+48     	; 0x466c <conv_brk+0x154>
    463c:	fc 01       	movw	r30, r24
    463e:	ff 27       	eor	r31, r31
    4640:	23 e0       	ldi	r18, 0x03	; 3
    4642:	f5 95       	asr	r31
    4644:	e7 95       	ror	r30
    4646:	2a 95       	dec	r18
    4648:	e1 f7       	brne	.-8      	; 0x4642 <conv_brk+0x12a>
    464a:	ec 0d       	add	r30, r12
    464c:	fd 1d       	adc	r31, r13
    464e:	20 81       	ld	r18, Z
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	ac 01       	movw	r20, r24
    4654:	47 70       	andi	r20, 0x07	; 7
    4656:	55 27       	eor	r21, r21
    4658:	02 c0       	rjmp	.+4      	; 0x465e <conv_brk+0x146>
    465a:	35 95       	asr	r19
    465c:	27 95       	ror	r18
    465e:	4a 95       	dec	r20
    4660:	e2 f7       	brpl	.-8      	; 0x465a <conv_brk+0x142>
    4662:	20 fd       	sbrc	r18, 0
    4664:	da cf       	rjmp	.-76     	; 0x461a <conv_brk+0x102>
    4666:	b5 01       	movw	r22, r10
    4668:	0e 94 de 24 	call	0x49bc	; 0x49bc <ungetc>
    466c:	81 10       	cpse	r8, r1
    466e:	87 cf       	rjmp	.-242    	; 0x457e <conv_brk+0x66>
    4670:	e1 14       	cp	r14, r1
    4672:	f1 04       	cpc	r15, r1
    4674:	11 f0       	breq	.+4      	; 0x467a <conv_brk+0x162>
    4676:	d7 01       	movw	r26, r14
    4678:	1c 92       	st	X, r1
    467a:	c8 01       	movw	r24, r16
    467c:	15 c0       	rjmp	.+42     	; 0x46a8 <conv_brk+0x190>
    467e:	42 2f       	mov	r20, r18
    4680:	46 95       	lsr	r20
    4682:	46 95       	lsr	r20
    4684:	46 95       	lsr	r20
    4686:	d6 01       	movw	r26, r12
    4688:	a4 0f       	add	r26, r20
    468a:	b1 1d       	adc	r27, r1
    468c:	42 2f       	mov	r20, r18
    468e:	47 70       	andi	r20, 0x07	; 7
    4690:	8b 01       	movw	r16, r22
    4692:	02 c0       	rjmp	.+4      	; 0x4698 <conv_brk+0x180>
    4694:	00 0f       	add	r16, r16
    4696:	11 1f       	adc	r17, r17
    4698:	4a 95       	dec	r20
    469a:	e2 f7       	brpl	.-8      	; 0x4694 <conv_brk+0x17c>
    469c:	a8 01       	movw	r20, r16
    469e:	5c 91       	ld	r21, X
    46a0:	45 2b       	or	r20, r21
    46a2:	4c 93       	st	X, r20
    46a4:	62 2e       	mov	r6, r18
    46a6:	a2 cf       	rjmp	.-188    	; 0x45ec <conv_brk+0xd4>
    46a8:	a0 96       	adiw	r28, 0x20	; 32
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	df 91       	pop	r29
    46b0:	cf 91       	pop	r28
    46b2:	1f 91       	pop	r17
    46b4:	0f 91       	pop	r16
    46b6:	ff 90       	pop	r15
    46b8:	ef 90       	pop	r14
    46ba:	df 90       	pop	r13
    46bc:	cf 90       	pop	r12
    46be:	bf 90       	pop	r11
    46c0:	af 90       	pop	r10
    46c2:	9f 90       	pop	r9
    46c4:	8f 90       	pop	r8
    46c6:	7f 90       	pop	r7
    46c8:	6f 90       	pop	r6
    46ca:	5f 90       	pop	r5
    46cc:	08 95       	ret

000046ce <vfscanf>:
    46ce:	5f 92       	push	r5
    46d0:	6f 92       	push	r6
    46d2:	7f 92       	push	r7
    46d4:	8f 92       	push	r8
    46d6:	9f 92       	push	r9
    46d8:	af 92       	push	r10
    46da:	bf 92       	push	r11
    46dc:	cf 92       	push	r12
    46de:	df 92       	push	r13
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	6c 01       	movw	r12, r24
    46ee:	eb 01       	movw	r28, r22
    46f0:	5a 01       	movw	r10, r20
    46f2:	fc 01       	movw	r30, r24
    46f4:	16 82       	std	Z+6, r1	; 0x06
    46f6:	17 82       	std	Z+7, r1	; 0x07
    46f8:	51 2c       	mov	r5, r1
    46fa:	f6 01       	movw	r30, r12
    46fc:	e3 80       	ldd	r14, Z+3	; 0x03
    46fe:	fe 01       	movw	r30, r28
    4700:	e3 fc       	sbrc	r14, 3
    4702:	85 91       	lpm	r24, Z+
    4704:	e3 fe       	sbrs	r14, 3
    4706:	81 91       	ld	r24, Z+
    4708:	18 2f       	mov	r17, r24
    470a:	ef 01       	movw	r28, r30
    470c:	88 23       	and	r24, r24
    470e:	09 f4       	brne	.+2      	; 0x4712 <vfscanf+0x44>
    4710:	ee c0       	rjmp	.+476    	; 0x48ee <vfscanf+0x220>
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	0e 94 8c 24 	call	0x4918	; 0x4918 <isspace>
    4718:	89 2b       	or	r24, r25
    471a:	21 f0       	breq	.+8      	; 0x4724 <vfscanf+0x56>
    471c:	c6 01       	movw	r24, r12
    471e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <skip_spaces>
    4722:	eb cf       	rjmp	.-42     	; 0x46fa <vfscanf+0x2c>
    4724:	15 32       	cpi	r17, 0x25	; 37
    4726:	41 f4       	brne	.+16     	; 0x4738 <vfscanf+0x6a>
    4728:	fe 01       	movw	r30, r28
    472a:	e3 fc       	sbrc	r14, 3
    472c:	15 91       	lpm	r17, Z+
    472e:	e3 fe       	sbrs	r14, 3
    4730:	11 91       	ld	r17, Z+
    4732:	ef 01       	movw	r28, r30
    4734:	15 32       	cpi	r17, 0x25	; 37
    4736:	81 f4       	brne	.+32     	; 0x4758 <vfscanf+0x8a>
    4738:	c6 01       	movw	r24, r12
    473a:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    473e:	97 fd       	sbrc	r25, 7
    4740:	d4 c0       	rjmp	.+424    	; 0x48ea <vfscanf+0x21c>
    4742:	41 2f       	mov	r20, r17
    4744:	50 e0       	ldi	r21, 0x00	; 0
    4746:	9c 01       	movw	r18, r24
    4748:	33 27       	eor	r19, r19
    474a:	24 17       	cp	r18, r20
    474c:	35 07       	cpc	r19, r21
    474e:	a9 f2       	breq	.-86     	; 0x46fa <vfscanf+0x2c>
    4750:	b6 01       	movw	r22, r12
    4752:	0e 94 de 24 	call	0x49bc	; 0x49bc <ungetc>
    4756:	cb c0       	rjmp	.+406    	; 0x48ee <vfscanf+0x220>
    4758:	1a 32       	cpi	r17, 0x2A	; 42
    475a:	39 f4       	brne	.+14     	; 0x476a <vfscanf+0x9c>
    475c:	e3 fc       	sbrc	r14, 3
    475e:	15 91       	lpm	r17, Z+
    4760:	e3 fe       	sbrs	r14, 3
    4762:	11 91       	ld	r17, Z+
    4764:	ef 01       	movw	r28, r30
    4766:	01 e0       	ldi	r16, 0x01	; 1
    4768:	01 c0       	rjmp	.+2      	; 0x476c <vfscanf+0x9e>
    476a:	00 e0       	ldi	r16, 0x00	; 0
    476c:	f1 2c       	mov	r15, r1
    476e:	20 ed       	ldi	r18, 0xD0	; 208
    4770:	21 0f       	add	r18, r17
    4772:	2a 30       	cpi	r18, 0x0A	; 10
    4774:	80 f4       	brcc	.+32     	; 0x4796 <vfscanf+0xc8>
    4776:	02 60       	ori	r16, 0x02	; 2
    4778:	6f 2d       	mov	r22, r15
    477a:	70 e0       	ldi	r23, 0x00	; 0
    477c:	80 e0       	ldi	r24, 0x00	; 0
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	40 e2       	ldi	r20, 0x20	; 32
    4782:	0e 94 ba 21 	call	0x4374	; 0x4374 <mulacc>
    4786:	f6 2e       	mov	r15, r22
    4788:	fe 01       	movw	r30, r28
    478a:	e3 fc       	sbrc	r14, 3
    478c:	15 91       	lpm	r17, Z+
    478e:	e3 fe       	sbrs	r14, 3
    4790:	11 91       	ld	r17, Z+
    4792:	ef 01       	movw	r28, r30
    4794:	ec cf       	rjmp	.-40     	; 0x476e <vfscanf+0xa0>
    4796:	01 ff       	sbrs	r16, 1
    4798:	03 c0       	rjmp	.+6      	; 0x47a0 <vfscanf+0xd2>
    479a:	f1 10       	cpse	r15, r1
    479c:	03 c0       	rjmp	.+6      	; 0x47a4 <vfscanf+0xd6>
    479e:	a7 c0       	rjmp	.+334    	; 0x48ee <vfscanf+0x220>
    47a0:	ff 24       	eor	r15, r15
    47a2:	fa 94       	dec	r15
    47a4:	18 36       	cpi	r17, 0x68	; 104
    47a6:	19 f0       	breq	.+6      	; 0x47ae <vfscanf+0xe0>
    47a8:	1c 36       	cpi	r17, 0x6C	; 108
    47aa:	51 f0       	breq	.+20     	; 0x47c0 <vfscanf+0xf2>
    47ac:	10 c0       	rjmp	.+32     	; 0x47ce <vfscanf+0x100>
    47ae:	fe 01       	movw	r30, r28
    47b0:	e3 fc       	sbrc	r14, 3
    47b2:	15 91       	lpm	r17, Z+
    47b4:	e3 fe       	sbrs	r14, 3
    47b6:	11 91       	ld	r17, Z+
    47b8:	ef 01       	movw	r28, r30
    47ba:	18 36       	cpi	r17, 0x68	; 104
    47bc:	41 f4       	brne	.+16     	; 0x47ce <vfscanf+0x100>
    47be:	08 60       	ori	r16, 0x08	; 8
    47c0:	04 60       	ori	r16, 0x04	; 4
    47c2:	fe 01       	movw	r30, r28
    47c4:	e3 fc       	sbrc	r14, 3
    47c6:	15 91       	lpm	r17, Z+
    47c8:	e3 fe       	sbrs	r14, 3
    47ca:	11 91       	ld	r17, Z+
    47cc:	ef 01       	movw	r28, r30
    47ce:	11 23       	and	r17, r17
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <vfscanf+0x106>
    47d2:	8d c0       	rjmp	.+282    	; 0x48ee <vfscanf+0x220>
    47d4:	61 2f       	mov	r22, r17
    47d6:	70 e0       	ldi	r23, 0x00	; 0
    47d8:	86 e1       	ldi	r24, 0x16	; 22
    47da:	93 e0       	ldi	r25, 0x03	; 3
    47dc:	0e 94 95 24 	call	0x492a	; 0x492a <strchr_P>
    47e0:	89 2b       	or	r24, r25
    47e2:	09 f4       	brne	.+2      	; 0x47e6 <vfscanf+0x118>
    47e4:	84 c0       	rjmp	.+264    	; 0x48ee <vfscanf+0x220>
    47e6:	00 fd       	sbrc	r16, 0
    47e8:	07 c0       	rjmp	.+14     	; 0x47f8 <vfscanf+0x12a>
    47ea:	f5 01       	movw	r30, r10
    47ec:	80 80       	ld	r8, Z
    47ee:	91 80       	ldd	r9, Z+1	; 0x01
    47f0:	c5 01       	movw	r24, r10
    47f2:	02 96       	adiw	r24, 0x02	; 2
    47f4:	5c 01       	movw	r10, r24
    47f6:	02 c0       	rjmp	.+4      	; 0x47fc <vfscanf+0x12e>
    47f8:	81 2c       	mov	r8, r1
    47fa:	91 2c       	mov	r9, r1
    47fc:	1e 36       	cpi	r17, 0x6E	; 110
    47fe:	51 f4       	brne	.+20     	; 0x4814 <vfscanf+0x146>
    4800:	f6 01       	movw	r30, r12
    4802:	46 81       	ldd	r20, Z+6	; 0x06
    4804:	57 81       	ldd	r21, Z+7	; 0x07
    4806:	60 e0       	ldi	r22, 0x00	; 0
    4808:	70 e0       	ldi	r23, 0x00	; 0
    480a:	20 2f       	mov	r18, r16
    480c:	c4 01       	movw	r24, r8
    480e:	0e 94 ae 21 	call	0x435c	; 0x435c <putval>
    4812:	73 cf       	rjmp	.-282    	; 0x46fa <vfscanf+0x2c>
    4814:	13 36       	cpi	r17, 0x63	; 99
    4816:	a9 f4       	brne	.+42     	; 0x4842 <vfscanf+0x174>
    4818:	01 fd       	sbrc	r16, 1
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <vfscanf+0x152>
    481c:	ff 24       	eor	r15, r15
    481e:	f3 94       	inc	r15
    4820:	c6 01       	movw	r24, r12
    4822:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    4826:	97 fd       	sbrc	r25, 7
    4828:	60 c0       	rjmp	.+192    	; 0x48ea <vfscanf+0x21c>
    482a:	81 14       	cp	r8, r1
    482c:	91 04       	cpc	r9, r1
    482e:	29 f0       	breq	.+10     	; 0x483a <vfscanf+0x16c>
    4830:	f4 01       	movw	r30, r8
    4832:	80 83       	st	Z, r24
    4834:	c4 01       	movw	r24, r8
    4836:	01 96       	adiw	r24, 0x01	; 1
    4838:	4c 01       	movw	r8, r24
    483a:	fa 94       	dec	r15
    483c:	f1 10       	cpse	r15, r1
    483e:	f0 cf       	rjmp	.-32     	; 0x4820 <vfscanf+0x152>
    4840:	50 c0       	rjmp	.+160    	; 0x48e2 <vfscanf+0x214>
    4842:	1b 35       	cpi	r17, 0x5B	; 91
    4844:	59 f4       	brne	.+22     	; 0x485c <vfscanf+0x18e>
    4846:	9e 01       	movw	r18, r28
    4848:	a4 01       	movw	r20, r8
    484a:	6f 2d       	mov	r22, r15
    484c:	c6 01       	movw	r24, r12
    484e:	0e 94 8c 22 	call	0x4518	; 0x4518 <conv_brk>
    4852:	ec 01       	movw	r28, r24
    4854:	89 2b       	or	r24, r25
    4856:	09 f0       	breq	.+2      	; 0x485a <vfscanf+0x18c>
    4858:	44 c0       	rjmp	.+136    	; 0x48e2 <vfscanf+0x214>
    485a:	3e c0       	rjmp	.+124    	; 0x48d8 <vfscanf+0x20a>
    485c:	c6 01       	movw	r24, r12
    485e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <skip_spaces>
    4862:	97 fd       	sbrc	r25, 7
    4864:	42 c0       	rjmp	.+132    	; 0x48ea <vfscanf+0x21c>
    4866:	1f 36       	cpi	r17, 0x6F	; 111
    4868:	61 f1       	breq	.+88     	; 0x48c2 <vfscanf+0x1f4>
    486a:	28 f4       	brcc	.+10     	; 0x4876 <vfscanf+0x1a8>
    486c:	14 36       	cpi	r17, 0x64	; 100
    486e:	39 f1       	breq	.+78     	; 0x48be <vfscanf+0x1f0>
    4870:	19 36       	cpi	r17, 0x69	; 105
    4872:	51 f1       	breq	.+84     	; 0x48c8 <vfscanf+0x1fa>
    4874:	28 c0       	rjmp	.+80     	; 0x48c6 <vfscanf+0x1f8>
    4876:	13 37       	cpi	r17, 0x73	; 115
    4878:	71 f0       	breq	.+28     	; 0x4896 <vfscanf+0x1c8>
    487a:	15 37       	cpi	r17, 0x75	; 117
    487c:	01 f1       	breq	.+64     	; 0x48be <vfscanf+0x1f0>
    487e:	23 c0       	rjmp	.+70     	; 0x48c6 <vfscanf+0x1f8>
    4880:	81 14       	cp	r8, r1
    4882:	91 04       	cpc	r9, r1
    4884:	29 f0       	breq	.+10     	; 0x4890 <vfscanf+0x1c2>
    4886:	f4 01       	movw	r30, r8
    4888:	60 82       	st	Z, r6
    488a:	c4 01       	movw	r24, r8
    488c:	01 96       	adiw	r24, 0x01	; 1
    488e:	4c 01       	movw	r8, r24
    4890:	fa 94       	dec	r15
    4892:	ff 20       	and	r15, r15
    4894:	71 f0       	breq	.+28     	; 0x48b2 <vfscanf+0x1e4>
    4896:	c6 01       	movw	r24, r12
    4898:	0e 94 a0 24 	call	0x4940	; 0x4940 <fgetc>
    489c:	3c 01       	movw	r6, r24
    489e:	97 fd       	sbrc	r25, 7
    48a0:	08 c0       	rjmp	.+16     	; 0x48b2 <vfscanf+0x1e4>
    48a2:	0e 94 8c 24 	call	0x4918	; 0x4918 <isspace>
    48a6:	89 2b       	or	r24, r25
    48a8:	59 f3       	breq	.-42     	; 0x4880 <vfscanf+0x1b2>
    48aa:	b6 01       	movw	r22, r12
    48ac:	c3 01       	movw	r24, r6
    48ae:	0e 94 de 24 	call	0x49bc	; 0x49bc <ungetc>
    48b2:	81 14       	cp	r8, r1
    48b4:	91 04       	cpc	r9, r1
    48b6:	a9 f0       	breq	.+42     	; 0x48e2 <vfscanf+0x214>
    48b8:	f4 01       	movw	r30, r8
    48ba:	10 82       	st	Z, r1
    48bc:	12 c0       	rjmp	.+36     	; 0x48e2 <vfscanf+0x214>
    48be:	00 62       	ori	r16, 0x20	; 32
    48c0:	03 c0       	rjmp	.+6      	; 0x48c8 <vfscanf+0x1fa>
    48c2:	00 61       	ori	r16, 0x10	; 16
    48c4:	01 c0       	rjmp	.+2      	; 0x48c8 <vfscanf+0x1fa>
    48c6:	00 64       	ori	r16, 0x40	; 64
    48c8:	20 2f       	mov	r18, r16
    48ca:	a4 01       	movw	r20, r8
    48cc:	6f 2d       	mov	r22, r15
    48ce:	c6 01       	movw	r24, r12
    48d0:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <conv_int>
    48d4:	81 11       	cpse	r24, r1
    48d6:	05 c0       	rjmp	.+10     	; 0x48e2 <vfscanf+0x214>
    48d8:	f6 01       	movw	r30, r12
    48da:	83 81       	ldd	r24, Z+3	; 0x03
    48dc:	80 73       	andi	r24, 0x30	; 48
    48de:	29 f4       	brne	.+10     	; 0x48ea <vfscanf+0x21c>
    48e0:	06 c0       	rjmp	.+12     	; 0x48ee <vfscanf+0x220>
    48e2:	00 fd       	sbrc	r16, 0
    48e4:	0a cf       	rjmp	.-492    	; 0x46fa <vfscanf+0x2c>
    48e6:	53 94       	inc	r5
    48e8:	08 cf       	rjmp	.-496    	; 0x46fa <vfscanf+0x2c>
    48ea:	55 20       	and	r5, r5
    48ec:	19 f0       	breq	.+6      	; 0x48f4 <vfscanf+0x226>
    48ee:	85 2d       	mov	r24, r5
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	02 c0       	rjmp	.+4      	; 0x48f8 <vfscanf+0x22a>
    48f4:	8f ef       	ldi	r24, 0xFF	; 255
    48f6:	9f ef       	ldi	r25, 0xFF	; 255
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	ff 90       	pop	r15
    4902:	ef 90       	pop	r14
    4904:	df 90       	pop	r13
    4906:	cf 90       	pop	r12
    4908:	bf 90       	pop	r11
    490a:	af 90       	pop	r10
    490c:	9f 90       	pop	r9
    490e:	8f 90       	pop	r8
    4910:	7f 90       	pop	r7
    4912:	6f 90       	pop	r6
    4914:	5f 90       	pop	r5
    4916:	08 95       	ret

00004918 <isspace>:
    4918:	91 11       	cpse	r25, r1
    491a:	0c 94 f7 24 	jmp	0x49ee	; 0x49ee <__ctype_isfalse>
    491e:	80 32       	cpi	r24, 0x20	; 32
    4920:	19 f0       	breq	.+6      	; 0x4928 <isspace+0x10>
    4922:	89 50       	subi	r24, 0x09	; 9
    4924:	85 50       	subi	r24, 0x05	; 5
    4926:	c8 f7       	brcc	.-14     	; 0x491a <isspace+0x2>
    4928:	08 95       	ret

0000492a <strchr_P>:
    492a:	fc 01       	movw	r30, r24
    492c:	05 90       	lpm	r0, Z+
    492e:	06 16       	cp	r0, r22
    4930:	21 f0       	breq	.+8      	; 0x493a <strchr_P+0x10>
    4932:	00 20       	and	r0, r0
    4934:	d9 f7       	brne	.-10     	; 0x492c <strchr_P+0x2>
    4936:	c0 01       	movw	r24, r0
    4938:	08 95       	ret
    493a:	31 97       	sbiw	r30, 0x01	; 1
    493c:	cf 01       	movw	r24, r30
    493e:	08 95       	ret

00004940 <fgetc>:
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	ec 01       	movw	r28, r24
    4946:	2b 81       	ldd	r18, Y+3	; 0x03
    4948:	20 ff       	sbrs	r18, 0
    494a:	33 c0       	rjmp	.+102    	; 0x49b2 <fgetc+0x72>
    494c:	26 ff       	sbrs	r18, 6
    494e:	0a c0       	rjmp	.+20     	; 0x4964 <fgetc+0x24>
    4950:	2f 7b       	andi	r18, 0xBF	; 191
    4952:	2b 83       	std	Y+3, r18	; 0x03
    4954:	8e 81       	ldd	r24, Y+6	; 0x06
    4956:	9f 81       	ldd	r25, Y+7	; 0x07
    4958:	01 96       	adiw	r24, 0x01	; 1
    495a:	8e 83       	std	Y+6, r24	; 0x06
    495c:	9f 83       	std	Y+7, r25	; 0x07
    495e:	8a 81       	ldd	r24, Y+2	; 0x02
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	29 c0       	rjmp	.+82     	; 0x49b6 <fgetc+0x76>
    4964:	22 ff       	sbrs	r18, 2
    4966:	0f c0       	rjmp	.+30     	; 0x4986 <fgetc+0x46>
    4968:	e8 81       	ld	r30, Y
    496a:	f9 81       	ldd	r31, Y+1	; 0x01
    496c:	80 81       	ld	r24, Z
    496e:	08 2e       	mov	r0, r24
    4970:	00 0c       	add	r0, r0
    4972:	99 0b       	sbc	r25, r25
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	19 f4       	brne	.+6      	; 0x497e <fgetc+0x3e>
    4978:	20 62       	ori	r18, 0x20	; 32
    497a:	2b 83       	std	Y+3, r18	; 0x03
    497c:	1a c0       	rjmp	.+52     	; 0x49b2 <fgetc+0x72>
    497e:	31 96       	adiw	r30, 0x01	; 1
    4980:	e8 83       	st	Y, r30
    4982:	f9 83       	std	Y+1, r31	; 0x01
    4984:	0e c0       	rjmp	.+28     	; 0x49a2 <fgetc+0x62>
    4986:	ea 85       	ldd	r30, Y+10	; 0x0a
    4988:	fb 85       	ldd	r31, Y+11	; 0x0b
    498a:	19 95       	eicall
    498c:	97 ff       	sbrs	r25, 7
    498e:	09 c0       	rjmp	.+18     	; 0x49a2 <fgetc+0x62>
    4990:	2b 81       	ldd	r18, Y+3	; 0x03
    4992:	01 96       	adiw	r24, 0x01	; 1
    4994:	11 f0       	breq	.+4      	; 0x499a <fgetc+0x5a>
    4996:	80 e2       	ldi	r24, 0x20	; 32
    4998:	01 c0       	rjmp	.+2      	; 0x499c <fgetc+0x5c>
    499a:	80 e1       	ldi	r24, 0x10	; 16
    499c:	82 2b       	or	r24, r18
    499e:	8b 83       	std	Y+3, r24	; 0x03
    49a0:	08 c0       	rjmp	.+16     	; 0x49b2 <fgetc+0x72>
    49a2:	2e 81       	ldd	r18, Y+6	; 0x06
    49a4:	3f 81       	ldd	r19, Y+7	; 0x07
    49a6:	2f 5f       	subi	r18, 0xFF	; 255
    49a8:	3f 4f       	sbci	r19, 0xFF	; 255
    49aa:	2e 83       	std	Y+6, r18	; 0x06
    49ac:	3f 83       	std	Y+7, r19	; 0x07
    49ae:	99 27       	eor	r25, r25
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <fgetc+0x76>
    49b2:	8f ef       	ldi	r24, 0xFF	; 255
    49b4:	9f ef       	ldi	r25, 0xFF	; 255
    49b6:	df 91       	pop	r29
    49b8:	cf 91       	pop	r28
    49ba:	08 95       	ret

000049bc <ungetc>:
    49bc:	fb 01       	movw	r30, r22
    49be:	23 81       	ldd	r18, Z+3	; 0x03
    49c0:	20 ff       	sbrs	r18, 0
    49c2:	12 c0       	rjmp	.+36     	; 0x49e8 <ungetc+0x2c>
    49c4:	26 fd       	sbrc	r18, 6
    49c6:	10 c0       	rjmp	.+32     	; 0x49e8 <ungetc+0x2c>
    49c8:	8f 3f       	cpi	r24, 0xFF	; 255
    49ca:	3f ef       	ldi	r19, 0xFF	; 255
    49cc:	93 07       	cpc	r25, r19
    49ce:	61 f0       	breq	.+24     	; 0x49e8 <ungetc+0x2c>
    49d0:	82 83       	std	Z+2, r24	; 0x02
    49d2:	2f 7d       	andi	r18, 0xDF	; 223
    49d4:	20 64       	ori	r18, 0x40	; 64
    49d6:	23 83       	std	Z+3, r18	; 0x03
    49d8:	26 81       	ldd	r18, Z+6	; 0x06
    49da:	37 81       	ldd	r19, Z+7	; 0x07
    49dc:	21 50       	subi	r18, 0x01	; 1
    49de:	31 09       	sbc	r19, r1
    49e0:	26 83       	std	Z+6, r18	; 0x06
    49e2:	37 83       	std	Z+7, r19	; 0x07
    49e4:	99 27       	eor	r25, r25
    49e6:	08 95       	ret
    49e8:	8f ef       	ldi	r24, 0xFF	; 255
    49ea:	9f ef       	ldi	r25, 0xFF	; 255
    49ec:	08 95       	ret

000049ee <__ctype_isfalse>:
    49ee:	99 27       	eor	r25, r25
    49f0:	88 27       	eor	r24, r24

000049f2 <__ctype_istrue>:
    49f2:	08 95       	ret

000049f4 <_exit>:
    49f4:	f8 94       	cli

000049f6 <__stop_program>:
    49f6:	ff cf       	rjmp	.-2      	; 0x49f6 <__stop_program>
