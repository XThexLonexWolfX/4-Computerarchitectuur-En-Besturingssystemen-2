
Linebot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00802000  00002278  0000230c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000408f  008020f0  008020f0  000023fc  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008fa0  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b63  00000000  00000000  0000b868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000337d  00000000  00000000  0000f3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c00  00000000  00000000  00012748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003945  00000000  00000000  00013348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004aab  00000000  00000000  00016c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  0001b738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 01 	jmp	0x312	; 0x312 <__ctors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      34:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      38:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_14>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_16>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      78:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      7c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      80:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_46>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      fc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     100:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     104:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     108:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     10c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     110:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     114:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     118:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     11c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     120:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     124:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     128:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     12c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     130:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     134:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     138:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     13c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     140:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     144:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     148:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     14c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     150:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     154:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     158:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     15c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     160:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     164:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     168:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     16c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     170:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     174:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     178:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     17c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     180:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     184:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     188:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     18c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     190:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     194:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     198:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     19c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 82 02 	jmp	0x504	; 0x504 <stdio_putchar>
     200:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <WorkerReceiveTask>
     204:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <prvIdleTask>
     208:	0c 94 8e 02 	jmp	0x51c	; 0x51c <stdio_getchar>
     20c:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <WorkerSendTask>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df e9       	ldi	r29, 0x9F	; 159
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60

00000322 <__do_copy_data>:
     322:	10 e2       	ldi	r17, 0x20	; 32
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b0 e2       	ldi	r27, 0x20	; 32
     328:	e8 e7       	ldi	r30, 0x78	; 120
     32a:	f2 e2       	ldi	r31, 0x22	; 34
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	a0 3f       	cpi	r26, 0xF0	; 240
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	21 e6       	ldi	r18, 0x61	; 97
     33e:	a0 ef       	ldi	r26, 0xF0	; 240
     340:	b0 e2       	ldi	r27, 0x20	; 32
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	af 37       	cpi	r26, 0x7F	; 127
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <main>
     350:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     358:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     35a:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     35e:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     362:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     366:	90 81       	ld	r25, Z
     368:	99 23       	and	r25, r25
     36a:	69 f0       	breq	.+26     	; 0x386 <DbgPrint+0x2e>
     36c:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     36e:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     370:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     374:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     378:	96 ff       	sbrs	r25, 6
     37a:	fc cf       	rjmp	.-8      	; 0x374 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     37c:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     380:	91 91       	ld	r25, Z+
     382:	91 11       	cpse	r25, r1
     384:	f5 cf       	rjmp	.-22     	; 0x370 <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     386:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     38a:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     38e:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     392:	08 95       	ret

00000394 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     394:	8b ec       	ldi	r24, 0xCB	; 203
     396:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     3a0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3a4:	83 ff       	sbrs	r24, 3
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3a8:	82 ec       	ldi	r24, 0xC2	; 194
     3aa:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3ae:	88 e1       	ldi	r24, 0x18	; 24
     3b0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3b4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3b8:	84 ff       	sbrs	r24, 4
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3bc:	88 ed       	ldi	r24, 0xD8	; 216
     3be:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	08 95       	ret

000003ca <TWIMWriteHandler>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     3ca:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <Twim_bytesToWrite>
     3ce:	20 91 f3 20 	lds	r18, 0x20F3	; 0x8020f3 <Twim_bytesToRead>
     3d2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     3d6:	84 fd       	sbrc	r24, 4
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <TWIMWriteHandler+0x20>
     3da:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <Twim_bytesWritten>
     3de:	89 17       	cp	r24, r25
     3e0:	50 f0       	brcs	.+20     	; 0x3f6 <TWIMWriteHandler+0x2c>
     3e2:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <Twim_bytesRead>
     3e6:	82 17       	cp	r24, r18
     3e8:	b8 f0       	brcs	.+46     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     3f0:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
     3f4:	08 95       	ret
     3f6:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <Twim_bytesWritten>
     3fa:	e0 91 f7 20 	lds	r30, 0x20F7	; 0x8020f7 <Twim_writeData>
     3fe:	f0 91 f8 20 	lds	r31, 0x20F8	; 0x8020f8 <Twim_writeData+0x1>
     402:	e8 0f       	add	r30, r24
     404:	f1 1d       	adc	r31, r1
     406:	80 81       	ld	r24, Z
     408:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     40c:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <Twim_bytesWritten>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <Twim_bytesWritten>
     416:	08 95       	ret
     418:	80 91 f9 20 	lds	r24, 0x20F9	; 0x8020f9 <Twim_address>
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     422:	08 95       	ret

00000424 <TWIMReadHandler>:
     424:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <Twim_bytesRead>
     428:	80 32       	cpi	r24, 0x20	; 32
     42a:	e0 f4       	brcc	.+56     	; 0x464 <TWIMReadHandler+0x40>
     42c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     430:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <Twim_bytesRead>
     434:	e0 91 f5 20 	lds	r30, 0x20F5	; 0x8020f5 <Twim_readData>
     438:	f0 91 f6 20 	lds	r31, 0x20F6	; 0x8020f6 <Twim_readData+0x1>
     43c:	e9 0f       	add	r30, r25
     43e:	f1 1d       	adc	r31, r1
     440:	80 83       	st	Z, r24
     442:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <Twim_bytesRead>
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <Twim_bytesRead>
     44c:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <Twim_bytesToRead>
     450:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <Twim_bytesRead>
     454:	89 17       	cp	r24, r25
     456:	88 f0       	brcs	.+34     	; 0x47a <TWIMReadHandler+0x56>
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     45e:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
     462:	08 95       	ret
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     46a:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
     46e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <Twim_bytesToRead>
     472:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <Twim_bytesRead>
     476:	89 17       	cp	r24, r25
     478:	78 f7       	brcc	.-34     	; 0x458 <TWIMReadHandler+0x34>
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     480:	08 95       	ret

00000482 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	0b b6       	in	r0, 0x3b	; 59
     48e:	0f 92       	push	r0
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4a8:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     4ac:	98 2f       	mov	r25, r24
     4ae:	9c 70       	andi	r25, 0x0C	; 12
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     4b2:	86 fd       	sbrc	r24, 6
     4b4:	21 c0       	rjmp	.+66     	; 0x4f8 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     4b6:	87 fd       	sbrc	r24, 7
     4b8:	22 c0       	rjmp	.+68     	; 0x4fe <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     4ba:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4c0:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     4ca:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     4ce:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <__data_end>
	{	
	}
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	0b be       	out	0x3b, r0	; 59
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     4f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TWIMWriteHandler>
     4fc:	e8 cf       	rjmp	.-48     	; 0x4ce <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     4fe:	0e 94 12 02 	call	0x424	; 0x424 <TWIMReadHandler>
     502:	e5 cf       	rjmp	.-54     	; 0x4ce <__vector_46+0x4c>

00000504 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     504:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     508:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     50c:	86 ff       	sbrs	r24, 6
     50e:	fc cf       	rjmp	.-8      	; 0x508 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     510:	80 e4       	ldi	r24, 0x40	; 64
     512:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	08 95       	ret

0000051c <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     51c:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     520:	87 ff       	sbrs	r24, 7
     522:	fc cf       	rjmp	.-8      	; 0x51c <stdio_getchar>
	return USART.DATA;
     524:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	08 95       	ret

0000052c <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     52c:	e0 e8       	ldi	r30, 0x80	; 128
     52e:	f6 e0       	ldi	r31, 0x06	; 6
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     53e:	88 e1       	ldi	r24, 0x18	; 24
     540:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     546:	85 ee       	ldi	r24, 0xE5	; 229
     548:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     54a:	8c eb       	ldi	r24, 0xBC	; 188
     54c:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     54e:	e9 e7       	ldi	r30, 0x79	; 121
     550:	f1 e6       	ldi	r31, 0x61	; 97
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e2       	ldi	r25, 0x20	; 32
     556:	82 83       	std	Z+2, r24	; 0x02
     558:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	08 95       	ret

00000560 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     56a:	0e 94 a5 08 	call	0x114a	; 0x114a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     56e:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <xHeapHasBeenInitialised.4119>
     572:	81 11       	cpse	r24, r1
     574:	21 c0       	rjmp	.+66     	; 0x5b8 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	91 e2       	ldi	r25, 0x21	; 33
     57a:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <xStart>
     57e:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     582:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <xStart+0x2>
     586:	10 92 02 21 	sts	0x2102, r1	; 0x802102 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9f e3       	ldi	r25, 0x3F	; 63
     58e:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <xEnd+0x2>
     592:	90 93 fe 20 	sts	0x20FE, r25	; 0x8020fe <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     596:	10 92 fb 20 	sts	0x20FB, r1	; 0x8020fb <xEnd>
     59a:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     59e:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <ucHeap+0x3>
     5a2:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     5a6:	8b ef       	ldi	r24, 0xFB	; 251
     5a8:	90 e2       	ldi	r25, 0x20	; 32
     5aa:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <ucHeap+0x1>
     5ae:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 fa 20 	sts	0x20FA, r24	; 0x8020fa <xHeapHasBeenInitialised.4119>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     5b8:	20 97       	sbiw	r28, 0x00	; 0
     5ba:	09 f4       	brne	.+2      	; 0x5be <pvPortMalloc+0x5e>
     5bc:	64 c0       	rjmp	.+200    	; 0x686 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     5be:	ae 01       	movw	r20, r28
     5c0:	4c 5f       	subi	r20, 0xFC	; 252
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     5c4:	23 96       	adiw	r28, 0x03	; 3
     5c6:	ce 3f       	cpi	r28, 0xFE	; 254
     5c8:	df 43       	sbci	r29, 0x3F	; 63
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <pvPortMalloc+0x6e>
     5cc:	5c c0       	rjmp	.+184    	; 0x686 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     5ce:	e0 91 ff 20 	lds	r30, 0x20FF	; 0x8020ff <xStart>
     5d2:	f0 91 00 21 	lds	r31, 0x2100	; 0x802100 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     5d6:	af ef       	ldi	r26, 0xFF	; 255
     5d8:	b0 e2       	ldi	r27, 0x20	; 32
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <pvPortMalloc+0x88>
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <pvPortMalloc+0x92>
     5e4:	df 01       	movw	r26, r30
     5e6:	fc 01       	movw	r30, r24
     5e8:	22 81       	ldd	r18, Z+2	; 0x02
     5ea:	33 81       	ldd	r19, Z+3	; 0x03
     5ec:	24 17       	cp	r18, r20
     5ee:	35 07       	cpc	r19, r21
     5f0:	a8 f3       	brcs	.-22     	; 0x5dc <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5f2:	c0 e2       	ldi	r28, 0x20	; 32
     5f4:	eb 3f       	cpi	r30, 0xFB	; 251
     5f6:	fc 07       	cpc	r31, r28
     5f8:	09 f4       	brne	.+2      	; 0x5fc <pvPortMalloc+0x9c>
     5fa:	45 c0       	rjmp	.+138    	; 0x686 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5fc:	cd 91       	ld	r28, X+
     5fe:	dc 91       	ld	r29, X
     600:	11 97       	sbiw	r26, 0x01	; 1
     602:	8e 01       	movw	r16, r28
     604:	0c 5f       	subi	r16, 0xFC	; 252
     606:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	8d 93       	st	X+, r24
     60e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     610:	c9 01       	movw	r24, r18
     612:	84 1b       	sub	r24, r20
     614:	95 0b       	sbc	r25, r21
     616:	89 30       	cpi	r24, 0x09	; 9
     618:	91 05       	cpc	r25, r1
     61a:	00 f1       	brcs	.+64     	; 0x65c <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     61c:	bf 01       	movw	r22, r30
     61e:	64 0f       	add	r22, r20
     620:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     622:	db 01       	movw	r26, r22
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	8d 93       	st	X+, r24
     628:	9c 93       	st	X, r25
     62a:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     62c:	42 83       	std	Z+2, r20	; 0x02
     62e:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     630:	12 96       	adiw	r26, 0x02	; 2
     632:	2d 91       	ld	r18, X+
     634:	3c 91       	ld	r19, X
     636:	13 97       	sbiw	r26, 0x03	; 3
     638:	af ef       	ldi	r26, 0xFF	; 255
     63a:	b0 e2       	ldi	r27, 0x20	; 32
     63c:	01 c0       	rjmp	.+2      	; 0x640 <pvPortMalloc+0xe0>
     63e:	df 01       	movw	r26, r30
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	82 81       	ldd	r24, Z+2	; 0x02
     648:	93 81       	ldd	r25, Z+3	; 0x03
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	b8 f3       	brcs	.-18     	; 0x63e <pvPortMalloc+0xde>
     650:	eb 01       	movw	r28, r22
     652:	e8 83       	st	Y, r30
     654:	f9 83       	std	Y+1, r31	; 0x01
     656:	6d 93       	st	X+, r22
     658:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     65a:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     65c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     660:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     664:	82 1b       	sub	r24, r18
     666:	93 0b       	sbc	r25, r19
     668:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     66c:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     670:	0e 94 85 09 	call	0x130a	; 0x130a <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     674:	01 15       	cp	r16, r1
     676:	11 05       	cpc	r17, r1
     678:	41 f0       	breq	.+16     	; 0x68a <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     67a:	c8 01       	movw	r24, r16
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     686:	0e 94 85 09 	call	0x130a	; 0x130a <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     68a:	0e 94 44 0a 	call	0x1488	; 0x1488 <vApplicationMallocFailedHook>
     68e:	00 e0       	ldi	r16, 0x00	; 0
     690:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     692:	c8 01       	movw	r24, r16
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	21 f1       	breq	.+72     	; 0x6ee <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     6a6:	ec 01       	movw	r28, r24
     6a8:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     6aa:	0e 94 a5 08 	call	0x114a	; 0x114a <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6ae:	4a 81       	ldd	r20, Y+2	; 0x02
     6b0:	5b 81       	ldd	r21, Y+3	; 0x03
     6b2:	af ef       	ldi	r26, 0xFF	; 255
     6b4:	b0 e2       	ldi	r27, 0x20	; 32
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <vPortFree+0x1c>
     6b8:	df 01       	movw	r26, r30
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	11 97       	sbiw	r26, 0x01	; 1
     6c0:	22 81       	ldd	r18, Z+2	; 0x02
     6c2:	33 81       	ldd	r19, Z+3	; 0x03
     6c4:	24 17       	cp	r18, r20
     6c6:	35 07       	cpc	r19, r21
     6c8:	b8 f3       	brcs	.-18     	; 0x6b8 <vPortFree+0x1a>
     6ca:	e8 83       	st	Y, r30
     6cc:	f9 83       	std	Y+1, r31	; 0x01
     6ce:	cd 93       	st	X+, r28
     6d0:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     6d2:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6d6:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6da:	48 0f       	add	r20, r24
     6dc:	59 1f       	adc	r21, r25
     6de:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     6e2:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6ea:	0c 94 85 09 	jmp	0x130a	; 0x130a <xTaskResumeAll>
	}
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6f4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f6:	03 96       	adiw	r24, 0x03	; 3
     6f8:	81 83       	std	Z+1, r24	; 0x01
     6fa:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	3f ef       	ldi	r19, 0xFF	; 255
     700:	23 83       	std	Z+3, r18	; 0x03
     702:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     704:	85 83       	std	Z+5, r24	; 0x05
     706:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     708:	87 83       	std	Z+7, r24	; 0x07
     70a:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     70c:	10 82       	st	Z, r1
     70e:	08 95       	ret

00000710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     710:	fc 01       	movw	r30, r24
     712:	10 86       	std	Z+8, r1	; 0x08
     714:	11 86       	std	Z+9, r1	; 0x09
     716:	08 95       	ret

00000718 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	9c 01       	movw	r18, r24
     71e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     720:	dc 01       	movw	r26, r24
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	cd 91       	ld	r28, X+
     726:	dc 91       	ld	r29, X
     728:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     72a:	c2 83       	std	Z+2, r28	; 0x02
     72c:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     72e:	8c 81       	ldd	r24, Y+4	; 0x04
     730:	9d 81       	ldd	r25, Y+5	; 0x05
     732:	84 83       	std	Z+4, r24	; 0x04
     734:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     736:	8c 81       	ldd	r24, Y+4	; 0x04
     738:	9d 81       	ldd	r25, Y+5	; 0x05
     73a:	dc 01       	movw	r26, r24
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	6d 93       	st	X+, r22
     740:	7c 93       	st	X, r23
     742:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     744:	6c 83       	std	Y+4, r22	; 0x04
     746:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     748:	20 87       	std	Z+8, r18	; 0x08
     74a:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     74c:	f9 01       	movw	r30, r18
     74e:	80 81       	ld	r24, Z
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	80 83       	st	Z, r24
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     760:	48 81       	ld	r20, Y
     762:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     764:	4f 3f       	cpi	r20, 0xFF	; 255
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	52 07       	cpc	r21, r18
     76a:	01 f1       	breq	.+64     	; 0x7ac <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     76c:	dc 01       	movw	r26, r24
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	01 c0       	rjmp	.+2      	; 0x774 <vListInsert+0x1a>
     772:	df 01       	movw	r26, r30
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	13 97       	sbiw	r26, 0x03	; 3
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	42 17       	cp	r20, r18
     782:	53 07       	cpc	r21, r19
     784:	b0 f7       	brcc	.-20     	; 0x772 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     786:	ea 83       	std	Y+2, r30	; 0x02
     788:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     78a:	c4 83       	std	Z+4, r28	; 0x04
     78c:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     78e:	ac 83       	std	Y+4, r26	; 0x04
     790:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	cd 93       	st	X+, r28
     796:	dc 93       	st	X, r29
     798:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     79a:	88 87       	std	Y+8, r24	; 0x08
     79c:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     79e:	fc 01       	movw	r30, r24
     7a0:	20 81       	ld	r18, Z
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	20 83       	st	Z, r18
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     7ac:	fc 01       	movw	r30, r24
     7ae:	a7 81       	ldd	r26, Z+7	; 0x07
     7b0:	b0 85       	ldd	r27, Z+8	; 0x08
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	e5 cf       	rjmp	.-54     	; 0x786 <vListInsert+0x2c>

000007bc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     7c2:	a0 85       	ldd	r26, Z+8	; 0x08
     7c4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7c6:	22 81       	ldd	r18, Z+2	; 0x02
     7c8:	33 81       	ldd	r19, Z+3	; 0x03
     7ca:	84 81       	ldd	r24, Z+4	; 0x04
     7cc:	95 81       	ldd	r25, Z+5	; 0x05
     7ce:	e9 01       	movw	r28, r18
     7d0:	8c 83       	std	Y+4, r24	; 0x04
     7d2:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	95 81       	ldd	r25, Z+5	; 0x05
     7d8:	ec 01       	movw	r28, r24
     7da:	2a 83       	std	Y+2, r18	; 0x02
     7dc:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	2d 91       	ld	r18, X+
     7e2:	3c 91       	ld	r19, X
     7e4:	12 97       	sbiw	r26, 0x02	; 2
     7e6:	e2 17       	cp	r30, r18
     7e8:	f3 07       	cpc	r31, r19
     7ea:	49 f0       	breq	.+18     	; 0x7fe <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     7ec:	10 86       	std	Z+8, r1	; 0x08
     7ee:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     7f0:	8c 91       	ld	r24, X
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     7f6:	8c 91       	ld	r24, X
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7fe:	11 96       	adiw	r26, 0x01	; 1
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	12 97       	sbiw	r26, 0x02	; 2
     806:	f2 cf       	rjmp	.-28     	; 0x7ec <uxListRemove+0x30>

00000808 <pxPortInitialiseStack>:
//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
	asm volatile ( "ret" );
     808:	31 e1       	ldi	r19, 0x11	; 17
     80a:	fc 01       	movw	r30, r24
     80c:	30 83       	st	Z, r19
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	22 e2       	ldi	r18, 0x22	; 34
     812:	20 83       	st	Z, r18
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	a3 e3       	ldi	r26, 0x33	; 51
     818:	a0 83       	st	Z, r26
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	60 83       	st	Z, r22
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	70 83       	st	Z, r23
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	10 82       	st	Z, r1
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	10 82       	st	Z, r1
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	60 e8       	ldi	r22, 0x80	; 128
     82e:	60 83       	st	Z, r22
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	10 82       	st	Z, r1
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	60 83       	st	Z, r22
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	63 e0       	ldi	r22, 0x03	; 3
     83e:	60 83       	st	Z, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	64 e0       	ldi	r22, 0x04	; 4
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	65 e0       	ldi	r22, 0x05	; 5
     84a:	60 83       	st	Z, r22
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	60 83       	st	Z, r22
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	67 e0       	ldi	r22, 0x07	; 7
     856:	60 83       	st	Z, r22
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	68 e0       	ldi	r22, 0x08	; 8
     85c:	60 83       	st	Z, r22
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	69 e0       	ldi	r22, 0x09	; 9
     862:	60 83       	st	Z, r22
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	60 e1       	ldi	r22, 0x10	; 16
     868:	60 83       	st	Z, r22
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	30 83       	st	Z, r19
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	32 e1       	ldi	r19, 0x12	; 18
     872:	30 83       	st	Z, r19
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	33 e1       	ldi	r19, 0x13	; 19
     878:	30 83       	st	Z, r19
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	34 e1       	ldi	r19, 0x14	; 20
     87e:	30 83       	st	Z, r19
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	35 e1       	ldi	r19, 0x15	; 21
     884:	30 83       	st	Z, r19
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	36 e1       	ldi	r19, 0x16	; 22
     88a:	30 83       	st	Z, r19
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	37 e1       	ldi	r19, 0x17	; 23
     890:	30 83       	st	Z, r19
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	38 e1       	ldi	r19, 0x18	; 24
     896:	30 83       	st	Z, r19
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	39 e1       	ldi	r19, 0x19	; 25
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	30 e2       	ldi	r19, 0x20	; 32
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	31 e2       	ldi	r19, 0x21	; 33
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	20 83       	st	Z, r18
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	23 e2       	ldi	r18, 0x23	; 35
     8b2:	20 83       	st	Z, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	40 83       	st	Z, r20
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	50 83       	st	Z, r21
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	26 e2       	ldi	r18, 0x26	; 38
     8c0:	20 83       	st	Z, r18
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	27 e2       	ldi	r18, 0x27	; 39
     8c6:	20 83       	st	Z, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	28 e2       	ldi	r18, 0x28	; 40
     8cc:	20 83       	st	Z, r18
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	29 e2       	ldi	r18, 0x29	; 41
     8d2:	20 83       	st	Z, r18
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	20 e3       	ldi	r18, 0x30	; 48
     8d8:	20 83       	st	Z, r18
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	21 e3       	ldi	r18, 0x31	; 49
     8de:	20 83       	st	Z, r18
     8e0:	87 97       	sbiw	r24, 0x27	; 39
     8e2:	08 95       	ret

000008e4 <xPortStartScheduler>:
     8e4:	e0 e0       	ldi	r30, 0x00	; 0
     8e6:	f8 e0       	ldi	r31, 0x08	; 8
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	80 a7       	std	Z+40, r24	; 0x28
     8ee:	91 a7       	std	Z+41, r25	; 0x29
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 83       	st	Z, r24
     8f4:	90 e4       	ldi	r25, 0x40	; 64
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	86 83       	std	Z+6, r24	; 0x06
     8fa:	87 83       	std	Z+7, r24	; 0x07
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	9d e7       	ldi	r25, 0x7D	; 125
     900:	86 a3       	std	Z+38, r24	; 0x26
     902:	97 a3       	std	Z+39, r25	; 0x27
     904:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     908:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     90c:	cd 91       	ld	r28, X+
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	dd 91       	ld	r29, X+
     912:	de bf       	out	0x3e, r29	; 62
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	3f 90       	pop	r3
     94e:	2f 90       	pop	r2
     950:	1f 90       	pop	r1
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	08 95       	ret
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	08 95       	ret

0000095e <vPortYield>:
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	0f 92       	push	r0
     966:	1f 92       	push	r1
     968:	11 24       	eor	r1, r1
     96a:	2f 92       	push	r2
     96c:	3f 92       	push	r3
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
     9a6:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     9aa:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     9ae:	0d b6       	in	r0, 0x3d	; 61
     9b0:	0d 92       	st	X+, r0
     9b2:	0e b6       	in	r0, 0x3e	; 62
     9b4:	0d 92       	st	X+, r0
     9b6:	0e 94 39 0a 	call	0x1472	; 0x1472 <vTaskSwitchContext>
     9ba:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     9be:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     9c2:	cd 91       	ld	r28, X+
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	dd 91       	ld	r29, X+
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	1f 90       	pop	r1
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	08 95       	ret

00000a10 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	0f 92       	push	r0
     a18:	1f 92       	push	r1
     a1a:	11 24       	eor	r1, r1
     a1c:	2f 92       	push	r2
     a1e:	3f 92       	push	r3
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
     a58:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     a5c:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     a60:	0d b6       	in	r0, 0x3d	; 61
     a62:	0d 92       	st	X+, r0
     a64:	0e b6       	in	r0, 0x3e	; 62
     a66:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     a68:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a6c:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a70:	80 91 71 61 	lds	r24, 0x6171	; 0x806171 <StatsTimer>
     a74:	90 91 72 61 	lds	r25, 0x6172	; 0x806172 <StatsTimer+0x1>
     a78:	a0 91 73 61 	lds	r26, 0x6173	; 0x806173 <StatsTimer+0x2>
     a7c:	b0 91 74 61 	lds	r27, 0x6174	; 0x806174 <StatsTimer+0x3>
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 71 61 	sts	0x6171, r24	; 0x806171 <StatsTimer>
     a8c:	90 93 72 61 	sts	0x6172, r25	; 0x806172 <StatsTimer+0x1>
     a90:	a0 93 73 61 	sts	0x6173, r26	; 0x806173 <StatsTimer+0x2>
     a94:	b0 93 74 61 	sts	0x6174, r27	; 0x806174 <StatsTimer+0x3>
		xTaskIncrementTick();
     a98:	0e 94 ab 08 	call	0x1156	; 0x1156 <xTaskIncrementTick>
		vTaskSwitchContext();
     a9c:	0e 94 39 0a 	call	0x1472	; 0x1472 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     aa0:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     aa4:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     aa8:	cd 91       	ld	r28, X+
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	dd 91       	ld	r29, X+
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
     ae0:	7f 90       	pop	r7
     ae2:	6f 90       	pop	r6
     ae4:	5f 90       	pop	r5
     ae6:	4f 90       	pop	r4
     ae8:	3f 90       	pop	r3
     aea:	2f 90       	pop	r2
     aec:	1f 90       	pop	r1
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0

		asm volatile ( "reti" );
     af4:	18 95       	reti

00000af6 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     af6:	08 95       	ret

00000af8 <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	0f 92       	push	r0
     b00:	1f 92       	push	r1
     b02:	11 24       	eor	r1, r1
     b04:	2f 92       	push	r2
     b06:	3f 92       	push	r3
     b08:	4f 92       	push	r4
     b0a:	5f 92       	push	r5
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     b44:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     b48:	0d b6       	in	r0, 0x3d	; 61
     b4a:	0d 92       	st	X+, r0
     b4c:	0e b6       	in	r0, 0x3e	; 62
     b4e:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	9f ef       	ldi	r25, 0xFF	; 255
     b54:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     b58:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
     b5c:	0e 94 39 0a 	call	0x1472	; 0x1472 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b60:	a0 91 6b 61 	lds	r26, 0x616B	; 0x80616b <pxCurrentTCB>
     b64:	b0 91 6c 61 	lds	r27, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     b68:	cd 91       	ld	r28, X+
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	dd 91       	ld	r29, X+
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	9f 90       	pop	r9
     b9e:	8f 90       	pop	r8
     ba0:	7f 90       	pop	r7
     ba2:	6f 90       	pop	r6
     ba4:	5f 90       	pop	r5
     ba6:	4f 90       	pop	r4
     ba8:	3f 90       	pop	r3
     baa:	2f 90       	pop	r2
     bac:	1f 90       	pop	r1
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
	asm volatile ( "reti" );
     bb4:	18 95       	reti

00000bb6 <prvIdleTask>:
	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
     bb6:	20 c0       	rjmp	.+64     	; 0xbf8 <prvIdleTask+0x42>
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	0f 92       	push	r0
     bbe:	e0 91 24 61 	lds	r30, 0x6124	; 0x806124 <xTasksWaitingTermination+0x5>
     bc2:	f0 91 25 61 	lds	r31, 0x6125	; 0x806125 <xTasksWaitingTermination+0x6>
     bc6:	c6 81       	ldd	r28, Z+6	; 0x06
     bc8:	d7 81       	ldd	r29, Z+7	; 0x07
     bca:	ce 01       	movw	r24, r28
     bcc:	02 96       	adiw	r24, 0x02	; 2
     bce:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
     bd2:	80 91 14 61 	lds	r24, 0x6114	; 0x806114 <uxCurrentNumberOfTasks>
     bd6:	81 50       	subi	r24, 0x01	; 1
     bd8:	80 93 14 61 	sts	0x6114, r24	; 0x806114 <uxCurrentNumberOfTasks>
     bdc:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <uxDeletedTasksWaitingCleanUp>
     be0:	81 50       	subi	r24, 0x01	; 1
     be2:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <uxDeletedTasksWaitingCleanUp>
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	8f 89       	ldd	r24, Y+23	; 0x17
     bec:	98 8d       	ldd	r25, Y+24	; 0x18
     bee:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
     bf8:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <uxDeletedTasksWaitingCleanUp>
     bfc:	81 11       	cpse	r24, r1
     bfe:	dc cf       	rjmp	.-72     	; 0xbb8 <prvIdleTask+0x2>
     c00:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <pxReadyTasksLists>
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	10 f0       	brcs	.+4      	; 0xc0c <prvIdleTask+0x56>
     c08:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     c0c:	0e 94 43 0a 	call	0x1486	; 0x1486 <vApplicationIdleHook>
     c10:	f3 cf       	rjmp	.-26     	; 0xbf8 <prvIdleTask+0x42>

00000c12 <prvResetNextTaskUnblockTime.part.0>:
     c12:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
     c16:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
     c1a:	05 80       	ldd	r0, Z+5	; 0x05
     c1c:	f6 81       	ldd	r31, Z+6	; 0x06
     c1e:	e0 2d       	mov	r30, r0
     c20:	06 80       	ldd	r0, Z+6	; 0x06
     c22:	f7 81       	ldd	r31, Z+7	; 0x07
     c24:	e0 2d       	mov	r30, r0
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	80 93 0a 61 	sts	0x610A, r24	; 0x80610a <xNextTaskUnblockTime>
     c2e:	90 93 0b 61 	sts	0x610B, r25	; 0x80610b <xNextTaskUnblockTime+0x1>
     c32:	08 95       	ret

00000c34 <prvAddCurrentTaskToDelayedList>:
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
     c40:	f6 2e       	mov	r15, r22
     c42:	00 91 12 61 	lds	r16, 0x6112	; 0x806112 <xTickCount>
     c46:	10 91 13 61 	lds	r17, 0x6113	; 0x806113 <xTickCount+0x1>
     c4a:	80 91 6b 61 	lds	r24, 0x616B	; 0x80616b <pxCurrentTCB>
     c4e:	90 91 6c 61 	lds	r25, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     c52:	02 96       	adiw	r24, 0x02	; 2
     c54:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
     c58:	cf 3f       	cpi	r28, 0xFF	; 255
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	d8 07       	cpc	r29, r24
     c5e:	a9 f1       	breq	.+106    	; 0xcca <prvAddCurrentTaskToDelayedList+0x96>
     c60:	c0 0f       	add	r28, r16
     c62:	d1 1f       	adc	r29, r17
     c64:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
     c68:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     c6c:	c2 83       	std	Z+2, r28	; 0x02
     c6e:	d3 83       	std	Z+3, r29	; 0x03
     c70:	60 91 6b 61 	lds	r22, 0x616B	; 0x80616b <pxCurrentTCB>
     c74:	70 91 6c 61 	lds	r23, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     c78:	c0 17       	cp	r28, r16
     c7a:	d1 07       	cpc	r29, r17
     c7c:	c8 f0       	brcs	.+50     	; 0xcb0 <prvAddCurrentTaskToDelayedList+0x7c>
     c7e:	80 91 33 61 	lds	r24, 0x6133	; 0x806133 <pxDelayedTaskList>
     c82:	90 91 34 61 	lds	r25, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
     c86:	6e 5f       	subi	r22, 0xFE	; 254
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	0e 94 ad 03 	call	0x75a	; 0x75a <vListInsert>
     c8e:	80 91 0a 61 	lds	r24, 0x610A	; 0x80610a <xNextTaskUnblockTime>
     c92:	90 91 0b 61 	lds	r25, 0x610B	; 0x80610b <xNextTaskUnblockTime+0x1>
     c96:	c8 17       	cp	r28, r24
     c98:	d9 07       	cpc	r29, r25
     c9a:	20 f4       	brcc	.+8      	; 0xca4 <prvAddCurrentTaskToDelayedList+0x70>
     c9c:	c0 93 0a 61 	sts	0x610A, r28	; 0x80610a <xNextTaskUnblockTime>
     ca0:	d0 93 0b 61 	sts	0x610B, r29	; 0x80610b <xNextTaskUnblockTime+0x1>
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	08 95       	ret
     cb0:	80 91 31 61 	lds	r24, 0x6131	; 0x806131 <pxOverflowDelayedTaskList>
     cb4:	90 91 32 61 	lds	r25, 0x6132	; 0x806132 <pxOverflowDelayedTaskList+0x1>
     cb8:	6e 5f       	subi	r22, 0xFE	; 254
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	0c 94 ad 03 	jmp	0x75a	; 0x75a <vListInsert>
     cca:	ff 20       	and	r15, r15
     ccc:	49 f2       	breq	.-110    	; 0xc60 <prvAddCurrentTaskToDelayedList+0x2c>
     cce:	60 91 6b 61 	lds	r22, 0x616B	; 0x80616b <pxCurrentTCB>
     cd2:	70 91 6c 61 	lds	r23, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     cd6:	6e 5f       	subi	r22, 0xFE	; 254
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	85 e1       	ldi	r24, 0x15	; 21
     cdc:	91 e6       	ldi	r25, 0x61	; 97
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	0c 94 8c 03 	jmp	0x718	; 0x718 <vListInsertEnd>

00000cec <vTaskSwitchContext.part.5>:
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	10 92 0e 61 	sts	0x610E, r1	; 0x80610e <xYieldPending>
     cf6:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     cfa:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     cfe:	80 91 71 61 	lds	r24, 0x6171	; 0x806171 <StatsTimer>
     d02:	90 91 72 61 	lds	r25, 0x6172	; 0x806172 <StatsTimer+0x1>
     d06:	a0 91 73 61 	lds	r26, 0x6173	; 0x806173 <StatsTimer+0x2>
     d0a:	b0 91 74 61 	lds	r27, 0x6174	; 0x806174 <StatsTimer+0x3>
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	a1 1d       	adc	r26, r1
     d14:	b1 1d       	adc	r27, r1
     d16:	00 91 03 61 	lds	r16, 0x6103	; 0x806103 <ulTaskSwitchedInTime>
     d1a:	10 91 04 61 	lds	r17, 0x6104	; 0x806104 <ulTaskSwitchedInTime+0x1>
     d1e:	20 91 05 61 	lds	r18, 0x6105	; 0x806105 <ulTaskSwitchedInTime+0x2>
     d22:	30 91 06 61 	lds	r19, 0x6106	; 0x806106 <ulTaskSwitchedInTime+0x3>
     d26:	08 17       	cp	r16, r24
     d28:	19 07       	cpc	r17, r25
     d2a:	2a 07       	cpc	r18, r26
     d2c:	3b 07       	cpc	r19, r27
     d2e:	a0 f4       	brcc	.+40     	; 0xd58 <vTaskSwitchContext.part.5+0x6c>
     d30:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
     d34:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     d38:	45 a1       	ldd	r20, Z+37	; 0x25
     d3a:	56 a1       	ldd	r21, Z+38	; 0x26
     d3c:	67 a1       	ldd	r22, Z+39	; 0x27
     d3e:	70 a5       	ldd	r23, Z+40	; 0x28
     d40:	40 1b       	sub	r20, r16
     d42:	51 0b       	sbc	r21, r17
     d44:	62 0b       	sbc	r22, r18
     d46:	73 0b       	sbc	r23, r19
     d48:	48 0f       	add	r20, r24
     d4a:	59 1f       	adc	r21, r25
     d4c:	6a 1f       	adc	r22, r26
     d4e:	7b 1f       	adc	r23, r27
     d50:	45 a3       	std	Z+37, r20	; 0x25
     d52:	56 a3       	std	Z+38, r21	; 0x26
     d54:	67 a3       	std	Z+39, r22	; 0x27
     d56:	70 a7       	std	Z+40, r23	; 0x28
     d58:	80 93 03 61 	sts	0x6103, r24	; 0x806103 <ulTaskSwitchedInTime>
     d5c:	90 93 04 61 	sts	0x6104, r25	; 0x806104 <ulTaskSwitchedInTime+0x1>
     d60:	a0 93 05 61 	sts	0x6105, r26	; 0x806105 <ulTaskSwitchedInTime+0x2>
     d64:	b0 93 06 61 	sts	0x6106, r27	; 0x806106 <ulTaskSwitchedInTime+0x3>
     d68:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
     d6c:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     d70:	07 88       	ldd	r0, Z+23	; 0x17
     d72:	f0 8d       	ldd	r31, Z+24	; 0x18
     d74:	e0 2d       	mov	r30, r0
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	a2 81       	ldd	r26, Z+2	; 0x02
     d7c:	b3 81       	ldd	r27, Z+3	; 0x03
     d7e:	85 3a       	cpi	r24, 0xA5	; 165
     d80:	95 4a       	sbci	r25, 0xA5	; 165
     d82:	a5 4a       	sbci	r26, 0xA5	; 165
     d84:	b5 4a       	sbci	r27, 0xA5	; 165
     d86:	09 f4       	brne	.+2      	; 0xd8a <vTaskSwitchContext.part.5+0x9e>
     d88:	4c c0       	rjmp	.+152    	; 0xe22 <vTaskSwitchContext.part.5+0x136>
     d8a:	60 91 6b 61 	lds	r22, 0x616B	; 0x80616b <pxCurrentTCB>
     d8e:	70 91 6c 61 	lds	r23, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     d92:	80 91 6b 61 	lds	r24, 0x616B	; 0x80616b <pxCurrentTCB>
     d96:	90 91 6c 61 	lds	r25, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     d9a:	67 5e       	subi	r22, 0xE7	; 231
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <vApplicationStackOverflowHook>
     da2:	c0 91 11 61 	lds	r28, 0x6111	; 0x806111 <uxTopReadyPriority>
     da6:	8c 2f       	mov	r24, r28
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9c 01       	movw	r18, r24
     dac:	22 0f       	add	r18, r18
     dae:	33 1f       	adc	r19, r19
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	f9 01       	movw	r30, r18
     dba:	e8 0f       	add	r30, r24
     dbc:	f9 1f       	adc	r31, r25
     dbe:	e9 5b       	subi	r30, 0xB9	; 185
     dc0:	fe 49       	sbci	r31, 0x9E	; 158
     dc2:	40 81       	ld	r20, Z
     dc4:	41 11       	cpse	r20, r1
     dc6:	0c c0       	rjmp	.+24     	; 0xde0 <vTaskSwitchContext.part.5+0xf4>
     dc8:	cc 23       	and	r28, r28
     dca:	11 f0       	breq	.+4      	; 0xdd0 <vTaskSwitchContext.part.5+0xe4>
     dcc:	c1 50       	subi	r28, 0x01	; 1
     dce:	eb cf       	rjmp	.-42     	; 0xda6 <vTaskSwitchContext.part.5+0xba>
     dd0:	6c e8       	ldi	r22, 0x8C	; 140
     dd2:	7b e0       	ldi	r23, 0x0B	; 11
     dd4:	80 e1       	ldi	r24, 0x10	; 16
     dd6:	90 e2       	ldi	r25, 0x20	; 32
     dd8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <vAssertCalled>
     ddc:	c1 50       	subi	r28, 0x01	; 1
     dde:	e3 cf       	rjmp	.-58     	; 0xda6 <vTaskSwitchContext.part.5+0xba>
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	dc 01       	movw	r26, r24
     de6:	a9 5b       	subi	r26, 0xB9	; 185
     de8:	be 49       	sbci	r27, 0x9E	; 158
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	ed 91       	ld	r30, X+
     dee:	fc 91       	ld	r31, X
     df0:	12 97       	sbiw	r26, 0x02	; 2
     df2:	02 80       	ldd	r0, Z+2	; 0x02
     df4:	f3 81       	ldd	r31, Z+3	; 0x03
     df6:	e0 2d       	mov	r30, r0
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	ed 93       	st	X+, r30
     dfc:	fc 93       	st	X, r31
     dfe:	12 97       	sbiw	r26, 0x02	; 2
     e00:	86 5b       	subi	r24, 0xB6	; 182
     e02:	9e 49       	sbci	r25, 0x9E	; 158
     e04:	e8 17       	cp	r30, r24
     e06:	f9 07       	cpc	r31, r25
     e08:	59 f1       	breq	.+86     	; 0xe60 <vTaskSwitchContext.part.5+0x174>
     e0a:	86 81       	ldd	r24, Z+6	; 0x06
     e0c:	97 81       	ldd	r25, Z+7	; 0x07
     e0e:	80 93 6b 61 	sts	0x616B, r24	; 0x80616b <pxCurrentTCB>
     e12:	90 93 6c 61 	sts	0x616C, r25	; 0x80616c <pxCurrentTCB+0x1>
     e16:	c0 93 11 61 	sts	0x6111, r28	; 0x806111 <uxTopReadyPriority>
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret
     e22:	84 81       	ldd	r24, Z+4	; 0x04
     e24:	95 81       	ldd	r25, Z+5	; 0x05
     e26:	a6 81       	ldd	r26, Z+6	; 0x06
     e28:	b7 81       	ldd	r27, Z+7	; 0x07
     e2a:	85 3a       	cpi	r24, 0xA5	; 165
     e2c:	95 4a       	sbci	r25, 0xA5	; 165
     e2e:	a5 4a       	sbci	r26, 0xA5	; 165
     e30:	b5 4a       	sbci	r27, 0xA5	; 165
     e32:	09 f0       	breq	.+2      	; 0xe36 <vTaskSwitchContext.part.5+0x14a>
     e34:	aa cf       	rjmp	.-172    	; 0xd8a <vTaskSwitchContext.part.5+0x9e>
     e36:	80 85       	ldd	r24, Z+8	; 0x08
     e38:	91 85       	ldd	r25, Z+9	; 0x09
     e3a:	a2 85       	ldd	r26, Z+10	; 0x0a
     e3c:	b3 85       	ldd	r27, Z+11	; 0x0b
     e3e:	85 3a       	cpi	r24, 0xA5	; 165
     e40:	95 4a       	sbci	r25, 0xA5	; 165
     e42:	a5 4a       	sbci	r26, 0xA5	; 165
     e44:	b5 4a       	sbci	r27, 0xA5	; 165
     e46:	09 f0       	breq	.+2      	; 0xe4a <vTaskSwitchContext.part.5+0x15e>
     e48:	a0 cf       	rjmp	.-192    	; 0xd8a <vTaskSwitchContext.part.5+0x9e>
     e4a:	84 85       	ldd	r24, Z+12	; 0x0c
     e4c:	95 85       	ldd	r25, Z+13	; 0x0d
     e4e:	a6 85       	ldd	r26, Z+14	; 0x0e
     e50:	b7 85       	ldd	r27, Z+15	; 0x0f
     e52:	85 3a       	cpi	r24, 0xA5	; 165
     e54:	95 4a       	sbci	r25, 0xA5	; 165
     e56:	a5 4a       	sbci	r26, 0xA5	; 165
     e58:	b5 4a       	sbci	r27, 0xA5	; 165
     e5a:	09 f0       	breq	.+2      	; 0xe5e <vTaskSwitchContext.part.5+0x172>
     e5c:	96 cf       	rjmp	.-212    	; 0xd8a <vTaskSwitchContext.part.5+0x9e>
     e5e:	a1 cf       	rjmp	.-190    	; 0xda2 <vTaskSwitchContext.part.5+0xb6>
     e60:	02 80       	ldd	r0, Z+2	; 0x02
     e62:	f3 81       	ldd	r31, Z+3	; 0x03
     e64:	e0 2d       	mov	r30, r0
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	ed 93       	st	X+, r30
     e6a:	fc 93       	st	X, r31
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	cd cf       	rjmp	.-102    	; 0xe0a <vTaskSwitchContext.part.5+0x11e>

00000e70 <xTaskCreate>:
     e70:	5f 92       	push	r5
     e72:	6f 92       	push	r6
     e74:	7f 92       	push	r7
     e76:	8f 92       	push	r8
     e78:	9f 92       	push	r9
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	4c 01       	movw	r8, r24
     e90:	eb 01       	movw	r28, r22
     e92:	5a 01       	movw	r10, r20
     e94:	39 01       	movw	r6, r18
     e96:	50 2e       	mov	r5, r16
     e98:	ca 01       	movw	r24, r20
     e9a:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
     e9e:	8c 01       	movw	r16, r24
     ea0:	89 2b       	or	r24, r25
     ea2:	09 f4       	brne	.+2      	; 0xea6 <xTaskCreate+0x36>
     ea4:	dc c0       	rjmp	.+440    	; 0x105e <xTaskCreate+0x1ee>
     ea6:	8e e2       	ldi	r24, 0x2E	; 46
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
     eae:	6c 01       	movw	r12, r24
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <xTaskCreate+0x46>
     eb4:	d1 c0       	rjmp	.+418    	; 0x1058 <xTaskCreate+0x1e8>
     eb6:	dc 01       	movw	r26, r24
     eb8:	57 96       	adiw	r26, 0x17	; 23
     eba:	0d 93       	st	X+, r16
     ebc:	1c 93       	st	X, r17
     ebe:	58 97       	sbiw	r26, 0x18	; 24
     ec0:	20 97       	sbiw	r28, 0x00	; 0
     ec2:	09 f4       	brne	.+2      	; 0xec6 <xTaskCreate+0x56>
     ec4:	ce c0       	rjmp	.+412    	; 0x1062 <xTaskCreate+0x1f2>
     ec6:	c8 01       	movw	r24, r16
     ec8:	a5 01       	movw	r20, r10
     eca:	65 ea       	ldi	r22, 0xA5	; 165
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 43 10 	call	0x2086	; 0x2086 <memset>
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	af 1a       	sub	r10, r31
     ed6:	b1 08       	sbc	r11, r1
     ed8:	d6 01       	movw	r26, r12
     eda:	57 96       	adiw	r26, 0x17	; 23
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	58 97       	sbiw	r26, 0x18	; 24
     ee2:	a8 0e       	add	r10, r24
     ee4:	b9 1e       	adc	r11, r25
     ee6:	f6 01       	movw	r30, r12
     ee8:	79 96       	adiw	r30, 0x19	; 25
     eea:	9e 01       	movw	r18, r28
     eec:	28 5f       	subi	r18, 0xF8	; 248
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	de 01       	movw	r26, r28
     ef2:	89 91       	ld	r24, Y+
     ef4:	81 93       	st	Z+, r24
     ef6:	8c 91       	ld	r24, X
     ef8:	88 23       	and	r24, r24
     efa:	19 f0       	breq	.+6      	; 0xf02 <xTaskCreate+0x92>
     efc:	c2 17       	cp	r28, r18
     efe:	d3 07       	cpc	r29, r19
     f00:	b9 f7       	brne	.-18     	; 0xef0 <xTaskCreate+0x80>
     f02:	f6 01       	movw	r30, r12
     f04:	10 a2       	std	Z+32, r1	; 0x20
     f06:	05 2d       	mov	r16, r5
     f08:	04 30       	cpi	r16, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <xTaskCreate+0x9e>
     f0c:	9f c0       	rjmp	.+318    	; 0x104c <xTaskCreate+0x1dc>
     f0e:	d6 01       	movw	r26, r12
     f10:	56 96       	adiw	r26, 0x16	; 22
     f12:	0c 93       	st	X, r16
     f14:	56 97       	sbiw	r26, 0x16	; 22
     f16:	93 96       	adiw	r26, 0x23	; 35
     f18:	0c 93       	st	X, r16
     f1a:	93 97       	sbiw	r26, 0x23	; 35
     f1c:	94 96       	adiw	r26, 0x24	; 36
     f1e:	1c 92       	st	X, r1
     f20:	e6 01       	movw	r28, r12
     f22:	22 96       	adiw	r28, 0x02	; 2
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 88 03 	call	0x710	; 0x710 <vListInitialiseItem>
     f2a:	c6 01       	movw	r24, r12
     f2c:	0c 96       	adiw	r24, 0x0c	; 12
     f2e:	0e 94 88 03 	call	0x710	; 0x710 <vListInitialiseItem>
     f32:	f6 01       	movw	r30, r12
     f34:	c0 86       	std	Z+8, r12	; 0x08
     f36:	d1 86       	std	Z+9, r13	; 0x09
     f38:	84 e0       	ldi	r24, 0x04	; 4
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	80 1b       	sub	r24, r16
     f3e:	91 09       	sbc	r25, r1
     f40:	84 87       	std	Z+12, r24	; 0x0c
     f42:	95 87       	std	Z+13, r25	; 0x0d
     f44:	c2 8a       	std	Z+18, r12	; 0x12
     f46:	d3 8a       	std	Z+19, r13	; 0x13
     f48:	15 a2       	std	Z+37, r1	; 0x25
     f4a:	16 a2       	std	Z+38, r1	; 0x26
     f4c:	17 a2       	std	Z+39, r1	; 0x27
     f4e:	10 a6       	std	Z+40, r1	; 0x28
     f50:	11 a6       	std	Z+41, r1	; 0x29
     f52:	12 a6       	std	Z+42, r1	; 0x2a
     f54:	13 a6       	std	Z+43, r1	; 0x2b
     f56:	14 a6       	std	Z+44, r1	; 0x2c
     f58:	15 a6       	std	Z+45, r1	; 0x2d
     f5a:	a3 01       	movw	r20, r6
     f5c:	b4 01       	movw	r22, r8
     f5e:	c5 01       	movw	r24, r10
     f60:	0e 94 04 04 	call	0x808	; 0x808 <pxPortInitialiseStack>
     f64:	d6 01       	movw	r26, r12
     f66:	8d 93       	st	X+, r24
     f68:	9c 93       	st	X, r25
     f6a:	e1 14       	cp	r14, r1
     f6c:	f1 04       	cpc	r15, r1
     f6e:	19 f0       	breq	.+6      	; 0xf76 <xTaskCreate+0x106>
     f70:	f7 01       	movw	r30, r14
     f72:	c0 82       	st	Z, r12
     f74:	d1 82       	std	Z+1, r13	; 0x01
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	0f 92       	push	r0
     f7c:	80 91 14 61 	lds	r24, 0x6114	; 0x806114 <uxCurrentNumberOfTasks>
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 14 61 	sts	0x6114, r24	; 0x806114 <uxCurrentNumberOfTasks>
     f86:	80 91 6b 61 	lds	r24, 0x616B	; 0x80616b <pxCurrentTCB>
     f8a:	90 91 6c 61 	lds	r25, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     f8e:	89 2b       	or	r24, r25
     f90:	99 f0       	breq	.+38     	; 0xfb8 <xTaskCreate+0x148>
     f92:	80 91 10 61 	lds	r24, 0x6110	; 0x806110 <xSchedulerRunning>
     f96:	81 11       	cpse	r24, r1
     f98:	18 c0       	rjmp	.+48     	; 0xfca <xTaskCreate+0x15a>
     f9a:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
     f9e:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
     fa2:	d6 01       	movw	r26, r12
     fa4:	56 96       	adiw	r26, 0x16	; 22
     fa6:	8c 91       	ld	r24, X
     fa8:	96 89       	ldd	r25, Z+22	; 0x16
     faa:	89 17       	cp	r24, r25
     fac:	88 f0       	brcs	.+34     	; 0xfd0 <xTaskCreate+0x160>
     fae:	c0 92 6b 61 	sts	0x616B, r12	; 0x80616b <pxCurrentTCB>
     fb2:	d0 92 6c 61 	sts	0x616C, r13	; 0x80616c <pxCurrentTCB+0x1>
     fb6:	0c c0       	rjmp	.+24     	; 0xfd0 <xTaskCreate+0x160>
     fb8:	c0 92 6b 61 	sts	0x616B, r12	; 0x80616b <pxCurrentTCB>
     fbc:	d0 92 6c 61 	sts	0x616C, r13	; 0x80616c <pxCurrentTCB+0x1>
     fc0:	80 91 14 61 	lds	r24, 0x6114	; 0x806114 <uxCurrentNumberOfTasks>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f4       	brne	.+2      	; 0xfca <xTaskCreate+0x15a>
     fc8:	56 c0       	rjmp	.+172    	; 0x1076 <xTaskCreate+0x206>
     fca:	d6 01       	movw	r26, r12
     fcc:	56 96       	adiw	r26, 0x16	; 22
     fce:	8c 91       	ld	r24, X
     fd0:	90 91 0c 61 	lds	r25, 0x610C	; 0x80610c <uxTaskNumber>
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	90 93 0c 61 	sts	0x610C, r25	; 0x80610c <uxTaskNumber>
     fda:	f6 01       	movw	r30, r12
     fdc:	91 a3       	std	Z+33, r25	; 0x21
     fde:	90 91 11 61 	lds	r25, 0x6111	; 0x806111 <uxTopReadyPriority>
     fe2:	98 17       	cp	r25, r24
     fe4:	80 f1       	brcs	.+96     	; 0x1046 <xTaskCreate+0x1d6>
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9c 01       	movw	r18, r24
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	22 0f       	add	r18, r18
     ff4:	33 1f       	adc	r19, r19
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	be 01       	movw	r22, r28
     ffc:	89 5b       	subi	r24, 0xB9	; 185
     ffe:	9e 49       	sbci	r25, 0x9E	; 158
    1000:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	80 91 10 61 	lds	r24, 0x6110	; 0x806110 <xSchedulerRunning>
    100c:	88 23       	and	r24, r24
    100e:	51 f0       	breq	.+20     	; 0x1024 <xTaskCreate+0x1b4>
    1010:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
    1014:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
    1018:	96 89       	ldd	r25, Z+22	; 0x16
    101a:	d6 01       	movw	r26, r12
    101c:	56 96       	adiw	r26, 0x16	; 22
    101e:	8c 91       	ld	r24, X
    1020:	98 17       	cp	r25, r24
    1022:	b0 f0       	brcs	.+44     	; 0x1050 <xTaskCreate+0x1e0>
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	08 95       	ret
    1046:	80 93 11 61 	sts	0x6111, r24	; 0x806111 <uxTopReadyPriority>
    104a:	cd cf       	rjmp	.-102    	; 0xfe6 <xTaskCreate+0x176>
    104c:	03 e0       	ldi	r16, 0x03	; 3
    104e:	5f cf       	rjmp	.-322    	; 0xf0e <xTaskCreate+0x9e>
    1050:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	e7 cf       	rjmp	.-50     	; 0x1026 <xTaskCreate+0x1b6>
    1058:	c8 01       	movw	r24, r16
    105a:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	e2 cf       	rjmp	.-60     	; 0x1026 <xTaskCreate+0x1b6>
    1062:	60 e6       	ldi	r22, 0x60	; 96
    1064:	73 e0       	ldi	r23, 0x03	; 3
    1066:	80 e1       	ldi	r24, 0x10	; 16
    1068:	90 e2       	ldi	r25, 0x20	; 32
    106a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <vAssertCalled>
    106e:	f6 01       	movw	r30, r12
    1070:	87 89       	ldd	r24, Z+23	; 0x17
    1072:	90 8d       	ldd	r25, Z+24	; 0x18
    1074:	29 cf       	rjmp	.-430    	; 0xec8 <xTaskCreate+0x58>
    1076:	87 e4       	ldi	r24, 0x47	; 71
    1078:	91 e6       	ldi	r25, 0x61	; 97
    107a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    107e:	80 e5       	ldi	r24, 0x50	; 80
    1080:	91 e6       	ldi	r25, 0x61	; 97
    1082:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1086:	89 e5       	ldi	r24, 0x59	; 89
    1088:	91 e6       	ldi	r25, 0x61	; 97
    108a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    108e:	82 e6       	ldi	r24, 0x62	; 98
    1090:	91 e6       	ldi	r25, 0x61	; 97
    1092:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1096:	8e e3       	ldi	r24, 0x3E	; 62
    1098:	91 e6       	ldi	r25, 0x61	; 97
    109a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    109e:	85 e3       	ldi	r24, 0x35	; 53
    10a0:	91 e6       	ldi	r25, 0x61	; 97
    10a2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    10a6:	88 e2       	ldi	r24, 0x28	; 40
    10a8:	91 e6       	ldi	r25, 0x61	; 97
    10aa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    10ae:	8f e1       	ldi	r24, 0x1F	; 31
    10b0:	91 e6       	ldi	r25, 0x61	; 97
    10b2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    10b6:	85 e1       	ldi	r24, 0x15	; 21
    10b8:	91 e6       	ldi	r25, 0x61	; 97
    10ba:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    10be:	8e e3       	ldi	r24, 0x3E	; 62
    10c0:	91 e6       	ldi	r25, 0x61	; 97
    10c2:	80 93 33 61 	sts	0x6133, r24	; 0x806133 <pxDelayedTaskList>
    10c6:	90 93 34 61 	sts	0x6134, r25	; 0x806134 <pxDelayedTaskList+0x1>
    10ca:	85 e3       	ldi	r24, 0x35	; 53
    10cc:	91 e6       	ldi	r25, 0x61	; 97
    10ce:	80 93 31 61 	sts	0x6131, r24	; 0x806131 <pxOverflowDelayedTaskList>
    10d2:	90 93 32 61 	sts	0x6132, r25	; 0x806132 <pxOverflowDelayedTaskList+0x1>
    10d6:	f6 01       	movw	r30, r12
    10d8:	86 89       	ldd	r24, Z+22	; 0x16
    10da:	7a cf       	rjmp	.-268    	; 0xfd0 <xTaskCreate+0x160>

000010dc <vTaskStartScheduler>:
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	88 e0       	ldi	r24, 0x08	; 8
    10e4:	e8 2e       	mov	r14, r24
    10e6:	81 e6       	ldi	r24, 0x61	; 97
    10e8:	f8 2e       	mov	r15, r24
    10ea:	00 e0       	ldi	r16, 0x00	; 0
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	51 e0       	ldi	r21, 0x01	; 1
    10f4:	64 e2       	ldi	r22, 0x24	; 36
    10f6:	70 e2       	ldi	r23, 0x20	; 32
    10f8:	8b ed       	ldi	r24, 0xDB	; 219
    10fa:	95 e0       	ldi	r25, 0x05	; 5
    10fc:	0e 94 38 07 	call	0xe70	; 0xe70 <xTaskCreate>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	79 f0       	breq	.+30     	; 0x1122 <vTaskStartScheduler+0x46>
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	21 f0       	breq	.+8      	; 0x1110 <vTaskStartScheduler+0x34>
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	08 95       	ret
    1110:	67 e0       	ldi	r22, 0x07	; 7
    1112:	78 e0       	ldi	r23, 0x08	; 8
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	90 e2       	ldi	r25, 0x20	; 32
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <vAssertCalled>
    1122:	f8 94       	cli
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	20 93 0a 61 	sts	0x610A, r18	; 0x80610a <xNextTaskUnblockTime>
    112c:	30 93 0b 61 	sts	0x610B, r19	; 0x80610b <xNextTaskUnblockTime+0x1>
    1130:	80 93 10 61 	sts	0x6110, r24	; 0x806110 <xSchedulerRunning>
    1134:	10 92 12 61 	sts	0x6112, r1	; 0x806112 <xTickCount>
    1138:	10 92 13 61 	sts	0x6113, r1	; 0x806113 <xTickCount+0x1>
    113c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vConfigureTimerForRunTimeStats>
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <xPortStartScheduler>

0000114a <vTaskSuspendAll>:
    114a:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	80 93 07 61 	sts	0x6107, r24	; 0x806107 <uxSchedulerSuspended>
    1154:	08 95       	ret

00001156 <xTaskIncrementTick>:
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1168:	81 11       	cpse	r24, r1
    116a:	b9 c0       	rjmp	.+370    	; 0x12de <xTaskIncrementTick+0x188>
    116c:	e0 90 12 61 	lds	r14, 0x6112	; 0x806112 <xTickCount>
    1170:	f0 90 13 61 	lds	r15, 0x6113	; 0x806113 <xTickCount+0x1>
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	e8 1a       	sub	r14, r24
    1178:	f8 0a       	sbc	r15, r24
    117a:	e0 92 12 61 	sts	0x6112, r14	; 0x806112 <xTickCount>
    117e:	f0 92 13 61 	sts	0x6113, r15	; 0x806113 <xTickCount+0x1>
    1182:	e1 14       	cp	r14, r1
    1184:	f1 04       	cpc	r15, r1
    1186:	49 f5       	brne	.+82     	; 0x11da <xTaskIncrementTick+0x84>
    1188:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
    118c:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    1190:	80 81       	ld	r24, Z
    1192:	81 11       	cpse	r24, r1
    1194:	ab c0       	rjmp	.+342    	; 0x12ec <xTaskIncrementTick+0x196>
    1196:	80 91 33 61 	lds	r24, 0x6133	; 0x806133 <pxDelayedTaskList>
    119a:	90 91 34 61 	lds	r25, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    119e:	20 91 31 61 	lds	r18, 0x6131	; 0x806131 <pxOverflowDelayedTaskList>
    11a2:	30 91 32 61 	lds	r19, 0x6132	; 0x806132 <pxOverflowDelayedTaskList+0x1>
    11a6:	20 93 33 61 	sts	0x6133, r18	; 0x806133 <pxDelayedTaskList>
    11aa:	30 93 34 61 	sts	0x6134, r19	; 0x806134 <pxDelayedTaskList+0x1>
    11ae:	80 93 31 61 	sts	0x6131, r24	; 0x806131 <pxOverflowDelayedTaskList>
    11b2:	90 93 32 61 	sts	0x6132, r25	; 0x806132 <pxOverflowDelayedTaskList+0x1>
    11b6:	80 91 0d 61 	lds	r24, 0x610D	; 0x80610d <xNumOfOverflows>
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	80 93 0d 61 	sts	0x610D, r24	; 0x80610d <xNumOfOverflows>
    11c0:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
    11c4:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    11c8:	80 81       	ld	r24, Z
    11ca:	81 11       	cpse	r24, r1
    11cc:	96 c0       	rjmp	.+300    	; 0x12fa <xTaskIncrementTick+0x1a4>
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	80 93 0a 61 	sts	0x610A, r24	; 0x80610a <xNextTaskUnblockTime>
    11d6:	90 93 0b 61 	sts	0x610B, r25	; 0x80610b <xNextTaskUnblockTime+0x1>
    11da:	80 91 0a 61 	lds	r24, 0x610A	; 0x80610a <xNextTaskUnblockTime>
    11de:	90 91 0b 61 	lds	r25, 0x610B	; 0x80610b <xNextTaskUnblockTime+0x1>
    11e2:	d1 2c       	mov	r13, r1
    11e4:	e8 16       	cp	r14, r24
    11e6:	f9 06       	cpc	r15, r25
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <xTaskIncrementTick+0x96>
    11ea:	53 c0       	rjmp	.+166    	; 0x1292 <xTaskIncrementTick+0x13c>
    11ec:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
    11f0:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    11f4:	80 81       	ld	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <xTaskIncrementTick+0xa6>
    11fa:	45 c0       	rjmp	.+138    	; 0x1286 <xTaskIncrementTick+0x130>
    11fc:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
    1200:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    1204:	05 80       	ldd	r0, Z+5	; 0x05
    1206:	f6 81       	ldd	r31, Z+6	; 0x06
    1208:	e0 2d       	mov	r30, r0
    120a:	c6 81       	ldd	r28, Z+6	; 0x06
    120c:	d7 81       	ldd	r29, Z+7	; 0x07
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	e8 16       	cp	r14, r24
    1214:	f9 06       	cpc	r15, r25
    1216:	08 f4       	brcc	.+2      	; 0x121a <xTaskIncrementTick+0xc4>
    1218:	73 c0       	rjmp	.+230    	; 0x1300 <xTaskIncrementTick+0x1aa>
    121a:	8e 01       	movw	r16, r28
    121c:	0e 5f       	subi	r16, 0xFE	; 254
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1226:	8c 89       	ldd	r24, Y+20	; 0x14
    1228:	9d 89       	ldd	r25, Y+21	; 0x15
    122a:	89 2b       	or	r24, r25
    122c:	21 f0       	breq	.+8      	; 0x1236 <xTaskIncrementTick+0xe0>
    122e:	ce 01       	movw	r24, r28
    1230:	0c 96       	adiw	r24, 0x0c	; 12
    1232:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1236:	8e 89       	ldd	r24, Y+22	; 0x16
    1238:	90 91 11 61 	lds	r25, 0x6111	; 0x806111 <uxTopReadyPriority>
    123c:	98 17       	cp	r25, r24
    123e:	10 f4       	brcc	.+4      	; 0x1244 <xTaskIncrementTick+0xee>
    1240:	80 93 11 61 	sts	0x6111, r24	; 0x806111 <uxTopReadyPriority>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 01       	movw	r18, r24
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	82 0f       	add	r24, r18
    1256:	93 1f       	adc	r25, r19
    1258:	b8 01       	movw	r22, r16
    125a:	89 5b       	subi	r24, 0xB9	; 185
    125c:	9e 49       	sbci	r25, 0x9E	; 158
    125e:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1262:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
    1266:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
    126a:	9e 89       	ldd	r25, Y+22	; 0x16
    126c:	86 89       	ldd	r24, Z+22	; 0x16
    126e:	98 17       	cp	r25, r24
    1270:	08 f4       	brcc	.+2      	; 0x1274 <xTaskIncrementTick+0x11e>
    1272:	bc cf       	rjmp	.-136    	; 0x11ec <xTaskIncrementTick+0x96>
    1274:	dd 24       	eor	r13, r13
    1276:	d3 94       	inc	r13
    1278:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
    127c:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    1280:	80 81       	ld	r24, Z
    1282:	81 11       	cpse	r24, r1
    1284:	bb cf       	rjmp	.-138    	; 0x11fc <xTaskIncrementTick+0xa6>
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	9f ef       	ldi	r25, 0xFF	; 255
    128a:	80 93 0a 61 	sts	0x610A, r24	; 0x80610a <xNextTaskUnblockTime>
    128e:	90 93 0b 61 	sts	0x610B, r25	; 0x80610b <xNextTaskUnblockTime+0x1>
    1292:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
    1296:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
    129a:	86 89       	ldd	r24, Z+22	; 0x16
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	fc 01       	movw	r30, r24
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	8e 0f       	add	r24, r30
    12ae:	9f 1f       	adc	r25, r31
    12b0:	fc 01       	movw	r30, r24
    12b2:	e9 5b       	subi	r30, 0xB9	; 185
    12b4:	fe 49       	sbci	r31, 0x9E	; 158
    12b6:	80 81       	ld	r24, Z
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <xTaskIncrementTick+0x16a>
    12bc:	dd 24       	eor	r13, r13
    12be:	d3 94       	inc	r13
    12c0:	80 91 0e 61 	lds	r24, 0x610E	; 0x80610e <xYieldPending>
    12c4:	88 23       	and	r24, r24
    12c6:	11 f0       	breq	.+4      	; 0x12cc <xTaskIncrementTick+0x176>
    12c8:	dd 24       	eor	r13, r13
    12ca:	d3 94       	inc	r13
    12cc:	8d 2d       	mov	r24, r13
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	08 95       	ret
    12de:	80 91 0f 61 	lds	r24, 0x610F	; 0x80610f <uxPendedTicks>
    12e2:	8f 5f       	subi	r24, 0xFF	; 255
    12e4:	80 93 0f 61 	sts	0x610F, r24	; 0x80610f <uxPendedTicks>
    12e8:	d1 2c       	mov	r13, r1
    12ea:	ea cf       	rjmp	.-44     	; 0x12c0 <xTaskIncrementTick+0x16a>
    12ec:	66 e6       	ldi	r22, 0x66	; 102
    12ee:	7a e0       	ldi	r23, 0x0A	; 10
    12f0:	80 e1       	ldi	r24, 0x10	; 16
    12f2:	90 e2       	ldi	r25, 0x20	; 32
    12f4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <vAssertCalled>
    12f8:	4e cf       	rjmp	.-356    	; 0x1196 <xTaskIncrementTick+0x40>
    12fa:	0e 94 09 06 	call	0xc12	; 0xc12 <prvResetNextTaskUnblockTime.part.0>
    12fe:	6d cf       	rjmp	.-294    	; 0x11da <xTaskIncrementTick+0x84>
    1300:	80 93 0a 61 	sts	0x610A, r24	; 0x80610a <xNextTaskUnblockTime>
    1304:	90 93 0b 61 	sts	0x610B, r25	; 0x80610b <xNextTaskUnblockTime+0x1>
    1308:	c4 cf       	rjmp	.-120    	; 0x1292 <xTaskIncrementTick+0x13c>

0000130a <xTaskResumeAll>:
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1318:	88 23       	and	r24, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <xTaskResumeAll+0x14>
    131c:	77 c0       	rjmp	.+238    	; 0x140c <xTaskResumeAll+0x102>
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	0f 92       	push	r0
    1324:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	80 93 07 61 	sts	0x6107, r24	; 0x806107 <uxSchedulerSuspended>
    132e:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1332:	81 11       	cpse	r24, r1
    1334:	62 c0       	rjmp	.+196    	; 0x13fa <xTaskResumeAll+0xf0>
    1336:	80 91 14 61 	lds	r24, 0x6114	; 0x806114 <uxCurrentNumberOfTasks>
    133a:	88 23       	and	r24, r24
    133c:	09 f4       	brne	.+2      	; 0x1340 <xTaskResumeAll+0x36>
    133e:	5d c0       	rjmp	.+186    	; 0x13fa <xTaskResumeAll+0xf0>
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d0 e0       	ldi	r29, 0x00	; 0
    1344:	ff 24       	eor	r15, r15
    1346:	f3 94       	inc	r15
    1348:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <xPendingReadyList>
    134c:	88 23       	and	r24, r24
    134e:	a1 f1       	breq	.+104    	; 0x13b8 <xTaskResumeAll+0xae>
    1350:	e0 91 2d 61 	lds	r30, 0x612D	; 0x80612d <xPendingReadyList+0x5>
    1354:	f0 91 2e 61 	lds	r31, 0x612E	; 0x80612e <xPendingReadyList+0x6>
    1358:	c6 81       	ldd	r28, Z+6	; 0x06
    135a:	d7 81       	ldd	r29, Z+7	; 0x07
    135c:	ce 01       	movw	r24, r28
    135e:	0c 96       	adiw	r24, 0x0c	; 12
    1360:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1364:	8e 01       	movw	r16, r28
    1366:	0e 5f       	subi	r16, 0xFE	; 254
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	c8 01       	movw	r24, r16
    136c:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1370:	8e 89       	ldd	r24, Y+22	; 0x16
    1372:	90 91 11 61 	lds	r25, 0x6111	; 0x806111 <uxTopReadyPriority>
    1376:	98 17       	cp	r25, r24
    1378:	10 f4       	brcc	.+4      	; 0x137e <xTaskResumeAll+0x74>
    137a:	80 93 11 61 	sts	0x6111, r24	; 0x806111 <uxTopReadyPriority>
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 01       	movw	r18, r24
    1382:	22 0f       	add	r18, r18
    1384:	33 1f       	adc	r19, r19
    1386:	22 0f       	add	r18, r18
    1388:	33 1f       	adc	r19, r19
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	b8 01       	movw	r22, r16
    1394:	89 5b       	subi	r24, 0xB9	; 185
    1396:	9e 49       	sbci	r25, 0x9E	; 158
    1398:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    139c:	e0 91 6b 61 	lds	r30, 0x616B	; 0x80616b <pxCurrentTCB>
    13a0:	f0 91 6c 61 	lds	r31, 0x616C	; 0x80616c <pxCurrentTCB+0x1>
    13a4:	9e 89       	ldd	r25, Y+22	; 0x16
    13a6:	86 89       	ldd	r24, Z+22	; 0x16
    13a8:	98 17       	cp	r25, r24
    13aa:	70 f2       	brcs	.-100    	; 0x1348 <xTaskResumeAll+0x3e>
    13ac:	f0 92 0e 61 	sts	0x610E, r15	; 0x80610e <xYieldPending>
    13b0:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <xPendingReadyList>
    13b4:	81 11       	cpse	r24, r1
    13b6:	cc cf       	rjmp	.-104    	; 0x1350 <xTaskResumeAll+0x46>
    13b8:	cd 2b       	or	r28, r29
    13ba:	69 f0       	breq	.+26     	; 0x13d6 <xTaskResumeAll+0xcc>
    13bc:	e0 91 33 61 	lds	r30, 0x6133	; 0x806133 <pxDelayedTaskList>
    13c0:	f0 91 34 61 	lds	r31, 0x6134	; 0x806134 <pxDelayedTaskList+0x1>
    13c4:	80 81       	ld	r24, Z
    13c6:	81 11       	cpse	r24, r1
    13c8:	2c c0       	rjmp	.+88     	; 0x1422 <xTaskResumeAll+0x118>
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	9f ef       	ldi	r25, 0xFF	; 255
    13ce:	80 93 0a 61 	sts	0x610A, r24	; 0x80610a <xNextTaskUnblockTime>
    13d2:	90 93 0b 61 	sts	0x610B, r25	; 0x80610b <xNextTaskUnblockTime+0x1>
    13d6:	c0 91 0f 61 	lds	r28, 0x610F	; 0x80610f <uxPendedTicks>
    13da:	cc 23       	and	r28, r28
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <xTaskResumeAll+0xe8>
    13de:	d1 e0       	ldi	r29, 0x01	; 1
    13e0:	0e 94 ab 08 	call	0x1156	; 0x1156 <xTaskIncrementTick>
    13e4:	81 11       	cpse	r24, r1
    13e6:	d0 93 0e 61 	sts	0x610E, r29	; 0x80610e <xYieldPending>
    13ea:	c1 50       	subi	r28, 0x01	; 1
    13ec:	c9 f7       	brne	.-14     	; 0x13e0 <xTaskResumeAll+0xd6>
    13ee:	10 92 0f 61 	sts	0x610F, r1	; 0x80610f <uxPendedTicks>
    13f2:	80 91 0e 61 	lds	r24, 0x610E	; 0x80610e <xYieldPending>
    13f6:	81 11       	cpse	r24, r1
    13f8:	10 c0       	rjmp	.+32     	; 0x141a <xTaskResumeAll+0x110>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	08 95       	ret
    140c:	6c e6       	ldi	r22, 0x6C	; 108
    140e:	78 e0       	ldi	r23, 0x08	; 8
    1410:	80 e1       	ldi	r24, 0x10	; 16
    1412:	90 e2       	ldi	r25, 0x20	; 32
    1414:	0e 94 9b 0a 	call	0x1536	; 0x1536 <vAssertCalled>
    1418:	82 cf       	rjmp	.-252    	; 0x131e <xTaskResumeAll+0x14>
    141a:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	ed cf       	rjmp	.-38     	; 0x13fc <xTaskResumeAll+0xf2>
    1422:	0e 94 09 06 	call	0xc12	; 0xc12 <prvResetNextTaskUnblockTime.part.0>
    1426:	d7 cf       	rjmp	.-82     	; 0x13d6 <xTaskResumeAll+0xcc>

00001428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    142e:	89 2b       	or	r24, r25
    1430:	29 f4       	brne	.+10     	; 0x143c <vTaskDelay+0x14>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
    1432:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
    143c:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1440:	81 11       	cpse	r24, r1
    1442:	10 c0       	rjmp	.+32     	; 0x1464 <vTaskDelay+0x3c>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1444:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1448:	8f 5f       	subi	r24, 0xFF	; 255
    144a:	80 93 07 61 	sts	0x6107, r24	; 0x806107 <uxSchedulerSuspended>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 1a 06 	call	0xc34	; 0xc34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1456:	0e 94 85 09 	call	0x130a	; 0x130a <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    145a:	88 23       	and	r24, r24
    145c:	51 f3       	breq	.-44     	; 0x1432 <vTaskDelay+0xa>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
    1464:	60 e2       	ldi	r22, 0x20	; 32
    1466:	75 e0       	ldi	r23, 0x05	; 5
    1468:	80 e1       	ldi	r24, 0x10	; 16
    146a:	90 e2       	ldi	r25, 0x20	; 32
    146c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <vAssertCalled>
    1470:	e9 cf       	rjmp	.-46     	; 0x1444 <vTaskDelay+0x1c>

00001472 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1472:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <uxSchedulerSuspended>
    1476:	81 11       	cpse	r24, r1
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vTaskSwitchContext+0xc>
    147a:	0c 94 76 06 	jmp	0xcec	; 0xcec <vTaskSwitchContext.part.5>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 0e 61 	sts	0x610E, r24	; 0x80610e <xYieldPending>
    1484:	08 95       	ret

00001486 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    1486:	08 95       	ret

00001488 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    1488:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    148a:	83 e5       	ldi	r24, 0x53	; 83
    148c:	90 e2       	ldi	r25, 0x20	; 32
    148e:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
	CFG_ERR_LED();
    1492:	80 e8       	ldi	r24, 0x80	; 128
    1494:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    1498:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    149c:	2f ef       	ldi	r18, 0xFF	; 255
    149e:	33 ec       	ldi	r19, 0xC3	; 195
    14a0:	99 e0       	ldi	r25, 0x09	; 9
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	30 40       	sbci	r19, 0x00	; 0
    14a6:	90 40       	sbci	r25, 0x00	; 0
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <vApplicationMallocFailedHook+0x1a>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <vApplicationMallocFailedHook+0x24>
    14ac:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    14ae:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	33 ec       	ldi	r19, 0xC3	; 195
    14b6:	99 e0       	ldi	r25, 0x09	; 9
    14b8:	21 50       	subi	r18, 0x01	; 1
    14ba:	30 40       	sbci	r19, 0x00	; 0
    14bc:	90 40       	sbci	r25, 0x00	; 0
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <vApplicationMallocFailedHook+0x30>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <vApplicationMallocFailedHook+0x3a>
    14c2:	00 00       	nop
    14c4:	e9 cf       	rjmp	.-46     	; 0x1498 <vApplicationMallocFailedHook+0x10>

000014c6 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	c0 58       	subi	r28, 0x80	; 128
    14d0:	d1 09       	sbc	r29, r1
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    14d6:	f8 94       	cli
	CFG_ERR_LED();
    14d8:	80 e8       	ldi	r24, 0x80	; 128
    14da:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    14de:	7f 93       	push	r23
    14e0:	6f 93       	push	r22
    14e2:	25 e7       	ldi	r18, 0x75	; 117
    14e4:	30 e2       	ldi	r19, 0x20	; 32
    14e6:	3f 93       	push	r19
    14e8:	2f 93       	push	r18
    14ea:	1f 92       	push	r1
    14ec:	8f 93       	push	r24
    14ee:	8e 01       	movw	r16, r28
    14f0:	0f 5f       	subi	r16, 0xFF	; 255
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	1f 93       	push	r17
    14f6:	0f 93       	push	r16
    14f8:	0e 94 a5 10 	call	0x214a	; 0x214a <snprintf>
	DbgPrint(Dbg);
    14fc:	c8 01       	movw	r24, r16
    14fe:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	93 ed       	ldi	r25, 0xD3	; 211
    1510:	20 e3       	ldi	r18, 0x30	; 48
    1512:	31 50       	subi	r19, 0x01	; 1
    1514:	90 40       	sbci	r25, 0x00	; 0
    1516:	20 40       	sbci	r18, 0x00	; 0
    1518:	e1 f7       	brne	.-8      	; 0x1512 <vApplicationStackOverflowHook+0x4c>
    151a:	00 c0       	rjmp	.+0      	; 0x151c <vApplicationStackOverflowHook+0x56>
    151c:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    151e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1522:	3f ef       	ldi	r19, 0xFF	; 255
    1524:	93 ed       	ldi	r25, 0xD3	; 211
    1526:	20 e3       	ldi	r18, 0x30	; 48
    1528:	31 50       	subi	r19, 0x01	; 1
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	20 40       	sbci	r18, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <vApplicationStackOverflowHook+0x62>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <vApplicationStackOverflowHook+0x6c>
    1532:	00 00       	nop
    1534:	e9 cf       	rjmp	.-46     	; 0x1508 <vApplicationStackOverflowHook+0x42>

00001536 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	c0 58       	subi	r28, 0x80	; 128
    1540:	d1 09       	sbc	r29, r1
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    1546:	f8 94       	cli
	CFG_ERR_LED();
    1548:	20 e8       	ldi	r18, 0x80	; 128
    154a:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    154e:	7f 93       	push	r23
    1550:	6f 93       	push	r22
    1552:	9f 93       	push	r25
    1554:	8f 93       	push	r24
    1556:	81 e9       	ldi	r24, 0x91	; 145
    1558:	90 e2       	ldi	r25, 0x20	; 32
    155a:	9f 93       	push	r25
    155c:	8f 93       	push	r24
    155e:	1f 92       	push	r1
    1560:	2f 93       	push	r18
    1562:	8e 01       	movw	r16, r28
    1564:	0f 5f       	subi	r16, 0xFF	; 255
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	1f 93       	push	r17
    156a:	0f 93       	push	r16
    156c:	0e 94 a5 10 	call	0x214a	; 0x214a <snprintf>
	DbgPrint(Dbg);
    1570:	c8 01       	movw	r24, r16
    1572:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	93 ec       	ldi	r25, 0xC3	; 195
    1584:	29 e0       	ldi	r18, 0x09	; 9
    1586:	31 50       	subi	r19, 0x01	; 1
    1588:	90 40       	sbci	r25, 0x00	; 0
    158a:	20 40       	sbci	r18, 0x00	; 0
    158c:	e1 f7       	brne	.-8      	; 0x1586 <vAssertCalled+0x50>
    158e:	00 c0       	rjmp	.+0      	; 0x1590 <vAssertCalled+0x5a>
    1590:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1592:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	93 ed       	ldi	r25, 0xD3	; 211
    159a:	20 e3       	ldi	r18, 0x30	; 48
    159c:	31 50       	subi	r19, 0x01	; 1
    159e:	90 40       	sbci	r25, 0x00	; 0
    15a0:	20 40       	sbci	r18, 0x00	; 0
    15a2:	e1 f7       	brne	.-8      	; 0x159c <vAssertCalled+0x66>
    15a4:	00 c0       	rjmp	.+0      	; 0x15a6 <vAssertCalled+0x70>
    15a6:	00 00       	nop
    15a8:	e9 cf       	rjmp	.-46     	; 0x157c <vAssertCalled+0x46>

000015aa <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    15aa:	0e 94 ca 01 	call	0x394	; 0x394 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    15ae:	0e 94 96 02 	call	0x52c	; 0x52c <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    15b2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <DriverPowerInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	0e 94 b6 0b 	call	0x176c	; 0x176c <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    15bc:	87 e0       	ldi	r24, 0x07	; 7
    15be:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    15c2:	78 94       	sei
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	89 ef       	ldi	r24, 0xF9	; 249
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	21 50       	subi	r18, 0x01	; 1
    15cc:	80 40       	sbci	r24, 0x00	; 0
    15ce:	90 40       	sbci	r25, 0x00	; 0
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <main+0x20>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <main+0x2a>
    15d4:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitTransferTasks();
    15d6:	0e 94 93 0b 	call	0x1726	; 0x1726 <InitTransferTasks>

	vTaskStartScheduler();	//Start scheduler loop
    15da:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vTaskStartScheduler>

	return 0;
}
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	08 95       	ret

000015e4 <WorkerSendTask>:
void WorkerSendTask(void *pvParameters)
{	
	while (1)
	{	
		taskENTER_CRITICAL(); // Zetten interrupts uit
		Data=0x10101010;
    15e4:	40 e1       	ldi	r20, 0x10	; 16
    15e6:	50 e1       	ldi	r21, 0x10	; 16
    15e8:	ba 01       	movw	r22, r20
		taskEXIT_CRITICAL(); // Interrupts terug aanzetten
		taskENTER_CRITICAL(); // Zetten interrupts uit
		Data=0x20202020;
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	90 e2       	ldi	r25, 0x20	; 32
    15ee:	dc 01       	movw	r26, r24

void WorkerSendTask(void *pvParameters)
{	
	while (1)
	{	
		taskENTER_CRITICAL(); // Zetten interrupts uit
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	0f 92       	push	r0
		Data=0x10101010;
    15f6:	40 93 6d 61 	sts	0x616D, r20	; 0x80616d <Data>
    15fa:	50 93 6e 61 	sts	0x616E, r21	; 0x80616e <Data+0x1>
    15fe:	60 93 6f 61 	sts	0x616F, r22	; 0x80616f <Data+0x2>
    1602:	70 93 70 61 	sts	0x6170, r23	; 0x806170 <Data+0x3>
		taskEXIT_CRITICAL(); // Interrupts terug aanzetten
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
		taskENTER_CRITICAL(); // Zetten interrupts uit
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	0f 92       	push	r0
		Data=0x20202020;
    1610:	80 93 6d 61 	sts	0x616D, r24	; 0x80616d <Data>
    1614:	90 93 6e 61 	sts	0x616E, r25	; 0x80616e <Data+0x1>
    1618:	a0 93 6f 61 	sts	0x616F, r26	; 0x80616f <Data+0x2>
    161c:	b0 93 70 61 	sts	0x6170, r27	; 0x806170 <Data+0x3>
		taskEXIT_CRITICAL(); // Interrupts terug aanzetten
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	e5 cf       	rjmp	.-54     	; 0x15f0 <WorkerSendTask+0xc>

00001626 <WorkerReceiveTask>:
	
	while(1)
	{
		Startwaarde = portGET_RUN_TIME_COUNTER_VALUE();
		taskENTER_CRITICAL(); // Zetten interrupts uit
		if (Data!=0x10101010 && Data!=0x20202020) printf ("Invalid Data value:%lx \r\n",Data);
    1626:	01 eb       	ldi	r16, 0xB1	; 177
    1628:	10 e2       	ldi	r17, 0x20	; 32
		taskEXIT_CRITICAL(); // Interrupts terug aanzetten
		printf("Tijd nodig: %d\r", portGET_RUN_TIME_COUNTER_VALUE() - Startwaarde); // Tijd nodig voor dit gedeelte afprinten
    162a:	cb ec       	ldi	r28, 0xCB	; 203
    162c:	d0 e2       	ldi	r29, 0x20	; 32
void WorkerReceiveTask(void *pvParameters)
{
	
	while(1)
	{
		Startwaarde = portGET_RUN_TIME_COUNTER_VALUE();
    162e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1632:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1636:	40 91 71 61 	lds	r20, 0x6171	; 0x806171 <StatsTimer>
    163a:	50 91 72 61 	lds	r21, 0x6172	; 0x806172 <StatsTimer+0x1>
    163e:	60 91 73 61 	lds	r22, 0x6173	; 0x806173 <StatsTimer+0x2>
    1642:	70 91 74 61 	lds	r23, 0x6174	; 0x806174 <StatsTimer+0x3>
    1646:	48 0f       	add	r20, r24
    1648:	59 1f       	adc	r21, r25
    164a:	61 1d       	adc	r22, r1
    164c:	71 1d       	adc	r23, r1
    164e:	40 93 75 61 	sts	0x6175, r20	; 0x806175 <Startwaarde>
    1652:	50 93 76 61 	sts	0x6176, r21	; 0x806176 <Startwaarde+0x1>
    1656:	60 93 77 61 	sts	0x6177, r22	; 0x806177 <Startwaarde+0x2>
    165a:	70 93 78 61 	sts	0x6178, r23	; 0x806178 <Startwaarde+0x3>
		taskENTER_CRITICAL(); // Zetten interrupts uit
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	0f 92       	push	r0
		if (Data!=0x10101010 && Data!=0x20202020) printf ("Invalid Data value:%lx \r\n",Data);
    1664:	80 91 6d 61 	lds	r24, 0x616D	; 0x80616d <Data>
    1668:	90 91 6e 61 	lds	r25, 0x616E	; 0x80616e <Data+0x1>
    166c:	a0 91 6f 61 	lds	r26, 0x616F	; 0x80616f <Data+0x2>
    1670:	b0 91 70 61 	lds	r27, 0x6170	; 0x806170 <Data+0x3>
    1674:	80 31       	cpi	r24, 0x10	; 16
    1676:	90 41       	sbci	r25, 0x10	; 16
    1678:	a0 41       	sbci	r26, 0x10	; 16
    167a:	b0 41       	sbci	r27, 0x10	; 16
    167c:	59 f1       	breq	.+86     	; 0x16d4 <WorkerReceiveTask+0xae>
    167e:	80 91 6d 61 	lds	r24, 0x616D	; 0x80616d <Data>
    1682:	90 91 6e 61 	lds	r25, 0x616E	; 0x80616e <Data+0x1>
    1686:	a0 91 6f 61 	lds	r26, 0x616F	; 0x80616f <Data+0x2>
    168a:	b0 91 70 61 	lds	r27, 0x6170	; 0x806170 <Data+0x3>
    168e:	80 32       	cpi	r24, 0x20	; 32
    1690:	90 42       	sbci	r25, 0x20	; 32
    1692:	a0 42       	sbci	r26, 0x20	; 32
    1694:	b0 42       	sbci	r27, 0x20	; 32
    1696:	f1 f0       	breq	.+60     	; 0x16d4 <WorkerReceiveTask+0xae>
    1698:	80 91 6d 61 	lds	r24, 0x616D	; 0x80616d <Data>
    169c:	90 91 6e 61 	lds	r25, 0x616E	; 0x80616e <Data+0x1>
    16a0:	a0 91 6f 61 	lds	r26, 0x616F	; 0x80616f <Data+0x2>
    16a4:	b0 91 70 61 	lds	r27, 0x6170	; 0x806170 <Data+0x3>
    16a8:	bf 93       	push	r27
    16aa:	af 93       	push	r26
    16ac:	9f 93       	push	r25
    16ae:	8f 93       	push	r24
    16b0:	1f 93       	push	r17
    16b2:	0f 93       	push	r16
    16b4:	0e 94 91 10 	call	0x2122	; 0x2122 <printf>
    16b8:	40 91 75 61 	lds	r20, 0x6175	; 0x806175 <Startwaarde>
    16bc:	50 91 76 61 	lds	r21, 0x6176	; 0x806176 <Startwaarde+0x1>
    16c0:	60 91 77 61 	lds	r22, 0x6177	; 0x806177 <Startwaarde+0x2>
    16c4:	70 91 78 61 	lds	r23, 0x6178	; 0x806178 <Startwaarde+0x3>
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
		taskEXIT_CRITICAL(); // Interrupts terug aanzetten
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
		printf("Tijd nodig: %d\r", portGET_RUN_TIME_COUNTER_VALUE() - Startwaarde); // Tijd nodig voor dit gedeelte afprinten
    16d8:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    16dc:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    16e0:	80 91 71 61 	lds	r24, 0x6171	; 0x806171 <StatsTimer>
    16e4:	90 91 72 61 	lds	r25, 0x6172	; 0x806172 <StatsTimer+0x1>
    16e8:	a0 91 73 61 	lds	r26, 0x6173	; 0x806173 <StatsTimer+0x2>
    16ec:	b0 91 74 61 	lds	r27, 0x6174	; 0x806174 <StatsTimer+0x3>
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	a1 1d       	adc	r26, r1
    16f6:	b1 1d       	adc	r27, r1
    16f8:	84 1b       	sub	r24, r20
    16fa:	95 0b       	sbc	r25, r21
    16fc:	a6 0b       	sbc	r26, r22
    16fe:	b7 0b       	sbc	r27, r23
    1700:	bf 93       	push	r27
    1702:	af 93       	push	r26
    1704:	9f 93       	push	r25
    1706:	8f 93       	push	r24
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	0e 94 91 10 	call	0x2122	; 0x2122 <printf>
		vTaskDelay(1);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 14 0a 	call	0x1428	; 0x1428 <vTaskDelay>
	}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	84 cf       	rjmp	.-248    	; 0x162e <WorkerReceiveTask+0x8>

00001726 <InitTransferTasks>:
void WorkerSendTask(void *pvParameters);
void WorkerReceiveTask(void *pvParameters);

//Function definitions
void InitTransferTasks()
{
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
	xTaskCreate( WorkerSendTask, "sendtask", 256, NULL, tskIDLE_PRIORITY+1, NULL );
    172c:	e1 2c       	mov	r14, r1
    172e:	f1 2c       	mov	r15, r1
    1730:	01 e0       	ldi	r16, 0x01	; 1
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	51 e0       	ldi	r21, 0x01	; 1
    173a:	6b ed       	ldi	r22, 0xDB	; 219
    173c:	70 e2       	ldi	r23, 0x20	; 32
    173e:	82 ef       	ldi	r24, 0xF2	; 242
    1740:	9a e0       	ldi	r25, 0x0A	; 10
    1742:	0e 94 38 07 	call	0xe70	; 0xe70 <xTaskCreate>
	xTaskCreate( WorkerReceiveTask, "receivetask", 256, NULL, tskIDLE_PRIORITY+2, NULL );
    1746:	02 e0       	ldi	r16, 0x02	; 2
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	51 e0       	ldi	r21, 0x01	; 1
    1750:	64 ee       	ldi	r22, 0xE4	; 228
    1752:	70 e2       	ldi	r23, 0x20	; 32
    1754:	83 e1       	ldi	r24, 0x13	; 19
    1756:	9b e0       	ldi	r25, 0x0B	; 11
    1758:	0e 94 38 07 	call	0xe70	; 0xe70 <xTaskCreate>
}
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	08 95       	ret

00001764 <DriverPowerInit>:
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    176a:	08 95       	ret

0000176c <DriverPowerVccAuxSet>:
    176c:	81 11       	cpse	r24, r1
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <DriverPowerVccAuxSet+0xc>
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1776:	08 95       	ret
    1778:	80 e2       	ldi	r24, 0x20	; 32
    177a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    177e:	08 95       	ret

00001780 <vfprintf>:
    1780:	2f 92       	push	r2
    1782:	3f 92       	push	r3
    1784:	4f 92       	push	r4
    1786:	5f 92       	push	r5
    1788:	6f 92       	push	r6
    178a:	7f 92       	push	r7
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	60 97       	sbiw	r28, 0x10	; 16
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	7c 01       	movw	r14, r24
    17b0:	1b 01       	movw	r2, r22
    17b2:	6a 01       	movw	r12, r20
    17b4:	fc 01       	movw	r30, r24
    17b6:	16 82       	std	Z+6, r1	; 0x06
    17b8:	17 82       	std	Z+7, r1	; 0x07
    17ba:	83 81       	ldd	r24, Z+3	; 0x03
    17bc:	81 ff       	sbrs	r24, 1
    17be:	44 c3       	rjmp	.+1672   	; 0x1e48 <vfprintf+0x6c8>
    17c0:	9e 01       	movw	r18, r28
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	39 01       	movw	r6, r18
    17c8:	f7 01       	movw	r30, r14
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	f1 01       	movw	r30, r2
    17ce:	93 fd       	sbrc	r25, 3
    17d0:	85 91       	lpm	r24, Z+
    17d2:	93 ff       	sbrs	r25, 3
    17d4:	81 91       	ld	r24, Z+
    17d6:	1f 01       	movw	r2, r30
    17d8:	88 23       	and	r24, r24
    17da:	09 f4       	brne	.+2      	; 0x17de <vfprintf+0x5e>
    17dc:	31 c3       	rjmp	.+1634   	; 0x1e40 <vfprintf+0x6c0>
    17de:	85 32       	cpi	r24, 0x25	; 37
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <vfprintf+0x70>
    17e2:	93 fd       	sbrc	r25, 3
    17e4:	85 91       	lpm	r24, Z+
    17e6:	93 ff       	sbrs	r25, 3
    17e8:	81 91       	ld	r24, Z+
    17ea:	1f 01       	movw	r2, r30
    17ec:	85 32       	cpi	r24, 0x25	; 37
    17ee:	39 f4       	brne	.+14     	; 0x17fe <vfprintf+0x7e>
    17f0:	b7 01       	movw	r22, r14
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    17f8:	56 01       	movw	r10, r12
    17fa:	65 01       	movw	r12, r10
    17fc:	e5 cf       	rjmp	.-54     	; 0x17c8 <vfprintf+0x48>
    17fe:	10 e0       	ldi	r17, 0x00	; 0
    1800:	51 2c       	mov	r5, r1
    1802:	91 2c       	mov	r9, r1
    1804:	ff e1       	ldi	r31, 0x1F	; 31
    1806:	f9 15       	cp	r31, r9
    1808:	d8 f0       	brcs	.+54     	; 0x1840 <vfprintf+0xc0>
    180a:	8b 32       	cpi	r24, 0x2B	; 43
    180c:	79 f0       	breq	.+30     	; 0x182c <vfprintf+0xac>
    180e:	38 f4       	brcc	.+14     	; 0x181e <vfprintf+0x9e>
    1810:	80 32       	cpi	r24, 0x20	; 32
    1812:	79 f0       	breq	.+30     	; 0x1832 <vfprintf+0xb2>
    1814:	83 32       	cpi	r24, 0x23	; 35
    1816:	a1 f4       	brne	.+40     	; 0x1840 <vfprintf+0xc0>
    1818:	f9 2d       	mov	r31, r9
    181a:	f0 61       	ori	r31, 0x10	; 16
    181c:	2e c0       	rjmp	.+92     	; 0x187a <vfprintf+0xfa>
    181e:	8d 32       	cpi	r24, 0x2D	; 45
    1820:	61 f0       	breq	.+24     	; 0x183a <vfprintf+0xba>
    1822:	80 33       	cpi	r24, 0x30	; 48
    1824:	69 f4       	brne	.+26     	; 0x1840 <vfprintf+0xc0>
    1826:	29 2d       	mov	r18, r9
    1828:	21 60       	ori	r18, 0x01	; 1
    182a:	2d c0       	rjmp	.+90     	; 0x1886 <vfprintf+0x106>
    182c:	39 2d       	mov	r19, r9
    182e:	32 60       	ori	r19, 0x02	; 2
    1830:	93 2e       	mov	r9, r19
    1832:	89 2d       	mov	r24, r9
    1834:	84 60       	ori	r24, 0x04	; 4
    1836:	98 2e       	mov	r9, r24
    1838:	2a c0       	rjmp	.+84     	; 0x188e <vfprintf+0x10e>
    183a:	e9 2d       	mov	r30, r9
    183c:	e8 60       	ori	r30, 0x08	; 8
    183e:	15 c0       	rjmp	.+42     	; 0x186a <vfprintf+0xea>
    1840:	97 fc       	sbrc	r9, 7
    1842:	2d c0       	rjmp	.+90     	; 0x189e <vfprintf+0x11e>
    1844:	20 ed       	ldi	r18, 0xD0	; 208
    1846:	28 0f       	add	r18, r24
    1848:	2a 30       	cpi	r18, 0x0A	; 10
    184a:	88 f4       	brcc	.+34     	; 0x186e <vfprintf+0xee>
    184c:	96 fe       	sbrs	r9, 6
    184e:	06 c0       	rjmp	.+12     	; 0x185c <vfprintf+0xdc>
    1850:	3a e0       	ldi	r19, 0x0A	; 10
    1852:	13 9f       	mul	r17, r19
    1854:	20 0d       	add	r18, r0
    1856:	11 24       	eor	r1, r1
    1858:	12 2f       	mov	r17, r18
    185a:	19 c0       	rjmp	.+50     	; 0x188e <vfprintf+0x10e>
    185c:	8a e0       	ldi	r24, 0x0A	; 10
    185e:	58 9e       	mul	r5, r24
    1860:	20 0d       	add	r18, r0
    1862:	11 24       	eor	r1, r1
    1864:	52 2e       	mov	r5, r18
    1866:	e9 2d       	mov	r30, r9
    1868:	e0 62       	ori	r30, 0x20	; 32
    186a:	9e 2e       	mov	r9, r30
    186c:	10 c0       	rjmp	.+32     	; 0x188e <vfprintf+0x10e>
    186e:	8e 32       	cpi	r24, 0x2E	; 46
    1870:	31 f4       	brne	.+12     	; 0x187e <vfprintf+0xfe>
    1872:	96 fc       	sbrc	r9, 6
    1874:	e5 c2       	rjmp	.+1482   	; 0x1e40 <vfprintf+0x6c0>
    1876:	f9 2d       	mov	r31, r9
    1878:	f0 64       	ori	r31, 0x40	; 64
    187a:	9f 2e       	mov	r9, r31
    187c:	08 c0       	rjmp	.+16     	; 0x188e <vfprintf+0x10e>
    187e:	8c 36       	cpi	r24, 0x6C	; 108
    1880:	21 f4       	brne	.+8      	; 0x188a <vfprintf+0x10a>
    1882:	29 2d       	mov	r18, r9
    1884:	20 68       	ori	r18, 0x80	; 128
    1886:	92 2e       	mov	r9, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <vfprintf+0x10e>
    188a:	88 36       	cpi	r24, 0x68	; 104
    188c:	41 f4       	brne	.+16     	; 0x189e <vfprintf+0x11e>
    188e:	f1 01       	movw	r30, r2
    1890:	93 fd       	sbrc	r25, 3
    1892:	85 91       	lpm	r24, Z+
    1894:	93 ff       	sbrs	r25, 3
    1896:	81 91       	ld	r24, Z+
    1898:	1f 01       	movw	r2, r30
    189a:	81 11       	cpse	r24, r1
    189c:	b3 cf       	rjmp	.-154    	; 0x1804 <vfprintf+0x84>
    189e:	9b eb       	ldi	r25, 0xBB	; 187
    18a0:	98 0f       	add	r25, r24
    18a2:	93 30       	cpi	r25, 0x03	; 3
    18a4:	20 f4       	brcc	.+8      	; 0x18ae <vfprintf+0x12e>
    18a6:	99 2d       	mov	r25, r9
    18a8:	90 61       	ori	r25, 0x10	; 16
    18aa:	80 5e       	subi	r24, 0xE0	; 224
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <vfprintf+0x13c>
    18ae:	9b e9       	ldi	r25, 0x9B	; 155
    18b0:	98 0f       	add	r25, r24
    18b2:	93 30       	cpi	r25, 0x03	; 3
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <vfprintf+0x138>
    18b6:	66 c1       	rjmp	.+716    	; 0x1b84 <vfprintf+0x404>
    18b8:	99 2d       	mov	r25, r9
    18ba:	9f 7e       	andi	r25, 0xEF	; 239
    18bc:	96 ff       	sbrs	r25, 6
    18be:	16 e0       	ldi	r17, 0x06	; 6
    18c0:	9f 73       	andi	r25, 0x3F	; 63
    18c2:	99 2e       	mov	r9, r25
    18c4:	85 36       	cpi	r24, 0x65	; 101
    18c6:	19 f4       	brne	.+6      	; 0x18ce <vfprintf+0x14e>
    18c8:	90 64       	ori	r25, 0x40	; 64
    18ca:	99 2e       	mov	r9, r25
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <vfprintf+0x15e>
    18ce:	86 36       	cpi	r24, 0x66	; 102
    18d0:	21 f4       	brne	.+8      	; 0x18da <vfprintf+0x15a>
    18d2:	39 2f       	mov	r19, r25
    18d4:	30 68       	ori	r19, 0x80	; 128
    18d6:	93 2e       	mov	r9, r19
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x15e>
    18da:	11 11       	cpse	r17, r1
    18dc:	11 50       	subi	r17, 0x01	; 1
    18de:	97 fe       	sbrs	r9, 7
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <vfprintf+0x170>
    18e2:	1c 33       	cpi	r17, 0x3C	; 60
    18e4:	50 f4       	brcc	.+20     	; 0x18fa <vfprintf+0x17a>
    18e6:	44 24       	eor	r4, r4
    18e8:	43 94       	inc	r4
    18ea:	41 0e       	add	r4, r17
    18ec:	27 e0       	ldi	r18, 0x07	; 7
    18ee:	0b c0       	rjmp	.+22     	; 0x1906 <vfprintf+0x186>
    18f0:	18 30       	cpi	r17, 0x08	; 8
    18f2:	38 f0       	brcs	.+14     	; 0x1902 <vfprintf+0x182>
    18f4:	27 e0       	ldi	r18, 0x07	; 7
    18f6:	17 e0       	ldi	r17, 0x07	; 7
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <vfprintf+0x184>
    18fa:	27 e0       	ldi	r18, 0x07	; 7
    18fc:	9c e3       	ldi	r25, 0x3C	; 60
    18fe:	49 2e       	mov	r4, r25
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x186>
    1902:	21 2f       	mov	r18, r17
    1904:	41 2c       	mov	r4, r1
    1906:	56 01       	movw	r10, r12
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	a8 0e       	add	r10, r24
    190c:	b1 1c       	adc	r11, r1
    190e:	f6 01       	movw	r30, r12
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	04 2d       	mov	r16, r4
    191a:	a3 01       	movw	r20, r6
    191c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__ftoa_engine>
    1920:	6c 01       	movw	r12, r24
    1922:	f9 81       	ldd	r31, Y+1	; 0x01
    1924:	fc 87       	std	Y+12, r31	; 0x0c
    1926:	f0 ff       	sbrs	r31, 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x1ae>
    192a:	f3 ff       	sbrs	r31, 3
    192c:	06 c0       	rjmp	.+12     	; 0x193a <vfprintf+0x1ba>
    192e:	91 fc       	sbrc	r9, 1
    1930:	06 c0       	rjmp	.+12     	; 0x193e <vfprintf+0x1be>
    1932:	92 fe       	sbrs	r9, 2
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <vfprintf+0x1c2>
    1936:	00 e2       	ldi	r16, 0x20	; 32
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <vfprintf+0x1c4>
    193a:	0d e2       	ldi	r16, 0x2D	; 45
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <vfprintf+0x1c4>
    193e:	0b e2       	ldi	r16, 0x2B	; 43
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <vfprintf+0x1c4>
    1942:	00 e0       	ldi	r16, 0x00	; 0
    1944:	8c 85       	ldd	r24, Y+12	; 0x0c
    1946:	8c 70       	andi	r24, 0x0C	; 12
    1948:	19 f0       	breq	.+6      	; 0x1950 <vfprintf+0x1d0>
    194a:	01 11       	cpse	r16, r1
    194c:	5a c2       	rjmp	.+1204   	; 0x1e02 <vfprintf+0x682>
    194e:	9b c2       	rjmp	.+1334   	; 0x1e86 <vfprintf+0x706>
    1950:	97 fe       	sbrs	r9, 7
    1952:	10 c0       	rjmp	.+32     	; 0x1974 <vfprintf+0x1f4>
    1954:	4c 0c       	add	r4, r12
    1956:	fc 85       	ldd	r31, Y+12	; 0x0c
    1958:	f4 ff       	sbrs	r31, 4
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <vfprintf+0x1e4>
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	81 33       	cpi	r24, 0x31	; 49
    1960:	09 f4       	brne	.+2      	; 0x1964 <vfprintf+0x1e4>
    1962:	4a 94       	dec	r4
    1964:	14 14       	cp	r1, r4
    1966:	74 f5       	brge	.+92     	; 0x19c4 <vfprintf+0x244>
    1968:	28 e0       	ldi	r18, 0x08	; 8
    196a:	24 15       	cp	r18, r4
    196c:	78 f5       	brcc	.+94     	; 0x19cc <vfprintf+0x24c>
    196e:	88 e0       	ldi	r24, 0x08	; 8
    1970:	48 2e       	mov	r4, r24
    1972:	2c c0       	rjmp	.+88     	; 0x19cc <vfprintf+0x24c>
    1974:	96 fc       	sbrc	r9, 6
    1976:	2a c0       	rjmp	.+84     	; 0x19cc <vfprintf+0x24c>
    1978:	81 2f       	mov	r24, r17
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	8c 15       	cp	r24, r12
    197e:	9d 05       	cpc	r25, r13
    1980:	9c f0       	brlt	.+38     	; 0x19a8 <vfprintf+0x228>
    1982:	3c ef       	ldi	r19, 0xFC	; 252
    1984:	c3 16       	cp	r12, r19
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	d3 06       	cpc	r13, r19
    198a:	74 f0       	brlt	.+28     	; 0x19a8 <vfprintf+0x228>
    198c:	89 2d       	mov	r24, r9
    198e:	80 68       	ori	r24, 0x80	; 128
    1990:	98 2e       	mov	r9, r24
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <vfprintf+0x228>
    1994:	e2 e0       	ldi	r30, 0x02	; 2
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	ec 0f       	add	r30, r28
    199a:	fd 1f       	adc	r31, r29
    199c:	e1 0f       	add	r30, r17
    199e:	f1 1d       	adc	r31, r1
    19a0:	80 81       	ld	r24, Z
    19a2:	80 33       	cpi	r24, 0x30	; 48
    19a4:	19 f4       	brne	.+6      	; 0x19ac <vfprintf+0x22c>
    19a6:	11 50       	subi	r17, 0x01	; 1
    19a8:	11 11       	cpse	r17, r1
    19aa:	f4 cf       	rjmp	.-24     	; 0x1994 <vfprintf+0x214>
    19ac:	97 fe       	sbrs	r9, 7
    19ae:	0e c0       	rjmp	.+28     	; 0x19cc <vfprintf+0x24c>
    19b0:	44 24       	eor	r4, r4
    19b2:	43 94       	inc	r4
    19b4:	41 0e       	add	r4, r17
    19b6:	81 2f       	mov	r24, r17
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	c8 16       	cp	r12, r24
    19bc:	d9 06       	cpc	r13, r25
    19be:	2c f4       	brge	.+10     	; 0x19ca <vfprintf+0x24a>
    19c0:	1c 19       	sub	r17, r12
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <vfprintf+0x24c>
    19c4:	44 24       	eor	r4, r4
    19c6:	43 94       	inc	r4
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <vfprintf+0x24c>
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	97 fe       	sbrs	r9, 7
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <vfprintf+0x25c>
    19d0:	1c 14       	cp	r1, r12
    19d2:	1d 04       	cpc	r1, r13
    19d4:	34 f4       	brge	.+12     	; 0x19e2 <vfprintf+0x262>
    19d6:	c6 01       	movw	r24, r12
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <vfprintf+0x266>
    19dc:	85 e0       	ldi	r24, 0x05	; 5
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <vfprintf+0x266>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	01 11       	cpse	r16, r1
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	11 23       	and	r17, r17
    19ec:	31 f0       	breq	.+12     	; 0x19fa <vfprintf+0x27a>
    19ee:	21 2f       	mov	r18, r17
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	25 2d       	mov	r18, r5
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	82 17       	cp	r24, r18
    1a00:	93 07       	cpc	r25, r19
    1a02:	14 f4       	brge	.+4      	; 0x1a08 <vfprintf+0x288>
    1a04:	58 1a       	sub	r5, r24
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <vfprintf+0x28a>
    1a08:	51 2c       	mov	r5, r1
    1a0a:	89 2d       	mov	r24, r9
    1a0c:	89 70       	andi	r24, 0x09	; 9
    1a0e:	49 f4       	brne	.+18     	; 0x1a22 <vfprintf+0x2a2>
    1a10:	55 20       	and	r5, r5
    1a12:	39 f0       	breq	.+14     	; 0x1a22 <vfprintf+0x2a2>
    1a14:	b7 01       	movw	r22, r14
    1a16:	80 e2       	ldi	r24, 0x20	; 32
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1a1e:	5a 94       	dec	r5
    1a20:	f7 cf       	rjmp	.-18     	; 0x1a10 <vfprintf+0x290>
    1a22:	00 23       	and	r16, r16
    1a24:	29 f0       	breq	.+10     	; 0x1a30 <vfprintf+0x2b0>
    1a26:	b7 01       	movw	r22, r14
    1a28:	80 2f       	mov	r24, r16
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1a30:	93 fc       	sbrc	r9, 3
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <vfprintf+0x2c6>
    1a34:	55 20       	and	r5, r5
    1a36:	39 f0       	breq	.+14     	; 0x1a46 <vfprintf+0x2c6>
    1a38:	b7 01       	movw	r22, r14
    1a3a:	80 e3       	ldi	r24, 0x30	; 48
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1a42:	5a 94       	dec	r5
    1a44:	f7 cf       	rjmp	.-18     	; 0x1a34 <vfprintf+0x2b4>
    1a46:	97 fe       	sbrs	r9, 7
    1a48:	4c c0       	rjmp	.+152    	; 0x1ae2 <vfprintf+0x362>
    1a4a:	46 01       	movw	r8, r12
    1a4c:	d7 fe       	sbrs	r13, 7
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <vfprintf+0x2d4>
    1a50:	81 2c       	mov	r8, r1
    1a52:	91 2c       	mov	r9, r1
    1a54:	c6 01       	movw	r24, r12
    1a56:	88 19       	sub	r24, r8
    1a58:	99 09       	sbc	r25, r9
    1a5a:	f3 01       	movw	r30, r6
    1a5c:	e8 0f       	add	r30, r24
    1a5e:	f9 1f       	adc	r31, r25
    1a60:	ed 87       	std	Y+13, r30	; 0x0d
    1a62:	fe 87       	std	Y+14, r31	; 0x0e
    1a64:	96 01       	movw	r18, r12
    1a66:	24 19       	sub	r18, r4
    1a68:	31 09       	sbc	r19, r1
    1a6a:	2f 87       	std	Y+15, r18	; 0x0f
    1a6c:	38 8b       	std	Y+16, r19	; 0x10
    1a6e:	01 2f       	mov	r16, r17
    1a70:	10 e0       	ldi	r17, 0x00	; 0
    1a72:	11 95       	neg	r17
    1a74:	01 95       	neg	r16
    1a76:	11 09       	sbc	r17, r1
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	83 16       	cp	r8, r19
    1a7c:	93 06       	cpc	r9, r19
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <vfprintf+0x30a>
    1a80:	b7 01       	movw	r22, r14
    1a82:	8e e2       	ldi	r24, 0x2E	; 46
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1a8a:	c8 14       	cp	r12, r8
    1a8c:	d9 04       	cpc	r13, r9
    1a8e:	4c f0       	brlt	.+18     	; 0x1aa2 <vfprintf+0x322>
    1a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a92:	98 89       	ldd	r25, Y+16	; 0x10
    1a94:	88 15       	cp	r24, r8
    1a96:	99 05       	cpc	r25, r9
    1a98:	24 f4       	brge	.+8      	; 0x1aa2 <vfprintf+0x322>
    1a9a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a9c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a9e:	81 81       	ldd	r24, Z+1	; 0x01
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <vfprintf+0x324>
    1aa2:	80 e3       	ldi	r24, 0x30	; 48
    1aa4:	f1 e0       	ldi	r31, 0x01	; 1
    1aa6:	8f 1a       	sub	r8, r31
    1aa8:	91 08       	sbc	r9, r1
    1aaa:	2d 85       	ldd	r18, Y+13	; 0x0d
    1aac:	3e 85       	ldd	r19, Y+14	; 0x0e
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	2d 87       	std	Y+13, r18	; 0x0d
    1ab4:	3e 87       	std	Y+14, r19	; 0x0e
    1ab6:	80 16       	cp	r8, r16
    1ab8:	91 06       	cpc	r9, r17
    1aba:	2c f0       	brlt	.+10     	; 0x1ac6 <vfprintf+0x346>
    1abc:	b7 01       	movw	r22, r14
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1ac4:	d9 cf       	rjmp	.-78     	; 0x1a78 <vfprintf+0x2f8>
    1ac6:	c8 14       	cp	r12, r8
    1ac8:	d9 04       	cpc	r13, r9
    1aca:	41 f4       	brne	.+16     	; 0x1adc <vfprintf+0x35c>
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	96 33       	cpi	r25, 0x36	; 54
    1ad0:	20 f4       	brcc	.+8      	; 0x1ada <vfprintf+0x35a>
    1ad2:	95 33       	cpi	r25, 0x35	; 53
    1ad4:	19 f4       	brne	.+6      	; 0x1adc <vfprintf+0x35c>
    1ad6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ad8:	34 ff       	sbrs	r19, 4
    1ada:	81 e3       	ldi	r24, 0x31	; 49
    1adc:	b7 01       	movw	r22, r14
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	4e c0       	rjmp	.+156    	; 0x1b7e <vfprintf+0x3fe>
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	81 33       	cpi	r24, 0x31	; 49
    1ae6:	19 f0       	breq	.+6      	; 0x1aee <vfprintf+0x36e>
    1ae8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aea:	9f 7e       	andi	r25, 0xEF	; 239
    1aec:	9c 87       	std	Y+12, r25	; 0x0c
    1aee:	b7 01       	movw	r22, r14
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1af6:	11 11       	cpse	r17, r1
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <vfprintf+0x384>
    1afa:	94 fc       	sbrc	r9, 4
    1afc:	18 c0       	rjmp	.+48     	; 0x1b2e <vfprintf+0x3ae>
    1afe:	85 e6       	ldi	r24, 0x65	; 101
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	17 c0       	rjmp	.+46     	; 0x1b32 <vfprintf+0x3b2>
    1b04:	b7 01       	movw	r22, r14
    1b06:	8e e2       	ldi	r24, 0x2E	; 46
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1b0e:	1e 5f       	subi	r17, 0xFE	; 254
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	01 e0       	ldi	r16, 0x01	; 1
    1b14:	08 0f       	add	r16, r24
    1b16:	f3 01       	movw	r30, r6
    1b18:	e8 0f       	add	r30, r24
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	80 81       	ld	r24, Z
    1b1e:	b7 01       	movw	r22, r14
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1b26:	80 2f       	mov	r24, r16
    1b28:	01 13       	cpse	r16, r17
    1b2a:	f3 cf       	rjmp	.-26     	; 0x1b12 <vfprintf+0x392>
    1b2c:	e6 cf       	rjmp	.-52     	; 0x1afa <vfprintf+0x37a>
    1b2e:	85 e4       	ldi	r24, 0x45	; 69
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	b7 01       	movw	r22, r14
    1b34:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1b38:	d7 fc       	sbrc	r13, 7
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <vfprintf+0x3c8>
    1b3c:	c1 14       	cp	r12, r1
    1b3e:	d1 04       	cpc	r13, r1
    1b40:	41 f4       	brne	.+16     	; 0x1b52 <vfprintf+0x3d2>
    1b42:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b44:	e4 ff       	sbrs	r30, 4
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <vfprintf+0x3d2>
    1b48:	d1 94       	neg	r13
    1b4a:	c1 94       	neg	r12
    1b4c:	d1 08       	sbc	r13, r1
    1b4e:	8d e2       	ldi	r24, 0x2D	; 45
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <vfprintf+0x3d4>
    1b52:	8b e2       	ldi	r24, 0x2B	; 43
    1b54:	b7 01       	movw	r22, r14
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1b5c:	80 e3       	ldi	r24, 0x30	; 48
    1b5e:	2a e0       	ldi	r18, 0x0A	; 10
    1b60:	c2 16       	cp	r12, r18
    1b62:	d1 04       	cpc	r13, r1
    1b64:	2c f0       	brlt	.+10     	; 0x1b70 <vfprintf+0x3f0>
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	fa e0       	ldi	r31, 0x0A	; 10
    1b6a:	cf 1a       	sub	r12, r31
    1b6c:	d1 08       	sbc	r13, r1
    1b6e:	f7 cf       	rjmp	.-18     	; 0x1b5e <vfprintf+0x3de>
    1b70:	b7 01       	movw	r22, r14
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1b78:	b7 01       	movw	r22, r14
    1b7a:	c6 01       	movw	r24, r12
    1b7c:	c0 96       	adiw	r24, 0x30	; 48
    1b7e:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1b82:	54 c1       	rjmp	.+680    	; 0x1e2c <vfprintf+0x6ac>
    1b84:	83 36       	cpi	r24, 0x63	; 99
    1b86:	31 f0       	breq	.+12     	; 0x1b94 <vfprintf+0x414>
    1b88:	83 37       	cpi	r24, 0x73	; 115
    1b8a:	79 f0       	breq	.+30     	; 0x1baa <vfprintf+0x42a>
    1b8c:	83 35       	cpi	r24, 0x53	; 83
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <vfprintf+0x412>
    1b90:	56 c0       	rjmp	.+172    	; 0x1c3e <vfprintf+0x4be>
    1b92:	20 c0       	rjmp	.+64     	; 0x1bd4 <vfprintf+0x454>
    1b94:	56 01       	movw	r10, r12
    1b96:	32 e0       	ldi	r19, 0x02	; 2
    1b98:	a3 0e       	add	r10, r19
    1b9a:	b1 1c       	adc	r11, r1
    1b9c:	f6 01       	movw	r30, r12
    1b9e:	80 81       	ld	r24, Z
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	01 e0       	ldi	r16, 0x01	; 1
    1ba4:	10 e0       	ldi	r17, 0x00	; 0
    1ba6:	63 01       	movw	r12, r6
    1ba8:	12 c0       	rjmp	.+36     	; 0x1bce <vfprintf+0x44e>
    1baa:	56 01       	movw	r10, r12
    1bac:	f2 e0       	ldi	r31, 0x02	; 2
    1bae:	af 0e       	add	r10, r31
    1bb0:	b1 1c       	adc	r11, r1
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	c0 80       	ld	r12, Z
    1bb6:	d1 80       	ldd	r13, Z+1	; 0x01
    1bb8:	96 fe       	sbrs	r9, 6
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <vfprintf+0x442>
    1bbc:	61 2f       	mov	r22, r17
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <vfprintf+0x446>
    1bc2:	6f ef       	ldi	r22, 0xFF	; 255
    1bc4:	7f ef       	ldi	r23, 0xFF	; 255
    1bc6:	c6 01       	movw	r24, r12
    1bc8:	0e 94 4a 10 	call	0x2094	; 0x2094 <strnlen>
    1bcc:	8c 01       	movw	r16, r24
    1bce:	f9 2d       	mov	r31, r9
    1bd0:	ff 77       	andi	r31, 0x7F	; 127
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <vfprintf+0x47c>
    1bd4:	56 01       	movw	r10, r12
    1bd6:	22 e0       	ldi	r18, 0x02	; 2
    1bd8:	a2 0e       	add	r10, r18
    1bda:	b1 1c       	adc	r11, r1
    1bdc:	f6 01       	movw	r30, r12
    1bde:	c0 80       	ld	r12, Z
    1be0:	d1 80       	ldd	r13, Z+1	; 0x01
    1be2:	96 fe       	sbrs	r9, 6
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <vfprintf+0x46c>
    1be6:	61 2f       	mov	r22, r17
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <vfprintf+0x470>
    1bec:	6f ef       	ldi	r22, 0xFF	; 255
    1bee:	7f ef       	ldi	r23, 0xFF	; 255
    1bf0:	c6 01       	movw	r24, r12
    1bf2:	0e 94 38 10 	call	0x2070	; 0x2070 <strnlen_P>
    1bf6:	8c 01       	movw	r16, r24
    1bf8:	f9 2d       	mov	r31, r9
    1bfa:	f0 68       	ori	r31, 0x80	; 128
    1bfc:	9f 2e       	mov	r9, r31
    1bfe:	f3 fd       	sbrc	r31, 3
    1c00:	1a c0       	rjmp	.+52     	; 0x1c36 <vfprintf+0x4b6>
    1c02:	85 2d       	mov	r24, r5
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	08 17       	cp	r16, r24
    1c08:	19 07       	cpc	r17, r25
    1c0a:	a8 f4       	brcc	.+42     	; 0x1c36 <vfprintf+0x4b6>
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	80 e2       	ldi	r24, 0x20	; 32
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1c16:	5a 94       	dec	r5
    1c18:	f4 cf       	rjmp	.-24     	; 0x1c02 <vfprintf+0x482>
    1c1a:	f6 01       	movw	r30, r12
    1c1c:	97 fc       	sbrc	r9, 7
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	97 fe       	sbrs	r9, 7
    1c22:	81 91       	ld	r24, Z+
    1c24:	6f 01       	movw	r12, r30
    1c26:	b7 01       	movw	r22, r14
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1c2e:	51 10       	cpse	r5, r1
    1c30:	5a 94       	dec	r5
    1c32:	01 50       	subi	r16, 0x01	; 1
    1c34:	11 09       	sbc	r17, r1
    1c36:	01 15       	cp	r16, r1
    1c38:	11 05       	cpc	r17, r1
    1c3a:	79 f7       	brne	.-34     	; 0x1c1a <vfprintf+0x49a>
    1c3c:	f7 c0       	rjmp	.+494    	; 0x1e2c <vfprintf+0x6ac>
    1c3e:	84 36       	cpi	r24, 0x64	; 100
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <vfprintf+0x4c6>
    1c42:	89 36       	cpi	r24, 0x69	; 105
    1c44:	61 f5       	brne	.+88     	; 0x1c9e <vfprintf+0x51e>
    1c46:	56 01       	movw	r10, r12
    1c48:	97 fe       	sbrs	r9, 7
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <vfprintf+0x4de>
    1c4c:	24 e0       	ldi	r18, 0x04	; 4
    1c4e:	a2 0e       	add	r10, r18
    1c50:	b1 1c       	adc	r11, r1
    1c52:	f6 01       	movw	r30, r12
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	0a c0       	rjmp	.+20     	; 0x1c72 <vfprintf+0x4f2>
    1c5e:	f2 e0       	ldi	r31, 0x02	; 2
    1c60:	af 0e       	add	r10, r31
    1c62:	b1 1c       	adc	r11, r1
    1c64:	f6 01       	movw	r30, r12
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	07 2e       	mov	r0, r23
    1c6c:	00 0c       	add	r0, r0
    1c6e:	88 0b       	sbc	r24, r24
    1c70:	99 0b       	sbc	r25, r25
    1c72:	f9 2d       	mov	r31, r9
    1c74:	ff 76       	andi	r31, 0x6F	; 111
    1c76:	9f 2e       	mov	r9, r31
    1c78:	97 ff       	sbrs	r25, 7
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <vfprintf+0x50e>
    1c7c:	90 95       	com	r25
    1c7e:	80 95       	com	r24
    1c80:	70 95       	com	r23
    1c82:	61 95       	neg	r22
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	8f 4f       	sbci	r24, 0xFF	; 255
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	f0 68       	ori	r31, 0x80	; 128
    1c8c:	9f 2e       	mov	r9, r31
    1c8e:	2a e0       	ldi	r18, 0x0A	; 10
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	a3 01       	movw	r20, r6
    1c94:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__ultoa_invert>
    1c98:	c8 2e       	mov	r12, r24
    1c9a:	c6 18       	sub	r12, r6
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <vfprintf+0x59c>
    1c9e:	09 2d       	mov	r16, r9
    1ca0:	85 37       	cpi	r24, 0x75	; 117
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <vfprintf+0x52c>
    1ca4:	0f 7e       	andi	r16, 0xEF	; 239
    1ca6:	2a e0       	ldi	r18, 0x0A	; 10
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	1d c0       	rjmp	.+58     	; 0x1ce6 <vfprintf+0x566>
    1cac:	09 7f       	andi	r16, 0xF9	; 249
    1cae:	8f 36       	cpi	r24, 0x6F	; 111
    1cb0:	91 f0       	breq	.+36     	; 0x1cd6 <vfprintf+0x556>
    1cb2:	18 f4       	brcc	.+6      	; 0x1cba <vfprintf+0x53a>
    1cb4:	88 35       	cpi	r24, 0x58	; 88
    1cb6:	59 f0       	breq	.+22     	; 0x1cce <vfprintf+0x54e>
    1cb8:	c3 c0       	rjmp	.+390    	; 0x1e40 <vfprintf+0x6c0>
    1cba:	80 37       	cpi	r24, 0x70	; 112
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <vfprintf+0x544>
    1cbe:	88 37       	cpi	r24, 0x78	; 120
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <vfprintf+0x546>
    1cc2:	be c0       	rjmp	.+380    	; 0x1e40 <vfprintf+0x6c0>
    1cc4:	00 61       	ori	r16, 0x10	; 16
    1cc6:	04 ff       	sbrs	r16, 4
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <vfprintf+0x55c>
    1cca:	04 60       	ori	r16, 0x04	; 4
    1ccc:	07 c0       	rjmp	.+14     	; 0x1cdc <vfprintf+0x55c>
    1cce:	94 fe       	sbrs	r9, 4
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <vfprintf+0x562>
    1cd2:	06 60       	ori	r16, 0x06	; 6
    1cd4:	06 c0       	rjmp	.+12     	; 0x1ce2 <vfprintf+0x562>
    1cd6:	28 e0       	ldi	r18, 0x08	; 8
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	05 c0       	rjmp	.+10     	; 0x1ce6 <vfprintf+0x566>
    1cdc:	20 e1       	ldi	r18, 0x10	; 16
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0x566>
    1ce2:	20 e1       	ldi	r18, 0x10	; 16
    1ce4:	32 e0       	ldi	r19, 0x02	; 2
    1ce6:	56 01       	movw	r10, r12
    1ce8:	07 ff       	sbrs	r16, 7
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <vfprintf+0x57e>
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	a8 0e       	add	r10, r24
    1cf0:	b1 1c       	adc	r11, r1
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	08 c0       	rjmp	.+16     	; 0x1d0e <vfprintf+0x58e>
    1cfe:	f2 e0       	ldi	r31, 0x02	; 2
    1d00:	af 0e       	add	r10, r31
    1d02:	b1 1c       	adc	r11, r1
    1d04:	f6 01       	movw	r30, r12
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a3 01       	movw	r20, r6
    1d10:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__ultoa_invert>
    1d14:	c8 2e       	mov	r12, r24
    1d16:	c6 18       	sub	r12, r6
    1d18:	0f 77       	andi	r16, 0x7F	; 127
    1d1a:	90 2e       	mov	r9, r16
    1d1c:	96 fe       	sbrs	r9, 6
    1d1e:	0b c0       	rjmp	.+22     	; 0x1d36 <vfprintf+0x5b6>
    1d20:	09 2d       	mov	r16, r9
    1d22:	0e 7f       	andi	r16, 0xFE	; 254
    1d24:	c1 16       	cp	r12, r17
    1d26:	50 f4       	brcc	.+20     	; 0x1d3c <vfprintf+0x5bc>
    1d28:	94 fe       	sbrs	r9, 4
    1d2a:	0a c0       	rjmp	.+20     	; 0x1d40 <vfprintf+0x5c0>
    1d2c:	92 fc       	sbrc	r9, 2
    1d2e:	08 c0       	rjmp	.+16     	; 0x1d40 <vfprintf+0x5c0>
    1d30:	09 2d       	mov	r16, r9
    1d32:	0e 7e       	andi	r16, 0xEE	; 238
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <vfprintf+0x5c0>
    1d36:	dc 2c       	mov	r13, r12
    1d38:	09 2d       	mov	r16, r9
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x5c2>
    1d3c:	dc 2c       	mov	r13, r12
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <vfprintf+0x5c2>
    1d40:	d1 2e       	mov	r13, r17
    1d42:	04 ff       	sbrs	r16, 4
    1d44:	0d c0       	rjmp	.+26     	; 0x1d60 <vfprintf+0x5e0>
    1d46:	fe 01       	movw	r30, r28
    1d48:	ec 0d       	add	r30, r12
    1d4a:	f1 1d       	adc	r31, r1
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 33       	cpi	r24, 0x30	; 48
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <vfprintf+0x5d6>
    1d52:	09 7e       	andi	r16, 0xE9	; 233
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <vfprintf+0x5e8>
    1d56:	02 ff       	sbrs	r16, 2
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <vfprintf+0x5e6>
    1d5a:	d3 94       	inc	r13
    1d5c:	d3 94       	inc	r13
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <vfprintf+0x5e8>
    1d60:	80 2f       	mov	r24, r16
    1d62:	86 78       	andi	r24, 0x86	; 134
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <vfprintf+0x5e8>
    1d66:	d3 94       	inc	r13
    1d68:	03 fd       	sbrc	r16, 3
    1d6a:	11 c0       	rjmp	.+34     	; 0x1d8e <vfprintf+0x60e>
    1d6c:	00 ff       	sbrs	r16, 0
    1d6e:	06 c0       	rjmp	.+12     	; 0x1d7c <vfprintf+0x5fc>
    1d70:	1c 2d       	mov	r17, r12
    1d72:	d5 14       	cp	r13, r5
    1d74:	80 f4       	brcc	.+32     	; 0x1d96 <vfprintf+0x616>
    1d76:	15 0d       	add	r17, r5
    1d78:	1d 19       	sub	r17, r13
    1d7a:	0d c0       	rjmp	.+26     	; 0x1d96 <vfprintf+0x616>
    1d7c:	d5 14       	cp	r13, r5
    1d7e:	58 f4       	brcc	.+22     	; 0x1d96 <vfprintf+0x616>
    1d80:	b7 01       	movw	r22, r14
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1d8a:	d3 94       	inc	r13
    1d8c:	f7 cf       	rjmp	.-18     	; 0x1d7c <vfprintf+0x5fc>
    1d8e:	d5 14       	cp	r13, r5
    1d90:	10 f4       	brcc	.+4      	; 0x1d96 <vfprintf+0x616>
    1d92:	5d 18       	sub	r5, r13
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <vfprintf+0x618>
    1d96:	51 2c       	mov	r5, r1
    1d98:	04 ff       	sbrs	r16, 4
    1d9a:	10 c0       	rjmp	.+32     	; 0x1dbc <vfprintf+0x63c>
    1d9c:	b7 01       	movw	r22, r14
    1d9e:	80 e3       	ldi	r24, 0x30	; 48
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1da6:	02 ff       	sbrs	r16, 2
    1da8:	17 c0       	rjmp	.+46     	; 0x1dd8 <vfprintf+0x658>
    1daa:	01 fd       	sbrc	r16, 1
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <vfprintf+0x634>
    1dae:	88 e7       	ldi	r24, 0x78	; 120
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <vfprintf+0x638>
    1db4:	88 e5       	ldi	r24, 0x58	; 88
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	b7 01       	movw	r22, r14
    1dba:	0c c0       	rjmp	.+24     	; 0x1dd4 <vfprintf+0x654>
    1dbc:	80 2f       	mov	r24, r16
    1dbe:	86 78       	andi	r24, 0x86	; 134
    1dc0:	59 f0       	breq	.+22     	; 0x1dd8 <vfprintf+0x658>
    1dc2:	01 ff       	sbrs	r16, 1
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <vfprintf+0x64a>
    1dc6:	8b e2       	ldi	r24, 0x2B	; 43
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <vfprintf+0x64c>
    1dca:	80 e2       	ldi	r24, 0x20	; 32
    1dcc:	07 fd       	sbrc	r16, 7
    1dce:	8d e2       	ldi	r24, 0x2D	; 45
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1dd8:	c1 16       	cp	r12, r17
    1dda:	38 f4       	brcc	.+14     	; 0x1dea <vfprintf+0x66a>
    1ddc:	b7 01       	movw	r22, r14
    1dde:	80 e3       	ldi	r24, 0x30	; 48
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1de6:	11 50       	subi	r17, 0x01	; 1
    1de8:	f7 cf       	rjmp	.-18     	; 0x1dd8 <vfprintf+0x658>
    1dea:	ca 94       	dec	r12
    1dec:	f3 01       	movw	r30, r6
    1dee:	ec 0d       	add	r30, r12
    1df0:	f1 1d       	adc	r31, r1
    1df2:	80 81       	ld	r24, Z
    1df4:	b7 01       	movw	r22, r14
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1dfc:	c1 10       	cpse	r12, r1
    1dfe:	f5 cf       	rjmp	.-22     	; 0x1dea <vfprintf+0x66a>
    1e00:	15 c0       	rjmp	.+42     	; 0x1e2c <vfprintf+0x6ac>
    1e02:	f4 e0       	ldi	r31, 0x04	; 4
    1e04:	f5 15       	cp	r31, r5
    1e06:	60 f5       	brcc	.+88     	; 0x1e60 <vfprintf+0x6e0>
    1e08:	84 e0       	ldi	r24, 0x04	; 4
    1e0a:	58 1a       	sub	r5, r24
    1e0c:	93 fe       	sbrs	r9, 3
    1e0e:	1f c0       	rjmp	.+62     	; 0x1e4e <vfprintf+0x6ce>
    1e10:	01 11       	cpse	r16, r1
    1e12:	27 c0       	rjmp	.+78     	; 0x1e62 <vfprintf+0x6e2>
    1e14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e16:	23 ff       	sbrs	r18, 3
    1e18:	2a c0       	rjmp	.+84     	; 0x1e6e <vfprintf+0x6ee>
    1e1a:	00 e1       	ldi	r16, 0x10	; 16
    1e1c:	12 e0       	ldi	r17, 0x02	; 2
    1e1e:	39 2d       	mov	r19, r9
    1e20:	30 71       	andi	r19, 0x10	; 16
    1e22:	93 2e       	mov	r9, r19
    1e24:	f8 01       	movw	r30, r16
    1e26:	84 91       	lpm	r24, Z
    1e28:	81 11       	cpse	r24, r1
    1e2a:	24 c0       	rjmp	.+72     	; 0x1e74 <vfprintf+0x6f4>
    1e2c:	55 20       	and	r5, r5
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <vfprintf+0x6b2>
    1e30:	e4 cc       	rjmp	.-1592   	; 0x17fa <vfprintf+0x7a>
    1e32:	b7 01       	movw	r22, r14
    1e34:	80 e2       	ldi	r24, 0x20	; 32
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1e3c:	5a 94       	dec	r5
    1e3e:	f6 cf       	rjmp	.-20     	; 0x1e2c <vfprintf+0x6ac>
    1e40:	f7 01       	movw	r30, r14
    1e42:	86 81       	ldd	r24, Z+6	; 0x06
    1e44:	97 81       	ldd	r25, Z+7	; 0x07
    1e46:	26 c0       	rjmp	.+76     	; 0x1e94 <vfprintf+0x714>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	9f ef       	ldi	r25, 0xFF	; 255
    1e4c:	23 c0       	rjmp	.+70     	; 0x1e94 <vfprintf+0x714>
    1e4e:	b7 01       	movw	r22, r14
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1e58:	5a 94       	dec	r5
    1e5a:	51 10       	cpse	r5, r1
    1e5c:	f8 cf       	rjmp	.-16     	; 0x1e4e <vfprintf+0x6ce>
    1e5e:	d8 cf       	rjmp	.-80     	; 0x1e10 <vfprintf+0x690>
    1e60:	51 2c       	mov	r5, r1
    1e62:	b7 01       	movw	r22, r14
    1e64:	80 2f       	mov	r24, r16
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1e6c:	d3 cf       	rjmp	.-90     	; 0x1e14 <vfprintf+0x694>
    1e6e:	04 e1       	ldi	r16, 0x14	; 20
    1e70:	12 e0       	ldi	r17, 0x02	; 2
    1e72:	d5 cf       	rjmp	.-86     	; 0x1e1e <vfprintf+0x69e>
    1e74:	91 10       	cpse	r9, r1
    1e76:	80 52       	subi	r24, 0x20	; 32
    1e78:	b7 01       	movw	r22, r14
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 55 10 	call	0x20aa	; 0x20aa <fputc>
    1e80:	0f 5f       	subi	r16, 0xFF	; 255
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	cf cf       	rjmp	.-98     	; 0x1e24 <vfprintf+0x6a4>
    1e86:	23 e0       	ldi	r18, 0x03	; 3
    1e88:	25 15       	cp	r18, r5
    1e8a:	10 f4       	brcc	.+4      	; 0x1e90 <vfprintf+0x710>
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	bd cf       	rjmp	.-134    	; 0x1e0a <vfprintf+0x68a>
    1e90:	51 2c       	mov	r5, r1
    1e92:	c0 cf       	rjmp	.-128    	; 0x1e14 <vfprintf+0x694>
    1e94:	60 96       	adiw	r28, 0x10	; 16
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	7f 90       	pop	r7
    1eb4:	6f 90       	pop	r6
    1eb6:	5f 90       	pop	r5
    1eb8:	4f 90       	pop	r4
    1eba:	3f 90       	pop	r3
    1ebc:	2f 90       	pop	r2
    1ebe:	08 95       	ret

00001ec0 <__ftoa_engine>:
    1ec0:	28 30       	cpi	r18, 0x08	; 8
    1ec2:	08 f0       	brcs	.+2      	; 0x1ec6 <__ftoa_engine+0x6>
    1ec4:	27 e0       	ldi	r18, 0x07	; 7
    1ec6:	33 27       	eor	r19, r19
    1ec8:	da 01       	movw	r26, r20
    1eca:	99 0f       	add	r25, r25
    1ecc:	31 1d       	adc	r19, r1
    1ece:	87 fd       	sbrc	r24, 7
    1ed0:	91 60       	ori	r25, 0x01	; 1
    1ed2:	00 96       	adiw	r24, 0x00	; 0
    1ed4:	61 05       	cpc	r22, r1
    1ed6:	71 05       	cpc	r23, r1
    1ed8:	39 f4       	brne	.+14     	; 0x1ee8 <__ftoa_engine+0x28>
    1eda:	32 60       	ori	r19, 0x02	; 2
    1edc:	2e 5f       	subi	r18, 0xFE	; 254
    1ede:	3d 93       	st	X+, r19
    1ee0:	30 e3       	ldi	r19, 0x30	; 48
    1ee2:	2a 95       	dec	r18
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <__ftoa_engine+0x1e>
    1ee6:	08 95       	ret
    1ee8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eea:	30 f0       	brcs	.+12     	; 0x1ef8 <__ftoa_engine+0x38>
    1eec:	80 38       	cpi	r24, 0x80	; 128
    1eee:	71 05       	cpc	r23, r1
    1ef0:	61 05       	cpc	r22, r1
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <__ftoa_engine+0x36>
    1ef4:	3c 5f       	subi	r19, 0xFC	; 252
    1ef6:	3c 5f       	subi	r19, 0xFC	; 252
    1ef8:	3d 93       	st	X+, r19
    1efa:	91 30       	cpi	r25, 0x01	; 1
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <__ftoa_engine+0x40>
    1efe:	80 68       	ori	r24, 0x80	; 128
    1f00:	91 1d       	adc	r25, r1
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	1f 93       	push	r17
    1f08:	0f 93       	push	r16
    1f0a:	ff 92       	push	r15
    1f0c:	ef 92       	push	r14
    1f0e:	19 2f       	mov	r17, r25
    1f10:	98 7f       	andi	r25, 0xF8	; 248
    1f12:	96 95       	lsr	r25
    1f14:	e9 2f       	mov	r30, r25
    1f16:	96 95       	lsr	r25
    1f18:	96 95       	lsr	r25
    1f1a:	e9 0f       	add	r30, r25
    1f1c:	ff 27       	eor	r31, r31
    1f1e:	ee 58       	subi	r30, 0x8E	; 142
    1f20:	fd 4f       	sbci	r31, 0xFD	; 253
    1f22:	99 27       	eor	r25, r25
    1f24:	33 27       	eor	r19, r19
    1f26:	ee 24       	eor	r14, r14
    1f28:	ff 24       	eor	r15, r15
    1f2a:	a7 01       	movw	r20, r14
    1f2c:	e7 01       	movw	r28, r14
    1f2e:	05 90       	lpm	r0, Z+
    1f30:	08 94       	sec
    1f32:	07 94       	ror	r0
    1f34:	28 f4       	brcc	.+10     	; 0x1f40 <__ftoa_engine+0x80>
    1f36:	36 0f       	add	r19, r22
    1f38:	e7 1e       	adc	r14, r23
    1f3a:	f8 1e       	adc	r15, r24
    1f3c:	49 1f       	adc	r20, r25
    1f3e:	51 1d       	adc	r21, r1
    1f40:	66 0f       	add	r22, r22
    1f42:	77 1f       	adc	r23, r23
    1f44:	88 1f       	adc	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	06 94       	lsr	r0
    1f4a:	a1 f7       	brne	.-24     	; 0x1f34 <__ftoa_engine+0x74>
    1f4c:	05 90       	lpm	r0, Z+
    1f4e:	07 94       	ror	r0
    1f50:	28 f4       	brcc	.+10     	; 0x1f5c <__ftoa_engine+0x9c>
    1f52:	e7 0e       	add	r14, r23
    1f54:	f8 1e       	adc	r15, r24
    1f56:	49 1f       	adc	r20, r25
    1f58:	56 1f       	adc	r21, r22
    1f5a:	c1 1d       	adc	r28, r1
    1f5c:	77 0f       	add	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	66 1f       	adc	r22, r22
    1f64:	06 94       	lsr	r0
    1f66:	a1 f7       	brne	.-24     	; 0x1f50 <__ftoa_engine+0x90>
    1f68:	05 90       	lpm	r0, Z+
    1f6a:	07 94       	ror	r0
    1f6c:	28 f4       	brcc	.+10     	; 0x1f78 <__ftoa_engine+0xb8>
    1f6e:	f8 0e       	add	r15, r24
    1f70:	49 1f       	adc	r20, r25
    1f72:	56 1f       	adc	r21, r22
    1f74:	c7 1f       	adc	r28, r23
    1f76:	d1 1d       	adc	r29, r1
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	66 1f       	adc	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	06 94       	lsr	r0
    1f82:	a1 f7       	brne	.-24     	; 0x1f6c <__ftoa_engine+0xac>
    1f84:	05 90       	lpm	r0, Z+
    1f86:	07 94       	ror	r0
    1f88:	20 f4       	brcc	.+8      	; 0x1f92 <__ftoa_engine+0xd2>
    1f8a:	49 0f       	add	r20, r25
    1f8c:	56 1f       	adc	r21, r22
    1f8e:	c7 1f       	adc	r28, r23
    1f90:	d8 1f       	adc	r29, r24
    1f92:	99 0f       	add	r25, r25
    1f94:	66 1f       	adc	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	06 94       	lsr	r0
    1f9c:	a9 f7       	brne	.-22     	; 0x1f88 <__ftoa_engine+0xc8>
    1f9e:	84 91       	lpm	r24, Z
    1fa0:	10 95       	com	r17
    1fa2:	17 70       	andi	r17, 0x07	; 7
    1fa4:	41 f0       	breq	.+16     	; 0x1fb6 <__ftoa_engine+0xf6>
    1fa6:	d6 95       	lsr	r29
    1fa8:	c7 95       	ror	r28
    1faa:	57 95       	ror	r21
    1fac:	47 95       	ror	r20
    1fae:	f7 94       	ror	r15
    1fb0:	e7 94       	ror	r14
    1fb2:	1a 95       	dec	r17
    1fb4:	c1 f7       	brne	.-16     	; 0x1fa6 <__ftoa_engine+0xe6>
    1fb6:	e8 e1       	ldi	r30, 0x18	; 24
    1fb8:	f2 e0       	ldi	r31, 0x02	; 2
    1fba:	68 94       	set
    1fbc:	15 90       	lpm	r1, Z+
    1fbe:	15 91       	lpm	r17, Z+
    1fc0:	35 91       	lpm	r19, Z+
    1fc2:	65 91       	lpm	r22, Z+
    1fc4:	95 91       	lpm	r25, Z+
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	7f e2       	ldi	r23, 0x2F	; 47
    1fca:	73 95       	inc	r23
    1fcc:	e1 18       	sub	r14, r1
    1fce:	f1 0a       	sbc	r15, r17
    1fd0:	43 0b       	sbc	r20, r19
    1fd2:	56 0b       	sbc	r21, r22
    1fd4:	c9 0b       	sbc	r28, r25
    1fd6:	d0 09       	sbc	r29, r0
    1fd8:	c0 f7       	brcc	.-16     	; 0x1fca <__ftoa_engine+0x10a>
    1fda:	e1 0c       	add	r14, r1
    1fdc:	f1 1e       	adc	r15, r17
    1fde:	43 1f       	adc	r20, r19
    1fe0:	56 1f       	adc	r21, r22
    1fe2:	c9 1f       	adc	r28, r25
    1fe4:	d0 1d       	adc	r29, r0
    1fe6:	7e f4       	brtc	.+30     	; 0x2006 <__ftoa_engine+0x146>
    1fe8:	70 33       	cpi	r23, 0x30	; 48
    1fea:	11 f4       	brne	.+4      	; 0x1ff0 <__ftoa_engine+0x130>
    1fec:	8a 95       	dec	r24
    1fee:	e6 cf       	rjmp	.-52     	; 0x1fbc <__ftoa_engine+0xfc>
    1ff0:	e8 94       	clt
    1ff2:	01 50       	subi	r16, 0x01	; 1
    1ff4:	30 f0       	brcs	.+12     	; 0x2002 <__ftoa_engine+0x142>
    1ff6:	08 0f       	add	r16, r24
    1ff8:	0a f4       	brpl	.+2      	; 0x1ffc <__ftoa_engine+0x13c>
    1ffa:	00 27       	eor	r16, r16
    1ffc:	02 17       	cp	r16, r18
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <__ftoa_engine+0x142>
    2000:	20 2f       	mov	r18, r16
    2002:	23 95       	inc	r18
    2004:	02 2f       	mov	r16, r18
    2006:	7a 33       	cpi	r23, 0x3A	; 58
    2008:	28 f0       	brcs	.+10     	; 0x2014 <__ftoa_engine+0x154>
    200a:	79 e3       	ldi	r23, 0x39	; 57
    200c:	7d 93       	st	X+, r23
    200e:	2a 95       	dec	r18
    2010:	e9 f7       	brne	.-6      	; 0x200c <__ftoa_engine+0x14c>
    2012:	10 c0       	rjmp	.+32     	; 0x2034 <__ftoa_engine+0x174>
    2014:	7d 93       	st	X+, r23
    2016:	2a 95       	dec	r18
    2018:	89 f6       	brne	.-94     	; 0x1fbc <__ftoa_engine+0xfc>
    201a:	06 94       	lsr	r0
    201c:	97 95       	ror	r25
    201e:	67 95       	ror	r22
    2020:	37 95       	ror	r19
    2022:	17 95       	ror	r17
    2024:	17 94       	ror	r1
    2026:	e1 18       	sub	r14, r1
    2028:	f1 0a       	sbc	r15, r17
    202a:	43 0b       	sbc	r20, r19
    202c:	56 0b       	sbc	r21, r22
    202e:	c9 0b       	sbc	r28, r25
    2030:	d0 09       	sbc	r29, r0
    2032:	98 f0       	brcs	.+38     	; 0x205a <__ftoa_engine+0x19a>
    2034:	23 95       	inc	r18
    2036:	7e 91       	ld	r23, -X
    2038:	73 95       	inc	r23
    203a:	7a 33       	cpi	r23, 0x3A	; 58
    203c:	08 f0       	brcs	.+2      	; 0x2040 <__ftoa_engine+0x180>
    203e:	70 e3       	ldi	r23, 0x30	; 48
    2040:	7c 93       	st	X, r23
    2042:	20 13       	cpse	r18, r16
    2044:	b8 f7       	brcc	.-18     	; 0x2034 <__ftoa_engine+0x174>
    2046:	7e 91       	ld	r23, -X
    2048:	70 61       	ori	r23, 0x10	; 16
    204a:	7d 93       	st	X+, r23
    204c:	30 f0       	brcs	.+12     	; 0x205a <__ftoa_engine+0x19a>
    204e:	83 95       	inc	r24
    2050:	71 e3       	ldi	r23, 0x31	; 49
    2052:	7d 93       	st	X+, r23
    2054:	70 e3       	ldi	r23, 0x30	; 48
    2056:	2a 95       	dec	r18
    2058:	e1 f7       	brne	.-8      	; 0x2052 <__ftoa_engine+0x192>
    205a:	11 24       	eor	r1, r1
    205c:	ef 90       	pop	r14
    205e:	ff 90       	pop	r15
    2060:	0f 91       	pop	r16
    2062:	1f 91       	pop	r17
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	99 27       	eor	r25, r25
    206a:	87 fd       	sbrc	r24, 7
    206c:	90 95       	com	r25
    206e:	08 95       	ret

00002070 <strnlen_P>:
    2070:	fc 01       	movw	r30, r24
    2072:	05 90       	lpm	r0, Z+
    2074:	61 50       	subi	r22, 0x01	; 1
    2076:	70 40       	sbci	r23, 0x00	; 0
    2078:	01 10       	cpse	r0, r1
    207a:	d8 f7       	brcc	.-10     	; 0x2072 <strnlen_P+0x2>
    207c:	80 95       	com	r24
    207e:	90 95       	com	r25
    2080:	8e 0f       	add	r24, r30
    2082:	9f 1f       	adc	r25, r31
    2084:	08 95       	ret

00002086 <memset>:
    2086:	dc 01       	movw	r26, r24
    2088:	01 c0       	rjmp	.+2      	; 0x208c <memset+0x6>
    208a:	6d 93       	st	X+, r22
    208c:	41 50       	subi	r20, 0x01	; 1
    208e:	50 40       	sbci	r21, 0x00	; 0
    2090:	e0 f7       	brcc	.-8      	; 0x208a <memset+0x4>
    2092:	08 95       	ret

00002094 <strnlen>:
    2094:	fc 01       	movw	r30, r24
    2096:	61 50       	subi	r22, 0x01	; 1
    2098:	70 40       	sbci	r23, 0x00	; 0
    209a:	01 90       	ld	r0, Z+
    209c:	01 10       	cpse	r0, r1
    209e:	d8 f7       	brcc	.-10     	; 0x2096 <strnlen+0x2>
    20a0:	80 95       	com	r24
    20a2:	90 95       	com	r25
    20a4:	8e 0f       	add	r24, r30
    20a6:	9f 1f       	adc	r25, r31
    20a8:	08 95       	ret

000020aa <fputc>:
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	fb 01       	movw	r30, r22
    20b4:	23 81       	ldd	r18, Z+3	; 0x03
    20b6:	21 fd       	sbrc	r18, 1
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <fputc+0x16>
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	9f ef       	ldi	r25, 0xFF	; 255
    20be:	2c c0       	rjmp	.+88     	; 0x2118 <fputc+0x6e>
    20c0:	22 ff       	sbrs	r18, 2
    20c2:	16 c0       	rjmp	.+44     	; 0x20f0 <fputc+0x46>
    20c4:	46 81       	ldd	r20, Z+6	; 0x06
    20c6:	57 81       	ldd	r21, Z+7	; 0x07
    20c8:	24 81       	ldd	r18, Z+4	; 0x04
    20ca:	35 81       	ldd	r19, Z+5	; 0x05
    20cc:	42 17       	cp	r20, r18
    20ce:	53 07       	cpc	r21, r19
    20d0:	44 f4       	brge	.+16     	; 0x20e2 <fputc+0x38>
    20d2:	a0 81       	ld	r26, Z
    20d4:	b1 81       	ldd	r27, Z+1	; 0x01
    20d6:	9d 01       	movw	r18, r26
    20d8:	2f 5f       	subi	r18, 0xFF	; 255
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	20 83       	st	Z, r18
    20de:	31 83       	std	Z+1, r19	; 0x01
    20e0:	8c 93       	st	X, r24
    20e2:	26 81       	ldd	r18, Z+6	; 0x06
    20e4:	37 81       	ldd	r19, Z+7	; 0x07
    20e6:	2f 5f       	subi	r18, 0xFF	; 255
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	26 83       	std	Z+6, r18	; 0x06
    20ec:	37 83       	std	Z+7, r19	; 0x07
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <fputc+0x6e>
    20f0:	8b 01       	movw	r16, r22
    20f2:	ec 01       	movw	r28, r24
    20f4:	fb 01       	movw	r30, r22
    20f6:	00 84       	ldd	r0, Z+8	; 0x08
    20f8:	f1 85       	ldd	r31, Z+9	; 0x09
    20fa:	e0 2d       	mov	r30, r0
    20fc:	19 95       	eicall
    20fe:	89 2b       	or	r24, r25
    2100:	e1 f6       	brne	.-72     	; 0x20ba <fputc+0x10>
    2102:	d8 01       	movw	r26, r16
    2104:	16 96       	adiw	r26, 0x06	; 6
    2106:	8d 91       	ld	r24, X+
    2108:	9c 91       	ld	r25, X
    210a:	17 97       	sbiw	r26, 0x07	; 7
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	16 96       	adiw	r26, 0x06	; 6
    2110:	8d 93       	st	X+, r24
    2112:	9c 93       	st	X, r25
    2114:	17 97       	sbiw	r26, 0x07	; 7
    2116:	ce 01       	movw	r24, r28
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <printf>:
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	ae 01       	movw	r20, r28
    212c:	4a 5f       	subi	r20, 0xFA	; 250
    212e:	5f 4f       	sbci	r21, 0xFF	; 255
    2130:	fa 01       	movw	r30, r20
    2132:	61 91       	ld	r22, Z+
    2134:	71 91       	ld	r23, Z+
    2136:	af 01       	movw	r20, r30
    2138:	80 91 7b 61 	lds	r24, 0x617B	; 0x80617b <__iob+0x2>
    213c:	90 91 7c 61 	lds	r25, 0x617C	; 0x80617c <__iob+0x3>
    2140:	0e 94 c0 0b 	call	0x1780	; 0x1780 <vfprintf>
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <snprintf>:
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	2e 97       	sbiw	r28, 0x0e	; 14
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0e 89       	ldd	r16, Y+22	; 0x16
    215e:	1f 89       	ldd	r17, Y+23	; 0x17
    2160:	88 8d       	ldd	r24, Y+24	; 0x18
    2162:	99 8d       	ldd	r25, Y+25	; 0x19
    2164:	26 e0       	ldi	r18, 0x06	; 6
    2166:	2c 83       	std	Y+4, r18	; 0x04
    2168:	09 83       	std	Y+1, r16	; 0x01
    216a:	1a 83       	std	Y+2, r17	; 0x02
    216c:	97 ff       	sbrs	r25, 7
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <snprintf+0x2a>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e8       	ldi	r25, 0x80	; 128
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	ae 01       	movw	r20, r28
    217c:	44 5e       	subi	r20, 0xE4	; 228
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2182:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	0e 94 c0 0b 	call	0x1780	; 0x1780 <vfprintf>
    218c:	4d 81       	ldd	r20, Y+5	; 0x05
    218e:	5e 81       	ldd	r21, Y+6	; 0x06
    2190:	57 fd       	sbrc	r21, 7
    2192:	0a c0       	rjmp	.+20     	; 0x21a8 <snprintf+0x5e>
    2194:	2f 81       	ldd	r18, Y+7	; 0x07
    2196:	38 85       	ldd	r19, Y+8	; 0x08
    2198:	42 17       	cp	r20, r18
    219a:	53 07       	cpc	r21, r19
    219c:	0c f4       	brge	.+2      	; 0x21a0 <snprintf+0x56>
    219e:	9a 01       	movw	r18, r20
    21a0:	f8 01       	movw	r30, r16
    21a2:	e2 0f       	add	r30, r18
    21a4:	f3 1f       	adc	r31, r19
    21a6:	10 82       	st	Z, r1
    21a8:	2e 96       	adiw	r28, 0x0e	; 14
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <__ultoa_invert>:
    21b8:	fa 01       	movw	r30, r20
    21ba:	aa 27       	eor	r26, r26
    21bc:	28 30       	cpi	r18, 0x08	; 8
    21be:	51 f1       	breq	.+84     	; 0x2214 <__ultoa_invert+0x5c>
    21c0:	20 31       	cpi	r18, 0x10	; 16
    21c2:	81 f1       	breq	.+96     	; 0x2224 <__ultoa_invert+0x6c>
    21c4:	e8 94       	clt
    21c6:	6f 93       	push	r22
    21c8:	6e 7f       	andi	r22, 0xFE	; 254
    21ca:	6e 5f       	subi	r22, 0xFE	; 254
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	8f 4f       	sbci	r24, 0xFF	; 255
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	af 4f       	sbci	r26, 0xFF	; 255
    21d4:	b1 e0       	ldi	r27, 0x01	; 1
    21d6:	3e d0       	rcall	.+124    	; 0x2254 <__ultoa_invert+0x9c>
    21d8:	b4 e0       	ldi	r27, 0x04	; 4
    21da:	3c d0       	rcall	.+120    	; 0x2254 <__ultoa_invert+0x9c>
    21dc:	67 0f       	add	r22, r23
    21de:	78 1f       	adc	r23, r24
    21e0:	89 1f       	adc	r24, r25
    21e2:	9a 1f       	adc	r25, r26
    21e4:	a1 1d       	adc	r26, r1
    21e6:	68 0f       	add	r22, r24
    21e8:	79 1f       	adc	r23, r25
    21ea:	8a 1f       	adc	r24, r26
    21ec:	91 1d       	adc	r25, r1
    21ee:	a1 1d       	adc	r26, r1
    21f0:	6a 0f       	add	r22, r26
    21f2:	71 1d       	adc	r23, r1
    21f4:	81 1d       	adc	r24, r1
    21f6:	91 1d       	adc	r25, r1
    21f8:	a1 1d       	adc	r26, r1
    21fa:	20 d0       	rcall	.+64     	; 0x223c <__ultoa_invert+0x84>
    21fc:	09 f4       	brne	.+2      	; 0x2200 <__ultoa_invert+0x48>
    21fe:	68 94       	set
    2200:	3f 91       	pop	r19
    2202:	2a e0       	ldi	r18, 0x0A	; 10
    2204:	26 9f       	mul	r18, r22
    2206:	11 24       	eor	r1, r1
    2208:	30 19       	sub	r19, r0
    220a:	30 5d       	subi	r19, 0xD0	; 208
    220c:	31 93       	st	Z+, r19
    220e:	de f6       	brtc	.-74     	; 0x21c6 <__ultoa_invert+0xe>
    2210:	cf 01       	movw	r24, r30
    2212:	08 95       	ret
    2214:	46 2f       	mov	r20, r22
    2216:	47 70       	andi	r20, 0x07	; 7
    2218:	40 5d       	subi	r20, 0xD0	; 208
    221a:	41 93       	st	Z+, r20
    221c:	b3 e0       	ldi	r27, 0x03	; 3
    221e:	0f d0       	rcall	.+30     	; 0x223e <__ultoa_invert+0x86>
    2220:	c9 f7       	brne	.-14     	; 0x2214 <__ultoa_invert+0x5c>
    2222:	f6 cf       	rjmp	.-20     	; 0x2210 <__ultoa_invert+0x58>
    2224:	46 2f       	mov	r20, r22
    2226:	4f 70       	andi	r20, 0x0F	; 15
    2228:	40 5d       	subi	r20, 0xD0	; 208
    222a:	4a 33       	cpi	r20, 0x3A	; 58
    222c:	18 f0       	brcs	.+6      	; 0x2234 <__ultoa_invert+0x7c>
    222e:	49 5d       	subi	r20, 0xD9	; 217
    2230:	31 fd       	sbrc	r19, 1
    2232:	40 52       	subi	r20, 0x20	; 32
    2234:	41 93       	st	Z+, r20
    2236:	02 d0       	rcall	.+4      	; 0x223c <__ultoa_invert+0x84>
    2238:	a9 f7       	brne	.-22     	; 0x2224 <__ultoa_invert+0x6c>
    223a:	ea cf       	rjmp	.-44     	; 0x2210 <__ultoa_invert+0x58>
    223c:	b4 e0       	ldi	r27, 0x04	; 4
    223e:	a6 95       	lsr	r26
    2240:	97 95       	ror	r25
    2242:	87 95       	ror	r24
    2244:	77 95       	ror	r23
    2246:	67 95       	ror	r22
    2248:	ba 95       	dec	r27
    224a:	c9 f7       	brne	.-14     	; 0x223e <__ultoa_invert+0x86>
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	61 05       	cpc	r22, r1
    2250:	71 05       	cpc	r23, r1
    2252:	08 95       	ret
    2254:	9b 01       	movw	r18, r22
    2256:	ac 01       	movw	r20, r24
    2258:	0a 2e       	mov	r0, r26
    225a:	06 94       	lsr	r0
    225c:	57 95       	ror	r21
    225e:	47 95       	ror	r20
    2260:	37 95       	ror	r19
    2262:	27 95       	ror	r18
    2264:	ba 95       	dec	r27
    2266:	c9 f7       	brne	.-14     	; 0x225a <__ultoa_invert+0xa2>
    2268:	62 0f       	add	r22, r18
    226a:	73 1f       	adc	r23, r19
    226c:	84 1f       	adc	r24, r20
    226e:	95 1f       	adc	r25, r21
    2270:	a0 1d       	adc	r26, r0
    2272:	08 95       	ret

00002274 <_exit>:
    2274:	f8 94       	cli

00002276 <__stop_program>:
    2276:	ff cf       	rjmp	.-2      	; 0x2276 <__stop_program>
