
Linebot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00002d86  00002e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004091  00802104  00802104  00002f1e  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002f1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aff1  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e70  00000000  00000000  0000e4cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004338  00000000  00000000  0001233d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff8  00000000  00000000  00016678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e0b  00000000  00000000  00017670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000768b  00000000  00000000  0001b47b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000798  00000000  00000000  00022b06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 01 	jmp	0x312	; 0x312 <__ctors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      34:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      38:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_14>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_16>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      78:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      7c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      80:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_46>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      fc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     100:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     104:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     108:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     10c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     110:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     114:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     118:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     11c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     120:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     124:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     128:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     12c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     130:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     134:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     138:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     13c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     140:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     144:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     148:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     14c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     150:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     154:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     158:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     15c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     160:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     164:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     168:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     16c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     170:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     174:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     178:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     17c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     180:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     184:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     188:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     18c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     190:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     194:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     198:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     19c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 82 02 	jmp	0x504	; 0x504 <stdio_putchar>
     200:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <WorkerReceiveTask>
     204:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <prvIdleTask>
     208:	0c 94 8e 02 	jmp	0x51c	; 0x51c <stdio_getchar>
     20c:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <WorkerSendTask>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df e9       	ldi	r29, 0x9F	; 159
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60

00000322 <__do_copy_data>:
     322:	11 e2       	ldi	r17, 0x21	; 33
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b0 e2       	ldi	r27, 0x20	; 32
     328:	e6 e8       	ldi	r30, 0x86	; 134
     32a:	fd e2       	ldi	r31, 0x2D	; 45
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	a4 30       	cpi	r26, 0x04	; 4
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	21 e6       	ldi	r18, 0x61	; 97
     33e:	a4 e0       	ldi	r26, 0x04	; 4
     340:	b1 e2       	ldi	r27, 0x21	; 33
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a5 39       	cpi	r26, 0x95	; 149
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 1e 10 	call	0x203c	; 0x203c <main>
     350:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     358:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     35a:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     35e:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     362:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     366:	90 81       	ld	r25, Z
     368:	99 23       	and	r25, r25
     36a:	69 f0       	breq	.+26     	; 0x386 <DbgPrint+0x2e>
     36c:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     36e:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     370:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     374:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     378:	96 ff       	sbrs	r25, 6
     37a:	fc cf       	rjmp	.-8      	; 0x374 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     37c:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     380:	91 91       	ld	r25, Z+
     382:	91 11       	cpse	r25, r1
     384:	f5 cf       	rjmp	.-22     	; 0x370 <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     386:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     38a:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     38e:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     392:	08 95       	ret

00000394 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     394:	8b ec       	ldi	r24, 0xCB	; 203
     396:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     3a0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3a4:	83 ff       	sbrs	r24, 3
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3a8:	82 ec       	ldi	r24, 0xC2	; 194
     3aa:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3ae:	88 e1       	ldi	r24, 0x18	; 24
     3b0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3b4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3b8:	84 ff       	sbrs	r24, 4
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3bc:	88 ed       	ldi	r24, 0xD8	; 216
     3be:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	08 95       	ret

000003ca <TWIMWriteHandler>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     3ca:	90 91 08 21 	lds	r25, 0x2108	; 0x802108 <Twim_bytesToWrite>
     3ce:	20 91 07 21 	lds	r18, 0x2107	; 0x802107 <Twim_bytesToRead>
     3d2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     3d6:	84 fd       	sbrc	r24, 4
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <TWIMWriteHandler+0x20>
     3da:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <Twim_bytesWritten>
     3de:	89 17       	cp	r24, r25
     3e0:	50 f0       	brcs	.+20     	; 0x3f6 <TWIMWriteHandler+0x2c>
     3e2:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     3e6:	82 17       	cp	r24, r18
     3e8:	b8 f0       	brcs	.+46     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     3f0:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     3f4:	08 95       	ret
     3f6:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <Twim_bytesWritten>
     3fa:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <Twim_writeData>
     3fe:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <Twim_writeData+0x1>
     402:	e8 0f       	add	r30, r24
     404:	f1 1d       	adc	r31, r1
     406:	80 81       	ld	r24, Z
     408:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     40c:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <Twim_bytesWritten>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <Twim_bytesWritten>
     416:	08 95       	ret
     418:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <Twim_address>
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     422:	08 95       	ret

00000424 <TWIMReadHandler>:
     424:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     428:	80 32       	cpi	r24, 0x20	; 32
     42a:	e0 f4       	brcc	.+56     	; 0x464 <TWIMReadHandler+0x40>
     42c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     430:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <Twim_bytesRead>
     434:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <Twim_readData>
     438:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <Twim_readData+0x1>
     43c:	e9 0f       	add	r30, r25
     43e:	f1 1d       	adc	r31, r1
     440:	80 83       	st	Z, r24
     442:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <Twim_bytesRead>
     44c:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <Twim_bytesToRead>
     450:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     454:	89 17       	cp	r24, r25
     456:	88 f0       	brcs	.+34     	; 0x47a <TWIMReadHandler+0x56>
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     45e:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     462:	08 95       	ret
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     46a:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     46e:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <Twim_bytesToRead>
     472:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     476:	89 17       	cp	r24, r25
     478:	78 f7       	brcc	.-34     	; 0x458 <TWIMReadHandler+0x34>
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     480:	08 95       	ret

00000482 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	0b b6       	in	r0, 0x3b	; 59
     48e:	0f 92       	push	r0
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4a8:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     4ac:	98 2f       	mov	r25, r24
     4ae:	9c 70       	andi	r25, 0x0C	; 12
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     4b2:	86 fd       	sbrc	r24, 6
     4b4:	21 c0       	rjmp	.+66     	; 0x4f8 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     4b6:	87 fd       	sbrc	r24, 7
     4b8:	22 c0       	rjmp	.+68     	; 0x4fe <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     4ba:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4c0:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     4ca:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     4ce:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <__data_end>
	{	
	}
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	0b be       	out	0x3b, r0	; 59
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     4f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TWIMWriteHandler>
     4fc:	e8 cf       	rjmp	.-48     	; 0x4ce <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     4fe:	0e 94 12 02 	call	0x424	; 0x424 <TWIMReadHandler>
     502:	e5 cf       	rjmp	.-54     	; 0x4ce <__vector_46+0x4c>

00000504 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     504:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     508:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     50c:	86 ff       	sbrs	r24, 6
     50e:	fc cf       	rjmp	.-8      	; 0x508 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     510:	80 e4       	ldi	r24, 0x40	; 64
     512:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	08 95       	ret

0000051c <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     51c:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     520:	87 ff       	sbrs	r24, 7
     522:	fc cf       	rjmp	.-8      	; 0x51c <stdio_getchar>
	return USART.DATA;
     524:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	08 95       	ret

0000052c <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     52c:	e0 e8       	ldi	r30, 0x80	; 128
     52e:	f6 e0       	ldi	r31, 0x06	; 6
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     53e:	88 e1       	ldi	r24, 0x18	; 24
     540:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     546:	85 ee       	ldi	r24, 0xE5	; 229
     548:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     54a:	8c eb       	ldi	r24, 0xBC	; 188
     54c:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     54e:	ef e8       	ldi	r30, 0x8F	; 143
     550:	f1 e6       	ldi	r31, 0x61	; 97
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e2       	ldi	r25, 0x20	; 32
     556:	82 83       	std	Z+2, r24	; 0x02
     558:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	08 95       	ret

00000560 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     56a:	0e 94 c6 0b 	call	0x178c	; 0x178c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     56e:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <xHeapHasBeenInitialised.4119>
     572:	81 11       	cpse	r24, r1
     574:	21 c0       	rjmp	.+66     	; 0x5b8 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     576:	88 e1       	ldi	r24, 0x18	; 24
     578:	91 e2       	ldi	r25, 0x21	; 33
     57a:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <xStart>
     57e:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     582:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <xStart+0x2>
     586:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9f e3       	ldi	r25, 0x3F	; 63
     58e:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <xEnd+0x2>
     592:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     596:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <xEnd>
     59a:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     59e:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <ucHeap+0x3>
     5a2:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     5a6:	8f e0       	ldi	r24, 0x0F	; 15
     5a8:	91 e2       	ldi	r25, 0x21	; 33
     5aa:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <ucHeap+0x1>
     5ae:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <xHeapHasBeenInitialised.4119>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     5b8:	20 97       	sbiw	r28, 0x00	; 0
     5ba:	09 f4       	brne	.+2      	; 0x5be <pvPortMalloc+0x5e>
     5bc:	64 c0       	rjmp	.+200    	; 0x686 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     5be:	ae 01       	movw	r20, r28
     5c0:	4c 5f       	subi	r20, 0xFC	; 252
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     5c4:	23 96       	adiw	r28, 0x03	; 3
     5c6:	ce 3f       	cpi	r28, 0xFE	; 254
     5c8:	df 43       	sbci	r29, 0x3F	; 63
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <pvPortMalloc+0x6e>
     5cc:	5c c0       	rjmp	.+184    	; 0x686 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     5ce:	e0 91 13 21 	lds	r30, 0x2113	; 0x802113 <xStart>
     5d2:	f0 91 14 21 	lds	r31, 0x2114	; 0x802114 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     5d6:	a3 e1       	ldi	r26, 0x13	; 19
     5d8:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <pvPortMalloc+0x88>
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <pvPortMalloc+0x92>
     5e4:	df 01       	movw	r26, r30
     5e6:	fc 01       	movw	r30, r24
     5e8:	22 81       	ldd	r18, Z+2	; 0x02
     5ea:	33 81       	ldd	r19, Z+3	; 0x03
     5ec:	24 17       	cp	r18, r20
     5ee:	35 07       	cpc	r19, r21
     5f0:	a8 f3       	brcs	.-22     	; 0x5dc <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5f2:	c1 e2       	ldi	r28, 0x21	; 33
     5f4:	ef 30       	cpi	r30, 0x0F	; 15
     5f6:	fc 07       	cpc	r31, r28
     5f8:	09 f4       	brne	.+2      	; 0x5fc <pvPortMalloc+0x9c>
     5fa:	45 c0       	rjmp	.+138    	; 0x686 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5fc:	cd 91       	ld	r28, X+
     5fe:	dc 91       	ld	r29, X
     600:	11 97       	sbiw	r26, 0x01	; 1
     602:	8e 01       	movw	r16, r28
     604:	0c 5f       	subi	r16, 0xFC	; 252
     606:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	8d 93       	st	X+, r24
     60e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     610:	c9 01       	movw	r24, r18
     612:	84 1b       	sub	r24, r20
     614:	95 0b       	sbc	r25, r21
     616:	89 30       	cpi	r24, 0x09	; 9
     618:	91 05       	cpc	r25, r1
     61a:	00 f1       	brcs	.+64     	; 0x65c <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     61c:	bf 01       	movw	r22, r30
     61e:	64 0f       	add	r22, r20
     620:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     622:	db 01       	movw	r26, r22
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	8d 93       	st	X+, r24
     628:	9c 93       	st	X, r25
     62a:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     62c:	42 83       	std	Z+2, r20	; 0x02
     62e:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     630:	12 96       	adiw	r26, 0x02	; 2
     632:	2d 91       	ld	r18, X+
     634:	3c 91       	ld	r19, X
     636:	13 97       	sbiw	r26, 0x03	; 3
     638:	a3 e1       	ldi	r26, 0x13	; 19
     63a:	b1 e2       	ldi	r27, 0x21	; 33
     63c:	01 c0       	rjmp	.+2      	; 0x640 <pvPortMalloc+0xe0>
     63e:	df 01       	movw	r26, r30
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	82 81       	ldd	r24, Z+2	; 0x02
     648:	93 81       	ldd	r25, Z+3	; 0x03
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	b8 f3       	brcs	.-18     	; 0x63e <pvPortMalloc+0xde>
     650:	eb 01       	movw	r28, r22
     652:	e8 83       	st	Y, r30
     654:	f9 83       	std	Y+1, r31	; 0x01
     656:	6d 93       	st	X+, r22
     658:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     65a:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     65c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     660:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     664:	82 1b       	sub	r24, r18
     666:	93 0b       	sbc	r25, r19
     668:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     66c:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     670:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     674:	01 15       	cp	r16, r1
     676:	11 05       	cpc	r17, r1
     678:	41 f0       	breq	.+16     	; 0x68a <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     67a:	c8 01       	movw	r24, r16
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     686:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     68a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vApplicationMallocFailedHook>
     68e:	00 e0       	ldi	r16, 0x00	; 0
     690:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     692:	c8 01       	movw	r24, r16
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	21 f1       	breq	.+72     	; 0x6ee <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     6a6:	ec 01       	movw	r28, r24
     6a8:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     6aa:	0e 94 c6 0b 	call	0x178c	; 0x178c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6ae:	4a 81       	ldd	r20, Y+2	; 0x02
     6b0:	5b 81       	ldd	r21, Y+3	; 0x03
     6b2:	a3 e1       	ldi	r26, 0x13	; 19
     6b4:	b1 e2       	ldi	r27, 0x21	; 33
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <vPortFree+0x1c>
     6b8:	df 01       	movw	r26, r30
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	11 97       	sbiw	r26, 0x01	; 1
     6c0:	22 81       	ldd	r18, Z+2	; 0x02
     6c2:	33 81       	ldd	r19, Z+3	; 0x03
     6c4:	24 17       	cp	r18, r20
     6c6:	35 07       	cpc	r19, r21
     6c8:	b8 f3       	brcs	.-18     	; 0x6b8 <vPortFree+0x1a>
     6ca:	e8 83       	st	Y, r30
     6cc:	f9 83       	std	Y+1, r31	; 0x01
     6ce:	cd 93       	st	X+, r28
     6d0:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     6d2:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6d6:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6da:	48 0f       	add	r20, r24
     6dc:	59 1f       	adc	r21, r25
     6de:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     6e2:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6ea:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <xTaskResumeAll>
	}
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6f4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f6:	03 96       	adiw	r24, 0x03	; 3
     6f8:	81 83       	std	Z+1, r24	; 0x01
     6fa:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	3f ef       	ldi	r19, 0xFF	; 255
     700:	23 83       	std	Z+3, r18	; 0x03
     702:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     704:	85 83       	std	Z+5, r24	; 0x05
     706:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     708:	87 83       	std	Z+7, r24	; 0x07
     70a:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     70c:	10 82       	st	Z, r1
     70e:	08 95       	ret

00000710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     710:	fc 01       	movw	r30, r24
     712:	10 86       	std	Z+8, r1	; 0x08
     714:	11 86       	std	Z+9, r1	; 0x09
     716:	08 95       	ret

00000718 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	9c 01       	movw	r18, r24
     71e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     720:	dc 01       	movw	r26, r24
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	cd 91       	ld	r28, X+
     726:	dc 91       	ld	r29, X
     728:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     72a:	c2 83       	std	Z+2, r28	; 0x02
     72c:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     72e:	8c 81       	ldd	r24, Y+4	; 0x04
     730:	9d 81       	ldd	r25, Y+5	; 0x05
     732:	84 83       	std	Z+4, r24	; 0x04
     734:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     736:	8c 81       	ldd	r24, Y+4	; 0x04
     738:	9d 81       	ldd	r25, Y+5	; 0x05
     73a:	dc 01       	movw	r26, r24
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	6d 93       	st	X+, r22
     740:	7c 93       	st	X, r23
     742:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     744:	6c 83       	std	Y+4, r22	; 0x04
     746:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     748:	20 87       	std	Z+8, r18	; 0x08
     74a:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     74c:	f9 01       	movw	r30, r18
     74e:	80 81       	ld	r24, Z
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	80 83       	st	Z, r24
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     760:	48 81       	ld	r20, Y
     762:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     764:	4f 3f       	cpi	r20, 0xFF	; 255
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	52 07       	cpc	r21, r18
     76a:	01 f1       	breq	.+64     	; 0x7ac <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     76c:	dc 01       	movw	r26, r24
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	01 c0       	rjmp	.+2      	; 0x774 <vListInsert+0x1a>
     772:	df 01       	movw	r26, r30
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	13 97       	sbiw	r26, 0x03	; 3
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	42 17       	cp	r20, r18
     782:	53 07       	cpc	r21, r19
     784:	b0 f7       	brcc	.-20     	; 0x772 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     786:	ea 83       	std	Y+2, r30	; 0x02
     788:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     78a:	c4 83       	std	Z+4, r28	; 0x04
     78c:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     78e:	ac 83       	std	Y+4, r26	; 0x04
     790:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	cd 93       	st	X+, r28
     796:	dc 93       	st	X, r29
     798:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     79a:	88 87       	std	Y+8, r24	; 0x08
     79c:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     79e:	fc 01       	movw	r30, r24
     7a0:	20 81       	ld	r18, Z
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	20 83       	st	Z, r18
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     7ac:	fc 01       	movw	r30, r24
     7ae:	a7 81       	ldd	r26, Z+7	; 0x07
     7b0:	b0 85       	ldd	r27, Z+8	; 0x08
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	e5 cf       	rjmp	.-54     	; 0x786 <vListInsert+0x2c>

000007bc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     7c2:	a0 85       	ldd	r26, Z+8	; 0x08
     7c4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7c6:	22 81       	ldd	r18, Z+2	; 0x02
     7c8:	33 81       	ldd	r19, Z+3	; 0x03
     7ca:	84 81       	ldd	r24, Z+4	; 0x04
     7cc:	95 81       	ldd	r25, Z+5	; 0x05
     7ce:	e9 01       	movw	r28, r18
     7d0:	8c 83       	std	Y+4, r24	; 0x04
     7d2:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	95 81       	ldd	r25, Z+5	; 0x05
     7d8:	ec 01       	movw	r28, r24
     7da:	2a 83       	std	Y+2, r18	; 0x02
     7dc:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	2d 91       	ld	r18, X+
     7e2:	3c 91       	ld	r19, X
     7e4:	12 97       	sbiw	r26, 0x02	; 2
     7e6:	e2 17       	cp	r30, r18
     7e8:	f3 07       	cpc	r31, r19
     7ea:	49 f0       	breq	.+18     	; 0x7fe <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     7ec:	10 86       	std	Z+8, r1	; 0x08
     7ee:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     7f0:	8c 91       	ld	r24, X
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     7f6:	8c 91       	ld	r24, X
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7fe:	11 96       	adiw	r26, 0x01	; 1
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	12 97       	sbiw	r26, 0x02	; 2
     806:	f2 cf       	rjmp	.-28     	; 0x7ec <uxListRemove+0x30>

00000808 <pxPortInitialiseStack>:
//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
	asm volatile ( "ret" );
     808:	31 e1       	ldi	r19, 0x11	; 17
     80a:	fc 01       	movw	r30, r24
     80c:	30 83       	st	Z, r19
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	22 e2       	ldi	r18, 0x22	; 34
     812:	20 83       	st	Z, r18
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	a3 e3       	ldi	r26, 0x33	; 51
     818:	a0 83       	st	Z, r26
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	60 83       	st	Z, r22
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	70 83       	st	Z, r23
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	10 82       	st	Z, r1
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	10 82       	st	Z, r1
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	60 e8       	ldi	r22, 0x80	; 128
     82e:	60 83       	st	Z, r22
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	10 82       	st	Z, r1
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	60 83       	st	Z, r22
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	63 e0       	ldi	r22, 0x03	; 3
     83e:	60 83       	st	Z, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	64 e0       	ldi	r22, 0x04	; 4
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	65 e0       	ldi	r22, 0x05	; 5
     84a:	60 83       	st	Z, r22
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	60 83       	st	Z, r22
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	67 e0       	ldi	r22, 0x07	; 7
     856:	60 83       	st	Z, r22
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	68 e0       	ldi	r22, 0x08	; 8
     85c:	60 83       	st	Z, r22
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	69 e0       	ldi	r22, 0x09	; 9
     862:	60 83       	st	Z, r22
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	60 e1       	ldi	r22, 0x10	; 16
     868:	60 83       	st	Z, r22
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	30 83       	st	Z, r19
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	32 e1       	ldi	r19, 0x12	; 18
     872:	30 83       	st	Z, r19
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	33 e1       	ldi	r19, 0x13	; 19
     878:	30 83       	st	Z, r19
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	34 e1       	ldi	r19, 0x14	; 20
     87e:	30 83       	st	Z, r19
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	35 e1       	ldi	r19, 0x15	; 21
     884:	30 83       	st	Z, r19
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	36 e1       	ldi	r19, 0x16	; 22
     88a:	30 83       	st	Z, r19
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	37 e1       	ldi	r19, 0x17	; 23
     890:	30 83       	st	Z, r19
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	38 e1       	ldi	r19, 0x18	; 24
     896:	30 83       	st	Z, r19
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	39 e1       	ldi	r19, 0x19	; 25
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	30 e2       	ldi	r19, 0x20	; 32
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	31 e2       	ldi	r19, 0x21	; 33
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	20 83       	st	Z, r18
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	23 e2       	ldi	r18, 0x23	; 35
     8b2:	20 83       	st	Z, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	40 83       	st	Z, r20
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	50 83       	st	Z, r21
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	26 e2       	ldi	r18, 0x26	; 38
     8c0:	20 83       	st	Z, r18
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	27 e2       	ldi	r18, 0x27	; 39
     8c6:	20 83       	st	Z, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	28 e2       	ldi	r18, 0x28	; 40
     8cc:	20 83       	st	Z, r18
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	29 e2       	ldi	r18, 0x29	; 41
     8d2:	20 83       	st	Z, r18
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	20 e3       	ldi	r18, 0x30	; 48
     8d8:	20 83       	st	Z, r18
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	21 e3       	ldi	r18, 0x31	; 49
     8de:	20 83       	st	Z, r18
     8e0:	87 97       	sbiw	r24, 0x27	; 39
     8e2:	08 95       	ret

000008e4 <xPortStartScheduler>:
     8e4:	e0 e0       	ldi	r30, 0x00	; 0
     8e6:	f8 e0       	ldi	r31, 0x08	; 8
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	80 a7       	std	Z+40, r24	; 0x28
     8ee:	91 a7       	std	Z+41, r25	; 0x29
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 83       	st	Z, r24
     8f4:	90 e4       	ldi	r25, 0x40	; 64
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	86 83       	std	Z+6, r24	; 0x06
     8fa:	87 83       	std	Z+7, r24	; 0x07
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	9d e7       	ldi	r25, 0x7D	; 125
     900:	86 a3       	std	Z+38, r24	; 0x26
     902:	97 a3       	std	Z+39, r25	; 0x27
     904:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     908:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     90c:	cd 91       	ld	r28, X+
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	dd 91       	ld	r29, X+
     912:	de bf       	out	0x3e, r29	; 62
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	3f 90       	pop	r3
     94e:	2f 90       	pop	r2
     950:	1f 90       	pop	r1
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	08 95       	ret
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	08 95       	ret

0000095e <vPortYield>:
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	0f 92       	push	r0
     966:	1f 92       	push	r1
     968:	11 24       	eor	r1, r1
     96a:	2f 92       	push	r2
     96c:	3f 92       	push	r3
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
     9a6:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     9aa:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     9ae:	0d b6       	in	r0, 0x3d	; 61
     9b0:	0d 92       	st	X+, r0
     9b2:	0e b6       	in	r0, 0x3e	; 62
     9b4:	0d 92       	st	X+, r0
     9b6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskSwitchContext>
     9ba:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     9be:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     9c2:	cd 91       	ld	r28, X+
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	dd 91       	ld	r29, X+
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	1f 90       	pop	r1
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	08 95       	ret

00000a10 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	0f 92       	push	r0
     a18:	1f 92       	push	r1
     a1a:	11 24       	eor	r1, r1
     a1c:	2f 92       	push	r2
     a1e:	3f 92       	push	r3
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
     a58:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     a5c:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     a60:	0d b6       	in	r0, 0x3d	; 61
     a62:	0d 92       	st	X+, r0
     a64:	0e b6       	in	r0, 0x3e	; 62
     a66:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     a68:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a6c:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a70:	80 91 85 61 	lds	r24, 0x6185	; 0x806185 <StatsTimer>
     a74:	90 91 86 61 	lds	r25, 0x6186	; 0x806186 <StatsTimer+0x1>
     a78:	a0 91 87 61 	lds	r26, 0x6187	; 0x806187 <StatsTimer+0x2>
     a7c:	b0 91 88 61 	lds	r27, 0x6188	; 0x806188 <StatsTimer+0x3>
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 85 61 	sts	0x6185, r24	; 0x806185 <StatsTimer>
     a8c:	90 93 86 61 	sts	0x6186, r25	; 0x806186 <StatsTimer+0x1>
     a90:	a0 93 87 61 	sts	0x6187, r26	; 0x806187 <StatsTimer+0x2>
     a94:	b0 93 88 61 	sts	0x6188, r27	; 0x806188 <StatsTimer+0x3>
		xTaskIncrementTick();
     a98:	0e 94 cc 0b 	call	0x1798	; 0x1798 <xTaskIncrementTick>
		vTaskSwitchContext();
     a9c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     aa0:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     aa4:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     aa8:	cd 91       	ld	r28, X+
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	dd 91       	ld	r29, X+
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
     ae0:	7f 90       	pop	r7
     ae2:	6f 90       	pop	r6
     ae4:	5f 90       	pop	r5
     ae6:	4f 90       	pop	r4
     ae8:	3f 90       	pop	r3
     aea:	2f 90       	pop	r2
     aec:	1f 90       	pop	r1
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0

		asm volatile ( "reti" );
     af4:	18 95       	reti

00000af6 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     af6:	08 95       	ret

00000af8 <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	0f 92       	push	r0
     b00:	1f 92       	push	r1
     b02:	11 24       	eor	r1, r1
     b04:	2f 92       	push	r2
     b06:	3f 92       	push	r3
     b08:	4f 92       	push	r4
     b0a:	5f 92       	push	r5
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     b44:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     b48:	0d b6       	in	r0, 0x3d	; 61
     b4a:	0d 92       	st	X+, r0
     b4c:	0e b6       	in	r0, 0x3e	; 62
     b4e:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	9f ef       	ldi	r25, 0xFF	; 255
     b54:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     b58:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
     b5c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b60:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     b64:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     b68:	cd 91       	ld	r28, X+
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	dd 91       	ld	r29, X+
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	9f 90       	pop	r9
     b9e:	8f 90       	pop	r8
     ba0:	7f 90       	pop	r7
     ba2:	6f 90       	pop	r6
     ba4:	5f 90       	pop	r5
     ba6:	4f 90       	pop	r4
     ba8:	3f 90       	pop	r3
     baa:	2f 90       	pop	r2
     bac:	1f 90       	pop	r1
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
	asm volatile ( "reti" );
     bb4:	18 95       	reti

00000bb6 <prvCopyDataToQueue>:
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	04 2f       	mov	r16, r20
     bc2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     bc4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     bc6:	41 11       	cpse	r20, r1
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <prvCopyDataToQueue+0x2e>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <prvCopyDataToQueue+0x1e>
     bd2:	43 c0       	rjmp	.+134    	; 0xc5a <prvCopyDataToQueue+0xa4>
     bd4:	1f 5f       	subi	r17, 0xFF	; 255
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	1a 8f       	std	Y+26, r17	; 0x1a
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	01 11       	cpse	r16, r1
     be8:	15 c0       	rjmp	.+42     	; 0xc14 <prvCopyDataToQueue+0x5e>
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	9b 81       	ldd	r25, Y+3	; 0x03
     bee:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <memcpy>
     bf2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	82 0f       	add	r24, r18
     bfa:	91 1d       	adc	r25, r1
     bfc:	8a 83       	std	Y+2, r24	; 0x02
     bfe:	9b 83       	std	Y+3, r25	; 0x03
     c00:	2c 81       	ldd	r18, Y+4	; 0x04
     c02:	3d 81       	ldd	r19, Y+5	; 0x05
     c04:	82 17       	cp	r24, r18
     c06:	93 07       	cpc	r25, r19
     c08:	28 f3       	brcs	.-54     	; 0xbd4 <prvCopyDataToQueue+0x1e>
     c0a:	88 81       	ld	r24, Y
     c0c:	99 81       	ldd	r25, Y+1	; 0x01
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	9b 83       	std	Y+3, r25	; 0x03
     c12:	e0 cf       	rjmp	.-64     	; 0xbd4 <prvCopyDataToQueue+0x1e>
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	9f 81       	ldd	r25, Y+7	; 0x07
     c18:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <memcpy>
     c1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	91 95       	neg	r25
     c22:	81 95       	neg	r24
     c24:	91 09       	sbc	r25, r1
     c26:	2e 81       	ldd	r18, Y+6	; 0x06
     c28:	3f 81       	ldd	r19, Y+7	; 0x07
     c2a:	28 0f       	add	r18, r24
     c2c:	39 1f       	adc	r19, r25
     c2e:	2e 83       	std	Y+6, r18	; 0x06
     c30:	3f 83       	std	Y+7, r19	; 0x07
     c32:	48 81       	ld	r20, Y
     c34:	59 81       	ldd	r21, Y+1	; 0x01
     c36:	24 17       	cp	r18, r20
     c38:	35 07       	cpc	r19, r21
     c3a:	30 f4       	brcc	.+12     	; 0xc48 <prvCopyDataToQueue+0x92>
     c3c:	2c 81       	ldd	r18, Y+4	; 0x04
     c3e:	3d 81       	ldd	r19, Y+5	; 0x05
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	8e 83       	std	Y+6, r24	; 0x06
     c46:	9f 83       	std	Y+7, r25	; 0x07
     c48:	02 30       	cpi	r16, 0x02	; 2
     c4a:	21 f6       	brne	.-120    	; 0xbd4 <prvCopyDataToQueue+0x1e>
     c4c:	11 23       	and	r17, r17
     c4e:	11 f0       	breq	.+4      	; 0xc54 <prvCopyDataToQueue+0x9e>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	c2 cf       	rjmp	.-124    	; 0xbd8 <prvCopyDataToQueue+0x22>
     c54:	11 e0       	ldi	r17, 0x01	; 1
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	bf cf       	rjmp	.-130    	; 0xbd8 <prvCopyDataToQueue+0x22>
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	9d 81       	ldd	r25, Y+5	; 0x05
     c5e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <xTaskPriorityDisinherit>
     c62:	1c 82       	std	Y+4, r1	; 0x04
     c64:	1d 82       	std	Y+5, r1	; 0x05
     c66:	1f 5f       	subi	r17, 0xFF	; 255
     c68:	b7 cf       	rjmp	.-146    	; 0xbd8 <prvCopyDataToQueue+0x22>

00000c6a <prvUnlockQueue>:
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	8c 01       	movw	r16, r24
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	0f 92       	push	r0
     c7c:	fc 01       	movw	r30, r24
     c7e:	c6 8d       	ldd	r28, Z+30	; 0x1e
     c80:	1c 16       	cp	r1, r28
     c82:	c4 f4       	brge	.+48     	; 0xcb4 <prvUnlockQueue+0x4a>
     c84:	fc 01       	movw	r30, r24
     c86:	81 89       	ldd	r24, Z+17	; 0x11
     c88:	88 23       	and	r24, r24
     c8a:	a1 f0       	breq	.+40     	; 0xcb4 <prvUnlockQueue+0x4a>
     c8c:	78 01       	movw	r14, r16
     c8e:	f1 e1       	ldi	r31, 0x11	; 17
     c90:	ef 0e       	add	r14, r31
     c92:	f1 1c       	adc	r15, r1
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <prvUnlockQueue+0x38>
     c96:	c1 50       	subi	r28, 0x01	; 1
     c98:	69 f0       	breq	.+26     	; 0xcb4 <prvUnlockQueue+0x4a>
     c9a:	f8 01       	movw	r30, r16
     c9c:	81 89       	ldd	r24, Z+17	; 0x11
     c9e:	88 23       	and	r24, r24
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <prvUnlockQueue+0x4a>
     ca2:	c7 01       	movw	r24, r14
     ca4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xTaskRemoveFromEventList>
     ca8:	88 23       	and	r24, r24
     caa:	a9 f3       	breq	.-22     	; 0xc96 <prvUnlockQueue+0x2c>
     cac:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <vTaskMissedYield>
     cb0:	c1 50       	subi	r28, 0x01	; 1
     cb2:	99 f7       	brne	.-26     	; 0xc9a <prvUnlockQueue+0x30>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	f8 01       	movw	r30, r16
     cb8:	86 8f       	std	Z+30, r24	; 0x1e
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	0f 92       	push	r0
     cc4:	c5 8d       	ldd	r28, Z+29	; 0x1d
     cc6:	1c 16       	cp	r1, r28
     cc8:	c4 f4       	brge	.+48     	; 0xcfa <prvUnlockQueue+0x90>
     cca:	f8 01       	movw	r30, r16
     ccc:	80 85       	ldd	r24, Z+8	; 0x08
     cce:	88 23       	and	r24, r24
     cd0:	a1 f0       	breq	.+40     	; 0xcfa <prvUnlockQueue+0x90>
     cd2:	78 01       	movw	r14, r16
     cd4:	f8 e0       	ldi	r31, 0x08	; 8
     cd6:	ef 0e       	add	r14, r31
     cd8:	f1 1c       	adc	r15, r1
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <prvUnlockQueue+0x7e>
     cdc:	c1 50       	subi	r28, 0x01	; 1
     cde:	69 f0       	breq	.+26     	; 0xcfa <prvUnlockQueue+0x90>
     ce0:	f8 01       	movw	r30, r16
     ce2:	80 85       	ldd	r24, Z+8	; 0x08
     ce4:	88 23       	and	r24, r24
     ce6:	49 f0       	breq	.+18     	; 0xcfa <prvUnlockQueue+0x90>
     ce8:	c7 01       	movw	r24, r14
     cea:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xTaskRemoveFromEventList>
     cee:	88 23       	and	r24, r24
     cf0:	a9 f3       	breq	.-22     	; 0xcdc <prvUnlockQueue+0x72>
     cf2:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <vTaskMissedYield>
     cf6:	c1 50       	subi	r28, 0x01	; 1
     cf8:	99 f7       	brne	.-26     	; 0xce0 <prvUnlockQueue+0x76>
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	f8 01       	movw	r30, r16
     cfe:	85 8f       	std	Z+29, r24	; 0x1d
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	08 95       	ret

00000d10 <xQueueGenericReset>:
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	ec 01       	movw	r28, r24
     d18:	16 2f       	mov	r17, r22
     d1a:	89 2b       	or	r24, r25
     d1c:	09 f4       	brne	.+2      	; 0xd20 <xQueueGenericReset+0x10>
     d1e:	3e c0       	rjmp	.+124    	; 0xd9c <xQueueGenericReset+0x8c>
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	0f 92       	push	r0
     d26:	48 81       	ld	r20, Y
     d28:	59 81       	ldd	r21, Y+1	; 0x01
     d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d2c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     d2e:	9a 01       	movw	r18, r20
     d30:	86 9f       	mul	r24, r22
     d32:	20 0d       	add	r18, r0
     d34:	31 1d       	adc	r19, r1
     d36:	11 24       	eor	r1, r1
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	3d 83       	std	Y+5, r19	; 0x05
     d3c:	1a 8e       	std	Y+26, r1	; 0x1a
     d3e:	4a 83       	std	Y+2, r20	; 0x02
     d40:	5b 83       	std	Y+3, r21	; 0x03
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	68 9f       	mul	r22, r24
     d48:	90 01       	movw	r18, r0
     d4a:	69 9f       	mul	r22, r25
     d4c:	30 0d       	add	r19, r0
     d4e:	11 24       	eor	r1, r1
     d50:	ca 01       	movw	r24, r20
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	8e 83       	std	Y+6, r24	; 0x06
     d58:	9f 83       	std	Y+7, r25	; 0x07
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	8d 8f       	std	Y+29, r24	; 0x1d
     d5e:	8e 8f       	std	Y+30, r24	; 0x1e
     d60:	11 11       	cpse	r17, r1
     d62:	13 c0       	rjmp	.+38     	; 0xd8a <xQueueGenericReset+0x7a>
     d64:	88 85       	ldd	r24, Y+8	; 0x08
     d66:	81 11       	cpse	r24, r1
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <xQueueGenericReset+0x68>
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	08 95       	ret
     d78:	ce 01       	movw	r24, r28
     d7a:	08 96       	adiw	r24, 0x08	; 8
     d7c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xTaskRemoveFromEventList>
     d80:	88 23       	and	r24, r24
     d82:	99 f3       	breq	.-26     	; 0xd6a <xQueueGenericReset+0x5a>
     d84:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     d88:	f0 cf       	rjmp	.-32     	; 0xd6a <xQueueGenericReset+0x5a>
     d8a:	ce 01       	movw	r24, r28
     d8c:	08 96       	adiw	r24, 0x08	; 8
     d8e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
     d92:	ce 01       	movw	r24, r28
     d94:	41 96       	adiw	r24, 0x11	; 17
     d96:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
     d9a:	e7 cf       	rjmp	.-50     	; 0xd6a <xQueueGenericReset+0x5a>
     d9c:	63 e0       	ldi	r22, 0x03	; 3
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	80 e1       	ldi	r24, 0x10	; 16
     da2:	90 e2       	ldi	r25, 0x20	; 32
     da4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
     da8:	bb cf       	rjmp	.-138    	; 0xd20 <xQueueGenericReset+0x10>

00000daa <xQueueGenericCreate>:
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	18 2f       	mov	r17, r24
     db6:	06 2f       	mov	r16, r22
     db8:	f4 2e       	mov	r15, r20
     dba:	88 23       	and	r24, r24
     dbc:	99 f1       	breq	.+102    	; 0xe24 <xQueueGenericCreate+0x7a>
     dbe:	00 23       	and	r16, r16
     dc0:	d1 f0       	breq	.+52     	; 0xdf6 <xQueueGenericCreate+0x4c>
     dc2:	10 9f       	mul	r17, r16
     dc4:	c0 01       	movw	r24, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	81 96       	adiw	r24, 0x21	; 33
     dca:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
     dce:	ec 01       	movw	r28, r24
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	51 f0       	breq	.+20     	; 0xde8 <xQueueGenericCreate+0x3e>
     dd4:	81 96       	adiw	r24, 0x21	; 33
     dd6:	88 83       	st	Y, r24
     dd8:	99 83       	std	Y+1, r25	; 0x01
     dda:	1b 8f       	std	Y+27, r17	; 0x1b
     ddc:	0c 8f       	std	Y+28, r16	; 0x1c
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 88 06 	call	0xd10	; 0xd10 <xQueueGenericReset>
     de6:	f8 a2       	std	Y+32, r15	; 0x20
     de8:	ce 01       	movw	r24, r28
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	08 95       	ret
     df6:	81 e2       	ldi	r24, 0x21	; 33
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
     dfe:	ec 01       	movw	r28, r24
     e00:	89 2b       	or	r24, r25
     e02:	91 f3       	breq	.-28     	; 0xde8 <xQueueGenericCreate+0x3e>
     e04:	c8 83       	st	Y, r28
     e06:	d9 83       	std	Y+1, r29	; 0x01
     e08:	1b 8f       	std	Y+27, r17	; 0x1b
     e0a:	0c 8f       	std	Y+28, r16	; 0x1c
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 88 06 	call	0xd10	; 0xd10 <xQueueGenericReset>
     e14:	f8 a2       	std	Y+32, r15	; 0x20
     e16:	ce 01       	movw	r24, r28
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	08 95       	ret
     e24:	66 e7       	ldi	r22, 0x76	; 118
     e26:	71 e0       	ldi	r23, 0x01	; 1
     e28:	80 e1       	ldi	r24, 0x10	; 16
     e2a:	90 e2       	ldi	r25, 0x20	; 32
     e2c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
     e30:	c6 cf       	rjmp	.-116    	; 0xdbe <xQueueGenericCreate+0x14>

00000e32 <xQueueGenericSend>:
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	25 97       	sbiw	r28, 0x05	; 5
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	8c 01       	movw	r16, r24
     e50:	6b 01       	movw	r12, r22
     e52:	4c 83       	std	Y+4, r20	; 0x04
     e54:	5d 83       	std	Y+5, r21	; 0x05
     e56:	b2 2e       	mov	r11, r18
     e58:	89 2b       	or	r24, r25
     e5a:	09 f4       	brne	.+2      	; 0xe5e <xQueueGenericSend+0x2c>
     e5c:	b2 c0       	rjmp	.+356    	; 0xfc2 <xQueueGenericSend+0x190>
     e5e:	c1 14       	cp	r12, r1
     e60:	d1 04       	cpc	r13, r1
     e62:	09 f4       	brne	.+2      	; 0xe66 <xQueueGenericSend+0x34>
     e64:	a2 c0       	rjmp	.+324    	; 0xfaa <xQueueGenericSend+0x178>
     e66:	f2 e0       	ldi	r31, 0x02	; 2
     e68:	bf 16       	cp	r11, r31
     e6a:	09 f4       	brne	.+2      	; 0xe6e <xQueueGenericSend+0x3c>
     e6c:	7d c0       	rjmp	.+250    	; 0xf68 <xQueueGenericSend+0x136>
     e6e:	f8 01       	movw	r30, r16
     e70:	83 8d       	ldd	r24, Z+27	; 0x1b
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	78 01       	movw	r14, r16
     e76:	f8 e0       	ldi	r31, 0x08	; 8
     e78:	ef 0e       	add	r14, r31
     e7a:	f1 1c       	adc	r15, r1
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <xQueueGenericSend+0x6c>
     e7e:	6c 81       	ldd	r22, Y+4	; 0x04
     e80:	7d 81       	ldd	r23, Y+5	; 0x05
     e82:	c7 01       	movw	r24, r14
     e84:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <vTaskPlaceOnEventList>
     e88:	c8 01       	movw	r24, r16
     e8a:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvUnlockQueue>
     e8e:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
     e92:	88 23       	and	r24, r24
     e94:	09 f4       	brne	.+2      	; 0xe98 <xQueueGenericSend+0x66>
     e96:	4a c0       	rjmp	.+148    	; 0xf2c <xQueueGenericSend+0xfa>
     e98:	f8 01       	movw	r30, r16
     e9a:	83 8d       	ldd	r24, Z+27	; 0x1b
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	0f 92       	push	r0
     ea4:	f8 01       	movw	r30, r16
     ea6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ea8:	98 17       	cp	r25, r24
     eaa:	08 f4       	brcc	.+2      	; 0xeae <xQueueGenericSend+0x7c>
     eac:	42 c0       	rjmp	.+132    	; 0xf32 <xQueueGenericSend+0x100>
     eae:	f2 e0       	ldi	r31, 0x02	; 2
     eb0:	bf 16       	cp	r11, r31
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <xQueueGenericSend+0x84>
     eb4:	3e c0       	rjmp	.+124    	; 0xf32 <xQueueGenericSend+0x100>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	89 2b       	or	r24, r25
     ebc:	09 f4       	brne	.+2      	; 0xec0 <xQueueGenericSend+0x8e>
     ebe:	60 c0       	rjmp	.+192    	; 0xf80 <xQueueGenericSend+0x14e>
     ec0:	22 23       	and	r18, r18
     ec2:	59 f1       	breq	.+86     	; 0xf1a <xQueueGenericSend+0xe8>
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0e 94 c6 0b 	call	0x178c	; 0x178c <vTaskSuspendAll>
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	0f 92       	push	r0
     ed2:	f8 01       	movw	r30, r16
     ed4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	39 f1       	breq	.+78     	; 0xf28 <xQueueGenericSend+0xf6>
     eda:	f8 01       	movw	r30, r16
     edc:	86 8d       	ldd	r24, Z+30	; 0x1e
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	09 f1       	breq	.+66     	; 0xf24 <xQueueGenericSend+0xf2>
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	be 01       	movw	r22, r28
     ee8:	6c 5f       	subi	r22, 0xFC	; 252
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <xTaskCheckForTimeOut>
     ef4:	81 11       	cpse	r24, r1
     ef6:	48 c0       	rjmp	.+144    	; 0xf88 <xQueueGenericSend+0x156>
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	0f 92       	push	r0
     efe:	f8 01       	movw	r30, r16
     f00:	92 8d       	ldd	r25, Z+26	; 0x1a
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	83 8d       	ldd	r24, Z+27	; 0x1b
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <xQueueGenericSend+0xdc>
     f0c:	b8 cf       	rjmp	.-144    	; 0xe7e <xQueueGenericSend+0x4c>
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvUnlockQueue>
     f14:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
     f18:	bf cf       	rjmp	.-130    	; 0xe98 <xQueueGenericSend+0x66>
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <vTaskInternalSetTimeOutState>
     f22:	d0 cf       	rjmp	.-96     	; 0xec4 <xQueueGenericSend+0x92>
     f24:	16 8e       	std	Z+30, r1	; 0x1e
     f26:	dd cf       	rjmp	.-70     	; 0xee2 <xQueueGenericSend+0xb0>
     f28:	15 8e       	std	Z+29, r1	; 0x1d
     f2a:	d7 cf       	rjmp	.-82     	; 0xeda <xQueueGenericSend+0xa8>
     f2c:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     f30:	b3 cf       	rjmp	.-154    	; 0xe98 <xQueueGenericSend+0x66>
     f32:	4b 2d       	mov	r20, r11
     f34:	b6 01       	movw	r22, r12
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <prvCopyDataToQueue>
     f3c:	f8 01       	movw	r30, r16
     f3e:	91 89       	ldd	r25, Z+17	; 0x11
     f40:	91 11       	cpse	r25, r1
     f42:	2c c0       	rjmp	.+88     	; 0xf9c <xQueueGenericSend+0x16a>
     f44:	81 11       	cpse	r24, r1
     f46:	27 c0       	rjmp	.+78     	; 0xf96 <xQueueGenericSend+0x164>
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	25 96       	adiw	r28, 0x05	; 5
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	bf 90       	pop	r11
     f66:	08 95       	ret
     f68:	f8 01       	movw	r30, r16
     f6a:	83 8d       	ldd	r24, Z+27	; 0x1b
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <xQueueGenericSend+0x140>
     f70:	80 cf       	rjmp	.-256    	; 0xe72 <xQueueGenericSend+0x40>
     f72:	63 ef       	ldi	r22, 0xF3	; 243
     f74:	72 e0       	ldi	r23, 0x02	; 2
     f76:	80 e1       	ldi	r24, 0x10	; 16
     f78:	90 e2       	ldi	r25, 0x20	; 32
     f7a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
     f7e:	77 cf       	rjmp	.-274    	; 0xe6e <xQueueGenericSend+0x3c>
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	e3 cf       	rjmp	.-58     	; 0xf4e <xQueueGenericSend+0x11c>
     f88:	c8 01       	movw	r24, r16
     f8a:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvUnlockQueue>
     f8e:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	dc cf       	rjmp	.-72     	; 0xf4e <xQueueGenericSend+0x11c>
     f96:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     f9a:	d6 cf       	rjmp	.-84     	; 0xf48 <xQueueGenericSend+0x116>
     f9c:	c8 01       	movw	r24, r16
     f9e:	41 96       	adiw	r24, 0x11	; 17
     fa0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xTaskRemoveFromEventList>
     fa4:	88 23       	and	r24, r24
     fa6:	81 f2       	breq	.-96     	; 0xf48 <xQueueGenericSend+0x116>
     fa8:	f6 cf       	rjmp	.-20     	; 0xf96 <xQueueGenericSend+0x164>
     faa:	f8 01       	movw	r30, r16
     fac:	84 8d       	ldd	r24, Z+28	; 0x1c
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <xQueueGenericSend+0x182>
     fb2:	59 cf       	rjmp	.-334    	; 0xe66 <xQueueGenericSend+0x34>
     fb4:	62 ef       	ldi	r22, 0xF2	; 242
     fb6:	72 e0       	ldi	r23, 0x02	; 2
     fb8:	80 e1       	ldi	r24, 0x10	; 16
     fba:	90 e2       	ldi	r25, 0x20	; 32
     fbc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
     fc0:	52 cf       	rjmp	.-348    	; 0xe66 <xQueueGenericSend+0x34>
     fc2:	61 ef       	ldi	r22, 0xF1	; 241
     fc4:	72 e0       	ldi	r23, 0x02	; 2
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	90 e2       	ldi	r25, 0x20	; 32
     fca:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
     fce:	47 cf       	rjmp	.-370    	; 0xe5e <xQueueGenericSend+0x2c>

00000fd0 <xQueueCreateMutex>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	48 2f       	mov	r20, r24
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	0e 94 d5 06 	call	0xdaa	; 0xdaa <xQueueGenericCreate>
     fde:	ec 01       	movw	r28, r24
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	61 f0       	breq	.+24     	; 0xffc <xQueueCreateMutex+0x2c>
     fe4:	1c 82       	std	Y+4, r1	; 0x04
     fe6:	1d 82       	std	Y+5, r1	; 0x05
     fe8:	18 82       	st	Y, r1
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	1e 82       	std	Y+6, r1	; 0x06
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0e 94 19 07 	call	0xe32	; 0xe32 <xQueueGenericSend>
     ffc:	ce 01       	movw	r24, r28
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	25 97       	sbiw	r28, 0x05	; 5
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	8c 01       	movw	r16, r24
    101e:	6c 83       	std	Y+4, r22	; 0x04
    1020:	7d 83       	std	Y+5, r23	; 0x05
#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    1022:	89 2b       	or	r24, r25
    1024:	09 f4       	brne	.+2      	; 0x1028 <xQueueSemaphoreTake+0x24>
    1026:	d0 c0       	rjmp	.+416    	; 0x11c8 <xQueueSemaphoreTake+0x1c4>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    1028:	d8 01       	movw	r26, r16
    102a:	5c 96       	adiw	r26, 0x1c	; 28
    102c:	8c 91       	ld	r24, X
    102e:	81 11       	cpse	r24, r1
    1030:	bb c0       	rjmp	.+374    	; 0x11a8 <xQueueSemaphoreTake+0x1a4>
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    1032:	d1 2c       	mov	r13, r1
    1034:	20 e0       	ldi	r18, 0x00	; 0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1036:	78 01       	movw	r14, r16
    1038:	b1 e1       	ldi	r27, 0x11	; 17
    103a:	eb 0e       	add	r14, r27
    103c:	f1 1c       	adc	r15, r1
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1044:	f8 01       	movw	r30, r16
    1046:	82 8d       	ldd	r24, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1048:	81 11       	cpse	r24, r1
    104a:	89 c0       	rjmp	.+274    	; 0x115e <xQueueSemaphoreTake+0x15a>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	89 2b       	or	r24, r25
    1052:	09 f4       	brne	.+2      	; 0x1056 <xQueueSemaphoreTake+0x52>
    1054:	9d c0       	rjmp	.+314    	; 0x1190 <xQueueSemaphoreTake+0x18c>
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1056:	22 23       	and	r18, r18
    1058:	09 f4       	brne	.+2      	; 0x105c <xQueueSemaphoreTake+0x58>
    105a:	5f c0       	rjmp	.+190    	; 0x111a <xQueueSemaphoreTake+0x116>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    1060:	0e 94 c6 0b 	call	0x178c	; 0x178c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	d8 01       	movw	r26, r16
    106c:	5d 96       	adiw	r26, 0x1d	; 29
    106e:	8c 91       	ld	r24, X
    1070:	5d 97       	sbiw	r26, 0x1d	; 29
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f4       	brne	.+2      	; 0x1078 <xQueueSemaphoreTake+0x74>
    1076:	56 c0       	rjmp	.+172    	; 0x1124 <xQueueSemaphoreTake+0x120>
    1078:	f8 01       	movw	r30, r16
    107a:	86 8d       	ldd	r24, Z+30	; 0x1e
    107c:	8f 3f       	cpi	r24, 0xFF	; 255
    107e:	09 f4       	brne	.+2      	; 0x1082 <xQueueSemaphoreTake+0x7e>
    1080:	58 c0       	rjmp	.+176    	; 0x1132 <xQueueSemaphoreTake+0x12e>
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1086:	be 01       	movw	r22, r28
    1088:	6c 5f       	subi	r22, 0xFC	; 252
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <xTaskCheckForTimeOut>
    1094:	81 11       	cpse	r24, r1
    1096:	23 c0       	rjmp	.+70     	; 0x10de <xQueueSemaphoreTake+0xda>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    109e:	d8 01       	movw	r26, r16
    10a0:	5a 96       	adiw	r26, 0x1a	; 26
    10a2:	8c 91       	ld	r24, X
    10a4:	5a 97       	sbiw	r26, 0x1a	; 26
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    10aa:	81 11       	cpse	r24, r1
    10ac:	44 c0       	rjmp	.+136    	; 0x1136 <xQueueSemaphoreTake+0x132>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10ae:	f8 01       	movw	r30, r16
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	89 2b       	or	r24, r25
    10b6:	09 f4       	brne	.+2      	; 0x10ba <xQueueSemaphoreTake+0xb6>
    10b8:	45 c0       	rjmp	.+138    	; 0x1144 <xQueueSemaphoreTake+0x140>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    10ba:	6c 81       	ldd	r22, Y+4	; 0x04
    10bc:	7d 81       	ldd	r23, Y+5	; 0x05
    10be:	c7 01       	movw	r24, r14
    10c0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    10c4:	c8 01       	movw	r24, r16
    10c6:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    10ca:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
    10ce:	88 23       	and	r24, r24
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <xQueueSemaphoreTake+0xd2>
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	b4 cf       	rjmp	.-152    	; 0x103e <xQueueSemaphoreTake+0x3a>
				{
					portYIELD_WITHIN_API();
    10d6:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	b0 cf       	rjmp	.-160    	; 0x103e <xQueueSemaphoreTake+0x3a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    10e4:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    10ee:	f8 01       	movw	r30, r16
    10f0:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    10f6:	81 11       	cpse	r24, r1
    10f8:	ec cf       	rjmp	.-40     	; 0x10d2 <xQueueSemaphoreTake+0xce>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    10fa:	dd 20       	and	r13, r13
    10fc:	09 f4       	brne	.+2      	; 0x1100 <xQueueSemaphoreTake+0xfc>
    10fe:	72 c0       	rjmp	.+228    	; 0x11e4 <xQueueSemaphoreTake+0x1e0>
					{
						taskENTER_CRITICAL();
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	0f 92       	push	r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
    1106:	81 89       	ldd	r24, Z+17	; 0x11
    1108:	81 11       	cpse	r24, r1
    110a:	65 c0       	rjmp	.+202    	; 0x11d6 <xQueueSemaphoreTake+0x1d2>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    110c:	60 e0       	ldi	r22, 0x00	; 0
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    110e:	f8 01       	movw	r30, r16
    1110:	84 81       	ldd	r24, Z+4	; 0x04
    1112:	95 81       	ldd	r25, Z+5	; 0x05
    1114:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <vTaskPriorityDisinheritAfterTimeout>
    1118:	43 c0       	rjmp	.+134    	; 0x11a0 <xQueueSemaphoreTake+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <vTaskInternalSetTimeOutState>
    1122:	9c cf       	rjmp	.-200    	; 0x105c <xQueueSemaphoreTake+0x58>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    1124:	5d 96       	adiw	r26, 0x1d	; 29
    1126:	1c 92       	st	X, r1
    1128:	f8 01       	movw	r30, r16
    112a:	86 8d       	ldd	r24, Z+30	; 0x1e
    112c:	8f 3f       	cpi	r24, 0xFF	; 255
    112e:	09 f0       	breq	.+2      	; 0x1132 <xQueueSemaphoreTake+0x12e>
    1130:	a8 cf       	rjmp	.-176    	; 0x1082 <xQueueSemaphoreTake+0x7e>
    1132:	16 8e       	std	Z+30, r1	; 0x1e
    1134:	a6 cf       	rjmp	.-180    	; 0x1082 <xQueueSemaphoreTake+0x7e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    1136:	c8 01       	movw	r24, r16
    1138:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    113c:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	7d cf       	rjmp	.-262    	; 0x103e <xQueueSemaphoreTake+0x3a>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	0f 92       	push	r0
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    114a:	14 96       	adiw	r26, 0x04	; 4
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	15 97       	sbiw	r26, 0x05	; 5
    1152:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <xTaskPriorityInherit>
    1156:	d8 2e       	mov	r13, r24
						}
						taskEXIT_CRITICAL();
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	ae cf       	rjmp	.-164    	; 0x10ba <xQueueSemaphoreTake+0xb6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	82 8f       	std	Z+26, r24	; 0x1a

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	09 f4       	brne	.+2      	; 0x116c <xQueueSemaphoreTake+0x168>
    116a:	3e c0       	rjmp	.+124    	; 0x11e8 <xQueueSemaphoreTake+0x1e4>
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    116c:	f8 01       	movw	r30, r16
    116e:	80 85       	ldd	r24, Z+8	; 0x08
    1170:	81 11       	cpse	r24, r1
    1172:	21 c0       	rjmp	.+66     	; 0x11b6 <xQueueSemaphoreTake+0x1b2>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1178:	81 e0       	ldi	r24, 0x01	; 1
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    117a:	25 96       	adiw	r28, 0x05	; 5
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	08 95       	ret
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    1190:	dd 20       	and	r13, r13
    1192:	31 f0       	breq	.+12     	; 0x11a0 <xQueueSemaphoreTake+0x19c>
    1194:	61 ee       	ldi	r22, 0xE1	; 225
    1196:	75 e0       	ldi	r23, 0x05	; 5
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	90 e2       	ldi	r25, 0x20	; 32
    119c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
						}
						taskEXIT_CRITICAL();
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	e9 cf       	rjmp	.-46     	; 0x117a <xQueueSemaphoreTake+0x176>
	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    11a8:	65 e9       	ldi	r22, 0x95	; 149
    11aa:	75 e0       	ldi	r23, 0x05	; 5
    11ac:	80 e1       	ldi	r24, 0x10	; 16
    11ae:	90 e2       	ldi	r25, 0x20	; 32
    11b0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    11b4:	3e cf       	rjmp	.-388    	; 0x1032 <xQueueSemaphoreTake+0x2e>

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    11b6:	c8 01       	movw	r24, r16
    11b8:	08 96       	adiw	r24, 0x08	; 8
    11ba:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <xTaskRemoveFromEventList>
    11be:	88 23       	and	r24, r24
    11c0:	c9 f2       	breq	.-78     	; 0x1174 <xQueueSemaphoreTake+0x170>
					{
						queueYIELD_IF_USING_PREEMPTION();
    11c2:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    11c6:	d6 cf       	rjmp	.-84     	; 0x1174 <xQueueSemaphoreTake+0x170>
#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    11c8:	61 e9       	ldi	r22, 0x91	; 145
    11ca:	75 e0       	ldi	r23, 0x05	; 5
    11cc:	80 e1       	ldi	r24, 0x10	; 16
    11ce:	90 e2       	ldi	r25, 0x20	; 32
    11d0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    11d4:	29 cf       	rjmp	.-430    	; 0x1028 <xQueueSemaphoreTake+0x24>
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    11d6:	06 88       	ldd	r0, Z+22	; 0x16
    11d8:	f7 89       	ldd	r31, Z+23	; 0x17
    11da:	e0 2d       	mov	r30, r0
    11dc:	80 81       	ld	r24, Z
    11de:	64 e0       	ldi	r22, 0x04	; 4
    11e0:	68 1b       	sub	r22, r24
    11e2:	95 cf       	rjmp	.-214    	; 0x110e <xQueueSemaphoreTake+0x10a>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	c9 cf       	rjmp	.-110    	; 0x117a <xQueueSemaphoreTake+0x176>
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    11e8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <pvTaskIncrementMutexHeldCount>
    11ec:	d8 01       	movw	r26, r16
    11ee:	14 96       	adiw	r26, 0x04	; 4
    11f0:	8d 93       	st	X+, r24
    11f2:	9c 93       	st	X, r25
    11f4:	15 97       	sbiw	r26, 0x05	; 5
    11f6:	ba cf       	rjmp	.-140    	; 0x116c <xQueueSemaphoreTake+0x168>

000011f8 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    11f8:	20 c0       	rjmp	.+64     	; 0x123a <prvIdleTask+0x42>
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	0f 92       	push	r0
    1200:	e0 91 38 61 	lds	r30, 0x6138	; 0x806138 <xTasksWaitingTermination+0x5>
    1204:	f0 91 39 61 	lds	r31, 0x6139	; 0x806139 <xTasksWaitingTermination+0x6>
    1208:	c6 81       	ldd	r28, Z+6	; 0x06
    120a:	d7 81       	ldd	r29, Z+7	; 0x07
    120c:	ce 01       	movw	r24, r28
    120e:	02 96       	adiw	r24, 0x02	; 2
    1210:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1214:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    1218:	81 50       	subi	r24, 0x01	; 1
    121a:	80 93 28 61 	sts	0x6128, r24	; 0x806128 <uxCurrentNumberOfTasks>
    121e:	80 91 32 61 	lds	r24, 0x6132	; 0x806132 <uxDeletedTasksWaitingCleanUp>
    1222:	81 50       	subi	r24, 0x01	; 1
    1224:	80 93 32 61 	sts	0x6132, r24	; 0x806132 <uxDeletedTasksWaitingCleanUp>
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	8f 89       	ldd	r24, Y+23	; 0x17
    122e:	98 8d       	ldd	r25, Y+24	; 0x18
    1230:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    1234:	ce 01       	movw	r24, r28
    1236:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    123a:	80 91 32 61 	lds	r24, 0x6132	; 0x806132 <uxDeletedTasksWaitingCleanUp>
    123e:	81 11       	cpse	r24, r1
    1240:	dc cf       	rjmp	.-72     	; 0x11fa <prvIdleTask+0x2>
    1242:	80 91 5b 61 	lds	r24, 0x615B	; 0x80615b <pxReadyTasksLists>
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	10 f0       	brcs	.+4      	; 0x124e <prvIdleTask+0x56>
    124a:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    124e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <vApplicationIdleHook>
    1252:	f3 cf       	rjmp	.-26     	; 0x123a <prvIdleTask+0x42>

00001254 <prvResetNextTaskUnblockTime.part.0>:
    1254:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1258:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    125c:	05 80       	ldd	r0, Z+5	; 0x05
    125e:	f6 81       	ldd	r31, Z+6	; 0x06
    1260:	e0 2d       	mov	r30, r0
    1262:	06 80       	ldd	r0, Z+6	; 0x06
    1264:	f7 81       	ldd	r31, Z+7	; 0x07
    1266:	e0 2d       	mov	r30, r0
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    1270:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    1274:	08 95       	ret

00001276 <prvAddCurrentTaskToDelayedList>:
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	f6 2e       	mov	r15, r22
    1284:	00 91 26 61 	lds	r16, 0x6126	; 0x806126 <xTickCount>
    1288:	10 91 27 61 	lds	r17, 0x6127	; 0x806127 <xTickCount+0x1>
    128c:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    1290:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    129a:	cf 3f       	cpi	r28, 0xFF	; 255
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	d8 07       	cpc	r29, r24
    12a0:	a9 f1       	breq	.+106    	; 0x130c <prvAddCurrentTaskToDelayedList+0x96>
    12a2:	c0 0f       	add	r28, r16
    12a4:	d1 1f       	adc	r29, r17
    12a6:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    12aa:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    12ae:	c2 83       	std	Z+2, r28	; 0x02
    12b0:	d3 83       	std	Z+3, r29	; 0x03
    12b2:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    12b6:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    12ba:	c0 17       	cp	r28, r16
    12bc:	d1 07       	cpc	r29, r17
    12be:	c8 f0       	brcs	.+50     	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x7c>
    12c0:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <pxDelayedTaskList>
    12c4:	90 91 48 61 	lds	r25, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    12c8:	6e 5f       	subi	r22, 0xFE	; 254
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	0e 94 ad 03 	call	0x75a	; 0x75a <vListInsert>
    12d0:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <xNextTaskUnblockTime>
    12d4:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <xNextTaskUnblockTime+0x1>
    12d8:	c8 17       	cp	r28, r24
    12da:	d9 07       	cpc	r29, r25
    12dc:	20 f4       	brcc	.+8      	; 0x12e6 <prvAddCurrentTaskToDelayedList+0x70>
    12de:	c0 93 1e 61 	sts	0x611E, r28	; 0x80611e <xNextTaskUnblockTime>
    12e2:	d0 93 1f 61 	sts	0x611F, r29	; 0x80611f <xNextTaskUnblockTime+0x1>
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	08 95       	ret
    12f2:	80 91 45 61 	lds	r24, 0x6145	; 0x806145 <pxOverflowDelayedTaskList>
    12f6:	90 91 46 61 	lds	r25, 0x6146	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    12fa:	6e 5f       	subi	r22, 0xFE	; 254
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	0c 94 ad 03 	jmp	0x75a	; 0x75a <vListInsert>
    130c:	ff 20       	and	r15, r15
    130e:	49 f2       	breq	.-110    	; 0x12a2 <prvAddCurrentTaskToDelayedList+0x2c>
    1310:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    1314:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1318:	6e 5f       	subi	r22, 0xFE	; 254
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	89 e2       	ldi	r24, 0x29	; 41
    131e:	91 e6       	ldi	r25, 0x61	; 97
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	0c 94 8c 03 	jmp	0x718	; 0x718 <vListInsertEnd>

0000132e <vTaskSwitchContext.part.5>:
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	10 92 22 61 	sts	0x6122, r1	; 0x806122 <xYieldPending>
    1338:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    133c:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1340:	80 91 85 61 	lds	r24, 0x6185	; 0x806185 <StatsTimer>
    1344:	90 91 86 61 	lds	r25, 0x6186	; 0x806186 <StatsTimer+0x1>
    1348:	a0 91 87 61 	lds	r26, 0x6187	; 0x806187 <StatsTimer+0x2>
    134c:	b0 91 88 61 	lds	r27, 0x6188	; 0x806188 <StatsTimer+0x3>
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	a1 1d       	adc	r26, r1
    1356:	b1 1d       	adc	r27, r1
    1358:	00 91 17 61 	lds	r16, 0x6117	; 0x806117 <ulTaskSwitchedInTime>
    135c:	10 91 18 61 	lds	r17, 0x6118	; 0x806118 <ulTaskSwitchedInTime+0x1>
    1360:	20 91 19 61 	lds	r18, 0x6119	; 0x806119 <ulTaskSwitchedInTime+0x2>
    1364:	30 91 1a 61 	lds	r19, 0x611A	; 0x80611a <ulTaskSwitchedInTime+0x3>
    1368:	08 17       	cp	r16, r24
    136a:	19 07       	cpc	r17, r25
    136c:	2a 07       	cpc	r18, r26
    136e:	3b 07       	cpc	r19, r27
    1370:	a0 f4       	brcc	.+40     	; 0x139a <vTaskSwitchContext.part.5+0x6c>
    1372:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1376:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    137a:	45 a1       	ldd	r20, Z+37	; 0x25
    137c:	56 a1       	ldd	r21, Z+38	; 0x26
    137e:	67 a1       	ldd	r22, Z+39	; 0x27
    1380:	70 a5       	ldd	r23, Z+40	; 0x28
    1382:	40 1b       	sub	r20, r16
    1384:	51 0b       	sbc	r21, r17
    1386:	62 0b       	sbc	r22, r18
    1388:	73 0b       	sbc	r23, r19
    138a:	48 0f       	add	r20, r24
    138c:	59 1f       	adc	r21, r25
    138e:	6a 1f       	adc	r22, r26
    1390:	7b 1f       	adc	r23, r27
    1392:	45 a3       	std	Z+37, r20	; 0x25
    1394:	56 a3       	std	Z+38, r21	; 0x26
    1396:	67 a3       	std	Z+39, r22	; 0x27
    1398:	70 a7       	std	Z+40, r23	; 0x28
    139a:	80 93 17 61 	sts	0x6117, r24	; 0x806117 <ulTaskSwitchedInTime>
    139e:	90 93 18 61 	sts	0x6118, r25	; 0x806118 <ulTaskSwitchedInTime+0x1>
    13a2:	a0 93 19 61 	sts	0x6119, r26	; 0x806119 <ulTaskSwitchedInTime+0x2>
    13a6:	b0 93 1a 61 	sts	0x611A, r27	; 0x80611a <ulTaskSwitchedInTime+0x3>
    13aa:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    13ae:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    13b2:	07 88       	ldd	r0, Z+23	; 0x17
    13b4:	f0 8d       	ldd	r31, Z+24	; 0x18
    13b6:	e0 2d       	mov	r30, r0
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	a2 81       	ldd	r26, Z+2	; 0x02
    13be:	b3 81       	ldd	r27, Z+3	; 0x03
    13c0:	85 3a       	cpi	r24, 0xA5	; 165
    13c2:	95 4a       	sbci	r25, 0xA5	; 165
    13c4:	a5 4a       	sbci	r26, 0xA5	; 165
    13c6:	b5 4a       	sbci	r27, 0xA5	; 165
    13c8:	09 f4       	brne	.+2      	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    13ca:	4c c0       	rjmp	.+152    	; 0x1464 <vTaskSwitchContext.part.5+0x136>
    13cc:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    13d0:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    13d4:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    13d8:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    13dc:	67 5e       	subi	r22, 0xE7	; 231
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <vApplicationStackOverflowHook>
    13e4:	c0 91 25 61 	lds	r28, 0x6125	; 0x806125 <uxTopReadyPriority>
    13e8:	8c 2f       	mov	r24, r28
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 01       	movw	r18, r24
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	f9 01       	movw	r30, r18
    13fc:	e8 0f       	add	r30, r24
    13fe:	f9 1f       	adc	r31, r25
    1400:	e5 5a       	subi	r30, 0xA5	; 165
    1402:	fe 49       	sbci	r31, 0x9E	; 158
    1404:	40 81       	ld	r20, Z
    1406:	41 11       	cpse	r20, r1
    1408:	0c c0       	rjmp	.+24     	; 0x1422 <vTaskSwitchContext.part.5+0xf4>
    140a:	cc 23       	and	r28, r28
    140c:	11 f0       	breq	.+4      	; 0x1412 <vTaskSwitchContext.part.5+0xe4>
    140e:	c1 50       	subi	r28, 0x01	; 1
    1410:	eb cf       	rjmp	.-42     	; 0x13e8 <vTaskSwitchContext.part.5+0xba>
    1412:	6c e8       	ldi	r22, 0x8C	; 140
    1414:	7b e0       	ldi	r23, 0x0B	; 11
    1416:	84 e2       	ldi	r24, 0x24	; 36
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    141e:	c1 50       	subi	r28, 0x01	; 1
    1420:	e3 cf       	rjmp	.-58     	; 0x13e8 <vTaskSwitchContext.part.5+0xba>
    1422:	82 0f       	add	r24, r18
    1424:	93 1f       	adc	r25, r19
    1426:	dc 01       	movw	r26, r24
    1428:	a5 5a       	subi	r26, 0xA5	; 165
    142a:	be 49       	sbci	r27, 0x9E	; 158
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	ed 91       	ld	r30, X+
    1430:	fc 91       	ld	r31, X
    1432:	12 97       	sbiw	r26, 0x02	; 2
    1434:	02 80       	ldd	r0, Z+2	; 0x02
    1436:	f3 81       	ldd	r31, Z+3	; 0x03
    1438:	e0 2d       	mov	r30, r0
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	ed 93       	st	X+, r30
    143e:	fc 93       	st	X, r31
    1440:	12 97       	sbiw	r26, 0x02	; 2
    1442:	82 5a       	subi	r24, 0xA2	; 162
    1444:	9e 49       	sbci	r25, 0x9E	; 158
    1446:	e8 17       	cp	r30, r24
    1448:	f9 07       	cpc	r31, r25
    144a:	59 f1       	breq	.+86     	; 0x14a2 <vTaskSwitchContext.part.5+0x174>
    144c:	86 81       	ldd	r24, Z+6	; 0x06
    144e:	97 81       	ldd	r25, Z+7	; 0x07
    1450:	80 93 7f 61 	sts	0x617F, r24	; 0x80617f <pxCurrentTCB>
    1454:	90 93 80 61 	sts	0x6180, r25	; 0x806180 <pxCurrentTCB+0x1>
    1458:	c0 93 25 61 	sts	0x6125, r28	; 0x806125 <uxTopReadyPriority>
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret
    1464:	84 81       	ldd	r24, Z+4	; 0x04
    1466:	95 81       	ldd	r25, Z+5	; 0x05
    1468:	a6 81       	ldd	r26, Z+6	; 0x06
    146a:	b7 81       	ldd	r27, Z+7	; 0x07
    146c:	85 3a       	cpi	r24, 0xA5	; 165
    146e:	95 4a       	sbci	r25, 0xA5	; 165
    1470:	a5 4a       	sbci	r26, 0xA5	; 165
    1472:	b5 4a       	sbci	r27, 0xA5	; 165
    1474:	09 f0       	breq	.+2      	; 0x1478 <vTaskSwitchContext.part.5+0x14a>
    1476:	aa cf       	rjmp	.-172    	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    1478:	80 85       	ldd	r24, Z+8	; 0x08
    147a:	91 85       	ldd	r25, Z+9	; 0x09
    147c:	a2 85       	ldd	r26, Z+10	; 0x0a
    147e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1480:	85 3a       	cpi	r24, 0xA5	; 165
    1482:	95 4a       	sbci	r25, 0xA5	; 165
    1484:	a5 4a       	sbci	r26, 0xA5	; 165
    1486:	b5 4a       	sbci	r27, 0xA5	; 165
    1488:	09 f0       	breq	.+2      	; 0x148c <vTaskSwitchContext.part.5+0x15e>
    148a:	a0 cf       	rjmp	.-192    	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    148c:	84 85       	ldd	r24, Z+12	; 0x0c
    148e:	95 85       	ldd	r25, Z+13	; 0x0d
    1490:	a6 85       	ldd	r26, Z+14	; 0x0e
    1492:	b7 85       	ldd	r27, Z+15	; 0x0f
    1494:	85 3a       	cpi	r24, 0xA5	; 165
    1496:	95 4a       	sbci	r25, 0xA5	; 165
    1498:	a5 4a       	sbci	r26, 0xA5	; 165
    149a:	b5 4a       	sbci	r27, 0xA5	; 165
    149c:	09 f0       	breq	.+2      	; 0x14a0 <vTaskSwitchContext.part.5+0x172>
    149e:	96 cf       	rjmp	.-212    	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    14a0:	a1 cf       	rjmp	.-190    	; 0x13e4 <vTaskSwitchContext.part.5+0xb6>
    14a2:	02 80       	ldd	r0, Z+2	; 0x02
    14a4:	f3 81       	ldd	r31, Z+3	; 0x03
    14a6:	e0 2d       	mov	r30, r0
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	ed 93       	st	X+, r30
    14ac:	fc 93       	st	X, r31
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	cd cf       	rjmp	.-102    	; 0x144c <vTaskSwitchContext.part.5+0x11e>

000014b2 <xTaskCreate>:
    14b2:	5f 92       	push	r5
    14b4:	6f 92       	push	r6
    14b6:	7f 92       	push	r7
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	4c 01       	movw	r8, r24
    14d2:	eb 01       	movw	r28, r22
    14d4:	5a 01       	movw	r10, r20
    14d6:	39 01       	movw	r6, r18
    14d8:	50 2e       	mov	r5, r16
    14da:	ca 01       	movw	r24, r20
    14dc:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
    14e0:	8c 01       	movw	r16, r24
    14e2:	89 2b       	or	r24, r25
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <xTaskCreate+0x36>
    14e6:	dc c0       	rjmp	.+440    	; 0x16a0 <xTaskCreate+0x1ee>
    14e8:	8e e2       	ldi	r24, 0x2E	; 46
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
    14f0:	6c 01       	movw	r12, r24
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <xTaskCreate+0x46>
    14f6:	d1 c0       	rjmp	.+418    	; 0x169a <xTaskCreate+0x1e8>
    14f8:	dc 01       	movw	r26, r24
    14fa:	57 96       	adiw	r26, 0x17	; 23
    14fc:	0d 93       	st	X+, r16
    14fe:	1c 93       	st	X, r17
    1500:	58 97       	sbiw	r26, 0x18	; 24
    1502:	20 97       	sbiw	r28, 0x00	; 0
    1504:	09 f4       	brne	.+2      	; 0x1508 <xTaskCreate+0x56>
    1506:	ce c0       	rjmp	.+412    	; 0x16a4 <xTaskCreate+0x1f2>
    1508:	c8 01       	movw	r24, r16
    150a:	a5 01       	movw	r20, r10
    150c:	65 ea       	ldi	r22, 0xA5	; 165
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <memset>
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	af 1a       	sub	r10, r31
    1518:	b1 08       	sbc	r11, r1
    151a:	d6 01       	movw	r26, r12
    151c:	57 96       	adiw	r26, 0x17	; 23
    151e:	8d 91       	ld	r24, X+
    1520:	9c 91       	ld	r25, X
    1522:	58 97       	sbiw	r26, 0x18	; 24
    1524:	a8 0e       	add	r10, r24
    1526:	b9 1e       	adc	r11, r25
    1528:	f6 01       	movw	r30, r12
    152a:	79 96       	adiw	r30, 0x19	; 25
    152c:	9e 01       	movw	r18, r28
    152e:	28 5f       	subi	r18, 0xF8	; 248
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	de 01       	movw	r26, r28
    1534:	89 91       	ld	r24, Y+
    1536:	81 93       	st	Z+, r24
    1538:	8c 91       	ld	r24, X
    153a:	88 23       	and	r24, r24
    153c:	19 f0       	breq	.+6      	; 0x1544 <xTaskCreate+0x92>
    153e:	c2 17       	cp	r28, r18
    1540:	d3 07       	cpc	r29, r19
    1542:	b9 f7       	brne	.-18     	; 0x1532 <xTaskCreate+0x80>
    1544:	f6 01       	movw	r30, r12
    1546:	10 a2       	std	Z+32, r1	; 0x20
    1548:	05 2d       	mov	r16, r5
    154a:	04 30       	cpi	r16, 0x04	; 4
    154c:	08 f0       	brcs	.+2      	; 0x1550 <xTaskCreate+0x9e>
    154e:	9f c0       	rjmp	.+318    	; 0x168e <xTaskCreate+0x1dc>
    1550:	d6 01       	movw	r26, r12
    1552:	56 96       	adiw	r26, 0x16	; 22
    1554:	0c 93       	st	X, r16
    1556:	56 97       	sbiw	r26, 0x16	; 22
    1558:	93 96       	adiw	r26, 0x23	; 35
    155a:	0c 93       	st	X, r16
    155c:	93 97       	sbiw	r26, 0x23	; 35
    155e:	94 96       	adiw	r26, 0x24	; 36
    1560:	1c 92       	st	X, r1
    1562:	e6 01       	movw	r28, r12
    1564:	22 96       	adiw	r28, 0x02	; 2
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 88 03 	call	0x710	; 0x710 <vListInitialiseItem>
    156c:	c6 01       	movw	r24, r12
    156e:	0c 96       	adiw	r24, 0x0c	; 12
    1570:	0e 94 88 03 	call	0x710	; 0x710 <vListInitialiseItem>
    1574:	f6 01       	movw	r30, r12
    1576:	c0 86       	std	Z+8, r12	; 0x08
    1578:	d1 86       	std	Z+9, r13	; 0x09
    157a:	84 e0       	ldi	r24, 0x04	; 4
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	80 1b       	sub	r24, r16
    1580:	91 09       	sbc	r25, r1
    1582:	84 87       	std	Z+12, r24	; 0x0c
    1584:	95 87       	std	Z+13, r25	; 0x0d
    1586:	c2 8a       	std	Z+18, r12	; 0x12
    1588:	d3 8a       	std	Z+19, r13	; 0x13
    158a:	15 a2       	std	Z+37, r1	; 0x25
    158c:	16 a2       	std	Z+38, r1	; 0x26
    158e:	17 a2       	std	Z+39, r1	; 0x27
    1590:	10 a6       	std	Z+40, r1	; 0x28
    1592:	11 a6       	std	Z+41, r1	; 0x29
    1594:	12 a6       	std	Z+42, r1	; 0x2a
    1596:	13 a6       	std	Z+43, r1	; 0x2b
    1598:	14 a6       	std	Z+44, r1	; 0x2c
    159a:	15 a6       	std	Z+45, r1	; 0x2d
    159c:	a3 01       	movw	r20, r6
    159e:	b4 01       	movw	r22, r8
    15a0:	c5 01       	movw	r24, r10
    15a2:	0e 94 04 04 	call	0x808	; 0x808 <pxPortInitialiseStack>
    15a6:	d6 01       	movw	r26, r12
    15a8:	8d 93       	st	X+, r24
    15aa:	9c 93       	st	X, r25
    15ac:	e1 14       	cp	r14, r1
    15ae:	f1 04       	cpc	r15, r1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <xTaskCreate+0x106>
    15b2:	f7 01       	movw	r30, r14
    15b4:	c0 82       	st	Z, r12
    15b6:	d1 82       	std	Z+1, r13	; 0x01
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	0f 92       	push	r0
    15be:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	80 93 28 61 	sts	0x6128, r24	; 0x806128 <uxCurrentNumberOfTasks>
    15c8:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    15cc:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    15d0:	89 2b       	or	r24, r25
    15d2:	99 f0       	breq	.+38     	; 0x15fa <xTaskCreate+0x148>
    15d4:	80 91 24 61 	lds	r24, 0x6124	; 0x806124 <xSchedulerRunning>
    15d8:	81 11       	cpse	r24, r1
    15da:	18 c0       	rjmp	.+48     	; 0x160c <xTaskCreate+0x15a>
    15dc:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    15e0:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    15e4:	d6 01       	movw	r26, r12
    15e6:	56 96       	adiw	r26, 0x16	; 22
    15e8:	8c 91       	ld	r24, X
    15ea:	96 89       	ldd	r25, Z+22	; 0x16
    15ec:	89 17       	cp	r24, r25
    15ee:	88 f0       	brcs	.+34     	; 0x1612 <xTaskCreate+0x160>
    15f0:	c0 92 7f 61 	sts	0x617F, r12	; 0x80617f <pxCurrentTCB>
    15f4:	d0 92 80 61 	sts	0x6180, r13	; 0x806180 <pxCurrentTCB+0x1>
    15f8:	0c c0       	rjmp	.+24     	; 0x1612 <xTaskCreate+0x160>
    15fa:	c0 92 7f 61 	sts	0x617F, r12	; 0x80617f <pxCurrentTCB>
    15fe:	d0 92 80 61 	sts	0x6180, r13	; 0x806180 <pxCurrentTCB+0x1>
    1602:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	09 f4       	brne	.+2      	; 0x160c <xTaskCreate+0x15a>
    160a:	56 c0       	rjmp	.+172    	; 0x16b8 <xTaskCreate+0x206>
    160c:	d6 01       	movw	r26, r12
    160e:	56 96       	adiw	r26, 0x16	; 22
    1610:	8c 91       	ld	r24, X
    1612:	90 91 20 61 	lds	r25, 0x6120	; 0x806120 <uxTaskNumber>
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	90 93 20 61 	sts	0x6120, r25	; 0x806120 <uxTaskNumber>
    161c:	f6 01       	movw	r30, r12
    161e:	91 a3       	std	Z+33, r25	; 0x21
    1620:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    1624:	98 17       	cp	r25, r24
    1626:	80 f1       	brcs	.+96     	; 0x1688 <xTaskCreate+0x1d6>
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9c 01       	movw	r18, r24
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	22 0f       	add	r18, r18
    1632:	33 1f       	adc	r19, r19
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	be 01       	movw	r22, r28
    163e:	85 5a       	subi	r24, 0xA5	; 165
    1640:	9e 49       	sbci	r25, 0x9E	; 158
    1642:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	80 91 24 61 	lds	r24, 0x6124	; 0x806124 <xSchedulerRunning>
    164e:	88 23       	and	r24, r24
    1650:	51 f0       	breq	.+20     	; 0x1666 <xTaskCreate+0x1b4>
    1652:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1656:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    165a:	96 89       	ldd	r25, Z+22	; 0x16
    165c:	d6 01       	movw	r26, r12
    165e:	56 96       	adiw	r26, 0x16	; 22
    1660:	8c 91       	ld	r24, X
    1662:	98 17       	cp	r25, r24
    1664:	b0 f0       	brcs	.+44     	; 0x1692 <xTaskCreate+0x1e0>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	08 95       	ret
    1688:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    168c:	cd cf       	rjmp	.-102    	; 0x1628 <xTaskCreate+0x176>
    168e:	03 e0       	ldi	r16, 0x03	; 3
    1690:	5f cf       	rjmp	.-322    	; 0x1550 <xTaskCreate+0x9e>
    1692:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	e7 cf       	rjmp	.-50     	; 0x1668 <xTaskCreate+0x1b6>
    169a:	c8 01       	movw	r24, r16
    169c:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	e2 cf       	rjmp	.-60     	; 0x1668 <xTaskCreate+0x1b6>
    16a4:	60 e6       	ldi	r22, 0x60	; 96
    16a6:	73 e0       	ldi	r23, 0x03	; 3
    16a8:	84 e2       	ldi	r24, 0x24	; 36
    16aa:	90 e2       	ldi	r25, 0x20	; 32
    16ac:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    16b0:	f6 01       	movw	r30, r12
    16b2:	87 89       	ldd	r24, Z+23	; 0x17
    16b4:	90 8d       	ldd	r25, Z+24	; 0x18
    16b6:	29 cf       	rjmp	.-430    	; 0x150a <xTaskCreate+0x58>
    16b8:	8b e5       	ldi	r24, 0x5B	; 91
    16ba:	91 e6       	ldi	r25, 0x61	; 97
    16bc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16c0:	84 e6       	ldi	r24, 0x64	; 100
    16c2:	91 e6       	ldi	r25, 0x61	; 97
    16c4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16c8:	8d e6       	ldi	r24, 0x6D	; 109
    16ca:	91 e6       	ldi	r25, 0x61	; 97
    16cc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16d0:	86 e7       	ldi	r24, 0x76	; 118
    16d2:	91 e6       	ldi	r25, 0x61	; 97
    16d4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16d8:	82 e5       	ldi	r24, 0x52	; 82
    16da:	91 e6       	ldi	r25, 0x61	; 97
    16dc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16e0:	89 e4       	ldi	r24, 0x49	; 73
    16e2:	91 e6       	ldi	r25, 0x61	; 97
    16e4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16e8:	8c e3       	ldi	r24, 0x3C	; 60
    16ea:	91 e6       	ldi	r25, 0x61	; 97
    16ec:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16f0:	83 e3       	ldi	r24, 0x33	; 51
    16f2:	91 e6       	ldi	r25, 0x61	; 97
    16f4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    16f8:	89 e2       	ldi	r24, 0x29	; 41
    16fa:	91 e6       	ldi	r25, 0x61	; 97
    16fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1700:	82 e5       	ldi	r24, 0x52	; 82
    1702:	91 e6       	ldi	r25, 0x61	; 97
    1704:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <pxDelayedTaskList>
    1708:	90 93 48 61 	sts	0x6148, r25	; 0x806148 <pxDelayedTaskList+0x1>
    170c:	89 e4       	ldi	r24, 0x49	; 73
    170e:	91 e6       	ldi	r25, 0x61	; 97
    1710:	80 93 45 61 	sts	0x6145, r24	; 0x806145 <pxOverflowDelayedTaskList>
    1714:	90 93 46 61 	sts	0x6146, r25	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    1718:	f6 01       	movw	r30, r12
    171a:	86 89       	ldd	r24, Z+22	; 0x16
    171c:	7a cf       	rjmp	.-268    	; 0x1612 <xTaskCreate+0x160>

0000171e <vTaskStartScheduler>:
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	8c e1       	ldi	r24, 0x1C	; 28
    1726:	e8 2e       	mov	r14, r24
    1728:	81 e6       	ldi	r24, 0x61	; 97
    172a:	f8 2e       	mov	r15, r24
    172c:	00 e0       	ldi	r16, 0x00	; 0
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	51 e0       	ldi	r21, 0x01	; 1
    1736:	68 e3       	ldi	r22, 0x38	; 56
    1738:	70 e2       	ldi	r23, 0x20	; 32
    173a:	8c ef       	ldi	r24, 0xFC	; 252
    173c:	98 e0       	ldi	r25, 0x08	; 8
    173e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	79 f0       	breq	.+30     	; 0x1764 <vTaskStartScheduler+0x46>
    1746:	8f 3f       	cpi	r24, 0xFF	; 255
    1748:	21 f0       	breq	.+8      	; 0x1752 <vTaskStartScheduler+0x34>
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret
    1752:	67 e0       	ldi	r22, 0x07	; 7
    1754:	78 e0       	ldi	r23, 0x08	; 8
    1756:	84 e2       	ldi	r24, 0x24	; 36
    1758:	90 e2       	ldi	r25, 0x20	; 32
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <vAssertCalled>
    1764:	f8 94       	cli
    1766:	2f ef       	ldi	r18, 0xFF	; 255
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	20 93 1e 61 	sts	0x611E, r18	; 0x80611e <xNextTaskUnblockTime>
    176e:	30 93 1f 61 	sts	0x611F, r19	; 0x80611f <xNextTaskUnblockTime+0x1>
    1772:	80 93 24 61 	sts	0x6124, r24	; 0x806124 <xSchedulerRunning>
    1776:	10 92 26 61 	sts	0x6126, r1	; 0x806126 <xTickCount>
    177a:	10 92 27 61 	sts	0x6127, r1	; 0x806127 <xTickCount+0x1>
    177e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vConfigureTimerForRunTimeStats>
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <xPortStartScheduler>

0000178c <vTaskSuspendAll>:
    178c:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <uxSchedulerSuspended>
    1796:	08 95       	ret

00001798 <xTaskIncrementTick>:
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    17aa:	81 11       	cpse	r24, r1
    17ac:	b9 c0       	rjmp	.+370    	; 0x1920 <xTaskIncrementTick+0x188>
    17ae:	e0 90 26 61 	lds	r14, 0x6126	; 0x806126 <xTickCount>
    17b2:	f0 90 27 61 	lds	r15, 0x6127	; 0x806127 <xTickCount+0x1>
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	e8 1a       	sub	r14, r24
    17ba:	f8 0a       	sbc	r15, r24
    17bc:	e0 92 26 61 	sts	0x6126, r14	; 0x806126 <xTickCount>
    17c0:	f0 92 27 61 	sts	0x6127, r15	; 0x806127 <xTickCount+0x1>
    17c4:	e1 14       	cp	r14, r1
    17c6:	f1 04       	cpc	r15, r1
    17c8:	49 f5       	brne	.+82     	; 0x181c <xTaskIncrementTick+0x84>
    17ca:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    17ce:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    17d2:	80 81       	ld	r24, Z
    17d4:	81 11       	cpse	r24, r1
    17d6:	ab c0       	rjmp	.+342    	; 0x192e <xTaskIncrementTick+0x196>
    17d8:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <pxDelayedTaskList>
    17dc:	90 91 48 61 	lds	r25, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    17e0:	20 91 45 61 	lds	r18, 0x6145	; 0x806145 <pxOverflowDelayedTaskList>
    17e4:	30 91 46 61 	lds	r19, 0x6146	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    17e8:	20 93 47 61 	sts	0x6147, r18	; 0x806147 <pxDelayedTaskList>
    17ec:	30 93 48 61 	sts	0x6148, r19	; 0x806148 <pxDelayedTaskList+0x1>
    17f0:	80 93 45 61 	sts	0x6145, r24	; 0x806145 <pxOverflowDelayedTaskList>
    17f4:	90 93 46 61 	sts	0x6146, r25	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    17f8:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <xNumOfOverflows>
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 21 61 	sts	0x6121, r24	; 0x806121 <xNumOfOverflows>
    1802:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1806:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    180a:	80 81       	ld	r24, Z
    180c:	81 11       	cpse	r24, r1
    180e:	96 c0       	rjmp	.+300    	; 0x193c <xTaskIncrementTick+0x1a4>
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	9f ef       	ldi	r25, 0xFF	; 255
    1814:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    1818:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    181c:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <xNextTaskUnblockTime>
    1820:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <xNextTaskUnblockTime+0x1>
    1824:	d1 2c       	mov	r13, r1
    1826:	e8 16       	cp	r14, r24
    1828:	f9 06       	cpc	r15, r25
    182a:	08 f4       	brcc	.+2      	; 0x182e <xTaskIncrementTick+0x96>
    182c:	53 c0       	rjmp	.+166    	; 0x18d4 <xTaskIncrementTick+0x13c>
    182e:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1832:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1836:	80 81       	ld	r24, Z
    1838:	88 23       	and	r24, r24
    183a:	09 f4       	brne	.+2      	; 0x183e <xTaskIncrementTick+0xa6>
    183c:	45 c0       	rjmp	.+138    	; 0x18c8 <xTaskIncrementTick+0x130>
    183e:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1842:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1846:	05 80       	ldd	r0, Z+5	; 0x05
    1848:	f6 81       	ldd	r31, Z+6	; 0x06
    184a:	e0 2d       	mov	r30, r0
    184c:	c6 81       	ldd	r28, Z+6	; 0x06
    184e:	d7 81       	ldd	r29, Z+7	; 0x07
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	e8 16       	cp	r14, r24
    1856:	f9 06       	cpc	r15, r25
    1858:	08 f4       	brcc	.+2      	; 0x185c <xTaskIncrementTick+0xc4>
    185a:	73 c0       	rjmp	.+230    	; 0x1942 <xTaskIncrementTick+0x1aa>
    185c:	8e 01       	movw	r16, r28
    185e:	0e 5f       	subi	r16, 0xFE	; 254
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	c8 01       	movw	r24, r16
    1864:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1868:	8c 89       	ldd	r24, Y+20	; 0x14
    186a:	9d 89       	ldd	r25, Y+21	; 0x15
    186c:	89 2b       	or	r24, r25
    186e:	21 f0       	breq	.+8      	; 0x1878 <xTaskIncrementTick+0xe0>
    1870:	ce 01       	movw	r24, r28
    1872:	0c 96       	adiw	r24, 0x0c	; 12
    1874:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1878:	8e 89       	ldd	r24, Y+22	; 0x16
    187a:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    187e:	98 17       	cp	r25, r24
    1880:	10 f4       	brcc	.+4      	; 0x1886 <xTaskIncrementTick+0xee>
    1882:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9c 01       	movw	r18, r24
    188a:	22 0f       	add	r18, r18
    188c:	33 1f       	adc	r19, r19
    188e:	22 0f       	add	r18, r18
    1890:	33 1f       	adc	r19, r19
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	82 0f       	add	r24, r18
    1898:	93 1f       	adc	r25, r19
    189a:	b8 01       	movw	r22, r16
    189c:	85 5a       	subi	r24, 0xA5	; 165
    189e:	9e 49       	sbci	r25, 0x9E	; 158
    18a0:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    18a4:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    18a8:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    18ac:	9e 89       	ldd	r25, Y+22	; 0x16
    18ae:	86 89       	ldd	r24, Z+22	; 0x16
    18b0:	98 17       	cp	r25, r24
    18b2:	08 f4       	brcc	.+2      	; 0x18b6 <xTaskIncrementTick+0x11e>
    18b4:	bc cf       	rjmp	.-136    	; 0x182e <xTaskIncrementTick+0x96>
    18b6:	dd 24       	eor	r13, r13
    18b8:	d3 94       	inc	r13
    18ba:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    18be:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    18c2:	80 81       	ld	r24, Z
    18c4:	81 11       	cpse	r24, r1
    18c6:	bb cf       	rjmp	.-138    	; 0x183e <xTaskIncrementTick+0xa6>
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	9f ef       	ldi	r25, 0xFF	; 255
    18cc:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    18d0:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    18d4:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    18d8:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    18dc:	86 89       	ldd	r24, Z+22	; 0x16
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	fc 01       	movw	r30, r24
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	ee 0f       	add	r30, r30
    18ec:	ff 1f       	adc	r31, r31
    18ee:	8e 0f       	add	r24, r30
    18f0:	9f 1f       	adc	r25, r31
    18f2:	fc 01       	movw	r30, r24
    18f4:	e5 5a       	subi	r30, 0xA5	; 165
    18f6:	fe 49       	sbci	r31, 0x9E	; 158
    18f8:	80 81       	ld	r24, Z
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	10 f0       	brcs	.+4      	; 0x1902 <xTaskIncrementTick+0x16a>
    18fe:	dd 24       	eor	r13, r13
    1900:	d3 94       	inc	r13
    1902:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <xYieldPending>
    1906:	88 23       	and	r24, r24
    1908:	11 f0       	breq	.+4      	; 0x190e <xTaskIncrementTick+0x176>
    190a:	dd 24       	eor	r13, r13
    190c:	d3 94       	inc	r13
    190e:	8d 2d       	mov	r24, r13
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	08 95       	ret
    1920:	80 91 23 61 	lds	r24, 0x6123	; 0x806123 <uxPendedTicks>
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	80 93 23 61 	sts	0x6123, r24	; 0x806123 <uxPendedTicks>
    192a:	d1 2c       	mov	r13, r1
    192c:	ea cf       	rjmp	.-44     	; 0x1902 <xTaskIncrementTick+0x16a>
    192e:	66 e6       	ldi	r22, 0x66	; 102
    1930:	7a e0       	ldi	r23, 0x0A	; 10
    1932:	84 e2       	ldi	r24, 0x24	; 36
    1934:	90 e2       	ldi	r25, 0x20	; 32
    1936:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    193a:	4e cf       	rjmp	.-356    	; 0x17d8 <xTaskIncrementTick+0x40>
    193c:	0e 94 2a 09 	call	0x1254	; 0x1254 <prvResetNextTaskUnblockTime.part.0>
    1940:	6d cf       	rjmp	.-294    	; 0x181c <xTaskIncrementTick+0x84>
    1942:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    1946:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    194a:	c4 cf       	rjmp	.-120    	; 0x18d4 <xTaskIncrementTick+0x13c>

0000194c <xTaskResumeAll>:
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    195a:	88 23       	and	r24, r24
    195c:	09 f4       	brne	.+2      	; 0x1960 <xTaskResumeAll+0x14>
    195e:	77 c0       	rjmp	.+238    	; 0x1a4e <xTaskResumeAll+0x102>
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	0f 92       	push	r0
    1966:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    196a:	81 50       	subi	r24, 0x01	; 1
    196c:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <uxSchedulerSuspended>
    1970:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1974:	81 11       	cpse	r24, r1
    1976:	62 c0       	rjmp	.+196    	; 0x1a3c <xTaskResumeAll+0xf0>
    1978:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    197c:	88 23       	and	r24, r24
    197e:	09 f4       	brne	.+2      	; 0x1982 <xTaskResumeAll+0x36>
    1980:	5d c0       	rjmp	.+186    	; 0x1a3c <xTaskResumeAll+0xf0>
    1982:	c0 e0       	ldi	r28, 0x00	; 0
    1984:	d0 e0       	ldi	r29, 0x00	; 0
    1986:	ff 24       	eor	r15, r15
    1988:	f3 94       	inc	r15
    198a:	80 91 3c 61 	lds	r24, 0x613C	; 0x80613c <xPendingReadyList>
    198e:	88 23       	and	r24, r24
    1990:	a1 f1       	breq	.+104    	; 0x19fa <xTaskResumeAll+0xae>
    1992:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <xPendingReadyList+0x5>
    1996:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <xPendingReadyList+0x6>
    199a:	c6 81       	ldd	r28, Z+6	; 0x06
    199c:	d7 81       	ldd	r29, Z+7	; 0x07
    199e:	ce 01       	movw	r24, r28
    19a0:	0c 96       	adiw	r24, 0x0c	; 12
    19a2:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    19a6:	8e 01       	movw	r16, r28
    19a8:	0e 5f       	subi	r16, 0xFE	; 254
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	c8 01       	movw	r24, r16
    19ae:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    19b2:	8e 89       	ldd	r24, Y+22	; 0x16
    19b4:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    19b8:	98 17       	cp	r25, r24
    19ba:	10 f4       	brcc	.+4      	; 0x19c0 <xTaskResumeAll+0x74>
    19bc:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9c 01       	movw	r18, r24
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	22 0f       	add	r18, r18
    19ca:	33 1f       	adc	r19, r19
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	b8 01       	movw	r22, r16
    19d6:	85 5a       	subi	r24, 0xA5	; 165
    19d8:	9e 49       	sbci	r25, 0x9E	; 158
    19da:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    19de:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    19e2:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    19e6:	9e 89       	ldd	r25, Y+22	; 0x16
    19e8:	86 89       	ldd	r24, Z+22	; 0x16
    19ea:	98 17       	cp	r25, r24
    19ec:	70 f2       	brcs	.-100    	; 0x198a <xTaskResumeAll+0x3e>
    19ee:	f0 92 22 61 	sts	0x6122, r15	; 0x806122 <xYieldPending>
    19f2:	80 91 3c 61 	lds	r24, 0x613C	; 0x80613c <xPendingReadyList>
    19f6:	81 11       	cpse	r24, r1
    19f8:	cc cf       	rjmp	.-104    	; 0x1992 <xTaskResumeAll+0x46>
    19fa:	cd 2b       	or	r28, r29
    19fc:	69 f0       	breq	.+26     	; 0x1a18 <xTaskResumeAll+0xcc>
    19fe:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1a02:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1a06:	80 81       	ld	r24, Z
    1a08:	81 11       	cpse	r24, r1
    1a0a:	2c c0       	rjmp	.+88     	; 0x1a64 <xTaskResumeAll+0x118>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f ef       	ldi	r25, 0xFF	; 255
    1a10:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    1a14:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    1a18:	c0 91 23 61 	lds	r28, 0x6123	; 0x806123 <uxPendedTicks>
    1a1c:	cc 23       	and	r28, r28
    1a1e:	51 f0       	breq	.+20     	; 0x1a34 <xTaskResumeAll+0xe8>
    1a20:	d1 e0       	ldi	r29, 0x01	; 1
    1a22:	0e 94 cc 0b 	call	0x1798	; 0x1798 <xTaskIncrementTick>
    1a26:	81 11       	cpse	r24, r1
    1a28:	d0 93 22 61 	sts	0x6122, r29	; 0x806122 <xYieldPending>
    1a2c:	c1 50       	subi	r28, 0x01	; 1
    1a2e:	c9 f7       	brne	.-14     	; 0x1a22 <xTaskResumeAll+0xd6>
    1a30:	10 92 23 61 	sts	0x6123, r1	; 0x806123 <uxPendedTicks>
    1a34:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <xYieldPending>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <xTaskResumeAll+0x110>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	08 95       	ret
    1a4e:	6c e6       	ldi	r22, 0x6C	; 108
    1a50:	78 e0       	ldi	r23, 0x08	; 8
    1a52:	84 e2       	ldi	r24, 0x24	; 36
    1a54:	90 e2       	ldi	r25, 0x20	; 32
    1a56:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1a5a:	82 cf       	rjmp	.-252    	; 0x1960 <xTaskResumeAll+0x14>
    1a5c:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	ed cf       	rjmp	.-38     	; 0x1a3e <xTaskResumeAll+0xf2>
    1a64:	0e 94 2a 09 	call	0x1254	; 0x1254 <prvResetNextTaskUnblockTime.part.0>
    1a68:	d7 cf       	rjmp	.-82     	; 0x1a18 <xTaskResumeAll+0xcc>

00001a6a <vTaskDelay>:
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	89 2b       	or	r24, r25
    1a72:	29 f4       	brne	.+10     	; 0x1a7e <vTaskDelay+0x14>
    1a74:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	08 95       	ret
    1a7e:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1a82:	81 11       	cpse	r24, r1
    1a84:	10 c0       	rjmp	.+32     	; 0x1aa6 <vTaskDelay+0x3c>
    1a86:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <uxSchedulerSuspended>
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	ce 01       	movw	r24, r28
    1a94:	0e 94 3b 09 	call	0x1276	; 0x1276 <prvAddCurrentTaskToDelayedList>
    1a98:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
    1a9c:	88 23       	and	r24, r24
    1a9e:	51 f3       	breq	.-44     	; 0x1a74 <vTaskDelay+0xa>
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret
    1aa6:	60 e2       	ldi	r22, 0x20	; 32
    1aa8:	75 e0       	ldi	r23, 0x05	; 5
    1aaa:	84 e2       	ldi	r24, 0x24	; 36
    1aac:	90 e2       	ldi	r25, 0x20	; 32
    1aae:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1ab2:	e9 cf       	rjmp	.-46     	; 0x1a86 <vTaskDelay+0x1c>

00001ab4 <vTaskSwitchContext>:
    1ab4:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1ab8:	81 11       	cpse	r24, r1
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <vTaskSwitchContext+0xc>
    1abc:	0c 94 97 09 	jmp	0x132e	; 0x132e <vTaskSwitchContext.part.5>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xYieldPending>
    1ac6:	08 95       	ret

00001ac8 <vTaskPlaceOnEventList>:
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	ec 01       	movw	r28, r24
    1ad2:	8b 01       	movw	r16, r22
    1ad4:	89 2b       	or	r24, r25
    1ad6:	89 f0       	breq	.+34     	; 0x1afa <vTaskPlaceOnEventList+0x32>
    1ad8:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    1adc:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1ae0:	64 5f       	subi	r22, 0xF4	; 244
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	0e 94 ad 03 	call	0x75a	; 0x75a <vListInsert>
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	c8 01       	movw	r24, r16
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <prvAddCurrentTaskToDelayedList>
    1afa:	63 ea       	ldi	r22, 0xA3	; 163
    1afc:	7b e0       	ldi	r23, 0x0B	; 11
    1afe:	84 e2       	ldi	r24, 0x24	; 36
    1b00:	90 e2       	ldi	r25, 0x20	; 32
    1b02:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1b06:	e8 cf       	rjmp	.-48     	; 0x1ad8 <vTaskPlaceOnEventList+0x10>

00001b08 <xTaskRemoveFromEventList>:
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	dc 01       	movw	r26, r24
    1b12:	15 96       	adiw	r26, 0x05	; 5
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	16 97       	sbiw	r26, 0x06	; 6
    1b1a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b1c:	d7 81       	ldd	r29, Z+7	; 0x07
    1b1e:	20 97       	sbiw	r28, 0x00	; 0
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <xTaskRemoveFromEventList+0x1c>
    1b22:	42 c0       	rjmp	.+132    	; 0x1ba8 <xTaskRemoveFromEventList+0xa0>
    1b24:	8e 01       	movw	r16, r28
    1b26:	04 5f       	subi	r16, 0xF4	; 244
    1b28:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1b30:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1b34:	81 11       	cpse	r24, r1
    1b36:	29 c0       	rjmp	.+82     	; 0x1b8a <xTaskRemoveFromEventList+0x82>
    1b38:	0a 50       	subi	r16, 0x0A	; 10
    1b3a:	11 09       	sbc	r17, r1
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1b42:	8e 89       	ldd	r24, Y+22	; 0x16
    1b44:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    1b48:	98 17       	cp	r25, r24
    1b4a:	28 f1       	brcs	.+74     	; 0x1b96 <xTaskRemoveFromEventList+0x8e>
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 01       	movw	r18, r24
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	22 0f       	add	r18, r18
    1b5a:	33 1f       	adc	r19, r19
    1b5c:	82 0f       	add	r24, r18
    1b5e:	93 1f       	adc	r25, r19
    1b60:	b8 01       	movw	r22, r16
    1b62:	85 5a       	subi	r24, 0xA5	; 165
    1b64:	9e 49       	sbci	r25, 0x9E	; 158
    1b66:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1b6a:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1b6e:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1b72:	9e 89       	ldd	r25, Y+22	; 0x16
    1b74:	86 89       	ldd	r24, Z+22	; 0x16
    1b76:	89 17       	cp	r24, r25
    1b78:	88 f4       	brcc	.+34     	; 0x1b9c <xTaskRemoveFromEventList+0x94>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xYieldPending>
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret
    1b8a:	b8 01       	movw	r22, r16
    1b8c:	8c e3       	ldi	r24, 0x3C	; 60
    1b8e:	91 e6       	ldi	r25, 0x61	; 97
    1b90:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1b94:	ea cf       	rjmp	.-44     	; 0x1b6a <xTaskRemoveFromEventList+0x62>
    1b96:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1b9a:	d8 cf       	rjmp	.-80     	; 0x1b4c <xTaskRemoveFromEventList+0x44>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret
    1ba8:	6e ef       	ldi	r22, 0xFE	; 254
    1baa:	7b e0       	ldi	r23, 0x0B	; 11
    1bac:	84 e2       	ldi	r24, 0x24	; 36
    1bae:	90 e2       	ldi	r25, 0x20	; 32
    1bb0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1bb4:	b7 cf       	rjmp	.-146    	; 0x1b24 <xTaskRemoveFromEventList+0x1c>

00001bb6 <vTaskInternalSetTimeOutState>:
    1bb6:	20 91 21 61 	lds	r18, 0x6121	; 0x806121 <xNumOfOverflows>
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 83       	st	Z, r18
    1bbe:	20 91 26 61 	lds	r18, 0x6126	; 0x806126 <xTickCount>
    1bc2:	30 91 27 61 	lds	r19, 0x6127	; 0x806127 <xTickCount+0x1>
    1bc6:	21 83       	std	Z+1, r18	; 0x01
    1bc8:	32 83       	std	Z+2, r19	; 0x02
    1bca:	08 95       	ret

00001bcc <xTaskCheckForTimeOut>:
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	8b 01       	movw	r16, r22
    1bd8:	89 2b       	or	r24, r25
    1bda:	09 f4       	brne	.+2      	; 0x1bde <xTaskCheckForTimeOut+0x12>
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <xTaskCheckForTimeOut+0x92>
    1bde:	01 15       	cp	r16, r1
    1be0:	11 05       	cpc	r17, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <xTaskCheckForTimeOut+0x1a>
    1be4:	43 c0       	rjmp	.+134    	; 0x1c6c <xTaskCheckForTimeOut+0xa0>
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	0f 92       	push	r0
    1bec:	80 91 26 61 	lds	r24, 0x6126	; 0x806126 <xTickCount>
    1bf0:	90 91 27 61 	lds	r25, 0x6127	; 0x806127 <xTickCount+0x1>
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	20 81       	ld	r18, Z
    1bf8:	31 81       	ldd	r19, Z+1	; 0x01
    1bfa:	2f 3f       	cpi	r18, 0xFF	; 255
    1bfc:	ff ef       	ldi	r31, 0xFF	; 255
    1bfe:	3f 07       	cpc	r19, r31
    1c00:	61 f1       	breq	.+88     	; 0x1c5a <xTaskCheckForTimeOut+0x8e>
    1c02:	49 81       	ldd	r20, Y+1	; 0x01
    1c04:	5a 81       	ldd	r21, Y+2	; 0x02
    1c06:	60 91 21 61 	lds	r22, 0x6121	; 0x806121 <xNumOfOverflows>
    1c0a:	78 81       	ld	r23, Y
    1c0c:	76 17       	cp	r23, r22
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <xTaskCheckForTimeOut+0x4a>
    1c10:	84 17       	cp	r24, r20
    1c12:	95 07       	cpc	r25, r21
    1c14:	80 f4       	brcc	.+32     	; 0x1c36 <xTaskCheckForTimeOut+0x6a>
    1c16:	84 1b       	sub	r24, r20
    1c18:	95 0b       	sbc	r25, r21
    1c1a:	82 17       	cp	r24, r18
    1c1c:	93 07       	cpc	r25, r19
    1c1e:	68 f0       	brcs	.+26     	; 0x1c3a <xTaskCheckForTimeOut+0x6e>
    1c20:	f8 01       	movw	r30, r16
    1c22:	10 82       	st	Z, r1
    1c24:	11 82       	std	Z+1, r1	; 0x01
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	f7 cf       	rjmp	.-18     	; 0x1c28 <xTaskCheckForTimeOut+0x5c>
    1c3a:	28 1b       	sub	r18, r24
    1c3c:	39 0b       	sbc	r19, r25
    1c3e:	f8 01       	movw	r30, r16
    1c40:	20 83       	st	Z, r18
    1c42:	31 83       	std	Z+1, r19	; 0x01
    1c44:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <xNumOfOverflows>
    1c48:	88 83       	st	Y, r24
    1c4a:	80 91 26 61 	lds	r24, 0x6126	; 0x806126 <xTickCount>
    1c4e:	90 91 27 61 	lds	r25, 0x6127	; 0x806127 <xTickCount+0x1>
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	e7 cf       	rjmp	.-50     	; 0x1c28 <xTaskCheckForTimeOut+0x5c>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	e5 cf       	rjmp	.-54     	; 0x1c28 <xTaskCheckForTimeOut+0x5c>
    1c5e:	69 e6       	ldi	r22, 0x69	; 105
    1c60:	7c e0       	ldi	r23, 0x0C	; 12
    1c62:	84 e2       	ldi	r24, 0x24	; 36
    1c64:	90 e2       	ldi	r25, 0x20	; 32
    1c66:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1c6a:	b9 cf       	rjmp	.-142    	; 0x1bde <xTaskCheckForTimeOut+0x12>
    1c6c:	6a e6       	ldi	r22, 0x6A	; 106
    1c6e:	7c e0       	ldi	r23, 0x0C	; 12
    1c70:	84 e2       	ldi	r24, 0x24	; 36
    1c72:	90 e2       	ldi	r25, 0x20	; 32
    1c74:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1c78:	b6 cf       	rjmp	.-148    	; 0x1be6 <xTaskCheckForTimeOut+0x1a>

00001c7a <vTaskMissedYield>:
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xYieldPending>
    1c80:	08 95       	ret

00001c82 <xTaskPriorityInherit>:
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	89 2b       	or	r24, r25
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <xTaskPriorityInherit+0x10>
    1c90:	41 c0       	rjmp	.+130    	; 0x1d14 <xTaskPriorityInherit+0x92>
    1c92:	26 89       	ldd	r18, Z+22	; 0x16
    1c94:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
    1c98:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1c9c:	56 96       	adiw	r26, 0x16	; 22
    1c9e:	8c 91       	ld	r24, X
    1ca0:	28 17       	cp	r18, r24
    1ca2:	70 f5       	brcc	.+92     	; 0x1d00 <xTaskPriorityInherit+0x7e>
    1ca4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ca6:	95 85       	ldd	r25, Z+13	; 0x0d
    1ca8:	97 fd       	sbrc	r25, 7
    1caa:	0c c0       	rjmp	.+24     	; 0x1cc4 <xTaskPriorityInherit+0x42>
    1cac:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
    1cb0:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1cb4:	56 96       	adiw	r26, 0x16	; 22
    1cb6:	3c 91       	ld	r19, X
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	83 1b       	sub	r24, r19
    1cbe:	91 09       	sbc	r25, r1
    1cc0:	84 87       	std	Z+12, r24	; 0x0c
    1cc2:	95 87       	std	Z+13, r25	; 0x0d
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	28 0f       	add	r18, r24
    1cd6:	39 1f       	adc	r19, r25
    1cd8:	25 5a       	subi	r18, 0xA5	; 165
    1cda:	3e 49       	sbci	r19, 0x9E	; 158
    1cdc:	82 85       	ldd	r24, Z+10	; 0x0a
    1cde:	93 85       	ldd	r25, Z+11	; 0x0b
    1ce0:	82 17       	cp	r24, r18
    1ce2:	93 07       	cpc	r25, r19
    1ce4:	e9 f0       	breq	.+58     	; 0x1d20 <xTaskPriorityInherit+0x9e>
    1ce6:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
    1cea:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1cee:	56 96       	adiw	r26, 0x16	; 22
    1cf0:	8c 91       	ld	r24, X
    1cf2:	86 8b       	std	Z+22, r24	; 0x16
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret
    1d00:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
    1d04:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	23 a1       	ldd	r18, Z+35	; 0x23
    1d0c:	56 96       	adiw	r26, 0x16	; 22
    1d0e:	9c 91       	ld	r25, X
    1d10:	29 17       	cp	r18, r25
    1d12:	88 f3       	brcs	.-30     	; 0x1cf6 <xTaskPriorityInherit+0x74>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret
    1d20:	8f 01       	movw	r16, r30
    1d22:	ef 01       	movw	r28, r30
    1d24:	22 96       	adiw	r28, 0x02	; 2
    1d26:	ce 01       	movw	r24, r28
    1d28:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1d2c:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1d30:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1d34:	86 89       	ldd	r24, Z+22	; 0x16
    1d36:	f8 01       	movw	r30, r16
    1d38:	86 8b       	std	Z+22, r24	; 0x16
    1d3a:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    1d3e:	98 17       	cp	r25, r24
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <xTaskPriorityInherit+0xc4>
    1d42:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9c 01       	movw	r18, r24
    1d4a:	22 0f       	add	r18, r18
    1d4c:	33 1f       	adc	r19, r19
    1d4e:	22 0f       	add	r18, r18
    1d50:	33 1f       	adc	r19, r19
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	be 01       	movw	r22, r28
    1d5c:	85 5a       	subi	r24, 0xA5	; 165
    1d5e:	9e 49       	sbci	r25, 0x9E	; 158
    1d60:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	c7 cf       	rjmp	.-114    	; 0x1cf6 <xTaskPriorityInherit+0x74>

00001d68 <xTaskPriorityDisinherit>:
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	c9 f0       	breq	.+50     	; 0x1da6 <xTaskPriorityDisinherit+0x3e>
    1d74:	ec 01       	movw	r28, r24
    1d76:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    1d7a:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1d7e:	c8 17       	cp	r28, r24
    1d80:	d9 07       	cpc	r29, r25
    1d82:	31 f0       	breq	.+12     	; 0x1d90 <xTaskPriorityDisinherit+0x28>
    1d84:	6e e7       	ldi	r22, 0x7E	; 126
    1d86:	7f e0       	ldi	r23, 0x0F	; 15
    1d88:	84 e2       	ldi	r24, 0x24	; 36
    1d8a:	90 e2       	ldi	r25, 0x20	; 32
    1d8c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1d90:	8c a1       	ldd	r24, Y+36	; 0x24
    1d92:	88 23       	and	r24, r24
    1d94:	c1 f1       	breq	.+112    	; 0x1e06 <xTaskPriorityDisinherit+0x9e>
    1d96:	81 50       	subi	r24, 0x01	; 1
    1d98:	8c a3       	std	Y+36, r24	; 0x24
    1d9a:	2e 89       	ldd	r18, Y+22	; 0x16
    1d9c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d9e:	29 17       	cp	r18, r25
    1da0:	11 f0       	breq	.+4      	; 0x1da6 <xTaskPriorityDisinherit+0x3e>
    1da2:	88 23       	and	r24, r24
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <xTaskPriorityDisinherit+0x4a>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	08 95       	ret
    1db2:	8e 01       	movw	r16, r28
    1db4:	0e 5f       	subi	r16, 0xFE	; 254
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	c8 01       	movw	r24, r16
    1dba:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1dbe:	2b a1       	ldd	r18, Y+35	; 0x23
    1dc0:	2e 8b       	std	Y+22, r18	; 0x16
    1dc2:	82 2f       	mov	r24, r18
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	44 e0       	ldi	r20, 0x04	; 4
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	48 1b       	sub	r20, r24
    1dcc:	59 0b       	sbc	r21, r25
    1dce:	4c 87       	std	Y+12, r20	; 0x0c
    1dd0:	5d 87       	std	Y+13, r21	; 0x0d
    1dd2:	30 91 25 61 	lds	r19, 0x6125	; 0x806125 <uxTopReadyPriority>
    1dd6:	32 17       	cp	r19, r18
    1dd8:	10 f4       	brcc	.+4      	; 0x1dde <xTaskPriorityDisinherit+0x76>
    1dda:	20 93 25 61 	sts	0x6125, r18	; 0x806125 <uxTopReadyPriority>
    1dde:	9c 01       	movw	r18, r24
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	82 0f       	add	r24, r18
    1dee:	93 1f       	adc	r25, r19
    1df0:	b8 01       	movw	r22, r16
    1df2:	85 5a       	subi	r24, 0xA5	; 165
    1df4:	9e 49       	sbci	r25, 0x9E	; 158
    1df6:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret
    1e06:	6f e7       	ldi	r22, 0x7F	; 127
    1e08:	7f e0       	ldi	r23, 0x0F	; 15
    1e0a:	84 e2       	ldi	r24, 0x24	; 36
    1e0c:	90 e2       	ldi	r25, 0x20	; 32
    1e0e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1e12:	8c a1       	ldd	r24, Y+36	; 0x24
    1e14:	c0 cf       	rjmp	.-128    	; 0x1d96 <xTaskPriorityDisinherit+0x2e>

00001e16 <vTaskPriorityDisinheritAfterTimeout>:
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	79 f0       	breq	.+30     	; 0x1e40 <vTaskPriorityDisinheritAfterTimeout+0x2a>
    1e22:	16 2f       	mov	r17, r22
    1e24:	ec 01       	movw	r28, r24
    1e26:	8c a1       	ldd	r24, Y+36	; 0x24
    1e28:	88 23       	and	r24, r24
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <vTaskPriorityDisinheritAfterTimeout+0x18>
    1e2c:	54 c0       	rjmp	.+168    	; 0x1ed6 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    1e2e:	0b a1       	ldd	r16, Y+35	; 0x23
    1e30:	01 17       	cp	r16, r17
    1e32:	58 f0       	brcs	.+22     	; 0x1e4a <vTaskPriorityDisinheritAfterTimeout+0x34>
    1e34:	8e 89       	ldd	r24, Y+22	; 0x16
    1e36:	80 17       	cp	r24, r16
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <vTaskPriorityDisinheritAfterTimeout+0x2a>
    1e3a:	9c a1       	ldd	r25, Y+36	; 0x24
    1e3c:	91 30       	cpi	r25, 0x01	; 1
    1e3e:	39 f0       	breq	.+14     	; 0x1e4e <vTaskPriorityDisinheritAfterTimeout+0x38>
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret
    1e4a:	01 2f       	mov	r16, r17
    1e4c:	f3 cf       	rjmp	.-26     	; 0x1e34 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    1e4e:	20 91 7f 61 	lds	r18, 0x617F	; 0x80617f <pxCurrentTCB>
    1e52:	30 91 80 61 	lds	r19, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1e56:	c2 17       	cp	r28, r18
    1e58:	d3 07       	cpc	r29, r19
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <vTaskPriorityDisinheritAfterTimeout+0x48>
    1e5c:	43 c0       	rjmp	.+134    	; 0x1ee4 <vTaskPriorityDisinheritAfterTimeout+0xce>
    1e5e:	0e 8b       	std	Y+22, r16	; 0x16
    1e60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e62:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e64:	37 fd       	sbrc	r19, 7
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    1e68:	24 e0       	ldi	r18, 0x04	; 4
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	20 1b       	sub	r18, r16
    1e6e:	31 09       	sbc	r19, r1
    1e70:	2c 87       	std	Y+12, r18	; 0x0c
    1e72:	3d 87       	std	Y+13, r19	; 0x0d
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9c 01       	movw	r18, r24
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	85 5a       	subi	r24, 0xA5	; 165
    1e8a:	9e 49       	sbci	r25, 0x9E	; 158
    1e8c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e8e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e90:	28 17       	cp	r18, r24
    1e92:	39 07       	cpc	r19, r25
    1e94:	a9 f6       	brne	.-86     	; 0x1e40 <vTaskPriorityDisinheritAfterTimeout+0x2a>
    1e96:	8e 01       	movw	r16, r28
    1e98:	0e 5f       	subi	r16, 0xFE	; 254
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1ea2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ea4:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    1ea8:	98 17       	cp	r25, r24
    1eaa:	10 f4       	brcc	.+4      	; 0x1eb0 <vTaskPriorityDisinheritAfterTimeout+0x9a>
    1eac:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9c 01       	movw	r18, r24
    1eb4:	22 0f       	add	r18, r18
    1eb6:	33 1f       	adc	r19, r19
    1eb8:	22 0f       	add	r18, r18
    1eba:	33 1f       	adc	r19, r19
    1ebc:	22 0f       	add	r18, r18
    1ebe:	33 1f       	adc	r19, r19
    1ec0:	82 0f       	add	r24, r18
    1ec2:	93 1f       	adc	r25, r19
    1ec4:	b8 01       	movw	r22, r16
    1ec6:	85 5a       	subi	r24, 0xA5	; 165
    1ec8:	9e 49       	sbci	r25, 0x9E	; 158
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	0c 94 8c 03 	jmp	0x718	; 0x718 <vListInsertEnd>
    1ed6:	6d ec       	ldi	r22, 0xCD	; 205
    1ed8:	7f e0       	ldi	r23, 0x0F	; 15
    1eda:	84 e2       	ldi	r24, 0x24	; 36
    1edc:	90 e2       	ldi	r25, 0x20	; 32
    1ede:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1ee2:	a5 cf       	rjmp	.-182    	; 0x1e2e <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ee4:	68 ee       	ldi	r22, 0xE8	; 232
    1ee6:	7f e0       	ldi	r23, 0x0F	; 15
    1ee8:	84 e2       	ldi	r24, 0x24	; 36
    1eea:	90 e2       	ldi	r25, 0x20	; 32
    1eec:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <vAssertCalled>
    1ef0:	8e 89       	ldd	r24, Y+22	; 0x16
    1ef2:	b5 cf       	rjmp	.-150    	; 0x1e5e <vTaskPriorityDisinheritAfterTimeout+0x48>

00001ef4 <pvTaskIncrementMutexHeldCount>:

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    1ef4:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    1ef8:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1efc:	89 2b       	or	r24, r25
    1efe:	39 f0       	breq	.+14     	; 0x1f0e <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    1f00:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1f04:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1f08:	84 a1       	ldd	r24, Z+36	; 0x24
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    1f0e:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    1f12:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
	}
    1f16:	08 95       	ret

00001f18 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    1f18:	08 95       	ret

00001f1a <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    1f1a:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    1f1c:	87 e6       	ldi	r24, 0x67	; 103
    1f1e:	90 e2       	ldi	r25, 0x20	; 32
    1f20:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
	CFG_ERR_LED();
    1f24:	80 e8       	ldi	r24, 0x80	; 128
    1f26:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    1f2a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f2e:	2f ef       	ldi	r18, 0xFF	; 255
    1f30:	33 ec       	ldi	r19, 0xC3	; 195
    1f32:	99 e0       	ldi	r25, 0x09	; 9
    1f34:	21 50       	subi	r18, 0x01	; 1
    1f36:	30 40       	sbci	r19, 0x00	; 0
    1f38:	90 40       	sbci	r25, 0x00	; 0
    1f3a:	e1 f7       	brne	.-8      	; 0x1f34 <vApplicationMallocFailedHook+0x1a>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <vApplicationMallocFailedHook+0x24>
    1f3e:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1f40:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1f44:	2f ef       	ldi	r18, 0xFF	; 255
    1f46:	33 ec       	ldi	r19, 0xC3	; 195
    1f48:	99 e0       	ldi	r25, 0x09	; 9
    1f4a:	21 50       	subi	r18, 0x01	; 1
    1f4c:	30 40       	sbci	r19, 0x00	; 0
    1f4e:	90 40       	sbci	r25, 0x00	; 0
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <vApplicationMallocFailedHook+0x30>
    1f52:	00 c0       	rjmp	.+0      	; 0x1f54 <vApplicationMallocFailedHook+0x3a>
    1f54:	00 00       	nop
    1f56:	e9 cf       	rjmp	.-46     	; 0x1f2a <vApplicationMallocFailedHook+0x10>

00001f58 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	c0 58       	subi	r28, 0x80	; 128
    1f62:	d1 09       	sbc	r29, r1
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    1f68:	f8 94       	cli
	CFG_ERR_LED();
    1f6a:	80 e8       	ldi	r24, 0x80	; 128
    1f6c:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    1f70:	7f 93       	push	r23
    1f72:	6f 93       	push	r22
    1f74:	29 e8       	ldi	r18, 0x89	; 137
    1f76:	30 e2       	ldi	r19, 0x20	; 32
    1f78:	3f 93       	push	r19
    1f7a:	2f 93       	push	r18
    1f7c:	1f 92       	push	r1
    1f7e:	8f 93       	push	r24
    1f80:	8e 01       	movw	r16, r28
    1f82:	0f 5f       	subi	r16, 0xFF	; 255
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	1f 93       	push	r17
    1f88:	0f 93       	push	r16
    1f8a:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <snprintf>
	DbgPrint(Dbg);
    1f8e:	c8 01       	movw	r24, r16
    1f90:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1f98:	80 e8       	ldi	r24, 0x80	; 128
    1f9a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	93 ed       	ldi	r25, 0xD3	; 211
    1fa2:	20 e3       	ldi	r18, 0x30	; 48
    1fa4:	31 50       	subi	r19, 0x01	; 1
    1fa6:	90 40       	sbci	r25, 0x00	; 0
    1fa8:	20 40       	sbci	r18, 0x00	; 0
    1faa:	e1 f7       	brne	.-8      	; 0x1fa4 <vApplicationStackOverflowHook+0x4c>
    1fac:	00 c0       	rjmp	.+0      	; 0x1fae <vApplicationStackOverflowHook+0x56>
    1fae:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    1fb0:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	93 ed       	ldi	r25, 0xD3	; 211
    1fb8:	20 e3       	ldi	r18, 0x30	; 48
    1fba:	31 50       	subi	r19, 0x01	; 1
    1fbc:	90 40       	sbci	r25, 0x00	; 0
    1fbe:	20 40       	sbci	r18, 0x00	; 0
    1fc0:	e1 f7       	brne	.-8      	; 0x1fba <vApplicationStackOverflowHook+0x62>
    1fc2:	00 c0       	rjmp	.+0      	; 0x1fc4 <vApplicationStackOverflowHook+0x6c>
    1fc4:	00 00       	nop
    1fc6:	e9 cf       	rjmp	.-46     	; 0x1f9a <vApplicationStackOverflowHook+0x42>

00001fc8 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	c0 58       	subi	r28, 0x80	; 128
    1fd2:	d1 09       	sbc	r29, r1
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    1fd8:	f8 94       	cli
	CFG_ERR_LED();
    1fda:	20 e8       	ldi	r18, 0x80	; 128
    1fdc:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    1fe0:	7f 93       	push	r23
    1fe2:	6f 93       	push	r22
    1fe4:	9f 93       	push	r25
    1fe6:	8f 93       	push	r24
    1fe8:	85 ea       	ldi	r24, 0xA5	; 165
    1fea:	90 e2       	ldi	r25, 0x20	; 32
    1fec:	9f 93       	push	r25
    1fee:	8f 93       	push	r24
    1ff0:	1f 92       	push	r1
    1ff2:	2f 93       	push	r18
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	0f 5f       	subi	r16, 0xFF	; 255
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	1f 93       	push	r17
    1ffc:	0f 93       	push	r16
    1ffe:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <snprintf>
	DbgPrint(Dbg);
    2002:	c8 01       	movw	r24, r16
    2004:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    200c:	80 e8       	ldi	r24, 0x80	; 128
    200e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	93 ec       	ldi	r25, 0xC3	; 195
    2016:	29 e0       	ldi	r18, 0x09	; 9
    2018:	31 50       	subi	r19, 0x01	; 1
    201a:	90 40       	sbci	r25, 0x00	; 0
    201c:	20 40       	sbci	r18, 0x00	; 0
    201e:	e1 f7       	brne	.-8      	; 0x2018 <vAssertCalled+0x50>
    2020:	00 c0       	rjmp	.+0      	; 0x2022 <vAssertCalled+0x5a>
    2022:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    2024:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	93 ed       	ldi	r25, 0xD3	; 211
    202c:	20 e3       	ldi	r18, 0x30	; 48
    202e:	31 50       	subi	r19, 0x01	; 1
    2030:	90 40       	sbci	r25, 0x00	; 0
    2032:	20 40       	sbci	r18, 0x00	; 0
    2034:	e1 f7       	brne	.-8      	; 0x202e <vAssertCalled+0x66>
    2036:	00 c0       	rjmp	.+0      	; 0x2038 <vAssertCalled+0x70>
    2038:	00 00       	nop
    203a:	e9 cf       	rjmp	.-46     	; 0x200e <vAssertCalled+0x46>

0000203c <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    203c:	0e 94 ca 01 	call	0x394	; 0x394 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    2040:	0e 94 96 02 	call	0x52c	; 0x52c <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    2044:	0e 94 30 11 	call	0x2260	; 0x2260 <DriverPowerInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0e 94 34 11 	call	0x2268	; 0x2268 <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    204e:	87 e0       	ldi	r24, 0x07	; 7
    2050:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    2054:	78 94       	sei
    2056:	2f ef       	ldi	r18, 0xFF	; 255
    2058:	89 ef       	ldi	r24, 0xF9	; 249
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	21 50       	subi	r18, 0x01	; 1
    205e:	80 40       	sbci	r24, 0x00	; 0
    2060:	90 40       	sbci	r25, 0x00	; 0
    2062:	e1 f7       	brne	.-8      	; 0x205c <main+0x20>
    2064:	00 c0       	rjmp	.+0      	; 0x2066 <main+0x2a>
    2066:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitTransferTasks();
    2068:	0e 94 0a 11 	call	0x2214	; 0x2214 <InitTransferTasks>

	vTaskStartScheduler();	//Start scheduler loop
    206c:	0e 94 8f 0b 	call	0x171e	; 0x171e <vTaskStartScheduler>

	return 0;
}
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	08 95       	ret

00002076 <WorkerSendTask>:
void WorkerSendTask(void *pvParameters)
{	
	while (1)
	{	
		xSemaphoreTake(TransferTaskMutex, portMAX_DELAY); // Nemen de mutex voor onbepaalde duur portMAX_DELAY = oneindig
		Data=0x10101010;
    2076:	80 e1       	ldi	r24, 0x10	; 16
    2078:	88 2e       	mov	r8, r24
    207a:	98 2c       	mov	r9, r8
    207c:	54 01       	movw	r10, r8
		xSemaphoreGive(TransferTaskMutex); // Geven de mutex terug
		xSemaphoreTake(TransferTaskMutex, portMAX_DELAY); // Nemen de mutex voor onbepaalde duur portMAX_DELAY = oneindig
		Data=0x20202020;
    207e:	90 e2       	ldi	r25, 0x20	; 32
    2080:	c9 2e       	mov	r12, r25
    2082:	dc 2c       	mov	r13, r12
    2084:	76 01       	movw	r14, r12

void WorkerSendTask(void *pvParameters)
{	
	while (1)
	{	
		xSemaphoreTake(TransferTaskMutex, portMAX_DELAY); // Nemen de mutex voor onbepaalde duur portMAX_DELAY = oneindig
    2086:	6f ef       	ldi	r22, 0xFF	; 255
    2088:	7f ef       	ldi	r23, 0xFF	; 255
    208a:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <TransferTaskMutex>
    208e:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <TransferTaskMutex+0x1>
    2092:	0e 94 02 08 	call	0x1004	; 0x1004 <xQueueSemaphoreTake>
		Data=0x10101010;
    2096:	80 92 81 61 	sts	0x6181, r8	; 0x806181 <Data>
    209a:	90 92 82 61 	sts	0x6182, r9	; 0x806182 <Data+0x1>
    209e:	a0 92 83 61 	sts	0x6183, r10	; 0x806183 <Data+0x2>
    20a2:	b0 92 84 61 	sts	0x6184, r11	; 0x806184 <Data+0x3>
		xSemaphoreGive(TransferTaskMutex); // Geven de mutex terug
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <TransferTaskMutex>
    20b4:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <TransferTaskMutex+0x1>
    20b8:	0e 94 19 07 	call	0xe32	; 0xe32 <xQueueGenericSend>
		xSemaphoreTake(TransferTaskMutex, portMAX_DELAY); // Nemen de mutex voor onbepaalde duur portMAX_DELAY = oneindig
    20bc:	6f ef       	ldi	r22, 0xFF	; 255
    20be:	7f ef       	ldi	r23, 0xFF	; 255
    20c0:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <TransferTaskMutex>
    20c4:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <TransferTaskMutex+0x1>
    20c8:	0e 94 02 08 	call	0x1004	; 0x1004 <xQueueSemaphoreTake>
		Data=0x20202020;
    20cc:	c0 92 81 61 	sts	0x6181, r12	; 0x806181 <Data>
    20d0:	d0 92 82 61 	sts	0x6182, r13	; 0x806182 <Data+0x1>
    20d4:	e0 92 83 61 	sts	0x6183, r14	; 0x806183 <Data+0x2>
    20d8:	f0 92 84 61 	sts	0x6184, r15	; 0x806184 <Data+0x3>
		xSemaphoreGive(TransferTaskMutex); // Geven de mutex terug
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <TransferTaskMutex>
    20ea:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <TransferTaskMutex+0x1>
    20ee:	0e 94 19 07 	call	0xe32	; 0xe32 <xQueueGenericSend>
    20f2:	c9 cf       	rjmp	.-110    	; 0x2086 <WorkerSendTask+0x10>

000020f4 <WorkerReceiveTask>:
	
	while(1)
	{
		Startwaarde = portGET_RUN_TIME_COUNTER_VALUE();
		xSemaphoreTake(TransferTaskMutex, portMAX_DELAY); // Nemen de mutex voor onbepaalde duur portMAX_DELAY = oneindig
		if (Data!=0x10101010 && Data!=0x20202020) printf ("Invalid Data value:%lx \r\n",Data);
    20f4:	05 ec       	ldi	r16, 0xC5	; 197
    20f6:	10 e2       	ldi	r17, 0x20	; 32
		xSemaphoreGive(TransferTaskMutex); // Geven de mutex terug
		printf("Tijd nodig: %d\r", portGET_RUN_TIME_COUNTER_VALUE() - Startwaarde); // Tijd nodig voor dit gedeelte afprinten
    20f8:	cf ed       	ldi	r28, 0xDF	; 223
    20fa:	d0 e2       	ldi	r29, 0x20	; 32
void WorkerReceiveTask(void *pvParameters)
{
	
	while(1)
	{
		Startwaarde = portGET_RUN_TIME_COUNTER_VALUE();
    20fc:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    2100:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    2104:	80 91 85 61 	lds	r24, 0x6185	; 0x806185 <StatsTimer>
    2108:	90 91 86 61 	lds	r25, 0x6186	; 0x806186 <StatsTimer+0x1>
    210c:	a0 91 87 61 	lds	r26, 0x6187	; 0x806187 <StatsTimer+0x2>
    2110:	b0 91 88 61 	lds	r27, 0x6188	; 0x806188 <StatsTimer+0x3>
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	a1 1d       	adc	r26, r1
    211a:	b1 1d       	adc	r27, r1
    211c:	80 93 89 61 	sts	0x6189, r24	; 0x806189 <Startwaarde>
    2120:	90 93 8a 61 	sts	0x618A, r25	; 0x80618a <Startwaarde+0x1>
    2124:	a0 93 8b 61 	sts	0x618B, r26	; 0x80618b <Startwaarde+0x2>
    2128:	b0 93 8c 61 	sts	0x618C, r27	; 0x80618c <Startwaarde+0x3>
		xSemaphoreTake(TransferTaskMutex, portMAX_DELAY); // Nemen de mutex voor onbepaalde duur portMAX_DELAY = oneindig
    212c:	6f ef       	ldi	r22, 0xFF	; 255
    212e:	7f ef       	ldi	r23, 0xFF	; 255
    2130:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <TransferTaskMutex>
    2134:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <TransferTaskMutex+0x1>
    2138:	0e 94 02 08 	call	0x1004	; 0x1004 <xQueueSemaphoreTake>
		if (Data!=0x10101010 && Data!=0x20202020) printf ("Invalid Data value:%lx \r\n",Data);
    213c:	80 91 81 61 	lds	r24, 0x6181	; 0x806181 <Data>
    2140:	90 91 82 61 	lds	r25, 0x6182	; 0x806182 <Data+0x1>
    2144:	a0 91 83 61 	lds	r26, 0x6183	; 0x806183 <Data+0x2>
    2148:	b0 91 84 61 	lds	r27, 0x6184	; 0x806184 <Data+0x3>
    214c:	80 31       	cpi	r24, 0x10	; 16
    214e:	90 41       	sbci	r25, 0x10	; 16
    2150:	a0 41       	sbci	r26, 0x10	; 16
    2152:	b0 41       	sbci	r27, 0x10	; 16
    2154:	19 f1       	breq	.+70     	; 0x219c <WorkerReceiveTask+0xa8>
    2156:	80 91 81 61 	lds	r24, 0x6181	; 0x806181 <Data>
    215a:	90 91 82 61 	lds	r25, 0x6182	; 0x806182 <Data+0x1>
    215e:	a0 91 83 61 	lds	r26, 0x6183	; 0x806183 <Data+0x2>
    2162:	b0 91 84 61 	lds	r27, 0x6184	; 0x806184 <Data+0x3>
    2166:	80 32       	cpi	r24, 0x20	; 32
    2168:	90 42       	sbci	r25, 0x20	; 32
    216a:	a0 42       	sbci	r26, 0x20	; 32
    216c:	b0 42       	sbci	r27, 0x20	; 32
    216e:	b1 f0       	breq	.+44     	; 0x219c <WorkerReceiveTask+0xa8>
    2170:	80 91 81 61 	lds	r24, 0x6181	; 0x806181 <Data>
    2174:	90 91 82 61 	lds	r25, 0x6182	; 0x806182 <Data+0x1>
    2178:	a0 91 83 61 	lds	r26, 0x6183	; 0x806183 <Data+0x2>
    217c:	b0 91 84 61 	lds	r27, 0x6184	; 0x806184 <Data+0x3>
    2180:	bf 93       	push	r27
    2182:	af 93       	push	r26
    2184:	9f 93       	push	r25
    2186:	8f 93       	push	r24
    2188:	1f 93       	push	r17
    218a:	0f 93       	push	r16
    218c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <printf>
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
		xSemaphoreGive(TransferTaskMutex); // Geven de mutex terug
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <TransferTaskMutex>
    21aa:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <TransferTaskMutex+0x1>
    21ae:	0e 94 19 07 	call	0xe32	; 0xe32 <xQueueGenericSend>
		printf("Tijd nodig: %d\r", portGET_RUN_TIME_COUNTER_VALUE() - Startwaarde); // Tijd nodig voor dit gedeelte afprinten
    21b2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    21b6:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    21ba:	40 91 85 61 	lds	r20, 0x6185	; 0x806185 <StatsTimer>
    21be:	50 91 86 61 	lds	r21, 0x6186	; 0x806186 <StatsTimer+0x1>
    21c2:	60 91 87 61 	lds	r22, 0x6187	; 0x806187 <StatsTimer+0x2>
    21c6:	70 91 88 61 	lds	r23, 0x6188	; 0x806188 <StatsTimer+0x3>
    21ca:	a0 e0       	ldi	r26, 0x00	; 0
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	c0 90 89 61 	lds	r12, 0x6189	; 0x806189 <Startwaarde>
    21d2:	d0 90 8a 61 	lds	r13, 0x618A	; 0x80618a <Startwaarde+0x1>
    21d6:	e0 90 8b 61 	lds	r14, 0x618B	; 0x80618b <Startwaarde+0x2>
    21da:	f0 90 8c 61 	lds	r15, 0x618C	; 0x80618c <Startwaarde+0x3>
    21de:	8c 19       	sub	r24, r12
    21e0:	9d 09       	sbc	r25, r13
    21e2:	ae 09       	sbc	r26, r14
    21e4:	bf 09       	sbc	r27, r15
    21e6:	84 0f       	add	r24, r20
    21e8:	95 1f       	adc	r25, r21
    21ea:	a6 1f       	adc	r26, r22
    21ec:	b7 1f       	adc	r27, r23
    21ee:	bf 93       	push	r27
    21f0:	af 93       	push	r26
    21f2:	9f 93       	push	r25
    21f4:	8f 93       	push	r24
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	0e 94 18 16 	call	0x2c30	; 0x2c30 <printf>
		vTaskDelay(1);
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <vTaskDelay>
	}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	74 cf       	rjmp	.-280    	; 0x20fc <WorkerReceiveTask+0x8>

00002214 <InitTransferTasks>:
void WorkerSendTask(void *pvParameters);
void WorkerReceiveTask(void *pvParameters);

//Function definitions
void InitTransferTasks()
{
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
	xTaskCreate( WorkerSendTask, "sendtask", 256, NULL, tskIDLE_PRIORITY+1, NULL );
    221a:	e1 2c       	mov	r14, r1
    221c:	f1 2c       	mov	r15, r1
    221e:	01 e0       	ldi	r16, 0x01	; 1
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	51 e0       	ldi	r21, 0x01	; 1
    2228:	6f ee       	ldi	r22, 0xEF	; 239
    222a:	70 e2       	ldi	r23, 0x20	; 32
    222c:	8b e3       	ldi	r24, 0x3B	; 59
    222e:	90 e1       	ldi	r25, 0x10	; 16
    2230:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
	xTaskCreate( WorkerReceiveTask, "receivetask", 256, NULL, tskIDLE_PRIORITY+2, NULL );
    2234:	02 e0       	ldi	r16, 0x02	; 2
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	51 e0       	ldi	r21, 0x01	; 1
    223e:	68 ef       	ldi	r22, 0xF8	; 248
    2240:	70 e2       	ldi	r23, 0x20	; 32
    2242:	8a e7       	ldi	r24, 0x7A	; 122
    2244:	90 e1       	ldi	r25, 0x10	; 16
    2246:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
	TransferTaskMutex = xSemaphoreCreateMutex(); // Creer mutex
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <xQueueCreateMutex>
    2250:	80 93 8d 61 	sts	0x618D, r24	; 0x80618d <TransferTaskMutex>
    2254:	90 93 8e 61 	sts	0x618E, r25	; 0x80618e <TransferTaskMutex+0x1>
}
    2258:	0f 91       	pop	r16
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	08 95       	ret

00002260 <DriverPowerInit>:
    2260:	80 e2       	ldi	r24, 0x20	; 32
    2262:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    2266:	08 95       	ret

00002268 <DriverPowerVccAuxSet>:
    2268:	81 11       	cpse	r24, r1
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <DriverPowerVccAuxSet+0xc>
    226c:	80 e2       	ldi	r24, 0x20	; 32
    226e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    2272:	08 95       	ret
    2274:	80 e2       	ldi	r24, 0x20	; 32
    2276:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    227a:	08 95       	ret

0000227c <vfprintf>:
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	60 97       	sbiw	r28, 0x10	; 16
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	7c 01       	movw	r14, r24
    22ac:	1b 01       	movw	r2, r22
    22ae:	6a 01       	movw	r12, r20
    22b0:	fc 01       	movw	r30, r24
    22b2:	16 82       	std	Z+6, r1	; 0x06
    22b4:	17 82       	std	Z+7, r1	; 0x07
    22b6:	83 81       	ldd	r24, Z+3	; 0x03
    22b8:	81 ff       	sbrs	r24, 1
    22ba:	44 c3       	rjmp	.+1672   	; 0x2944 <vfprintf+0x6c8>
    22bc:	9e 01       	movw	r18, r28
    22be:	2f 5f       	subi	r18, 0xFF	; 255
    22c0:	3f 4f       	sbci	r19, 0xFF	; 255
    22c2:	39 01       	movw	r6, r18
    22c4:	f7 01       	movw	r30, r14
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	f1 01       	movw	r30, r2
    22ca:	93 fd       	sbrc	r25, 3
    22cc:	85 91       	lpm	r24, Z+
    22ce:	93 ff       	sbrs	r25, 3
    22d0:	81 91       	ld	r24, Z+
    22d2:	1f 01       	movw	r2, r30
    22d4:	88 23       	and	r24, r24
    22d6:	09 f4       	brne	.+2      	; 0x22da <vfprintf+0x5e>
    22d8:	31 c3       	rjmp	.+1634   	; 0x293c <vfprintf+0x6c0>
    22da:	85 32       	cpi	r24, 0x25	; 37
    22dc:	39 f4       	brne	.+14     	; 0x22ec <vfprintf+0x70>
    22de:	93 fd       	sbrc	r25, 3
    22e0:	85 91       	lpm	r24, Z+
    22e2:	93 ff       	sbrs	r25, 3
    22e4:	81 91       	ld	r24, Z+
    22e6:	1f 01       	movw	r2, r30
    22e8:	85 32       	cpi	r24, 0x25	; 37
    22ea:	39 f4       	brne	.+14     	; 0x22fa <vfprintf+0x7e>
    22ec:	b7 01       	movw	r22, r14
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    22f4:	56 01       	movw	r10, r12
    22f6:	65 01       	movw	r12, r10
    22f8:	e5 cf       	rjmp	.-54     	; 0x22c4 <vfprintf+0x48>
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	51 2c       	mov	r5, r1
    22fe:	91 2c       	mov	r9, r1
    2300:	ff e1       	ldi	r31, 0x1F	; 31
    2302:	f9 15       	cp	r31, r9
    2304:	d8 f0       	brcs	.+54     	; 0x233c <vfprintf+0xc0>
    2306:	8b 32       	cpi	r24, 0x2B	; 43
    2308:	79 f0       	breq	.+30     	; 0x2328 <vfprintf+0xac>
    230a:	38 f4       	brcc	.+14     	; 0x231a <vfprintf+0x9e>
    230c:	80 32       	cpi	r24, 0x20	; 32
    230e:	79 f0       	breq	.+30     	; 0x232e <vfprintf+0xb2>
    2310:	83 32       	cpi	r24, 0x23	; 35
    2312:	a1 f4       	brne	.+40     	; 0x233c <vfprintf+0xc0>
    2314:	f9 2d       	mov	r31, r9
    2316:	f0 61       	ori	r31, 0x10	; 16
    2318:	2e c0       	rjmp	.+92     	; 0x2376 <vfprintf+0xfa>
    231a:	8d 32       	cpi	r24, 0x2D	; 45
    231c:	61 f0       	breq	.+24     	; 0x2336 <vfprintf+0xba>
    231e:	80 33       	cpi	r24, 0x30	; 48
    2320:	69 f4       	brne	.+26     	; 0x233c <vfprintf+0xc0>
    2322:	29 2d       	mov	r18, r9
    2324:	21 60       	ori	r18, 0x01	; 1
    2326:	2d c0       	rjmp	.+90     	; 0x2382 <vfprintf+0x106>
    2328:	39 2d       	mov	r19, r9
    232a:	32 60       	ori	r19, 0x02	; 2
    232c:	93 2e       	mov	r9, r19
    232e:	89 2d       	mov	r24, r9
    2330:	84 60       	ori	r24, 0x04	; 4
    2332:	98 2e       	mov	r9, r24
    2334:	2a c0       	rjmp	.+84     	; 0x238a <vfprintf+0x10e>
    2336:	e9 2d       	mov	r30, r9
    2338:	e8 60       	ori	r30, 0x08	; 8
    233a:	15 c0       	rjmp	.+42     	; 0x2366 <vfprintf+0xea>
    233c:	97 fc       	sbrc	r9, 7
    233e:	2d c0       	rjmp	.+90     	; 0x239a <vfprintf+0x11e>
    2340:	20 ed       	ldi	r18, 0xD0	; 208
    2342:	28 0f       	add	r18, r24
    2344:	2a 30       	cpi	r18, 0x0A	; 10
    2346:	88 f4       	brcc	.+34     	; 0x236a <vfprintf+0xee>
    2348:	96 fe       	sbrs	r9, 6
    234a:	06 c0       	rjmp	.+12     	; 0x2358 <vfprintf+0xdc>
    234c:	3a e0       	ldi	r19, 0x0A	; 10
    234e:	13 9f       	mul	r17, r19
    2350:	20 0d       	add	r18, r0
    2352:	11 24       	eor	r1, r1
    2354:	12 2f       	mov	r17, r18
    2356:	19 c0       	rjmp	.+50     	; 0x238a <vfprintf+0x10e>
    2358:	8a e0       	ldi	r24, 0x0A	; 10
    235a:	58 9e       	mul	r5, r24
    235c:	20 0d       	add	r18, r0
    235e:	11 24       	eor	r1, r1
    2360:	52 2e       	mov	r5, r18
    2362:	e9 2d       	mov	r30, r9
    2364:	e0 62       	ori	r30, 0x20	; 32
    2366:	9e 2e       	mov	r9, r30
    2368:	10 c0       	rjmp	.+32     	; 0x238a <vfprintf+0x10e>
    236a:	8e 32       	cpi	r24, 0x2E	; 46
    236c:	31 f4       	brne	.+12     	; 0x237a <vfprintf+0xfe>
    236e:	96 fc       	sbrc	r9, 6
    2370:	e5 c2       	rjmp	.+1482   	; 0x293c <vfprintf+0x6c0>
    2372:	f9 2d       	mov	r31, r9
    2374:	f0 64       	ori	r31, 0x40	; 64
    2376:	9f 2e       	mov	r9, r31
    2378:	08 c0       	rjmp	.+16     	; 0x238a <vfprintf+0x10e>
    237a:	8c 36       	cpi	r24, 0x6C	; 108
    237c:	21 f4       	brne	.+8      	; 0x2386 <vfprintf+0x10a>
    237e:	29 2d       	mov	r18, r9
    2380:	20 68       	ori	r18, 0x80	; 128
    2382:	92 2e       	mov	r9, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <vfprintf+0x10e>
    2386:	88 36       	cpi	r24, 0x68	; 104
    2388:	41 f4       	brne	.+16     	; 0x239a <vfprintf+0x11e>
    238a:	f1 01       	movw	r30, r2
    238c:	93 fd       	sbrc	r25, 3
    238e:	85 91       	lpm	r24, Z+
    2390:	93 ff       	sbrs	r25, 3
    2392:	81 91       	ld	r24, Z+
    2394:	1f 01       	movw	r2, r30
    2396:	81 11       	cpse	r24, r1
    2398:	b3 cf       	rjmp	.-154    	; 0x2300 <vfprintf+0x84>
    239a:	9b eb       	ldi	r25, 0xBB	; 187
    239c:	98 0f       	add	r25, r24
    239e:	93 30       	cpi	r25, 0x03	; 3
    23a0:	20 f4       	brcc	.+8      	; 0x23aa <vfprintf+0x12e>
    23a2:	99 2d       	mov	r25, r9
    23a4:	90 61       	ori	r25, 0x10	; 16
    23a6:	80 5e       	subi	r24, 0xE0	; 224
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <vfprintf+0x13c>
    23aa:	9b e9       	ldi	r25, 0x9B	; 155
    23ac:	98 0f       	add	r25, r24
    23ae:	93 30       	cpi	r25, 0x03	; 3
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <vfprintf+0x138>
    23b2:	66 c1       	rjmp	.+716    	; 0x2680 <vfprintf+0x404>
    23b4:	99 2d       	mov	r25, r9
    23b6:	9f 7e       	andi	r25, 0xEF	; 239
    23b8:	96 ff       	sbrs	r25, 6
    23ba:	16 e0       	ldi	r17, 0x06	; 6
    23bc:	9f 73       	andi	r25, 0x3F	; 63
    23be:	99 2e       	mov	r9, r25
    23c0:	85 36       	cpi	r24, 0x65	; 101
    23c2:	19 f4       	brne	.+6      	; 0x23ca <vfprintf+0x14e>
    23c4:	90 64       	ori	r25, 0x40	; 64
    23c6:	99 2e       	mov	r9, r25
    23c8:	08 c0       	rjmp	.+16     	; 0x23da <vfprintf+0x15e>
    23ca:	86 36       	cpi	r24, 0x66	; 102
    23cc:	21 f4       	brne	.+8      	; 0x23d6 <vfprintf+0x15a>
    23ce:	39 2f       	mov	r19, r25
    23d0:	30 68       	ori	r19, 0x80	; 128
    23d2:	93 2e       	mov	r9, r19
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <vfprintf+0x15e>
    23d6:	11 11       	cpse	r17, r1
    23d8:	11 50       	subi	r17, 0x01	; 1
    23da:	97 fe       	sbrs	r9, 7
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <vfprintf+0x170>
    23de:	1c 33       	cpi	r17, 0x3C	; 60
    23e0:	50 f4       	brcc	.+20     	; 0x23f6 <vfprintf+0x17a>
    23e2:	44 24       	eor	r4, r4
    23e4:	43 94       	inc	r4
    23e6:	41 0e       	add	r4, r17
    23e8:	27 e0       	ldi	r18, 0x07	; 7
    23ea:	0b c0       	rjmp	.+22     	; 0x2402 <vfprintf+0x186>
    23ec:	18 30       	cpi	r17, 0x08	; 8
    23ee:	38 f0       	brcs	.+14     	; 0x23fe <vfprintf+0x182>
    23f0:	27 e0       	ldi	r18, 0x07	; 7
    23f2:	17 e0       	ldi	r17, 0x07	; 7
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <vfprintf+0x184>
    23f6:	27 e0       	ldi	r18, 0x07	; 7
    23f8:	9c e3       	ldi	r25, 0x3C	; 60
    23fa:	49 2e       	mov	r4, r25
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <vfprintf+0x186>
    23fe:	21 2f       	mov	r18, r17
    2400:	41 2c       	mov	r4, r1
    2402:	56 01       	movw	r10, r12
    2404:	84 e0       	ldi	r24, 0x04	; 4
    2406:	a8 0e       	add	r10, r24
    2408:	b1 1c       	adc	r11, r1
    240a:	f6 01       	movw	r30, r12
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	04 2d       	mov	r16, r4
    2416:	a3 01       	movw	r20, r6
    2418:	0e 94 de 14 	call	0x29bc	; 0x29bc <__ftoa_engine>
    241c:	6c 01       	movw	r12, r24
    241e:	f9 81       	ldd	r31, Y+1	; 0x01
    2420:	fc 87       	std	Y+12, r31	; 0x0c
    2422:	f0 ff       	sbrs	r31, 0
    2424:	02 c0       	rjmp	.+4      	; 0x242a <vfprintf+0x1ae>
    2426:	f3 ff       	sbrs	r31, 3
    2428:	06 c0       	rjmp	.+12     	; 0x2436 <vfprintf+0x1ba>
    242a:	91 fc       	sbrc	r9, 1
    242c:	06 c0       	rjmp	.+12     	; 0x243a <vfprintf+0x1be>
    242e:	92 fe       	sbrs	r9, 2
    2430:	06 c0       	rjmp	.+12     	; 0x243e <vfprintf+0x1c2>
    2432:	00 e2       	ldi	r16, 0x20	; 32
    2434:	05 c0       	rjmp	.+10     	; 0x2440 <vfprintf+0x1c4>
    2436:	0d e2       	ldi	r16, 0x2D	; 45
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <vfprintf+0x1c4>
    243a:	0b e2       	ldi	r16, 0x2B	; 43
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <vfprintf+0x1c4>
    243e:	00 e0       	ldi	r16, 0x00	; 0
    2440:	8c 85       	ldd	r24, Y+12	; 0x0c
    2442:	8c 70       	andi	r24, 0x0C	; 12
    2444:	19 f0       	breq	.+6      	; 0x244c <vfprintf+0x1d0>
    2446:	01 11       	cpse	r16, r1
    2448:	5a c2       	rjmp	.+1204   	; 0x28fe <vfprintf+0x682>
    244a:	9b c2       	rjmp	.+1334   	; 0x2982 <vfprintf+0x706>
    244c:	97 fe       	sbrs	r9, 7
    244e:	10 c0       	rjmp	.+32     	; 0x2470 <vfprintf+0x1f4>
    2450:	4c 0c       	add	r4, r12
    2452:	fc 85       	ldd	r31, Y+12	; 0x0c
    2454:	f4 ff       	sbrs	r31, 4
    2456:	04 c0       	rjmp	.+8      	; 0x2460 <vfprintf+0x1e4>
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	81 33       	cpi	r24, 0x31	; 49
    245c:	09 f4       	brne	.+2      	; 0x2460 <vfprintf+0x1e4>
    245e:	4a 94       	dec	r4
    2460:	14 14       	cp	r1, r4
    2462:	74 f5       	brge	.+92     	; 0x24c0 <vfprintf+0x244>
    2464:	28 e0       	ldi	r18, 0x08	; 8
    2466:	24 15       	cp	r18, r4
    2468:	78 f5       	brcc	.+94     	; 0x24c8 <vfprintf+0x24c>
    246a:	88 e0       	ldi	r24, 0x08	; 8
    246c:	48 2e       	mov	r4, r24
    246e:	2c c0       	rjmp	.+88     	; 0x24c8 <vfprintf+0x24c>
    2470:	96 fc       	sbrc	r9, 6
    2472:	2a c0       	rjmp	.+84     	; 0x24c8 <vfprintf+0x24c>
    2474:	81 2f       	mov	r24, r17
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	8c 15       	cp	r24, r12
    247a:	9d 05       	cpc	r25, r13
    247c:	9c f0       	brlt	.+38     	; 0x24a4 <vfprintf+0x228>
    247e:	3c ef       	ldi	r19, 0xFC	; 252
    2480:	c3 16       	cp	r12, r19
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	d3 06       	cpc	r13, r19
    2486:	74 f0       	brlt	.+28     	; 0x24a4 <vfprintf+0x228>
    2488:	89 2d       	mov	r24, r9
    248a:	80 68       	ori	r24, 0x80	; 128
    248c:	98 2e       	mov	r9, r24
    248e:	0a c0       	rjmp	.+20     	; 0x24a4 <vfprintf+0x228>
    2490:	e2 e0       	ldi	r30, 0x02	; 2
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	ec 0f       	add	r30, r28
    2496:	fd 1f       	adc	r31, r29
    2498:	e1 0f       	add	r30, r17
    249a:	f1 1d       	adc	r31, r1
    249c:	80 81       	ld	r24, Z
    249e:	80 33       	cpi	r24, 0x30	; 48
    24a0:	19 f4       	brne	.+6      	; 0x24a8 <vfprintf+0x22c>
    24a2:	11 50       	subi	r17, 0x01	; 1
    24a4:	11 11       	cpse	r17, r1
    24a6:	f4 cf       	rjmp	.-24     	; 0x2490 <vfprintf+0x214>
    24a8:	97 fe       	sbrs	r9, 7
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <vfprintf+0x24c>
    24ac:	44 24       	eor	r4, r4
    24ae:	43 94       	inc	r4
    24b0:	41 0e       	add	r4, r17
    24b2:	81 2f       	mov	r24, r17
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	c8 16       	cp	r12, r24
    24b8:	d9 06       	cpc	r13, r25
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <vfprintf+0x24a>
    24bc:	1c 19       	sub	r17, r12
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <vfprintf+0x24c>
    24c0:	44 24       	eor	r4, r4
    24c2:	43 94       	inc	r4
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <vfprintf+0x24c>
    24c6:	10 e0       	ldi	r17, 0x00	; 0
    24c8:	97 fe       	sbrs	r9, 7
    24ca:	06 c0       	rjmp	.+12     	; 0x24d8 <vfprintf+0x25c>
    24cc:	1c 14       	cp	r1, r12
    24ce:	1d 04       	cpc	r1, r13
    24d0:	34 f4       	brge	.+12     	; 0x24de <vfprintf+0x262>
    24d2:	c6 01       	movw	r24, r12
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	05 c0       	rjmp	.+10     	; 0x24e2 <vfprintf+0x266>
    24d8:	85 e0       	ldi	r24, 0x05	; 5
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <vfprintf+0x266>
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	01 11       	cpse	r16, r1
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	11 23       	and	r17, r17
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <vfprintf+0x27a>
    24ea:	21 2f       	mov	r18, r17
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	2f 5f       	subi	r18, 0xFF	; 255
    24f0:	3f 4f       	sbci	r19, 0xFF	; 255
    24f2:	82 0f       	add	r24, r18
    24f4:	93 1f       	adc	r25, r19
    24f6:	25 2d       	mov	r18, r5
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	82 17       	cp	r24, r18
    24fc:	93 07       	cpc	r25, r19
    24fe:	14 f4       	brge	.+4      	; 0x2504 <vfprintf+0x288>
    2500:	58 1a       	sub	r5, r24
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <vfprintf+0x28a>
    2504:	51 2c       	mov	r5, r1
    2506:	89 2d       	mov	r24, r9
    2508:	89 70       	andi	r24, 0x09	; 9
    250a:	49 f4       	brne	.+18     	; 0x251e <vfprintf+0x2a2>
    250c:	55 20       	and	r5, r5
    250e:	39 f0       	breq	.+14     	; 0x251e <vfprintf+0x2a2>
    2510:	b7 01       	movw	r22, r14
    2512:	80 e2       	ldi	r24, 0x20	; 32
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    251a:	5a 94       	dec	r5
    251c:	f7 cf       	rjmp	.-18     	; 0x250c <vfprintf+0x290>
    251e:	00 23       	and	r16, r16
    2520:	29 f0       	breq	.+10     	; 0x252c <vfprintf+0x2b0>
    2522:	b7 01       	movw	r22, r14
    2524:	80 2f       	mov	r24, r16
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    252c:	93 fc       	sbrc	r9, 3
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <vfprintf+0x2c6>
    2530:	55 20       	and	r5, r5
    2532:	39 f0       	breq	.+14     	; 0x2542 <vfprintf+0x2c6>
    2534:	b7 01       	movw	r22, r14
    2536:	80 e3       	ldi	r24, 0x30	; 48
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    253e:	5a 94       	dec	r5
    2540:	f7 cf       	rjmp	.-18     	; 0x2530 <vfprintf+0x2b4>
    2542:	97 fe       	sbrs	r9, 7
    2544:	4c c0       	rjmp	.+152    	; 0x25de <vfprintf+0x362>
    2546:	46 01       	movw	r8, r12
    2548:	d7 fe       	sbrs	r13, 7
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <vfprintf+0x2d4>
    254c:	81 2c       	mov	r8, r1
    254e:	91 2c       	mov	r9, r1
    2550:	c6 01       	movw	r24, r12
    2552:	88 19       	sub	r24, r8
    2554:	99 09       	sbc	r25, r9
    2556:	f3 01       	movw	r30, r6
    2558:	e8 0f       	add	r30, r24
    255a:	f9 1f       	adc	r31, r25
    255c:	ed 87       	std	Y+13, r30	; 0x0d
    255e:	fe 87       	std	Y+14, r31	; 0x0e
    2560:	96 01       	movw	r18, r12
    2562:	24 19       	sub	r18, r4
    2564:	31 09       	sbc	r19, r1
    2566:	2f 87       	std	Y+15, r18	; 0x0f
    2568:	38 8b       	std	Y+16, r19	; 0x10
    256a:	01 2f       	mov	r16, r17
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	11 95       	neg	r17
    2570:	01 95       	neg	r16
    2572:	11 09       	sbc	r17, r1
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	83 16       	cp	r8, r19
    2578:	93 06       	cpc	r9, r19
    257a:	29 f4       	brne	.+10     	; 0x2586 <vfprintf+0x30a>
    257c:	b7 01       	movw	r22, r14
    257e:	8e e2       	ldi	r24, 0x2E	; 46
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2586:	c8 14       	cp	r12, r8
    2588:	d9 04       	cpc	r13, r9
    258a:	4c f0       	brlt	.+18     	; 0x259e <vfprintf+0x322>
    258c:	8f 85       	ldd	r24, Y+15	; 0x0f
    258e:	98 89       	ldd	r25, Y+16	; 0x10
    2590:	88 15       	cp	r24, r8
    2592:	99 05       	cpc	r25, r9
    2594:	24 f4       	brge	.+8      	; 0x259e <vfprintf+0x322>
    2596:	ed 85       	ldd	r30, Y+13	; 0x0d
    2598:	fe 85       	ldd	r31, Y+14	; 0x0e
    259a:	81 81       	ldd	r24, Z+1	; 0x01
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <vfprintf+0x324>
    259e:	80 e3       	ldi	r24, 0x30	; 48
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	8f 1a       	sub	r8, r31
    25a4:	91 08       	sbc	r9, r1
    25a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    25a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    25aa:	2f 5f       	subi	r18, 0xFF	; 255
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	2d 87       	std	Y+13, r18	; 0x0d
    25b0:	3e 87       	std	Y+14, r19	; 0x0e
    25b2:	80 16       	cp	r8, r16
    25b4:	91 06       	cpc	r9, r17
    25b6:	2c f0       	brlt	.+10     	; 0x25c2 <vfprintf+0x346>
    25b8:	b7 01       	movw	r22, r14
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    25c0:	d9 cf       	rjmp	.-78     	; 0x2574 <vfprintf+0x2f8>
    25c2:	c8 14       	cp	r12, r8
    25c4:	d9 04       	cpc	r13, r9
    25c6:	41 f4       	brne	.+16     	; 0x25d8 <vfprintf+0x35c>
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	96 33       	cpi	r25, 0x36	; 54
    25cc:	20 f4       	brcc	.+8      	; 0x25d6 <vfprintf+0x35a>
    25ce:	95 33       	cpi	r25, 0x35	; 53
    25d0:	19 f4       	brne	.+6      	; 0x25d8 <vfprintf+0x35c>
    25d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    25d4:	34 ff       	sbrs	r19, 4
    25d6:	81 e3       	ldi	r24, 0x31	; 49
    25d8:	b7 01       	movw	r22, r14
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	4e c0       	rjmp	.+156    	; 0x267a <vfprintf+0x3fe>
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	81 33       	cpi	r24, 0x31	; 49
    25e2:	19 f0       	breq	.+6      	; 0x25ea <vfprintf+0x36e>
    25e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    25e6:	9f 7e       	andi	r25, 0xEF	; 239
    25e8:	9c 87       	std	Y+12, r25	; 0x0c
    25ea:	b7 01       	movw	r22, r14
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    25f2:	11 11       	cpse	r17, r1
    25f4:	05 c0       	rjmp	.+10     	; 0x2600 <vfprintf+0x384>
    25f6:	94 fc       	sbrc	r9, 4
    25f8:	18 c0       	rjmp	.+48     	; 0x262a <vfprintf+0x3ae>
    25fa:	85 e6       	ldi	r24, 0x65	; 101
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	17 c0       	rjmp	.+46     	; 0x262e <vfprintf+0x3b2>
    2600:	b7 01       	movw	r22, r14
    2602:	8e e2       	ldi	r24, 0x2E	; 46
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    260a:	1e 5f       	subi	r17, 0xFE	; 254
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	01 e0       	ldi	r16, 0x01	; 1
    2610:	08 0f       	add	r16, r24
    2612:	f3 01       	movw	r30, r6
    2614:	e8 0f       	add	r30, r24
    2616:	f1 1d       	adc	r31, r1
    2618:	80 81       	ld	r24, Z
    261a:	b7 01       	movw	r22, r14
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2622:	80 2f       	mov	r24, r16
    2624:	01 13       	cpse	r16, r17
    2626:	f3 cf       	rjmp	.-26     	; 0x260e <vfprintf+0x392>
    2628:	e6 cf       	rjmp	.-52     	; 0x25f6 <vfprintf+0x37a>
    262a:	85 e4       	ldi	r24, 0x45	; 69
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	b7 01       	movw	r22, r14
    2630:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2634:	d7 fc       	sbrc	r13, 7
    2636:	06 c0       	rjmp	.+12     	; 0x2644 <vfprintf+0x3c8>
    2638:	c1 14       	cp	r12, r1
    263a:	d1 04       	cpc	r13, r1
    263c:	41 f4       	brne	.+16     	; 0x264e <vfprintf+0x3d2>
    263e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2640:	e4 ff       	sbrs	r30, 4
    2642:	05 c0       	rjmp	.+10     	; 0x264e <vfprintf+0x3d2>
    2644:	d1 94       	neg	r13
    2646:	c1 94       	neg	r12
    2648:	d1 08       	sbc	r13, r1
    264a:	8d e2       	ldi	r24, 0x2D	; 45
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <vfprintf+0x3d4>
    264e:	8b e2       	ldi	r24, 0x2B	; 43
    2650:	b7 01       	movw	r22, r14
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2658:	80 e3       	ldi	r24, 0x30	; 48
    265a:	2a e0       	ldi	r18, 0x0A	; 10
    265c:	c2 16       	cp	r12, r18
    265e:	d1 04       	cpc	r13, r1
    2660:	2c f0       	brlt	.+10     	; 0x266c <vfprintf+0x3f0>
    2662:	8f 5f       	subi	r24, 0xFF	; 255
    2664:	fa e0       	ldi	r31, 0x0A	; 10
    2666:	cf 1a       	sub	r12, r31
    2668:	d1 08       	sbc	r13, r1
    266a:	f7 cf       	rjmp	.-18     	; 0x265a <vfprintf+0x3de>
    266c:	b7 01       	movw	r22, r14
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2674:	b7 01       	movw	r22, r14
    2676:	c6 01       	movw	r24, r12
    2678:	c0 96       	adiw	r24, 0x30	; 48
    267a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    267e:	54 c1       	rjmp	.+680    	; 0x2928 <vfprintf+0x6ac>
    2680:	83 36       	cpi	r24, 0x63	; 99
    2682:	31 f0       	breq	.+12     	; 0x2690 <vfprintf+0x414>
    2684:	83 37       	cpi	r24, 0x73	; 115
    2686:	79 f0       	breq	.+30     	; 0x26a6 <vfprintf+0x42a>
    2688:	83 35       	cpi	r24, 0x53	; 83
    268a:	09 f0       	breq	.+2      	; 0x268e <vfprintf+0x412>
    268c:	56 c0       	rjmp	.+172    	; 0x273a <vfprintf+0x4be>
    268e:	20 c0       	rjmp	.+64     	; 0x26d0 <vfprintf+0x454>
    2690:	56 01       	movw	r10, r12
    2692:	32 e0       	ldi	r19, 0x02	; 2
    2694:	a3 0e       	add	r10, r19
    2696:	b1 1c       	adc	r11, r1
    2698:	f6 01       	movw	r30, r12
    269a:	80 81       	ld	r24, Z
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	01 e0       	ldi	r16, 0x01	; 1
    26a0:	10 e0       	ldi	r17, 0x00	; 0
    26a2:	63 01       	movw	r12, r6
    26a4:	12 c0       	rjmp	.+36     	; 0x26ca <vfprintf+0x44e>
    26a6:	56 01       	movw	r10, r12
    26a8:	f2 e0       	ldi	r31, 0x02	; 2
    26aa:	af 0e       	add	r10, r31
    26ac:	b1 1c       	adc	r11, r1
    26ae:	f6 01       	movw	r30, r12
    26b0:	c0 80       	ld	r12, Z
    26b2:	d1 80       	ldd	r13, Z+1	; 0x01
    26b4:	96 fe       	sbrs	r9, 6
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <vfprintf+0x442>
    26b8:	61 2f       	mov	r22, r17
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <vfprintf+0x446>
    26be:	6f ef       	ldi	r22, 0xFF	; 255
    26c0:	7f ef       	ldi	r23, 0xFF	; 255
    26c2:	c6 01       	movw	r24, r12
    26c4:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <strnlen>
    26c8:	8c 01       	movw	r16, r24
    26ca:	f9 2d       	mov	r31, r9
    26cc:	ff 77       	andi	r31, 0x7F	; 127
    26ce:	14 c0       	rjmp	.+40     	; 0x26f8 <vfprintf+0x47c>
    26d0:	56 01       	movw	r10, r12
    26d2:	22 e0       	ldi	r18, 0x02	; 2
    26d4:	a2 0e       	add	r10, r18
    26d6:	b1 1c       	adc	r11, r1
    26d8:	f6 01       	movw	r30, r12
    26da:	c0 80       	ld	r12, Z
    26dc:	d1 80       	ldd	r13, Z+1	; 0x01
    26de:	96 fe       	sbrs	r9, 6
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <vfprintf+0x46c>
    26e2:	61 2f       	mov	r22, r17
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <vfprintf+0x470>
    26e8:	6f ef       	ldi	r22, 0xFF	; 255
    26ea:	7f ef       	ldi	r23, 0xFF	; 255
    26ec:	c6 01       	movw	r24, r12
    26ee:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strnlen_P>
    26f2:	8c 01       	movw	r16, r24
    26f4:	f9 2d       	mov	r31, r9
    26f6:	f0 68       	ori	r31, 0x80	; 128
    26f8:	9f 2e       	mov	r9, r31
    26fa:	f3 fd       	sbrc	r31, 3
    26fc:	1a c0       	rjmp	.+52     	; 0x2732 <vfprintf+0x4b6>
    26fe:	85 2d       	mov	r24, r5
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	08 17       	cp	r16, r24
    2704:	19 07       	cpc	r17, r25
    2706:	a8 f4       	brcc	.+42     	; 0x2732 <vfprintf+0x4b6>
    2708:	b7 01       	movw	r22, r14
    270a:	80 e2       	ldi	r24, 0x20	; 32
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2712:	5a 94       	dec	r5
    2714:	f4 cf       	rjmp	.-24     	; 0x26fe <vfprintf+0x482>
    2716:	f6 01       	movw	r30, r12
    2718:	97 fc       	sbrc	r9, 7
    271a:	85 91       	lpm	r24, Z+
    271c:	97 fe       	sbrs	r9, 7
    271e:	81 91       	ld	r24, Z+
    2720:	6f 01       	movw	r12, r30
    2722:	b7 01       	movw	r22, r14
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    272a:	51 10       	cpse	r5, r1
    272c:	5a 94       	dec	r5
    272e:	01 50       	subi	r16, 0x01	; 1
    2730:	11 09       	sbc	r17, r1
    2732:	01 15       	cp	r16, r1
    2734:	11 05       	cpc	r17, r1
    2736:	79 f7       	brne	.-34     	; 0x2716 <vfprintf+0x49a>
    2738:	f7 c0       	rjmp	.+494    	; 0x2928 <vfprintf+0x6ac>
    273a:	84 36       	cpi	r24, 0x64	; 100
    273c:	11 f0       	breq	.+4      	; 0x2742 <vfprintf+0x4c6>
    273e:	89 36       	cpi	r24, 0x69	; 105
    2740:	61 f5       	brne	.+88     	; 0x279a <vfprintf+0x51e>
    2742:	56 01       	movw	r10, r12
    2744:	97 fe       	sbrs	r9, 7
    2746:	09 c0       	rjmp	.+18     	; 0x275a <vfprintf+0x4de>
    2748:	24 e0       	ldi	r18, 0x04	; 4
    274a:	a2 0e       	add	r10, r18
    274c:	b1 1c       	adc	r11, r1
    274e:	f6 01       	movw	r30, r12
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	0a c0       	rjmp	.+20     	; 0x276e <vfprintf+0x4f2>
    275a:	f2 e0       	ldi	r31, 0x02	; 2
    275c:	af 0e       	add	r10, r31
    275e:	b1 1c       	adc	r11, r1
    2760:	f6 01       	movw	r30, r12
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	07 2e       	mov	r0, r23
    2768:	00 0c       	add	r0, r0
    276a:	88 0b       	sbc	r24, r24
    276c:	99 0b       	sbc	r25, r25
    276e:	f9 2d       	mov	r31, r9
    2770:	ff 76       	andi	r31, 0x6F	; 111
    2772:	9f 2e       	mov	r9, r31
    2774:	97 ff       	sbrs	r25, 7
    2776:	09 c0       	rjmp	.+18     	; 0x278a <vfprintf+0x50e>
    2778:	90 95       	com	r25
    277a:	80 95       	com	r24
    277c:	70 95       	com	r23
    277e:	61 95       	neg	r22
    2780:	7f 4f       	sbci	r23, 0xFF	; 255
    2782:	8f 4f       	sbci	r24, 0xFF	; 255
    2784:	9f 4f       	sbci	r25, 0xFF	; 255
    2786:	f0 68       	ori	r31, 0x80	; 128
    2788:	9f 2e       	mov	r9, r31
    278a:	2a e0       	ldi	r18, 0x0A	; 10
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	a3 01       	movw	r20, r6
    2790:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__ultoa_invert>
    2794:	c8 2e       	mov	r12, r24
    2796:	c6 18       	sub	r12, r6
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <vfprintf+0x59c>
    279a:	09 2d       	mov	r16, r9
    279c:	85 37       	cpi	r24, 0x75	; 117
    279e:	21 f4       	brne	.+8      	; 0x27a8 <vfprintf+0x52c>
    27a0:	0f 7e       	andi	r16, 0xEF	; 239
    27a2:	2a e0       	ldi	r18, 0x0A	; 10
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	1d c0       	rjmp	.+58     	; 0x27e2 <vfprintf+0x566>
    27a8:	09 7f       	andi	r16, 0xF9	; 249
    27aa:	8f 36       	cpi	r24, 0x6F	; 111
    27ac:	91 f0       	breq	.+36     	; 0x27d2 <vfprintf+0x556>
    27ae:	18 f4       	brcc	.+6      	; 0x27b6 <vfprintf+0x53a>
    27b0:	88 35       	cpi	r24, 0x58	; 88
    27b2:	59 f0       	breq	.+22     	; 0x27ca <vfprintf+0x54e>
    27b4:	c3 c0       	rjmp	.+390    	; 0x293c <vfprintf+0x6c0>
    27b6:	80 37       	cpi	r24, 0x70	; 112
    27b8:	19 f0       	breq	.+6      	; 0x27c0 <vfprintf+0x544>
    27ba:	88 37       	cpi	r24, 0x78	; 120
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <vfprintf+0x546>
    27be:	be c0       	rjmp	.+380    	; 0x293c <vfprintf+0x6c0>
    27c0:	00 61       	ori	r16, 0x10	; 16
    27c2:	04 ff       	sbrs	r16, 4
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <vfprintf+0x55c>
    27c6:	04 60       	ori	r16, 0x04	; 4
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <vfprintf+0x55c>
    27ca:	94 fe       	sbrs	r9, 4
    27cc:	08 c0       	rjmp	.+16     	; 0x27de <vfprintf+0x562>
    27ce:	06 60       	ori	r16, 0x06	; 6
    27d0:	06 c0       	rjmp	.+12     	; 0x27de <vfprintf+0x562>
    27d2:	28 e0       	ldi	r18, 0x08	; 8
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <vfprintf+0x566>
    27d8:	20 e1       	ldi	r18, 0x10	; 16
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <vfprintf+0x566>
    27de:	20 e1       	ldi	r18, 0x10	; 16
    27e0:	32 e0       	ldi	r19, 0x02	; 2
    27e2:	56 01       	movw	r10, r12
    27e4:	07 ff       	sbrs	r16, 7
    27e6:	09 c0       	rjmp	.+18     	; 0x27fa <vfprintf+0x57e>
    27e8:	84 e0       	ldi	r24, 0x04	; 4
    27ea:	a8 0e       	add	r10, r24
    27ec:	b1 1c       	adc	r11, r1
    27ee:	f6 01       	movw	r30, r12
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	08 c0       	rjmp	.+16     	; 0x280a <vfprintf+0x58e>
    27fa:	f2 e0       	ldi	r31, 0x02	; 2
    27fc:	af 0e       	add	r10, r31
    27fe:	b1 1c       	adc	r11, r1
    2800:	f6 01       	movw	r30, r12
    2802:	60 81       	ld	r22, Z
    2804:	71 81       	ldd	r23, Z+1	; 0x01
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a3 01       	movw	r20, r6
    280c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__ultoa_invert>
    2810:	c8 2e       	mov	r12, r24
    2812:	c6 18       	sub	r12, r6
    2814:	0f 77       	andi	r16, 0x7F	; 127
    2816:	90 2e       	mov	r9, r16
    2818:	96 fe       	sbrs	r9, 6
    281a:	0b c0       	rjmp	.+22     	; 0x2832 <vfprintf+0x5b6>
    281c:	09 2d       	mov	r16, r9
    281e:	0e 7f       	andi	r16, 0xFE	; 254
    2820:	c1 16       	cp	r12, r17
    2822:	50 f4       	brcc	.+20     	; 0x2838 <vfprintf+0x5bc>
    2824:	94 fe       	sbrs	r9, 4
    2826:	0a c0       	rjmp	.+20     	; 0x283c <vfprintf+0x5c0>
    2828:	92 fc       	sbrc	r9, 2
    282a:	08 c0       	rjmp	.+16     	; 0x283c <vfprintf+0x5c0>
    282c:	09 2d       	mov	r16, r9
    282e:	0e 7e       	andi	r16, 0xEE	; 238
    2830:	05 c0       	rjmp	.+10     	; 0x283c <vfprintf+0x5c0>
    2832:	dc 2c       	mov	r13, r12
    2834:	09 2d       	mov	r16, r9
    2836:	03 c0       	rjmp	.+6      	; 0x283e <vfprintf+0x5c2>
    2838:	dc 2c       	mov	r13, r12
    283a:	01 c0       	rjmp	.+2      	; 0x283e <vfprintf+0x5c2>
    283c:	d1 2e       	mov	r13, r17
    283e:	04 ff       	sbrs	r16, 4
    2840:	0d c0       	rjmp	.+26     	; 0x285c <vfprintf+0x5e0>
    2842:	fe 01       	movw	r30, r28
    2844:	ec 0d       	add	r30, r12
    2846:	f1 1d       	adc	r31, r1
    2848:	80 81       	ld	r24, Z
    284a:	80 33       	cpi	r24, 0x30	; 48
    284c:	11 f4       	brne	.+4      	; 0x2852 <vfprintf+0x5d6>
    284e:	09 7e       	andi	r16, 0xE9	; 233
    2850:	09 c0       	rjmp	.+18     	; 0x2864 <vfprintf+0x5e8>
    2852:	02 ff       	sbrs	r16, 2
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <vfprintf+0x5e6>
    2856:	d3 94       	inc	r13
    2858:	d3 94       	inc	r13
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <vfprintf+0x5e8>
    285c:	80 2f       	mov	r24, r16
    285e:	86 78       	andi	r24, 0x86	; 134
    2860:	09 f0       	breq	.+2      	; 0x2864 <vfprintf+0x5e8>
    2862:	d3 94       	inc	r13
    2864:	03 fd       	sbrc	r16, 3
    2866:	11 c0       	rjmp	.+34     	; 0x288a <vfprintf+0x60e>
    2868:	00 ff       	sbrs	r16, 0
    286a:	06 c0       	rjmp	.+12     	; 0x2878 <vfprintf+0x5fc>
    286c:	1c 2d       	mov	r17, r12
    286e:	d5 14       	cp	r13, r5
    2870:	80 f4       	brcc	.+32     	; 0x2892 <vfprintf+0x616>
    2872:	15 0d       	add	r17, r5
    2874:	1d 19       	sub	r17, r13
    2876:	0d c0       	rjmp	.+26     	; 0x2892 <vfprintf+0x616>
    2878:	d5 14       	cp	r13, r5
    287a:	58 f4       	brcc	.+22     	; 0x2892 <vfprintf+0x616>
    287c:	b7 01       	movw	r22, r14
    287e:	80 e2       	ldi	r24, 0x20	; 32
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2886:	d3 94       	inc	r13
    2888:	f7 cf       	rjmp	.-18     	; 0x2878 <vfprintf+0x5fc>
    288a:	d5 14       	cp	r13, r5
    288c:	10 f4       	brcc	.+4      	; 0x2892 <vfprintf+0x616>
    288e:	5d 18       	sub	r5, r13
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <vfprintf+0x618>
    2892:	51 2c       	mov	r5, r1
    2894:	04 ff       	sbrs	r16, 4
    2896:	10 c0       	rjmp	.+32     	; 0x28b8 <vfprintf+0x63c>
    2898:	b7 01       	movw	r22, r14
    289a:	80 e3       	ldi	r24, 0x30	; 48
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    28a2:	02 ff       	sbrs	r16, 2
    28a4:	17 c0       	rjmp	.+46     	; 0x28d4 <vfprintf+0x658>
    28a6:	01 fd       	sbrc	r16, 1
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <vfprintf+0x634>
    28aa:	88 e7       	ldi	r24, 0x78	; 120
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <vfprintf+0x638>
    28b0:	88 e5       	ldi	r24, 0x58	; 88
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	b7 01       	movw	r22, r14
    28b6:	0c c0       	rjmp	.+24     	; 0x28d0 <vfprintf+0x654>
    28b8:	80 2f       	mov	r24, r16
    28ba:	86 78       	andi	r24, 0x86	; 134
    28bc:	59 f0       	breq	.+22     	; 0x28d4 <vfprintf+0x658>
    28be:	01 ff       	sbrs	r16, 1
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <vfprintf+0x64a>
    28c2:	8b e2       	ldi	r24, 0x2B	; 43
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <vfprintf+0x64c>
    28c6:	80 e2       	ldi	r24, 0x20	; 32
    28c8:	07 fd       	sbrc	r16, 7
    28ca:	8d e2       	ldi	r24, 0x2D	; 45
    28cc:	b7 01       	movw	r22, r14
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    28d4:	c1 16       	cp	r12, r17
    28d6:	38 f4       	brcc	.+14     	; 0x28e6 <vfprintf+0x66a>
    28d8:	b7 01       	movw	r22, r14
    28da:	80 e3       	ldi	r24, 0x30	; 48
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    28e2:	11 50       	subi	r17, 0x01	; 1
    28e4:	f7 cf       	rjmp	.-18     	; 0x28d4 <vfprintf+0x658>
    28e6:	ca 94       	dec	r12
    28e8:	f3 01       	movw	r30, r6
    28ea:	ec 0d       	add	r30, r12
    28ec:	f1 1d       	adc	r31, r1
    28ee:	80 81       	ld	r24, Z
    28f0:	b7 01       	movw	r22, r14
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    28f8:	c1 10       	cpse	r12, r1
    28fa:	f5 cf       	rjmp	.-22     	; 0x28e6 <vfprintf+0x66a>
    28fc:	15 c0       	rjmp	.+42     	; 0x2928 <vfprintf+0x6ac>
    28fe:	f4 e0       	ldi	r31, 0x04	; 4
    2900:	f5 15       	cp	r31, r5
    2902:	60 f5       	brcc	.+88     	; 0x295c <vfprintf+0x6e0>
    2904:	84 e0       	ldi	r24, 0x04	; 4
    2906:	58 1a       	sub	r5, r24
    2908:	93 fe       	sbrs	r9, 3
    290a:	1f c0       	rjmp	.+62     	; 0x294a <vfprintf+0x6ce>
    290c:	01 11       	cpse	r16, r1
    290e:	27 c0       	rjmp	.+78     	; 0x295e <vfprintf+0x6e2>
    2910:	2c 85       	ldd	r18, Y+12	; 0x0c
    2912:	23 ff       	sbrs	r18, 3
    2914:	2a c0       	rjmp	.+84     	; 0x296a <vfprintf+0x6ee>
    2916:	00 e1       	ldi	r16, 0x10	; 16
    2918:	12 e0       	ldi	r17, 0x02	; 2
    291a:	39 2d       	mov	r19, r9
    291c:	30 71       	andi	r19, 0x10	; 16
    291e:	93 2e       	mov	r9, r19
    2920:	f8 01       	movw	r30, r16
    2922:	84 91       	lpm	r24, Z
    2924:	81 11       	cpse	r24, r1
    2926:	24 c0       	rjmp	.+72     	; 0x2970 <vfprintf+0x6f4>
    2928:	55 20       	and	r5, r5
    292a:	09 f4       	brne	.+2      	; 0x292e <vfprintf+0x6b2>
    292c:	e4 cc       	rjmp	.-1592   	; 0x22f6 <vfprintf+0x7a>
    292e:	b7 01       	movw	r22, r14
    2930:	80 e2       	ldi	r24, 0x20	; 32
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2938:	5a 94       	dec	r5
    293a:	f6 cf       	rjmp	.-20     	; 0x2928 <vfprintf+0x6ac>
    293c:	f7 01       	movw	r30, r14
    293e:	86 81       	ldd	r24, Z+6	; 0x06
    2940:	97 81       	ldd	r25, Z+7	; 0x07
    2942:	26 c0       	rjmp	.+76     	; 0x2990 <vfprintf+0x714>
    2944:	8f ef       	ldi	r24, 0xFF	; 255
    2946:	9f ef       	ldi	r25, 0xFF	; 255
    2948:	23 c0       	rjmp	.+70     	; 0x2990 <vfprintf+0x714>
    294a:	b7 01       	movw	r22, r14
    294c:	80 e2       	ldi	r24, 0x20	; 32
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2954:	5a 94       	dec	r5
    2956:	51 10       	cpse	r5, r1
    2958:	f8 cf       	rjmp	.-16     	; 0x294a <vfprintf+0x6ce>
    295a:	d8 cf       	rjmp	.-80     	; 0x290c <vfprintf+0x690>
    295c:	51 2c       	mov	r5, r1
    295e:	b7 01       	movw	r22, r14
    2960:	80 2f       	mov	r24, r16
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    2968:	d3 cf       	rjmp	.-90     	; 0x2910 <vfprintf+0x694>
    296a:	04 e1       	ldi	r16, 0x14	; 20
    296c:	12 e0       	ldi	r17, 0x02	; 2
    296e:	d5 cf       	rjmp	.-86     	; 0x291a <vfprintf+0x69e>
    2970:	91 10       	cpse	r9, r1
    2972:	80 52       	subi	r24, 0x20	; 32
    2974:	b7 01       	movw	r22, r14
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <fputc>
    297c:	0f 5f       	subi	r16, 0xFF	; 255
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	cf cf       	rjmp	.-98     	; 0x2920 <vfprintf+0x6a4>
    2982:	23 e0       	ldi	r18, 0x03	; 3
    2984:	25 15       	cp	r18, r5
    2986:	10 f4       	brcc	.+4      	; 0x298c <vfprintf+0x710>
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	bd cf       	rjmp	.-134    	; 0x2906 <vfprintf+0x68a>
    298c:	51 2c       	mov	r5, r1
    298e:	c0 cf       	rjmp	.-128    	; 0x2910 <vfprintf+0x694>
    2990:	60 96       	adiw	r28, 0x10	; 16
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	bf 90       	pop	r11
    29a8:	af 90       	pop	r10
    29aa:	9f 90       	pop	r9
    29ac:	8f 90       	pop	r8
    29ae:	7f 90       	pop	r7
    29b0:	6f 90       	pop	r6
    29b2:	5f 90       	pop	r5
    29b4:	4f 90       	pop	r4
    29b6:	3f 90       	pop	r3
    29b8:	2f 90       	pop	r2
    29ba:	08 95       	ret

000029bc <__ftoa_engine>:
    29bc:	28 30       	cpi	r18, 0x08	; 8
    29be:	08 f0       	brcs	.+2      	; 0x29c2 <__ftoa_engine+0x6>
    29c0:	27 e0       	ldi	r18, 0x07	; 7
    29c2:	33 27       	eor	r19, r19
    29c4:	da 01       	movw	r26, r20
    29c6:	99 0f       	add	r25, r25
    29c8:	31 1d       	adc	r19, r1
    29ca:	87 fd       	sbrc	r24, 7
    29cc:	91 60       	ori	r25, 0x01	; 1
    29ce:	00 96       	adiw	r24, 0x00	; 0
    29d0:	61 05       	cpc	r22, r1
    29d2:	71 05       	cpc	r23, r1
    29d4:	39 f4       	brne	.+14     	; 0x29e4 <__ftoa_engine+0x28>
    29d6:	32 60       	ori	r19, 0x02	; 2
    29d8:	2e 5f       	subi	r18, 0xFE	; 254
    29da:	3d 93       	st	X+, r19
    29dc:	30 e3       	ldi	r19, 0x30	; 48
    29de:	2a 95       	dec	r18
    29e0:	e1 f7       	brne	.-8      	; 0x29da <__ftoa_engine+0x1e>
    29e2:	08 95       	ret
    29e4:	9f 3f       	cpi	r25, 0xFF	; 255
    29e6:	30 f0       	brcs	.+12     	; 0x29f4 <__ftoa_engine+0x38>
    29e8:	80 38       	cpi	r24, 0x80	; 128
    29ea:	71 05       	cpc	r23, r1
    29ec:	61 05       	cpc	r22, r1
    29ee:	09 f0       	breq	.+2      	; 0x29f2 <__ftoa_engine+0x36>
    29f0:	3c 5f       	subi	r19, 0xFC	; 252
    29f2:	3c 5f       	subi	r19, 0xFC	; 252
    29f4:	3d 93       	st	X+, r19
    29f6:	91 30       	cpi	r25, 0x01	; 1
    29f8:	08 f0       	brcs	.+2      	; 0x29fc <__ftoa_engine+0x40>
    29fa:	80 68       	ori	r24, 0x80	; 128
    29fc:	91 1d       	adc	r25, r1
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	1f 93       	push	r17
    2a04:	0f 93       	push	r16
    2a06:	ff 92       	push	r15
    2a08:	ef 92       	push	r14
    2a0a:	19 2f       	mov	r17, r25
    2a0c:	98 7f       	andi	r25, 0xF8	; 248
    2a0e:	96 95       	lsr	r25
    2a10:	e9 2f       	mov	r30, r25
    2a12:	96 95       	lsr	r25
    2a14:	96 95       	lsr	r25
    2a16:	e9 0f       	add	r30, r25
    2a18:	ff 27       	eor	r31, r31
    2a1a:	ee 58       	subi	r30, 0x8E	; 142
    2a1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a1e:	99 27       	eor	r25, r25
    2a20:	33 27       	eor	r19, r19
    2a22:	ee 24       	eor	r14, r14
    2a24:	ff 24       	eor	r15, r15
    2a26:	a7 01       	movw	r20, r14
    2a28:	e7 01       	movw	r28, r14
    2a2a:	05 90       	lpm	r0, Z+
    2a2c:	08 94       	sec
    2a2e:	07 94       	ror	r0
    2a30:	28 f4       	brcc	.+10     	; 0x2a3c <__ftoa_engine+0x80>
    2a32:	36 0f       	add	r19, r22
    2a34:	e7 1e       	adc	r14, r23
    2a36:	f8 1e       	adc	r15, r24
    2a38:	49 1f       	adc	r20, r25
    2a3a:	51 1d       	adc	r21, r1
    2a3c:	66 0f       	add	r22, r22
    2a3e:	77 1f       	adc	r23, r23
    2a40:	88 1f       	adc	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	06 94       	lsr	r0
    2a46:	a1 f7       	brne	.-24     	; 0x2a30 <__ftoa_engine+0x74>
    2a48:	05 90       	lpm	r0, Z+
    2a4a:	07 94       	ror	r0
    2a4c:	28 f4       	brcc	.+10     	; 0x2a58 <__ftoa_engine+0x9c>
    2a4e:	e7 0e       	add	r14, r23
    2a50:	f8 1e       	adc	r15, r24
    2a52:	49 1f       	adc	r20, r25
    2a54:	56 1f       	adc	r21, r22
    2a56:	c1 1d       	adc	r28, r1
    2a58:	77 0f       	add	r23, r23
    2a5a:	88 1f       	adc	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	66 1f       	adc	r22, r22
    2a60:	06 94       	lsr	r0
    2a62:	a1 f7       	brne	.-24     	; 0x2a4c <__ftoa_engine+0x90>
    2a64:	05 90       	lpm	r0, Z+
    2a66:	07 94       	ror	r0
    2a68:	28 f4       	brcc	.+10     	; 0x2a74 <__ftoa_engine+0xb8>
    2a6a:	f8 0e       	add	r15, r24
    2a6c:	49 1f       	adc	r20, r25
    2a6e:	56 1f       	adc	r21, r22
    2a70:	c7 1f       	adc	r28, r23
    2a72:	d1 1d       	adc	r29, r1
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	66 1f       	adc	r22, r22
    2a7a:	77 1f       	adc	r23, r23
    2a7c:	06 94       	lsr	r0
    2a7e:	a1 f7       	brne	.-24     	; 0x2a68 <__ftoa_engine+0xac>
    2a80:	05 90       	lpm	r0, Z+
    2a82:	07 94       	ror	r0
    2a84:	20 f4       	brcc	.+8      	; 0x2a8e <__ftoa_engine+0xd2>
    2a86:	49 0f       	add	r20, r25
    2a88:	56 1f       	adc	r21, r22
    2a8a:	c7 1f       	adc	r28, r23
    2a8c:	d8 1f       	adc	r29, r24
    2a8e:	99 0f       	add	r25, r25
    2a90:	66 1f       	adc	r22, r22
    2a92:	77 1f       	adc	r23, r23
    2a94:	88 1f       	adc	r24, r24
    2a96:	06 94       	lsr	r0
    2a98:	a9 f7       	brne	.-22     	; 0x2a84 <__ftoa_engine+0xc8>
    2a9a:	84 91       	lpm	r24, Z
    2a9c:	10 95       	com	r17
    2a9e:	17 70       	andi	r17, 0x07	; 7
    2aa0:	41 f0       	breq	.+16     	; 0x2ab2 <__ftoa_engine+0xf6>
    2aa2:	d6 95       	lsr	r29
    2aa4:	c7 95       	ror	r28
    2aa6:	57 95       	ror	r21
    2aa8:	47 95       	ror	r20
    2aaa:	f7 94       	ror	r15
    2aac:	e7 94       	ror	r14
    2aae:	1a 95       	dec	r17
    2ab0:	c1 f7       	brne	.-16     	; 0x2aa2 <__ftoa_engine+0xe6>
    2ab2:	e8 e1       	ldi	r30, 0x18	; 24
    2ab4:	f2 e0       	ldi	r31, 0x02	; 2
    2ab6:	68 94       	set
    2ab8:	15 90       	lpm	r1, Z+
    2aba:	15 91       	lpm	r17, Z+
    2abc:	35 91       	lpm	r19, Z+
    2abe:	65 91       	lpm	r22, Z+
    2ac0:	95 91       	lpm	r25, Z+
    2ac2:	05 90       	lpm	r0, Z+
    2ac4:	7f e2       	ldi	r23, 0x2F	; 47
    2ac6:	73 95       	inc	r23
    2ac8:	e1 18       	sub	r14, r1
    2aca:	f1 0a       	sbc	r15, r17
    2acc:	43 0b       	sbc	r20, r19
    2ace:	56 0b       	sbc	r21, r22
    2ad0:	c9 0b       	sbc	r28, r25
    2ad2:	d0 09       	sbc	r29, r0
    2ad4:	c0 f7       	brcc	.-16     	; 0x2ac6 <__ftoa_engine+0x10a>
    2ad6:	e1 0c       	add	r14, r1
    2ad8:	f1 1e       	adc	r15, r17
    2ada:	43 1f       	adc	r20, r19
    2adc:	56 1f       	adc	r21, r22
    2ade:	c9 1f       	adc	r28, r25
    2ae0:	d0 1d       	adc	r29, r0
    2ae2:	7e f4       	brtc	.+30     	; 0x2b02 <__ftoa_engine+0x146>
    2ae4:	70 33       	cpi	r23, 0x30	; 48
    2ae6:	11 f4       	brne	.+4      	; 0x2aec <__ftoa_engine+0x130>
    2ae8:	8a 95       	dec	r24
    2aea:	e6 cf       	rjmp	.-52     	; 0x2ab8 <__ftoa_engine+0xfc>
    2aec:	e8 94       	clt
    2aee:	01 50       	subi	r16, 0x01	; 1
    2af0:	30 f0       	brcs	.+12     	; 0x2afe <__ftoa_engine+0x142>
    2af2:	08 0f       	add	r16, r24
    2af4:	0a f4       	brpl	.+2      	; 0x2af8 <__ftoa_engine+0x13c>
    2af6:	00 27       	eor	r16, r16
    2af8:	02 17       	cp	r16, r18
    2afa:	08 f4       	brcc	.+2      	; 0x2afe <__ftoa_engine+0x142>
    2afc:	20 2f       	mov	r18, r16
    2afe:	23 95       	inc	r18
    2b00:	02 2f       	mov	r16, r18
    2b02:	7a 33       	cpi	r23, 0x3A	; 58
    2b04:	28 f0       	brcs	.+10     	; 0x2b10 <__ftoa_engine+0x154>
    2b06:	79 e3       	ldi	r23, 0x39	; 57
    2b08:	7d 93       	st	X+, r23
    2b0a:	2a 95       	dec	r18
    2b0c:	e9 f7       	brne	.-6      	; 0x2b08 <__ftoa_engine+0x14c>
    2b0e:	10 c0       	rjmp	.+32     	; 0x2b30 <__ftoa_engine+0x174>
    2b10:	7d 93       	st	X+, r23
    2b12:	2a 95       	dec	r18
    2b14:	89 f6       	brne	.-94     	; 0x2ab8 <__ftoa_engine+0xfc>
    2b16:	06 94       	lsr	r0
    2b18:	97 95       	ror	r25
    2b1a:	67 95       	ror	r22
    2b1c:	37 95       	ror	r19
    2b1e:	17 95       	ror	r17
    2b20:	17 94       	ror	r1
    2b22:	e1 18       	sub	r14, r1
    2b24:	f1 0a       	sbc	r15, r17
    2b26:	43 0b       	sbc	r20, r19
    2b28:	56 0b       	sbc	r21, r22
    2b2a:	c9 0b       	sbc	r28, r25
    2b2c:	d0 09       	sbc	r29, r0
    2b2e:	98 f0       	brcs	.+38     	; 0x2b56 <__ftoa_engine+0x19a>
    2b30:	23 95       	inc	r18
    2b32:	7e 91       	ld	r23, -X
    2b34:	73 95       	inc	r23
    2b36:	7a 33       	cpi	r23, 0x3A	; 58
    2b38:	08 f0       	brcs	.+2      	; 0x2b3c <__ftoa_engine+0x180>
    2b3a:	70 e3       	ldi	r23, 0x30	; 48
    2b3c:	7c 93       	st	X, r23
    2b3e:	20 13       	cpse	r18, r16
    2b40:	b8 f7       	brcc	.-18     	; 0x2b30 <__ftoa_engine+0x174>
    2b42:	7e 91       	ld	r23, -X
    2b44:	70 61       	ori	r23, 0x10	; 16
    2b46:	7d 93       	st	X+, r23
    2b48:	30 f0       	brcs	.+12     	; 0x2b56 <__ftoa_engine+0x19a>
    2b4a:	83 95       	inc	r24
    2b4c:	71 e3       	ldi	r23, 0x31	; 49
    2b4e:	7d 93       	st	X+, r23
    2b50:	70 e3       	ldi	r23, 0x30	; 48
    2b52:	2a 95       	dec	r18
    2b54:	e1 f7       	brne	.-8      	; 0x2b4e <__ftoa_engine+0x192>
    2b56:	11 24       	eor	r1, r1
    2b58:	ef 90       	pop	r14
    2b5a:	ff 90       	pop	r15
    2b5c:	0f 91       	pop	r16
    2b5e:	1f 91       	pop	r17
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	99 27       	eor	r25, r25
    2b66:	87 fd       	sbrc	r24, 7
    2b68:	90 95       	com	r25
    2b6a:	08 95       	ret

00002b6c <strnlen_P>:
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	05 90       	lpm	r0, Z+
    2b70:	61 50       	subi	r22, 0x01	; 1
    2b72:	70 40       	sbci	r23, 0x00	; 0
    2b74:	01 10       	cpse	r0, r1
    2b76:	d8 f7       	brcc	.-10     	; 0x2b6e <strnlen_P+0x2>
    2b78:	80 95       	com	r24
    2b7a:	90 95       	com	r25
    2b7c:	8e 0f       	add	r24, r30
    2b7e:	9f 1f       	adc	r25, r31
    2b80:	08 95       	ret

00002b82 <memcpy>:
    2b82:	fb 01       	movw	r30, r22
    2b84:	dc 01       	movw	r26, r24
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <memcpy+0xa>
    2b88:	01 90       	ld	r0, Z+
    2b8a:	0d 92       	st	X+, r0
    2b8c:	41 50       	subi	r20, 0x01	; 1
    2b8e:	50 40       	sbci	r21, 0x00	; 0
    2b90:	d8 f7       	brcc	.-10     	; 0x2b88 <memcpy+0x6>
    2b92:	08 95       	ret

00002b94 <memset>:
    2b94:	dc 01       	movw	r26, r24
    2b96:	01 c0       	rjmp	.+2      	; 0x2b9a <memset+0x6>
    2b98:	6d 93       	st	X+, r22
    2b9a:	41 50       	subi	r20, 0x01	; 1
    2b9c:	50 40       	sbci	r21, 0x00	; 0
    2b9e:	e0 f7       	brcc	.-8      	; 0x2b98 <memset+0x4>
    2ba0:	08 95       	ret

00002ba2 <strnlen>:
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	61 50       	subi	r22, 0x01	; 1
    2ba6:	70 40       	sbci	r23, 0x00	; 0
    2ba8:	01 90       	ld	r0, Z+
    2baa:	01 10       	cpse	r0, r1
    2bac:	d8 f7       	brcc	.-10     	; 0x2ba4 <strnlen+0x2>
    2bae:	80 95       	com	r24
    2bb0:	90 95       	com	r25
    2bb2:	8e 0f       	add	r24, r30
    2bb4:	9f 1f       	adc	r25, r31
    2bb6:	08 95       	ret

00002bb8 <fputc>:
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	fb 01       	movw	r30, r22
    2bc2:	23 81       	ldd	r18, Z+3	; 0x03
    2bc4:	21 fd       	sbrc	r18, 1
    2bc6:	03 c0       	rjmp	.+6      	; 0x2bce <fputc+0x16>
    2bc8:	8f ef       	ldi	r24, 0xFF	; 255
    2bca:	9f ef       	ldi	r25, 0xFF	; 255
    2bcc:	2c c0       	rjmp	.+88     	; 0x2c26 <fputc+0x6e>
    2bce:	22 ff       	sbrs	r18, 2
    2bd0:	16 c0       	rjmp	.+44     	; 0x2bfe <fputc+0x46>
    2bd2:	46 81       	ldd	r20, Z+6	; 0x06
    2bd4:	57 81       	ldd	r21, Z+7	; 0x07
    2bd6:	24 81       	ldd	r18, Z+4	; 0x04
    2bd8:	35 81       	ldd	r19, Z+5	; 0x05
    2bda:	42 17       	cp	r20, r18
    2bdc:	53 07       	cpc	r21, r19
    2bde:	44 f4       	brge	.+16     	; 0x2bf0 <fputc+0x38>
    2be0:	a0 81       	ld	r26, Z
    2be2:	b1 81       	ldd	r27, Z+1	; 0x01
    2be4:	9d 01       	movw	r18, r26
    2be6:	2f 5f       	subi	r18, 0xFF	; 255
    2be8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bea:	20 83       	st	Z, r18
    2bec:	31 83       	std	Z+1, r19	; 0x01
    2bee:	8c 93       	st	X, r24
    2bf0:	26 81       	ldd	r18, Z+6	; 0x06
    2bf2:	37 81       	ldd	r19, Z+7	; 0x07
    2bf4:	2f 5f       	subi	r18, 0xFF	; 255
    2bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf8:	26 83       	std	Z+6, r18	; 0x06
    2bfa:	37 83       	std	Z+7, r19	; 0x07
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <fputc+0x6e>
    2bfe:	8b 01       	movw	r16, r22
    2c00:	ec 01       	movw	r28, r24
    2c02:	fb 01       	movw	r30, r22
    2c04:	00 84       	ldd	r0, Z+8	; 0x08
    2c06:	f1 85       	ldd	r31, Z+9	; 0x09
    2c08:	e0 2d       	mov	r30, r0
    2c0a:	19 95       	eicall
    2c0c:	89 2b       	or	r24, r25
    2c0e:	e1 f6       	brne	.-72     	; 0x2bc8 <fputc+0x10>
    2c10:	d8 01       	movw	r26, r16
    2c12:	16 96       	adiw	r26, 0x06	; 6
    2c14:	8d 91       	ld	r24, X+
    2c16:	9c 91       	ld	r25, X
    2c18:	17 97       	sbiw	r26, 0x07	; 7
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	16 96       	adiw	r26, 0x06	; 6
    2c1e:	8d 93       	st	X+, r24
    2c20:	9c 93       	st	X, r25
    2c22:	17 97       	sbiw	r26, 0x07	; 7
    2c24:	ce 01       	movw	r24, r28
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	08 95       	ret

00002c30 <printf>:
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	ae 01       	movw	r20, r28
    2c3a:	4a 5f       	subi	r20, 0xFA	; 250
    2c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3e:	fa 01       	movw	r30, r20
    2c40:	61 91       	ld	r22, Z+
    2c42:	71 91       	ld	r23, Z+
    2c44:	af 01       	movw	r20, r30
    2c46:	80 91 91 61 	lds	r24, 0x6191	; 0x806191 <__iob+0x2>
    2c4a:	90 91 92 61 	lds	r25, 0x6192	; 0x806192 <__iob+0x3>
    2c4e:	0e 94 3e 11 	call	0x227c	; 0x227c <vfprintf>
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	08 95       	ret

00002c58 <snprintf>:
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	2e 97       	sbiw	r28, 0x0e	; 14
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0e 89       	ldd	r16, Y+22	; 0x16
    2c6c:	1f 89       	ldd	r17, Y+23	; 0x17
    2c6e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c70:	99 8d       	ldd	r25, Y+25	; 0x19
    2c72:	26 e0       	ldi	r18, 0x06	; 6
    2c74:	2c 83       	std	Y+4, r18	; 0x04
    2c76:	09 83       	std	Y+1, r16	; 0x01
    2c78:	1a 83       	std	Y+2, r17	; 0x02
    2c7a:	97 ff       	sbrs	r25, 7
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <snprintf+0x2a>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e8       	ldi	r25, 0x80	; 128
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	ae 01       	movw	r20, r28
    2c8a:	44 5e       	subi	r20, 0xE4	; 228
    2c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c8e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c90:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c92:	ce 01       	movw	r24, r28
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	0e 94 3e 11 	call	0x227c	; 0x227c <vfprintf>
    2c9a:	4d 81       	ldd	r20, Y+5	; 0x05
    2c9c:	5e 81       	ldd	r21, Y+6	; 0x06
    2c9e:	57 fd       	sbrc	r21, 7
    2ca0:	0a c0       	rjmp	.+20     	; 0x2cb6 <snprintf+0x5e>
    2ca2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ca4:	38 85       	ldd	r19, Y+8	; 0x08
    2ca6:	42 17       	cp	r20, r18
    2ca8:	53 07       	cpc	r21, r19
    2caa:	0c f4       	brge	.+2      	; 0x2cae <snprintf+0x56>
    2cac:	9a 01       	movw	r18, r20
    2cae:	f8 01       	movw	r30, r16
    2cb0:	e2 0f       	add	r30, r18
    2cb2:	f3 1f       	adc	r31, r19
    2cb4:	10 82       	st	Z, r1
    2cb6:	2e 96       	adiw	r28, 0x0e	; 14
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	08 95       	ret

00002cc6 <__ultoa_invert>:
    2cc6:	fa 01       	movw	r30, r20
    2cc8:	aa 27       	eor	r26, r26
    2cca:	28 30       	cpi	r18, 0x08	; 8
    2ccc:	51 f1       	breq	.+84     	; 0x2d22 <__ultoa_invert+0x5c>
    2cce:	20 31       	cpi	r18, 0x10	; 16
    2cd0:	81 f1       	breq	.+96     	; 0x2d32 <__ultoa_invert+0x6c>
    2cd2:	e8 94       	clt
    2cd4:	6f 93       	push	r22
    2cd6:	6e 7f       	andi	r22, 0xFE	; 254
    2cd8:	6e 5f       	subi	r22, 0xFE	; 254
    2cda:	7f 4f       	sbci	r23, 0xFF	; 255
    2cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cde:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce0:	af 4f       	sbci	r26, 0xFF	; 255
    2ce2:	b1 e0       	ldi	r27, 0x01	; 1
    2ce4:	3e d0       	rcall	.+124    	; 0x2d62 <__ultoa_invert+0x9c>
    2ce6:	b4 e0       	ldi	r27, 0x04	; 4
    2ce8:	3c d0       	rcall	.+120    	; 0x2d62 <__ultoa_invert+0x9c>
    2cea:	67 0f       	add	r22, r23
    2cec:	78 1f       	adc	r23, r24
    2cee:	89 1f       	adc	r24, r25
    2cf0:	9a 1f       	adc	r25, r26
    2cf2:	a1 1d       	adc	r26, r1
    2cf4:	68 0f       	add	r22, r24
    2cf6:	79 1f       	adc	r23, r25
    2cf8:	8a 1f       	adc	r24, r26
    2cfa:	91 1d       	adc	r25, r1
    2cfc:	a1 1d       	adc	r26, r1
    2cfe:	6a 0f       	add	r22, r26
    2d00:	71 1d       	adc	r23, r1
    2d02:	81 1d       	adc	r24, r1
    2d04:	91 1d       	adc	r25, r1
    2d06:	a1 1d       	adc	r26, r1
    2d08:	20 d0       	rcall	.+64     	; 0x2d4a <__ultoa_invert+0x84>
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <__ultoa_invert+0x48>
    2d0c:	68 94       	set
    2d0e:	3f 91       	pop	r19
    2d10:	2a e0       	ldi	r18, 0x0A	; 10
    2d12:	26 9f       	mul	r18, r22
    2d14:	11 24       	eor	r1, r1
    2d16:	30 19       	sub	r19, r0
    2d18:	30 5d       	subi	r19, 0xD0	; 208
    2d1a:	31 93       	st	Z+, r19
    2d1c:	de f6       	brtc	.-74     	; 0x2cd4 <__ultoa_invert+0xe>
    2d1e:	cf 01       	movw	r24, r30
    2d20:	08 95       	ret
    2d22:	46 2f       	mov	r20, r22
    2d24:	47 70       	andi	r20, 0x07	; 7
    2d26:	40 5d       	subi	r20, 0xD0	; 208
    2d28:	41 93       	st	Z+, r20
    2d2a:	b3 e0       	ldi	r27, 0x03	; 3
    2d2c:	0f d0       	rcall	.+30     	; 0x2d4c <__ultoa_invert+0x86>
    2d2e:	c9 f7       	brne	.-14     	; 0x2d22 <__ultoa_invert+0x5c>
    2d30:	f6 cf       	rjmp	.-20     	; 0x2d1e <__ultoa_invert+0x58>
    2d32:	46 2f       	mov	r20, r22
    2d34:	4f 70       	andi	r20, 0x0F	; 15
    2d36:	40 5d       	subi	r20, 0xD0	; 208
    2d38:	4a 33       	cpi	r20, 0x3A	; 58
    2d3a:	18 f0       	brcs	.+6      	; 0x2d42 <__ultoa_invert+0x7c>
    2d3c:	49 5d       	subi	r20, 0xD9	; 217
    2d3e:	31 fd       	sbrc	r19, 1
    2d40:	40 52       	subi	r20, 0x20	; 32
    2d42:	41 93       	st	Z+, r20
    2d44:	02 d0       	rcall	.+4      	; 0x2d4a <__ultoa_invert+0x84>
    2d46:	a9 f7       	brne	.-22     	; 0x2d32 <__ultoa_invert+0x6c>
    2d48:	ea cf       	rjmp	.-44     	; 0x2d1e <__ultoa_invert+0x58>
    2d4a:	b4 e0       	ldi	r27, 0x04	; 4
    2d4c:	a6 95       	lsr	r26
    2d4e:	97 95       	ror	r25
    2d50:	87 95       	ror	r24
    2d52:	77 95       	ror	r23
    2d54:	67 95       	ror	r22
    2d56:	ba 95       	dec	r27
    2d58:	c9 f7       	brne	.-14     	; 0x2d4c <__ultoa_invert+0x86>
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	61 05       	cpc	r22, r1
    2d5e:	71 05       	cpc	r23, r1
    2d60:	08 95       	ret
    2d62:	9b 01       	movw	r18, r22
    2d64:	ac 01       	movw	r20, r24
    2d66:	0a 2e       	mov	r0, r26
    2d68:	06 94       	lsr	r0
    2d6a:	57 95       	ror	r21
    2d6c:	47 95       	ror	r20
    2d6e:	37 95       	ror	r19
    2d70:	27 95       	ror	r18
    2d72:	ba 95       	dec	r27
    2d74:	c9 f7       	brne	.-14     	; 0x2d68 <__ultoa_invert+0xa2>
    2d76:	62 0f       	add	r22, r18
    2d78:	73 1f       	adc	r23, r19
    2d7a:	84 1f       	adc	r24, r20
    2d7c:	95 1f       	adc	r25, r21
    2d7e:	a0 1d       	adc	r26, r0
    2d80:	08 95       	ret

00002d82 <_exit>:
    2d82:	f8 94       	cli

00002d84 <__stop_program>:
    2d84:	ff cf       	rjmp	.-2      	; 0x2d84 <__stop_program>
