
Linebot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00802000  000021e8  0000227c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004087  008020d6  008020d6  00002352  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000089a2  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aec  00000000  00000000  0000b1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032db  00000000  00000000  0000ecae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf0  00000000  00000000  00011f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038a2  00000000  00000000  00012b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a80  00000000  00000000  0001641e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  0001ae9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__ctors_end>
       4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      1c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      20:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      2c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      30:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      34:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      38:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_14>
      3c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      40:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_16>
      44:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      4c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      54:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      58:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      5c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      60:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      64:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      68:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      6c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      70:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      74:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      78:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      7c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      80:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      84:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      88:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      8c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      90:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      94:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      98:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      9c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_46>
      bc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      cc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      dc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      ec:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      f0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      f4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      f8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      fc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     100:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     104:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     108:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     10c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     110:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     114:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     118:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     11c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     120:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     124:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     128:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     12c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     130:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     134:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     138:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     13c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     140:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     144:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     148:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     14c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     150:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     154:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     158:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     15c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     160:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     164:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     168:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     16c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     170:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     174:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     178:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     17c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     180:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     184:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     188:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     18c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     190:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     194:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     198:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     19c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1bc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1cc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1dc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1ec:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 80 02 	jmp	0x500	; 0x500 <stdio_putchar>
     200:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <WorkerMemTask>
     204:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <prvIdleTask>
     208:	0c 94 8c 02 	jmp	0x518	; 0x518 <stdio_getchar>

0000020c <__trampolines_end>:
     20c:	6e 61       	ori	r22, 0x1E	; 30
     20e:	6e 00       	.word	0x006e	; ????

00000210 <__c.2332>:
     210:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     220:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     230:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     240:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     250:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     260:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     270:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     280:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     290:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     300:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000030e <__ctors_end>:
     30e:	11 24       	eor	r1, r1
     310:	1f be       	out	0x3f, r1	; 63
     312:	cf ef       	ldi	r28, 0xFF	; 255
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df e9       	ldi	r29, 0x9F	; 159
     318:	de bf       	out	0x3e, r29	; 62
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	0c bf       	out	0x3c, r16	; 60

0000031e <__do_copy_data>:
     31e:	10 e2       	ldi	r17, 0x20	; 32
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e2       	ldi	r27, 0x20	; 32
     324:	e8 ee       	ldi	r30, 0xE8	; 232
     326:	f1 e2       	ldi	r31, 0x21	; 33
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	0b bf       	out	0x3b, r16	; 59
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x14>
     32e:	07 90       	elpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	a6 3d       	cpi	r26, 0xD6	; 214
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0x10>

00000338 <__do_clear_bss>:
     338:	21 e6       	ldi	r18, 0x61	; 97
     33a:	a6 ed       	ldi	r26, 0xD6	; 214
     33c:	b0 e2       	ldi	r27, 0x20	; 32
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	ad 35       	cpi	r26, 0x5D	; 93
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>
     348:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <main>
     34c:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <_exit>

00000350 <__bad_interrupt>:
     350:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000354 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     354:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     356:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     35a:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     35e:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     362:	90 81       	ld	r25, Z
     364:	99 23       	and	r25, r25
     366:	69 f0       	breq	.+26     	; 0x382 <DbgPrint+0x2e>
     368:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     36a:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     36c:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     370:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     374:	96 ff       	sbrs	r25, 6
     376:	fc cf       	rjmp	.-8      	; 0x370 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     378:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     37c:	91 91       	ld	r25, Z+
     37e:	91 11       	cpse	r25, r1
     380:	f5 cf       	rjmp	.-22     	; 0x36c <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     382:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     386:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     38a:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     38e:	08 95       	ret

00000390 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     390:	8b ec       	ldi	r24, 0xCB	; 203
     392:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     39c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3a0:	83 ff       	sbrs	r24, 3
     3a2:	fc cf       	rjmp	.-8      	; 0x39c <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3a4:	82 ec       	ldi	r24, 0xC2	; 194
     3a6:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3b0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3b4:	84 ff       	sbrs	r24, 4
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3b8:	88 ed       	ldi	r24, 0xD8	; 216
     3ba:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3bc:	84 e0       	ldi	r24, 0x04	; 4
     3be:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	08 95       	ret

000003c6 <TWIMWriteHandler>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     3c6:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <Twim_bytesToWrite>
     3ca:	20 91 d9 20 	lds	r18, 0x20D9	; 0x8020d9 <Twim_bytesToRead>
     3ce:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     3d2:	84 fd       	sbrc	r24, 4
     3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <TWIMWriteHandler+0x20>
     3d6:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <Twim_bytesWritten>
     3da:	89 17       	cp	r24, r25
     3dc:	50 f0       	brcs	.+20     	; 0x3f2 <TWIMWriteHandler+0x2c>
     3de:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <Twim_bytesRead>
     3e2:	82 17       	cp	r24, r18
     3e4:	b8 f0       	brcs	.+46     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     3ec:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <__data_end>
     3f0:	08 95       	ret
     3f2:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <Twim_bytesWritten>
     3f6:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <Twim_writeData>
     3fa:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <Twim_writeData+0x1>
     3fe:	e8 0f       	add	r30, r24
     400:	f1 1d       	adc	r31, r1
     402:	80 81       	ld	r24, Z
     404:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     408:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <Twim_bytesWritten>
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <Twim_bytesWritten>
     412:	08 95       	ret
     414:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <Twim_address>
     418:	81 60       	ori	r24, 0x01	; 1
     41a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     41e:	08 95       	ret

00000420 <TWIMReadHandler>:
     420:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <Twim_bytesRead>
     424:	80 32       	cpi	r24, 0x20	; 32
     426:	e0 f4       	brcc	.+56     	; 0x460 <TWIMReadHandler+0x40>
     428:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     42c:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <Twim_bytesRead>
     430:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <Twim_readData>
     434:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <Twim_readData+0x1>
     438:	e9 0f       	add	r30, r25
     43a:	f1 1d       	adc	r31, r1
     43c:	80 83       	st	Z, r24
     43e:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <Twim_bytesRead>
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <Twim_bytesRead>
     448:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <Twim_bytesToRead>
     44c:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <Twim_bytesRead>
     450:	89 17       	cp	r24, r25
     452:	88 f0       	brcs	.+34     	; 0x476 <TWIMReadHandler+0x56>
     454:	87 e0       	ldi	r24, 0x07	; 7
     456:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     45a:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <__data_end>
     45e:	08 95       	ret
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     466:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <__data_end>
     46a:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <Twim_bytesToRead>
     46e:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <Twim_bytesRead>
     472:	89 17       	cp	r24, r25
     474:	78 f7       	brcc	.-34     	; 0x454 <TWIMReadHandler+0x34>
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     47c:	08 95       	ret

0000047e <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	0b b6       	in	r0, 0x3b	; 59
     48a:	0f 92       	push	r0
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4a4:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     4a8:	98 2f       	mov	r25, r24
     4aa:	9c 70       	andi	r25, 0x0C	; 12
     4ac:	39 f4       	brne	.+14     	; 0x4bc <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     4ae:	86 fd       	sbrc	r24, 6
     4b0:	21 c0       	rjmp	.+66     	; 0x4f4 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     4b2:	87 fd       	sbrc	r24, 7
     4b4:	22 c0       	rjmp	.+68     	; 0x4fa <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     4b6:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <__data_end>
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4bc:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     4c0:	88 60       	ori	r24, 0x08	; 8
     4c2:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     4c6:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     4ca:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <__data_end>
	{	
	}
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	7f 91       	pop	r23
     4dc:	6f 91       	pop	r22
     4de:	5f 91       	pop	r21
     4e0:	4f 91       	pop	r20
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0b be       	out	0x3b, r0	; 59
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     4f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <TWIMWriteHandler>
     4f8:	e8 cf       	rjmp	.-48     	; 0x4ca <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     4fa:	0e 94 10 02 	call	0x420	; 0x420 <TWIMReadHandler>
     4fe:	e5 cf       	rjmp	.-54     	; 0x4ca <__vector_46+0x4c>

00000500 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     500:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     504:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     508:	86 ff       	sbrs	r24, 6
     50a:	fc cf       	rjmp	.-8      	; 0x504 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     50c:	80 e4       	ldi	r24, 0x40	; 64
     50e:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	08 95       	ret

00000518 <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     518:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     51c:	87 ff       	sbrs	r24, 7
     51e:	fc cf       	rjmp	.-8      	; 0x518 <stdio_getchar>
	return USART.DATA;
     520:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	08 95       	ret

00000528 <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     528:	e0 e8       	ldi	r30, 0x80	; 128
     52a:	f6 e0       	ldi	r31, 0x06	; 6
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     530:	84 e0       	ldi	r24, 0x04	; 4
     532:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     534:	e0 ea       	ldi	r30, 0xA0	; 160
     536:	fa e0       	ldi	r31, 0x0A	; 10
     538:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     53a:	88 e1       	ldi	r24, 0x18	; 24
     53c:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     542:	85 ee       	ldi	r24, 0xE5	; 229
     544:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     546:	8c eb       	ldi	r24, 0xBC	; 188
     548:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     54a:	e7 e5       	ldi	r30, 0x57	; 87
     54c:	f1 e6       	ldi	r31, 0x61	; 97
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e2       	ldi	r25, 0x20	; 32
     552:	82 83       	std	Z+2, r24	; 0x02
     554:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     556:	80 83       	st	Z, r24
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	08 95       	ret

0000055c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     566:	0e 94 a8 08 	call	0x1150	; 0x1150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     56a:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <xHeapHasBeenInitialised.4119>
     56e:	81 11       	cpse	r24, r1
     570:	21 c0       	rjmp	.+66     	; 0x5b4 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     572:	8a ee       	ldi	r24, 0xEA	; 234
     574:	90 e2       	ldi	r25, 0x20	; 32
     576:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <xStart>
     57a:	90 93 e6 20 	sts	0x20E6, r25	; 0x8020e6 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     57e:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <xStart+0x2>
     582:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	9f e3       	ldi	r25, 0x3F	; 63
     58a:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <xEnd+0x2>
     58e:	90 93 e4 20 	sts	0x20E4, r25	; 0x8020e4 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     592:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <xEnd>
     596:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     59a:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <ucHeap+0x3>
     59e:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     5a2:	81 ee       	ldi	r24, 0xE1	; 225
     5a4:	90 e2       	ldi	r25, 0x20	; 32
     5a6:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <ucHeap+0x1>
     5aa:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <xHeapHasBeenInitialised.4119>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     5b4:	20 97       	sbiw	r28, 0x00	; 0
     5b6:	09 f4       	brne	.+2      	; 0x5ba <pvPortMalloc+0x5e>
     5b8:	64 c0       	rjmp	.+200    	; 0x682 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     5ba:	ae 01       	movw	r20, r28
     5bc:	4c 5f       	subi	r20, 0xFC	; 252
     5be:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     5c0:	23 96       	adiw	r28, 0x03	; 3
     5c2:	ce 3f       	cpi	r28, 0xFE	; 254
     5c4:	df 43       	sbci	r29, 0x3F	; 63
     5c6:	08 f0       	brcs	.+2      	; 0x5ca <pvPortMalloc+0x6e>
     5c8:	5c c0       	rjmp	.+184    	; 0x682 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     5ca:	e0 91 e5 20 	lds	r30, 0x20E5	; 0x8020e5 <xStart>
     5ce:	f0 91 e6 20 	lds	r31, 0x20E6	; 0x8020e6 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     5d2:	a5 ee       	ldi	r26, 0xE5	; 229
     5d4:	b0 e2       	ldi	r27, 0x20	; 32
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <pvPortMalloc+0x88>
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	39 f0       	breq	.+14     	; 0x5ee <pvPortMalloc+0x92>
     5e0:	df 01       	movw	r26, r30
     5e2:	fc 01       	movw	r30, r24
     5e4:	22 81       	ldd	r18, Z+2	; 0x02
     5e6:	33 81       	ldd	r19, Z+3	; 0x03
     5e8:	24 17       	cp	r18, r20
     5ea:	35 07       	cpc	r19, r21
     5ec:	a8 f3       	brcs	.-22     	; 0x5d8 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5ee:	c0 e2       	ldi	r28, 0x20	; 32
     5f0:	e1 3e       	cpi	r30, 0xE1	; 225
     5f2:	fc 07       	cpc	r31, r28
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <pvPortMalloc+0x9c>
     5f6:	45 c0       	rjmp	.+138    	; 0x682 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5f8:	cd 91       	ld	r28, X+
     5fa:	dc 91       	ld	r29, X
     5fc:	11 97       	sbiw	r26, 0x01	; 1
     5fe:	8e 01       	movw	r16, r28
     600:	0c 5f       	subi	r16, 0xFC	; 252
     602:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	8d 93       	st	X+, r24
     60a:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     60c:	c9 01       	movw	r24, r18
     60e:	84 1b       	sub	r24, r20
     610:	95 0b       	sbc	r25, r21
     612:	89 30       	cpi	r24, 0x09	; 9
     614:	91 05       	cpc	r25, r1
     616:	00 f1       	brcs	.+64     	; 0x658 <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     618:	bf 01       	movw	r22, r30
     61a:	64 0f       	add	r22, r20
     61c:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     61e:	db 01       	movw	r26, r22
     620:	12 96       	adiw	r26, 0x02	; 2
     622:	8d 93       	st	X+, r24
     624:	9c 93       	st	X, r25
     626:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     628:	42 83       	std	Z+2, r20	; 0x02
     62a:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     62c:	12 96       	adiw	r26, 0x02	; 2
     62e:	2d 91       	ld	r18, X+
     630:	3c 91       	ld	r19, X
     632:	13 97       	sbiw	r26, 0x03	; 3
     634:	a5 ee       	ldi	r26, 0xE5	; 229
     636:	b0 e2       	ldi	r27, 0x20	; 32
     638:	01 c0       	rjmp	.+2      	; 0x63c <pvPortMalloc+0xe0>
     63a:	df 01       	movw	r26, r30
     63c:	ed 91       	ld	r30, X+
     63e:	fc 91       	ld	r31, X
     640:	11 97       	sbiw	r26, 0x01	; 1
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	82 17       	cp	r24, r18
     648:	93 07       	cpc	r25, r19
     64a:	b8 f3       	brcs	.-18     	; 0x63a <pvPortMalloc+0xde>
     64c:	eb 01       	movw	r28, r22
     64e:	e8 83       	st	Y, r30
     650:	f9 83       	std	Y+1, r31	; 0x01
     652:	6d 93       	st	X+, r22
     654:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     656:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     658:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     65c:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     660:	82 1b       	sub	r24, r18
     662:	93 0b       	sbc	r25, r19
     664:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     668:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     66c:	0e 94 88 09 	call	0x1310	; 0x1310 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     670:	01 15       	cp	r16, r1
     672:	11 05       	cpc	r17, r1
     674:	41 f0       	breq	.+16     	; 0x686 <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     676:	c8 01       	movw	r24, r16
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     682:	0e 94 88 09 	call	0x1310	; 0x1310 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     686:	0e 94 47 0a 	call	0x148e	; 0x148e <vApplicationMallocFailedHook>
     68a:	00 e0       	ldi	r16, 0x00	; 0
     68c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     68e:	c8 01       	movw	r24, r16
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	21 f1       	breq	.+72     	; 0x6ea <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     6a2:	ec 01       	movw	r28, r24
     6a4:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     6a6:	0e 94 a8 08 	call	0x1150	; 0x1150 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6aa:	4a 81       	ldd	r20, Y+2	; 0x02
     6ac:	5b 81       	ldd	r21, Y+3	; 0x03
     6ae:	a5 ee       	ldi	r26, 0xE5	; 229
     6b0:	b0 e2       	ldi	r27, 0x20	; 32
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <vPortFree+0x1c>
     6b4:	df 01       	movw	r26, r30
     6b6:	ed 91       	ld	r30, X+
     6b8:	fc 91       	ld	r31, X
     6ba:	11 97       	sbiw	r26, 0x01	; 1
     6bc:	22 81       	ldd	r18, Z+2	; 0x02
     6be:	33 81       	ldd	r19, Z+3	; 0x03
     6c0:	24 17       	cp	r18, r20
     6c2:	35 07       	cpc	r19, r21
     6c4:	b8 f3       	brcs	.-18     	; 0x6b4 <vPortFree+0x1a>
     6c6:	e8 83       	st	Y, r30
     6c8:	f9 83       	std	Y+1, r31	; 0x01
     6ca:	cd 93       	st	X+, r28
     6cc:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     6ce:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6d2:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6d6:	48 0f       	add	r20, r24
     6d8:	59 1f       	adc	r21, r25
     6da:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     6de:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6e6:	0c 94 88 09 	jmp	0x1310	; 0x1310 <xTaskResumeAll>
	}
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     6f0:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6f4:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6f8:	08 95       	ret

000006fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6fa:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6fc:	03 96       	adiw	r24, 0x03	; 3
     6fe:	81 83       	std	Z+1, r24	; 0x01
     700:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	23 83       	std	Z+3, r18	; 0x03
     708:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     70a:	85 83       	std	Z+5, r24	; 0x05
     70c:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     70e:	87 83       	std	Z+7, r24	; 0x07
     710:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     712:	10 82       	st	Z, r1
     714:	08 95       	ret

00000716 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     716:	fc 01       	movw	r30, r24
     718:	10 86       	std	Z+8, r1	; 0x08
     71a:	11 86       	std	Z+9, r1	; 0x09
     71c:	08 95       	ret

0000071e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	9c 01       	movw	r18, r24
     724:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     726:	dc 01       	movw	r26, r24
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	cd 91       	ld	r28, X+
     72c:	dc 91       	ld	r29, X
     72e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     730:	c2 83       	std	Z+2, r28	; 0x02
     732:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     734:	8c 81       	ldd	r24, Y+4	; 0x04
     736:	9d 81       	ldd	r25, Y+5	; 0x05
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     73c:	8c 81       	ldd	r24, Y+4	; 0x04
     73e:	9d 81       	ldd	r25, Y+5	; 0x05
     740:	dc 01       	movw	r26, r24
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	6d 93       	st	X+, r22
     746:	7c 93       	st	X, r23
     748:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     74a:	6c 83       	std	Y+4, r22	; 0x04
     74c:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     74e:	20 87       	std	Z+8, r18	; 0x08
     750:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     752:	f9 01       	movw	r30, r18
     754:	80 81       	ld	r24, Z
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 83       	st	Z, r24
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     766:	48 81       	ld	r20, Y
     768:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     76a:	4f 3f       	cpi	r20, 0xFF	; 255
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	52 07       	cpc	r21, r18
     770:	01 f1       	breq	.+64     	; 0x7b2 <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     772:	dc 01       	movw	r26, r24
     774:	13 96       	adiw	r26, 0x03	; 3
     776:	01 c0       	rjmp	.+2      	; 0x77a <vListInsert+0x1a>
     778:	df 01       	movw	r26, r30
     77a:	12 96       	adiw	r26, 0x02	; 2
     77c:	ed 91       	ld	r30, X+
     77e:	fc 91       	ld	r31, X
     780:	13 97       	sbiw	r26, 0x03	; 3
     782:	20 81       	ld	r18, Z
     784:	31 81       	ldd	r19, Z+1	; 0x01
     786:	42 17       	cp	r20, r18
     788:	53 07       	cpc	r21, r19
     78a:	b0 f7       	brcc	.-20     	; 0x778 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     78c:	ea 83       	std	Y+2, r30	; 0x02
     78e:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     790:	c4 83       	std	Z+4, r28	; 0x04
     792:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     794:	ac 83       	std	Y+4, r26	; 0x04
     796:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     798:	12 96       	adiw	r26, 0x02	; 2
     79a:	cd 93       	st	X+, r28
     79c:	dc 93       	st	X, r29
     79e:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     7a0:	88 87       	std	Y+8, r24	; 0x08
     7a2:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 81       	ld	r18, Z
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
     7aa:	20 83       	st	Z, r18
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     7b2:	fc 01       	movw	r30, r24
     7b4:	a7 81       	ldd	r26, Z+7	; 0x07
     7b6:	b0 85       	ldd	r27, Z+8	; 0x08
     7b8:	12 96       	adiw	r26, 0x02	; 2
     7ba:	ed 91       	ld	r30, X+
     7bc:	fc 91       	ld	r31, X
     7be:	13 97       	sbiw	r26, 0x03	; 3
     7c0:	e5 cf       	rjmp	.-54     	; 0x78c <vListInsert+0x2c>

000007c2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     7c8:	a0 85       	ldd	r26, Z+8	; 0x08
     7ca:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7cc:	22 81       	ldd	r18, Z+2	; 0x02
     7ce:	33 81       	ldd	r19, Z+3	; 0x03
     7d0:	84 81       	ldd	r24, Z+4	; 0x04
     7d2:	95 81       	ldd	r25, Z+5	; 0x05
     7d4:	e9 01       	movw	r28, r18
     7d6:	8c 83       	std	Y+4, r24	; 0x04
     7d8:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7da:	84 81       	ldd	r24, Z+4	; 0x04
     7dc:	95 81       	ldd	r25, Z+5	; 0x05
     7de:	ec 01       	movw	r28, r24
     7e0:	2a 83       	std	Y+2, r18	; 0x02
     7e2:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	2d 91       	ld	r18, X+
     7e8:	3c 91       	ld	r19, X
     7ea:	12 97       	sbiw	r26, 0x02	; 2
     7ec:	e2 17       	cp	r30, r18
     7ee:	f3 07       	cpc	r31, r19
     7f0:	49 f0       	breq	.+18     	; 0x804 <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     7f2:	10 86       	std	Z+8, r1	; 0x08
     7f4:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     7f6:	8c 91       	ld	r24, X
     7f8:	81 50       	subi	r24, 0x01	; 1
     7fa:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     7fc:	8c 91       	ld	r24, X
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     804:	11 96       	adiw	r26, 0x01	; 1
     806:	8d 93       	st	X+, r24
     808:	9c 93       	st	X, r25
     80a:	12 97       	sbiw	r26, 0x02	; 2
     80c:	f2 cf       	rjmp	.-28     	; 0x7f2 <uxListRemove+0x30>

0000080e <pxPortInitialiseStack>:
//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
	asm volatile ( "ret" );
     80e:	31 e1       	ldi	r19, 0x11	; 17
     810:	fc 01       	movw	r30, r24
     812:	30 83       	st	Z, r19
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	22 e2       	ldi	r18, 0x22	; 34
     818:	20 83       	st	Z, r18
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	a3 e3       	ldi	r26, 0x33	; 51
     81e:	a0 83       	st	Z, r26
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	60 83       	st	Z, r22
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	70 83       	st	Z, r23
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	10 82       	st	Z, r1
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	10 82       	st	Z, r1
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	60 e8       	ldi	r22, 0x80	; 128
     834:	60 83       	st	Z, r22
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	10 82       	st	Z, r1
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	60 83       	st	Z, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	63 e0       	ldi	r22, 0x03	; 3
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	64 e0       	ldi	r22, 0x04	; 4
     84a:	60 83       	st	Z, r22
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	65 e0       	ldi	r22, 0x05	; 5
     850:	60 83       	st	Z, r22
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	66 e0       	ldi	r22, 0x06	; 6
     856:	60 83       	st	Z, r22
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	67 e0       	ldi	r22, 0x07	; 7
     85c:	60 83       	st	Z, r22
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	60 83       	st	Z, r22
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	69 e0       	ldi	r22, 0x09	; 9
     868:	60 83       	st	Z, r22
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	60 e1       	ldi	r22, 0x10	; 16
     86e:	60 83       	st	Z, r22
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	30 83       	st	Z, r19
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	32 e1       	ldi	r19, 0x12	; 18
     878:	30 83       	st	Z, r19
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	33 e1       	ldi	r19, 0x13	; 19
     87e:	30 83       	st	Z, r19
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	34 e1       	ldi	r19, 0x14	; 20
     884:	30 83       	st	Z, r19
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	35 e1       	ldi	r19, 0x15	; 21
     88a:	30 83       	st	Z, r19
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	36 e1       	ldi	r19, 0x16	; 22
     890:	30 83       	st	Z, r19
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	37 e1       	ldi	r19, 0x17	; 23
     896:	30 83       	st	Z, r19
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	38 e1       	ldi	r19, 0x18	; 24
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	39 e1       	ldi	r19, 0x19	; 25
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	30 e2       	ldi	r19, 0x20	; 32
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	31 e2       	ldi	r19, 0x21	; 33
     8ae:	30 83       	st	Z, r19
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	20 83       	st	Z, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	23 e2       	ldi	r18, 0x23	; 35
     8b8:	20 83       	st	Z, r18
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	40 83       	st	Z, r20
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	50 83       	st	Z, r21
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	26 e2       	ldi	r18, 0x26	; 38
     8c6:	20 83       	st	Z, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	27 e2       	ldi	r18, 0x27	; 39
     8cc:	20 83       	st	Z, r18
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	28 e2       	ldi	r18, 0x28	; 40
     8d2:	20 83       	st	Z, r18
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	29 e2       	ldi	r18, 0x29	; 41
     8d8:	20 83       	st	Z, r18
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	20 e3       	ldi	r18, 0x30	; 48
     8de:	20 83       	st	Z, r18
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	21 e3       	ldi	r18, 0x31	; 49
     8e4:	20 83       	st	Z, r18
     8e6:	87 97       	sbiw	r24, 0x27	; 39
     8e8:	08 95       	ret

000008ea <xPortStartScheduler>:
     8ea:	e0 e0       	ldi	r30, 0x00	; 0
     8ec:	f8 e0       	ldi	r31, 0x08	; 8
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	9f ef       	ldi	r25, 0xFF	; 255
     8f2:	80 a7       	std	Z+40, r24	; 0x28
     8f4:	91 a7       	std	Z+41, r25	; 0x29
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 83       	st	Z, r24
     8fa:	90 e4       	ldi	r25, 0x40	; 64
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	86 83       	std	Z+6, r24	; 0x06
     900:	87 83       	std	Z+7, r24	; 0x07
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	9d e7       	ldi	r25, 0x7D	; 125
     906:	86 a3       	std	Z+38, r24	; 0x26
     908:	97 a3       	std	Z+39, r25	; 0x27
     90a:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     90e:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     912:	cd 91       	ld	r28, X+
     914:	cd bf       	out	0x3d, r28	; 61
     916:	dd 91       	ld	r29, X+
     918:	de bf       	out	0x3e, r29	; 62
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	bf 90       	pop	r11
     944:	af 90       	pop	r10
     946:	9f 90       	pop	r9
     948:	8f 90       	pop	r8
     94a:	7f 90       	pop	r7
     94c:	6f 90       	pop	r6
     94e:	5f 90       	pop	r5
     950:	4f 90       	pop	r4
     952:	3f 90       	pop	r3
     954:	2f 90       	pop	r2
     956:	1f 90       	pop	r1
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	08 95       	ret
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret

00000964 <vPortYield>:
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	0f 92       	push	r0
     96c:	1f 92       	push	r1
     96e:	11 24       	eor	r1, r1
     970:	2f 92       	push	r2
     972:	3f 92       	push	r3
     974:	4f 92       	push	r4
     976:	5f 92       	push	r5
     978:	6f 92       	push	r6
     97a:	7f 92       	push	r7
     97c:	8f 92       	push	r8
     97e:	9f 92       	push	r9
     980:	af 92       	push	r10
     982:	bf 92       	push	r11
     984:	cf 92       	push	r12
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	2f 93       	push	r18
     992:	3f 93       	push	r19
     994:	4f 93       	push	r20
     996:	5f 93       	push	r21
     998:	6f 93       	push	r22
     99a:	7f 93       	push	r23
     99c:	8f 93       	push	r24
     99e:	9f 93       	push	r25
     9a0:	af 93       	push	r26
     9a2:	bf 93       	push	r27
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31
     9ac:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     9b0:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     9b4:	0d b6       	in	r0, 0x3d	; 61
     9b6:	0d 92       	st	X+, r0
     9b8:	0e b6       	in	r0, 0x3e	; 62
     9ba:	0d 92       	st	X+, r0
     9bc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <vTaskSwitchContext>
     9c0:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     9c4:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     9c8:	cd 91       	ld	r28, X+
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	dd 91       	ld	r29, X+
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	af 90       	pop	r10
     9fc:	9f 90       	pop	r9
     9fe:	8f 90       	pop	r8
     a00:	7f 90       	pop	r7
     a02:	6f 90       	pop	r6
     a04:	5f 90       	pop	r5
     a06:	4f 90       	pop	r4
     a08:	3f 90       	pop	r3
     a0a:	2f 90       	pop	r2
     a0c:	1f 90       	pop	r1
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	08 95       	ret

00000a16 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	0f 92       	push	r0
     a1e:	1f 92       	push	r1
     a20:	11 24       	eor	r1, r1
     a22:	2f 92       	push	r2
     a24:	3f 92       	push	r3
     a26:	4f 92       	push	r4
     a28:	5f 92       	push	r5
     a2a:	6f 92       	push	r6
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	2f 93       	push	r18
     a44:	3f 93       	push	r19
     a46:	4f 93       	push	r20
     a48:	5f 93       	push	r21
     a4a:	6f 93       	push	r22
     a4c:	7f 93       	push	r23
     a4e:	8f 93       	push	r24
     a50:	9f 93       	push	r25
     a52:	af 93       	push	r26
     a54:	bf 93       	push	r27
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
     a5e:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     a62:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     a66:	0d b6       	in	r0, 0x3d	; 61
     a68:	0d 92       	st	X+, r0
     a6a:	0e b6       	in	r0, 0x3e	; 62
     a6c:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     a6e:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a72:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a76:	80 91 53 61 	lds	r24, 0x6153	; 0x806153 <StatsTimer>
     a7a:	90 91 54 61 	lds	r25, 0x6154	; 0x806154 <StatsTimer+0x1>
     a7e:	a0 91 55 61 	lds	r26, 0x6155	; 0x806155 <StatsTimer+0x2>
     a82:	b0 91 56 61 	lds	r27, 0x6156	; 0x806156 <StatsTimer+0x3>
     a86:	82 0f       	add	r24, r18
     a88:	93 1f       	adc	r25, r19
     a8a:	a1 1d       	adc	r26, r1
     a8c:	b1 1d       	adc	r27, r1
     a8e:	80 93 53 61 	sts	0x6153, r24	; 0x806153 <StatsTimer>
     a92:	90 93 54 61 	sts	0x6154, r25	; 0x806154 <StatsTimer+0x1>
     a96:	a0 93 55 61 	sts	0x6155, r26	; 0x806155 <StatsTimer+0x2>
     a9a:	b0 93 56 61 	sts	0x6156, r27	; 0x806156 <StatsTimer+0x3>
		xTaskIncrementTick();
     a9e:	0e 94 ae 08 	call	0x115c	; 0x115c <xTaskIncrementTick>
		vTaskSwitchContext();
     aa2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     aa6:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     aaa:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     aae:	cd 91       	ld	r28, X+
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	dd 91       	ld	r29, X+
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	9f 90       	pop	r9
     ae4:	8f 90       	pop	r8
     ae6:	7f 90       	pop	r7
     ae8:	6f 90       	pop	r6
     aea:	5f 90       	pop	r5
     aec:	4f 90       	pop	r4
     aee:	3f 90       	pop	r3
     af0:	2f 90       	pop	r2
     af2:	1f 90       	pop	r1
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0

		asm volatile ( "reti" );
     afa:	18 95       	reti

00000afc <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     afc:	08 95       	ret

00000afe <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	0f 92       	push	r0
     b06:	1f 92       	push	r1
     b08:	11 24       	eor	r1, r1
     b0a:	2f 92       	push	r2
     b0c:	3f 92       	push	r3
     b0e:	4f 92       	push	r4
     b10:	5f 92       	push	r5
     b12:	6f 92       	push	r6
     b14:	7f 92       	push	r7
     b16:	8f 92       	push	r8
     b18:	9f 92       	push	r9
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
     b46:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     b4a:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     b4e:	0d b6       	in	r0, 0x3d	; 61
     b50:	0d 92       	st	X+, r0
     b52:	0e b6       	in	r0, 0x3e	; 62
     b54:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	9f ef       	ldi	r25, 0xFF	; 255
     b5a:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     b5e:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
     b62:	0e 94 3c 0a 	call	0x1478	; 0x1478 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b66:	a0 91 51 61 	lds	r26, 0x6151	; 0x806151 <pxCurrentTCB>
     b6a:	b0 91 52 61 	lds	r27, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     b6e:	cd 91       	ld	r28, X+
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	dd 91       	ld	r29, X+
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	7f 91       	pop	r23
     b88:	6f 91       	pop	r22
     b8a:	5f 91       	pop	r21
     b8c:	4f 91       	pop	r20
     b8e:	3f 91       	pop	r19
     b90:	2f 91       	pop	r18
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	3f 90       	pop	r3
     bb0:	2f 90       	pop	r2
     bb2:	1f 90       	pop	r1
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
	asm volatile ( "reti" );
     bba:	18 95       	reti

00000bbc <prvIdleTask>:
	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
     bbc:	20 c0       	rjmp	.+64     	; 0xbfe <prvIdleTask+0x42>
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	0f 92       	push	r0
     bc4:	e0 91 0a 61 	lds	r30, 0x610A	; 0x80610a <xTasksWaitingTermination+0x5>
     bc8:	f0 91 0b 61 	lds	r31, 0x610B	; 0x80610b <xTasksWaitingTermination+0x6>
     bcc:	c6 81       	ldd	r28, Z+6	; 0x06
     bce:	d7 81       	ldd	r29, Z+7	; 0x07
     bd0:	ce 01       	movw	r24, r28
     bd2:	02 96       	adiw	r24, 0x02	; 2
     bd4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
     bd8:	80 91 fa 60 	lds	r24, 0x60FA	; 0x8060fa <uxCurrentNumberOfTasks>
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	80 93 fa 60 	sts	0x60FA, r24	; 0x8060fa <uxCurrentNumberOfTasks>
     be2:	80 91 04 61 	lds	r24, 0x6104	; 0x806104 <uxDeletedTasksWaitingCleanUp>
     be6:	81 50       	subi	r24, 0x01	; 1
     be8:	80 93 04 61 	sts	0x6104, r24	; 0x806104 <uxDeletedTasksWaitingCleanUp>
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	8f 89       	ldd	r24, Y+23	; 0x17
     bf2:	98 8d       	ldd	r25, Y+24	; 0x18
     bf4:	0e 94 4d 03 	call	0x69a	; 0x69a <vPortFree>
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 4d 03 	call	0x69a	; 0x69a <vPortFree>
     bfe:	80 91 04 61 	lds	r24, 0x6104	; 0x806104 <uxDeletedTasksWaitingCleanUp>
     c02:	81 11       	cpse	r24, r1
     c04:	dc cf       	rjmp	.-72     	; 0xbbe <prvIdleTask+0x2>
     c06:	80 91 2d 61 	lds	r24, 0x612D	; 0x80612d <pxReadyTasksLists>
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	10 f0       	brcs	.+4      	; 0xc12 <prvIdleTask+0x56>
     c0e:	0e 94 b2 04 	call	0x964	; 0x964 <vPortYield>
     c12:	0e 94 46 0a 	call	0x148c	; 0x148c <vApplicationIdleHook>
     c16:	f3 cf       	rjmp	.-26     	; 0xbfe <prvIdleTask+0x42>

00000c18 <prvResetNextTaskUnblockTime.part.0>:
     c18:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
     c1c:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
     c20:	05 80       	ldd	r0, Z+5	; 0x05
     c22:	f6 81       	ldd	r31, Z+6	; 0x06
     c24:	e0 2d       	mov	r30, r0
     c26:	06 80       	ldd	r0, Z+6	; 0x06
     c28:	f7 81       	ldd	r31, Z+7	; 0x07
     c2a:	e0 2d       	mov	r30, r0
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	80 93 f0 60 	sts	0x60F0, r24	; 0x8060f0 <xNextTaskUnblockTime>
     c34:	90 93 f1 60 	sts	0x60F1, r25	; 0x8060f1 <xNextTaskUnblockTime+0x1>
     c38:	08 95       	ret

00000c3a <prvAddCurrentTaskToDelayedList>:
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	ec 01       	movw	r28, r24
     c46:	f6 2e       	mov	r15, r22
     c48:	00 91 f8 60 	lds	r16, 0x60F8	; 0x8060f8 <xTickCount>
     c4c:	10 91 f9 60 	lds	r17, 0x60F9	; 0x8060f9 <xTickCount+0x1>
     c50:	80 91 51 61 	lds	r24, 0x6151	; 0x806151 <pxCurrentTCB>
     c54:	90 91 52 61 	lds	r25, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     c58:	02 96       	adiw	r24, 0x02	; 2
     c5a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
     c5e:	cf 3f       	cpi	r28, 0xFF	; 255
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	d8 07       	cpc	r29, r24
     c64:	a9 f1       	breq	.+106    	; 0xcd0 <prvAddCurrentTaskToDelayedList+0x96>
     c66:	c0 0f       	add	r28, r16
     c68:	d1 1f       	adc	r29, r17
     c6a:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
     c6e:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     c72:	c2 83       	std	Z+2, r28	; 0x02
     c74:	d3 83       	std	Z+3, r29	; 0x03
     c76:	60 91 51 61 	lds	r22, 0x6151	; 0x806151 <pxCurrentTCB>
     c7a:	70 91 52 61 	lds	r23, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     c7e:	c0 17       	cp	r28, r16
     c80:	d1 07       	cpc	r29, r17
     c82:	c8 f0       	brcs	.+50     	; 0xcb6 <prvAddCurrentTaskToDelayedList+0x7c>
     c84:	80 91 19 61 	lds	r24, 0x6119	; 0x806119 <pxDelayedTaskList>
     c88:	90 91 1a 61 	lds	r25, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
     c8c:	6e 5f       	subi	r22, 0xFE	; 254
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	0e 94 b0 03 	call	0x760	; 0x760 <vListInsert>
     c94:	80 91 f0 60 	lds	r24, 0x60F0	; 0x8060f0 <xNextTaskUnblockTime>
     c98:	90 91 f1 60 	lds	r25, 0x60F1	; 0x8060f1 <xNextTaskUnblockTime+0x1>
     c9c:	c8 17       	cp	r28, r24
     c9e:	d9 07       	cpc	r29, r25
     ca0:	20 f4       	brcc	.+8      	; 0xcaa <prvAddCurrentTaskToDelayedList+0x70>
     ca2:	c0 93 f0 60 	sts	0x60F0, r28	; 0x8060f0 <xNextTaskUnblockTime>
     ca6:	d0 93 f1 60 	sts	0x60F1, r29	; 0x8060f1 <xNextTaskUnblockTime+0x1>
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	08 95       	ret
     cb6:	80 91 17 61 	lds	r24, 0x6117	; 0x806117 <pxOverflowDelayedTaskList>
     cba:	90 91 18 61 	lds	r25, 0x6118	; 0x806118 <pxOverflowDelayedTaskList+0x1>
     cbe:	6e 5f       	subi	r22, 0xFE	; 254
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	0c 94 b0 03 	jmp	0x760	; 0x760 <vListInsert>
     cd0:	ff 20       	and	r15, r15
     cd2:	49 f2       	breq	.-110    	; 0xc66 <prvAddCurrentTaskToDelayedList+0x2c>
     cd4:	60 91 51 61 	lds	r22, 0x6151	; 0x806151 <pxCurrentTCB>
     cd8:	70 91 52 61 	lds	r23, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     cdc:	6e 5f       	subi	r22, 0xFE	; 254
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	8b ef       	ldi	r24, 0xFB	; 251
     ce2:	90 e6       	ldi	r25, 0x60	; 96
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	0c 94 8f 03 	jmp	0x71e	; 0x71e <vListInsertEnd>

00000cf2 <vTaskSwitchContext.part.5>:
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	10 92 f4 60 	sts	0x60F4, r1	; 0x8060f4 <xYieldPending>
     cfc:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d00:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     d04:	80 91 53 61 	lds	r24, 0x6153	; 0x806153 <StatsTimer>
     d08:	90 91 54 61 	lds	r25, 0x6154	; 0x806154 <StatsTimer+0x1>
     d0c:	a0 91 55 61 	lds	r26, 0x6155	; 0x806155 <StatsTimer+0x2>
     d10:	b0 91 56 61 	lds	r27, 0x6156	; 0x806156 <StatsTimer+0x3>
     d14:	82 0f       	add	r24, r18
     d16:	93 1f       	adc	r25, r19
     d18:	a1 1d       	adc	r26, r1
     d1a:	b1 1d       	adc	r27, r1
     d1c:	00 91 e9 60 	lds	r16, 0x60E9	; 0x8060e9 <ulTaskSwitchedInTime>
     d20:	10 91 ea 60 	lds	r17, 0x60EA	; 0x8060ea <ulTaskSwitchedInTime+0x1>
     d24:	20 91 eb 60 	lds	r18, 0x60EB	; 0x8060eb <ulTaskSwitchedInTime+0x2>
     d28:	30 91 ec 60 	lds	r19, 0x60EC	; 0x8060ec <ulTaskSwitchedInTime+0x3>
     d2c:	08 17       	cp	r16, r24
     d2e:	19 07       	cpc	r17, r25
     d30:	2a 07       	cpc	r18, r26
     d32:	3b 07       	cpc	r19, r27
     d34:	a0 f4       	brcc	.+40     	; 0xd5e <vTaskSwitchContext.part.5+0x6c>
     d36:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
     d3a:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     d3e:	45 a1       	ldd	r20, Z+37	; 0x25
     d40:	56 a1       	ldd	r21, Z+38	; 0x26
     d42:	67 a1       	ldd	r22, Z+39	; 0x27
     d44:	70 a5       	ldd	r23, Z+40	; 0x28
     d46:	40 1b       	sub	r20, r16
     d48:	51 0b       	sbc	r21, r17
     d4a:	62 0b       	sbc	r22, r18
     d4c:	73 0b       	sbc	r23, r19
     d4e:	48 0f       	add	r20, r24
     d50:	59 1f       	adc	r21, r25
     d52:	6a 1f       	adc	r22, r26
     d54:	7b 1f       	adc	r23, r27
     d56:	45 a3       	std	Z+37, r20	; 0x25
     d58:	56 a3       	std	Z+38, r21	; 0x26
     d5a:	67 a3       	std	Z+39, r22	; 0x27
     d5c:	70 a7       	std	Z+40, r23	; 0x28
     d5e:	80 93 e9 60 	sts	0x60E9, r24	; 0x8060e9 <ulTaskSwitchedInTime>
     d62:	90 93 ea 60 	sts	0x60EA, r25	; 0x8060ea <ulTaskSwitchedInTime+0x1>
     d66:	a0 93 eb 60 	sts	0x60EB, r26	; 0x8060eb <ulTaskSwitchedInTime+0x2>
     d6a:	b0 93 ec 60 	sts	0x60EC, r27	; 0x8060ec <ulTaskSwitchedInTime+0x3>
     d6e:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
     d72:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     d76:	07 88       	ldd	r0, Z+23	; 0x17
     d78:	f0 8d       	ldd	r31, Z+24	; 0x18
     d7a:	e0 2d       	mov	r30, r0
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	a2 81       	ldd	r26, Z+2	; 0x02
     d82:	b3 81       	ldd	r27, Z+3	; 0x03
     d84:	85 3a       	cpi	r24, 0xA5	; 165
     d86:	95 4a       	sbci	r25, 0xA5	; 165
     d88:	a5 4a       	sbci	r26, 0xA5	; 165
     d8a:	b5 4a       	sbci	r27, 0xA5	; 165
     d8c:	09 f4       	brne	.+2      	; 0xd90 <vTaskSwitchContext.part.5+0x9e>
     d8e:	4c c0       	rjmp	.+152    	; 0xe28 <vTaskSwitchContext.part.5+0x136>
     d90:	60 91 51 61 	lds	r22, 0x6151	; 0x806151 <pxCurrentTCB>
     d94:	70 91 52 61 	lds	r23, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     d98:	80 91 51 61 	lds	r24, 0x6151	; 0x806151 <pxCurrentTCB>
     d9c:	90 91 52 61 	lds	r25, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     da0:	67 5e       	subi	r22, 0xE7	; 231
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <vApplicationStackOverflowHook>
     da8:	c0 91 f7 60 	lds	r28, 0x60F7	; 0x8060f7 <uxTopReadyPriority>
     dac:	8c 2f       	mov	r24, r28
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9c 01       	movw	r18, r24
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	22 0f       	add	r18, r18
     dbc:	33 1f       	adc	r19, r19
     dbe:	f9 01       	movw	r30, r18
     dc0:	e8 0f       	add	r30, r24
     dc2:	f9 1f       	adc	r31, r25
     dc4:	e3 5d       	subi	r30, 0xD3	; 211
     dc6:	fe 49       	sbci	r31, 0x9E	; 158
     dc8:	40 81       	ld	r20, Z
     dca:	41 11       	cpse	r20, r1
     dcc:	0c c0       	rjmp	.+24     	; 0xde6 <vTaskSwitchContext.part.5+0xf4>
     dce:	cc 23       	and	r28, r28
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <vTaskSwitchContext.part.5+0xe4>
     dd2:	c1 50       	subi	r28, 0x01	; 1
     dd4:	eb cf       	rjmp	.-42     	; 0xdac <vTaskSwitchContext.part.5+0xba>
     dd6:	6c e8       	ldi	r22, 0x8C	; 140
     dd8:	7b e0       	ldi	r23, 0x0B	; 11
     dda:	80 e1       	ldi	r24, 0x10	; 16
     ddc:	90 e2       	ldi	r25, 0x20	; 32
     dde:	0e 94 9e 0a 	call	0x153c	; 0x153c <vAssertCalled>
     de2:	c1 50       	subi	r28, 0x01	; 1
     de4:	e3 cf       	rjmp	.-58     	; 0xdac <vTaskSwitchContext.part.5+0xba>
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	dc 01       	movw	r26, r24
     dec:	a3 5d       	subi	r26, 0xD3	; 211
     dee:	be 49       	sbci	r27, 0x9E	; 158
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	12 97       	sbiw	r26, 0x02	; 2
     df8:	02 80       	ldd	r0, Z+2	; 0x02
     dfa:	f3 81       	ldd	r31, Z+3	; 0x03
     dfc:	e0 2d       	mov	r30, r0
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	ed 93       	st	X+, r30
     e02:	fc 93       	st	X, r31
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	80 5d       	subi	r24, 0xD0	; 208
     e08:	9e 49       	sbci	r25, 0x9E	; 158
     e0a:	e8 17       	cp	r30, r24
     e0c:	f9 07       	cpc	r31, r25
     e0e:	59 f1       	breq	.+86     	; 0xe66 <vTaskSwitchContext.part.5+0x174>
     e10:	86 81       	ldd	r24, Z+6	; 0x06
     e12:	97 81       	ldd	r25, Z+7	; 0x07
     e14:	80 93 51 61 	sts	0x6151, r24	; 0x806151 <pxCurrentTCB>
     e18:	90 93 52 61 	sts	0x6152, r25	; 0x806152 <pxCurrentTCB+0x1>
     e1c:	c0 93 f7 60 	sts	0x60F7, r28	; 0x8060f7 <uxTopReadyPriority>
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	95 81       	ldd	r25, Z+5	; 0x05
     e2c:	a6 81       	ldd	r26, Z+6	; 0x06
     e2e:	b7 81       	ldd	r27, Z+7	; 0x07
     e30:	85 3a       	cpi	r24, 0xA5	; 165
     e32:	95 4a       	sbci	r25, 0xA5	; 165
     e34:	a5 4a       	sbci	r26, 0xA5	; 165
     e36:	b5 4a       	sbci	r27, 0xA5	; 165
     e38:	09 f0       	breq	.+2      	; 0xe3c <vTaskSwitchContext.part.5+0x14a>
     e3a:	aa cf       	rjmp	.-172    	; 0xd90 <vTaskSwitchContext.part.5+0x9e>
     e3c:	80 85       	ldd	r24, Z+8	; 0x08
     e3e:	91 85       	ldd	r25, Z+9	; 0x09
     e40:	a2 85       	ldd	r26, Z+10	; 0x0a
     e42:	b3 85       	ldd	r27, Z+11	; 0x0b
     e44:	85 3a       	cpi	r24, 0xA5	; 165
     e46:	95 4a       	sbci	r25, 0xA5	; 165
     e48:	a5 4a       	sbci	r26, 0xA5	; 165
     e4a:	b5 4a       	sbci	r27, 0xA5	; 165
     e4c:	09 f0       	breq	.+2      	; 0xe50 <vTaskSwitchContext.part.5+0x15e>
     e4e:	a0 cf       	rjmp	.-192    	; 0xd90 <vTaskSwitchContext.part.5+0x9e>
     e50:	84 85       	ldd	r24, Z+12	; 0x0c
     e52:	95 85       	ldd	r25, Z+13	; 0x0d
     e54:	a6 85       	ldd	r26, Z+14	; 0x0e
     e56:	b7 85       	ldd	r27, Z+15	; 0x0f
     e58:	85 3a       	cpi	r24, 0xA5	; 165
     e5a:	95 4a       	sbci	r25, 0xA5	; 165
     e5c:	a5 4a       	sbci	r26, 0xA5	; 165
     e5e:	b5 4a       	sbci	r27, 0xA5	; 165
     e60:	09 f0       	breq	.+2      	; 0xe64 <vTaskSwitchContext.part.5+0x172>
     e62:	96 cf       	rjmp	.-212    	; 0xd90 <vTaskSwitchContext.part.5+0x9e>
     e64:	a1 cf       	rjmp	.-190    	; 0xda8 <vTaskSwitchContext.part.5+0xb6>
     e66:	02 80       	ldd	r0, Z+2	; 0x02
     e68:	f3 81       	ldd	r31, Z+3	; 0x03
     e6a:	e0 2d       	mov	r30, r0
     e6c:	11 96       	adiw	r26, 0x01	; 1
     e6e:	ed 93       	st	X+, r30
     e70:	fc 93       	st	X, r31
     e72:	12 97       	sbiw	r26, 0x02	; 2
     e74:	cd cf       	rjmp	.-102    	; 0xe10 <vTaskSwitchContext.part.5+0x11e>

00000e76 <xTaskCreate>:
     e76:	5f 92       	push	r5
     e78:	6f 92       	push	r6
     e7a:	7f 92       	push	r7
     e7c:	8f 92       	push	r8
     e7e:	9f 92       	push	r9
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	4c 01       	movw	r8, r24
     e96:	eb 01       	movw	r28, r22
     e98:	5a 01       	movw	r10, r20
     e9a:	39 01       	movw	r6, r18
     e9c:	50 2e       	mov	r5, r16
     e9e:	ca 01       	movw	r24, r20
     ea0:	0e 94 ae 02 	call	0x55c	; 0x55c <pvPortMalloc>
     ea4:	8c 01       	movw	r16, r24
     ea6:	89 2b       	or	r24, r25
     ea8:	09 f4       	brne	.+2      	; 0xeac <xTaskCreate+0x36>
     eaa:	dc c0       	rjmp	.+440    	; 0x1064 <xTaskCreate+0x1ee>
     eac:	8e e2       	ldi	r24, 0x2E	; 46
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 ae 02 	call	0x55c	; 0x55c <pvPortMalloc>
     eb4:	6c 01       	movw	r12, r24
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	09 f4       	brne	.+2      	; 0xebc <xTaskCreate+0x46>
     eba:	d1 c0       	rjmp	.+418    	; 0x105e <xTaskCreate+0x1e8>
     ebc:	dc 01       	movw	r26, r24
     ebe:	57 96       	adiw	r26, 0x17	; 23
     ec0:	0d 93       	st	X+, r16
     ec2:	1c 93       	st	X, r17
     ec4:	58 97       	sbiw	r26, 0x18	; 24
     ec6:	20 97       	sbiw	r28, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <xTaskCreate+0x56>
     eca:	ce c0       	rjmp	.+412    	; 0x1068 <xTaskCreate+0x1f2>
     ecc:	c8 01       	movw	r24, r16
     ece:	a5 01       	movw	r20, r10
     ed0:	65 ea       	ldi	r22, 0xA5	; 165
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <memset>
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	af 1a       	sub	r10, r31
     edc:	b1 08       	sbc	r11, r1
     ede:	d6 01       	movw	r26, r12
     ee0:	57 96       	adiw	r26, 0x17	; 23
     ee2:	8d 91       	ld	r24, X+
     ee4:	9c 91       	ld	r25, X
     ee6:	58 97       	sbiw	r26, 0x18	; 24
     ee8:	a8 0e       	add	r10, r24
     eea:	b9 1e       	adc	r11, r25
     eec:	f6 01       	movw	r30, r12
     eee:	79 96       	adiw	r30, 0x19	; 25
     ef0:	9e 01       	movw	r18, r28
     ef2:	28 5f       	subi	r18, 0xF8	; 248
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	de 01       	movw	r26, r28
     ef8:	89 91       	ld	r24, Y+
     efa:	81 93       	st	Z+, r24
     efc:	8c 91       	ld	r24, X
     efe:	88 23       	and	r24, r24
     f00:	19 f0       	breq	.+6      	; 0xf08 <xTaskCreate+0x92>
     f02:	c2 17       	cp	r28, r18
     f04:	d3 07       	cpc	r29, r19
     f06:	b9 f7       	brne	.-18     	; 0xef6 <xTaskCreate+0x80>
     f08:	f6 01       	movw	r30, r12
     f0a:	10 a2       	std	Z+32, r1	; 0x20
     f0c:	05 2d       	mov	r16, r5
     f0e:	04 30       	cpi	r16, 0x04	; 4
     f10:	08 f0       	brcs	.+2      	; 0xf14 <xTaskCreate+0x9e>
     f12:	9f c0       	rjmp	.+318    	; 0x1052 <xTaskCreate+0x1dc>
     f14:	d6 01       	movw	r26, r12
     f16:	56 96       	adiw	r26, 0x16	; 22
     f18:	0c 93       	st	X, r16
     f1a:	56 97       	sbiw	r26, 0x16	; 22
     f1c:	93 96       	adiw	r26, 0x23	; 35
     f1e:	0c 93       	st	X, r16
     f20:	93 97       	sbiw	r26, 0x23	; 35
     f22:	94 96       	adiw	r26, 0x24	; 36
     f24:	1c 92       	st	X, r1
     f26:	e6 01       	movw	r28, r12
     f28:	22 96       	adiw	r28, 0x02	; 2
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 8b 03 	call	0x716	; 0x716 <vListInitialiseItem>
     f30:	c6 01       	movw	r24, r12
     f32:	0c 96       	adiw	r24, 0x0c	; 12
     f34:	0e 94 8b 03 	call	0x716	; 0x716 <vListInitialiseItem>
     f38:	f6 01       	movw	r30, r12
     f3a:	c0 86       	std	Z+8, r12	; 0x08
     f3c:	d1 86       	std	Z+9, r13	; 0x09
     f3e:	84 e0       	ldi	r24, 0x04	; 4
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	80 1b       	sub	r24, r16
     f44:	91 09       	sbc	r25, r1
     f46:	84 87       	std	Z+12, r24	; 0x0c
     f48:	95 87       	std	Z+13, r25	; 0x0d
     f4a:	c2 8a       	std	Z+18, r12	; 0x12
     f4c:	d3 8a       	std	Z+19, r13	; 0x13
     f4e:	15 a2       	std	Z+37, r1	; 0x25
     f50:	16 a2       	std	Z+38, r1	; 0x26
     f52:	17 a2       	std	Z+39, r1	; 0x27
     f54:	10 a6       	std	Z+40, r1	; 0x28
     f56:	11 a6       	std	Z+41, r1	; 0x29
     f58:	12 a6       	std	Z+42, r1	; 0x2a
     f5a:	13 a6       	std	Z+43, r1	; 0x2b
     f5c:	14 a6       	std	Z+44, r1	; 0x2c
     f5e:	15 a6       	std	Z+45, r1	; 0x2d
     f60:	a3 01       	movw	r20, r6
     f62:	b4 01       	movw	r22, r8
     f64:	c5 01       	movw	r24, r10
     f66:	0e 94 07 04 	call	0x80e	; 0x80e <pxPortInitialiseStack>
     f6a:	d6 01       	movw	r26, r12
     f6c:	8d 93       	st	X+, r24
     f6e:	9c 93       	st	X, r25
     f70:	e1 14       	cp	r14, r1
     f72:	f1 04       	cpc	r15, r1
     f74:	19 f0       	breq	.+6      	; 0xf7c <xTaskCreate+0x106>
     f76:	f7 01       	movw	r30, r14
     f78:	c0 82       	st	Z, r12
     f7a:	d1 82       	std	Z+1, r13	; 0x01
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	80 91 fa 60 	lds	r24, 0x60FA	; 0x8060fa <uxCurrentNumberOfTasks>
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 93 fa 60 	sts	0x60FA, r24	; 0x8060fa <uxCurrentNumberOfTasks>
     f8c:	80 91 51 61 	lds	r24, 0x6151	; 0x806151 <pxCurrentTCB>
     f90:	90 91 52 61 	lds	r25, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     f94:	89 2b       	or	r24, r25
     f96:	99 f0       	breq	.+38     	; 0xfbe <xTaskCreate+0x148>
     f98:	80 91 f6 60 	lds	r24, 0x60F6	; 0x8060f6 <xSchedulerRunning>
     f9c:	81 11       	cpse	r24, r1
     f9e:	18 c0       	rjmp	.+48     	; 0xfd0 <xTaskCreate+0x15a>
     fa0:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
     fa4:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
     fa8:	d6 01       	movw	r26, r12
     faa:	56 96       	adiw	r26, 0x16	; 22
     fac:	8c 91       	ld	r24, X
     fae:	96 89       	ldd	r25, Z+22	; 0x16
     fb0:	89 17       	cp	r24, r25
     fb2:	88 f0       	brcs	.+34     	; 0xfd6 <xTaskCreate+0x160>
     fb4:	c0 92 51 61 	sts	0x6151, r12	; 0x806151 <pxCurrentTCB>
     fb8:	d0 92 52 61 	sts	0x6152, r13	; 0x806152 <pxCurrentTCB+0x1>
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <xTaskCreate+0x160>
     fbe:	c0 92 51 61 	sts	0x6151, r12	; 0x806151 <pxCurrentTCB>
     fc2:	d0 92 52 61 	sts	0x6152, r13	; 0x806152 <pxCurrentTCB+0x1>
     fc6:	80 91 fa 60 	lds	r24, 0x60FA	; 0x8060fa <uxCurrentNumberOfTasks>
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <xTaskCreate+0x15a>
     fce:	56 c0       	rjmp	.+172    	; 0x107c <xTaskCreate+0x206>
     fd0:	d6 01       	movw	r26, r12
     fd2:	56 96       	adiw	r26, 0x16	; 22
     fd4:	8c 91       	ld	r24, X
     fd6:	90 91 f2 60 	lds	r25, 0x60F2	; 0x8060f2 <uxTaskNumber>
     fda:	9f 5f       	subi	r25, 0xFF	; 255
     fdc:	90 93 f2 60 	sts	0x60F2, r25	; 0x8060f2 <uxTaskNumber>
     fe0:	f6 01       	movw	r30, r12
     fe2:	91 a3       	std	Z+33, r25	; 0x21
     fe4:	90 91 f7 60 	lds	r25, 0x60F7	; 0x8060f7 <uxTopReadyPriority>
     fe8:	98 17       	cp	r25, r24
     fea:	80 f1       	brcs	.+96     	; 0x104c <xTaskCreate+0x1d6>
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9c 01       	movw	r18, r24
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	be 01       	movw	r22, r28
    1002:	83 5d       	subi	r24, 0xD3	; 211
    1004:	9e 49       	sbci	r25, 0x9E	; 158
    1006:	0e 94 8f 03 	call	0x71e	; 0x71e <vListInsertEnd>
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	80 91 f6 60 	lds	r24, 0x60F6	; 0x8060f6 <xSchedulerRunning>
    1012:	88 23       	and	r24, r24
    1014:	51 f0       	breq	.+20     	; 0x102a <xTaskCreate+0x1b4>
    1016:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
    101a:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
    101e:	96 89       	ldd	r25, Z+22	; 0x16
    1020:	d6 01       	movw	r26, r12
    1022:	56 96       	adiw	r26, 0x16	; 22
    1024:	8c 91       	ld	r24, X
    1026:	98 17       	cp	r25, r24
    1028:	b0 f0       	brcs	.+44     	; 0x1056 <xTaskCreate+0x1e0>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	bf 90       	pop	r11
    103e:	af 90       	pop	r10
    1040:	9f 90       	pop	r9
    1042:	8f 90       	pop	r8
    1044:	7f 90       	pop	r7
    1046:	6f 90       	pop	r6
    1048:	5f 90       	pop	r5
    104a:	08 95       	ret
    104c:	80 93 f7 60 	sts	0x60F7, r24	; 0x8060f7 <uxTopReadyPriority>
    1050:	cd cf       	rjmp	.-102    	; 0xfec <xTaskCreate+0x176>
    1052:	03 e0       	ldi	r16, 0x03	; 3
    1054:	5f cf       	rjmp	.-322    	; 0xf14 <xTaskCreate+0x9e>
    1056:	0e 94 b2 04 	call	0x964	; 0x964 <vPortYield>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	e7 cf       	rjmp	.-50     	; 0x102c <xTaskCreate+0x1b6>
    105e:	c8 01       	movw	r24, r16
    1060:	0e 94 4d 03 	call	0x69a	; 0x69a <vPortFree>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	e2 cf       	rjmp	.-60     	; 0x102c <xTaskCreate+0x1b6>
    1068:	60 e6       	ldi	r22, 0x60	; 96
    106a:	73 e0       	ldi	r23, 0x03	; 3
    106c:	80 e1       	ldi	r24, 0x10	; 16
    106e:	90 e2       	ldi	r25, 0x20	; 32
    1070:	0e 94 9e 0a 	call	0x153c	; 0x153c <vAssertCalled>
    1074:	f6 01       	movw	r30, r12
    1076:	87 89       	ldd	r24, Z+23	; 0x17
    1078:	90 8d       	ldd	r25, Z+24	; 0x18
    107a:	29 cf       	rjmp	.-430    	; 0xece <xTaskCreate+0x58>
    107c:	8d e2       	ldi	r24, 0x2D	; 45
    107e:	91 e6       	ldi	r25, 0x61	; 97
    1080:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    1084:	86 e3       	ldi	r24, 0x36	; 54
    1086:	91 e6       	ldi	r25, 0x61	; 97
    1088:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    108c:	8f e3       	ldi	r24, 0x3F	; 63
    108e:	91 e6       	ldi	r25, 0x61	; 97
    1090:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    1094:	88 e4       	ldi	r24, 0x48	; 72
    1096:	91 e6       	ldi	r25, 0x61	; 97
    1098:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    109c:	84 e2       	ldi	r24, 0x24	; 36
    109e:	91 e6       	ldi	r25, 0x61	; 97
    10a0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    10a4:	8b e1       	ldi	r24, 0x1B	; 27
    10a6:	91 e6       	ldi	r25, 0x61	; 97
    10a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    10ac:	8e e0       	ldi	r24, 0x0E	; 14
    10ae:	91 e6       	ldi	r25, 0x61	; 97
    10b0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    10b4:	85 e0       	ldi	r24, 0x05	; 5
    10b6:	91 e6       	ldi	r25, 0x61	; 97
    10b8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    10bc:	8b ef       	ldi	r24, 0xFB	; 251
    10be:	90 e6       	ldi	r25, 0x60	; 96
    10c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInitialise>
    10c4:	84 e2       	ldi	r24, 0x24	; 36
    10c6:	91 e6       	ldi	r25, 0x61	; 97
    10c8:	80 93 19 61 	sts	0x6119, r24	; 0x806119 <pxDelayedTaskList>
    10cc:	90 93 1a 61 	sts	0x611A, r25	; 0x80611a <pxDelayedTaskList+0x1>
    10d0:	8b e1       	ldi	r24, 0x1B	; 27
    10d2:	91 e6       	ldi	r25, 0x61	; 97
    10d4:	80 93 17 61 	sts	0x6117, r24	; 0x806117 <pxOverflowDelayedTaskList>
    10d8:	90 93 18 61 	sts	0x6118, r25	; 0x806118 <pxOverflowDelayedTaskList+0x1>
    10dc:	f6 01       	movw	r30, r12
    10de:	86 89       	ldd	r24, Z+22	; 0x16
    10e0:	7a cf       	rjmp	.-268    	; 0xfd6 <xTaskCreate+0x160>

000010e2 <vTaskStartScheduler>:
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	8e ee       	ldi	r24, 0xEE	; 238
    10ea:	e8 2e       	mov	r14, r24
    10ec:	80 e6       	ldi	r24, 0x60	; 96
    10ee:	f8 2e       	mov	r15, r24
    10f0:	00 e0       	ldi	r16, 0x00	; 0
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	51 e0       	ldi	r21, 0x01	; 1
    10fa:	64 e2       	ldi	r22, 0x24	; 36
    10fc:	70 e2       	ldi	r23, 0x20	; 32
    10fe:	8e ed       	ldi	r24, 0xDE	; 222
    1100:	95 e0       	ldi	r25, 0x05	; 5
    1102:	0e 94 3b 07 	call	0xe76	; 0xe76 <xTaskCreate>
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	79 f0       	breq	.+30     	; 0x1128 <vTaskStartScheduler+0x46>
    110a:	8f 3f       	cpi	r24, 0xFF	; 255
    110c:	21 f0       	breq	.+8      	; 0x1116 <vTaskStartScheduler+0x34>
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret
    1116:	67 e0       	ldi	r22, 0x07	; 7
    1118:	78 e0       	ldi	r23, 0x08	; 8
    111a:	80 e1       	ldi	r24, 0x10	; 16
    111c:	90 e2       	ldi	r25, 0x20	; 32
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <vAssertCalled>
    1128:	f8 94       	cli
    112a:	2f ef       	ldi	r18, 0xFF	; 255
    112c:	3f ef       	ldi	r19, 0xFF	; 255
    112e:	20 93 f0 60 	sts	0x60F0, r18	; 0x8060f0 <xNextTaskUnblockTime>
    1132:	30 93 f1 60 	sts	0x60F1, r19	; 0x8060f1 <xNextTaskUnblockTime+0x1>
    1136:	80 93 f6 60 	sts	0x60F6, r24	; 0x8060f6 <xSchedulerRunning>
    113a:	10 92 f8 60 	sts	0x60F8, r1	; 0x8060f8 <xTickCount>
    113e:	10 92 f9 60 	sts	0x60F9, r1	; 0x8060f9 <xTickCount+0x1>
    1142:	0e 94 7e 05 	call	0xafc	; 0xafc <vConfigureTimerForRunTimeStats>
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <xPortStartScheduler>

00001150 <vTaskSuspendAll>:
    1150:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	80 93 ed 60 	sts	0x60ED, r24	; 0x8060ed <uxSchedulerSuspended>
    115a:	08 95       	ret

0000115c <xTaskIncrementTick>:
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    116e:	81 11       	cpse	r24, r1
    1170:	b9 c0       	rjmp	.+370    	; 0x12e4 <xTaskIncrementTick+0x188>
    1172:	e0 90 f8 60 	lds	r14, 0x60F8	; 0x8060f8 <xTickCount>
    1176:	f0 90 f9 60 	lds	r15, 0x60F9	; 0x8060f9 <xTickCount+0x1>
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	e8 1a       	sub	r14, r24
    117e:	f8 0a       	sbc	r15, r24
    1180:	e0 92 f8 60 	sts	0x60F8, r14	; 0x8060f8 <xTickCount>
    1184:	f0 92 f9 60 	sts	0x60F9, r15	; 0x8060f9 <xTickCount+0x1>
    1188:	e1 14       	cp	r14, r1
    118a:	f1 04       	cpc	r15, r1
    118c:	49 f5       	brne	.+82     	; 0x11e0 <xTaskIncrementTick+0x84>
    118e:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
    1192:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    1196:	80 81       	ld	r24, Z
    1198:	81 11       	cpse	r24, r1
    119a:	ab c0       	rjmp	.+342    	; 0x12f2 <xTaskIncrementTick+0x196>
    119c:	80 91 19 61 	lds	r24, 0x6119	; 0x806119 <pxDelayedTaskList>
    11a0:	90 91 1a 61 	lds	r25, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    11a4:	20 91 17 61 	lds	r18, 0x6117	; 0x806117 <pxOverflowDelayedTaskList>
    11a8:	30 91 18 61 	lds	r19, 0x6118	; 0x806118 <pxOverflowDelayedTaskList+0x1>
    11ac:	20 93 19 61 	sts	0x6119, r18	; 0x806119 <pxDelayedTaskList>
    11b0:	30 93 1a 61 	sts	0x611A, r19	; 0x80611a <pxDelayedTaskList+0x1>
    11b4:	80 93 17 61 	sts	0x6117, r24	; 0x806117 <pxOverflowDelayedTaskList>
    11b8:	90 93 18 61 	sts	0x6118, r25	; 0x806118 <pxOverflowDelayedTaskList+0x1>
    11bc:	80 91 f3 60 	lds	r24, 0x60F3	; 0x8060f3 <xNumOfOverflows>
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	80 93 f3 60 	sts	0x60F3, r24	; 0x8060f3 <xNumOfOverflows>
    11c6:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
    11ca:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    11ce:	80 81       	ld	r24, Z
    11d0:	81 11       	cpse	r24, r1
    11d2:	96 c0       	rjmp	.+300    	; 0x1300 <xTaskIncrementTick+0x1a4>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f ef       	ldi	r25, 0xFF	; 255
    11d8:	80 93 f0 60 	sts	0x60F0, r24	; 0x8060f0 <xNextTaskUnblockTime>
    11dc:	90 93 f1 60 	sts	0x60F1, r25	; 0x8060f1 <xNextTaskUnblockTime+0x1>
    11e0:	80 91 f0 60 	lds	r24, 0x60F0	; 0x8060f0 <xNextTaskUnblockTime>
    11e4:	90 91 f1 60 	lds	r25, 0x60F1	; 0x8060f1 <xNextTaskUnblockTime+0x1>
    11e8:	d1 2c       	mov	r13, r1
    11ea:	e8 16       	cp	r14, r24
    11ec:	f9 06       	cpc	r15, r25
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <xTaskIncrementTick+0x96>
    11f0:	53 c0       	rjmp	.+166    	; 0x1298 <xTaskIncrementTick+0x13c>
    11f2:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
    11f6:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    11fa:	80 81       	ld	r24, Z
    11fc:	88 23       	and	r24, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <xTaskIncrementTick+0xa6>
    1200:	45 c0       	rjmp	.+138    	; 0x128c <xTaskIncrementTick+0x130>
    1202:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
    1206:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    120a:	05 80       	ldd	r0, Z+5	; 0x05
    120c:	f6 81       	ldd	r31, Z+6	; 0x06
    120e:	e0 2d       	mov	r30, r0
    1210:	c6 81       	ldd	r28, Z+6	; 0x06
    1212:	d7 81       	ldd	r29, Z+7	; 0x07
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	e8 16       	cp	r14, r24
    121a:	f9 06       	cpc	r15, r25
    121c:	08 f4       	brcc	.+2      	; 0x1220 <xTaskIncrementTick+0xc4>
    121e:	73 c0       	rjmp	.+230    	; 0x1306 <xTaskIncrementTick+0x1aa>
    1220:	8e 01       	movw	r16, r28
    1222:	0e 5f       	subi	r16, 0xFE	; 254
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	c8 01       	movw	r24, r16
    1228:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    122c:	8c 89       	ldd	r24, Y+20	; 0x14
    122e:	9d 89       	ldd	r25, Y+21	; 0x15
    1230:	89 2b       	or	r24, r25
    1232:	21 f0       	breq	.+8      	; 0x123c <xTaskIncrementTick+0xe0>
    1234:	ce 01       	movw	r24, r28
    1236:	0c 96       	adiw	r24, 0x0c	; 12
    1238:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    123c:	8e 89       	ldd	r24, Y+22	; 0x16
    123e:	90 91 f7 60 	lds	r25, 0x60F7	; 0x8060f7 <uxTopReadyPriority>
    1242:	98 17       	cp	r25, r24
    1244:	10 f4       	brcc	.+4      	; 0x124a <xTaskIncrementTick+0xee>
    1246:	80 93 f7 60 	sts	0x60F7, r24	; 0x8060f7 <uxTopReadyPriority>
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9c 01       	movw	r18, r24
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	22 0f       	add	r18, r18
    1254:	33 1f       	adc	r19, r19
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	b8 01       	movw	r22, r16
    1260:	83 5d       	subi	r24, 0xD3	; 211
    1262:	9e 49       	sbci	r25, 0x9E	; 158
    1264:	0e 94 8f 03 	call	0x71e	; 0x71e <vListInsertEnd>
    1268:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
    126c:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
    1270:	9e 89       	ldd	r25, Y+22	; 0x16
    1272:	86 89       	ldd	r24, Z+22	; 0x16
    1274:	98 17       	cp	r25, r24
    1276:	08 f4       	brcc	.+2      	; 0x127a <xTaskIncrementTick+0x11e>
    1278:	bc cf       	rjmp	.-136    	; 0x11f2 <xTaskIncrementTick+0x96>
    127a:	dd 24       	eor	r13, r13
    127c:	d3 94       	inc	r13
    127e:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
    1282:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    1286:	80 81       	ld	r24, Z
    1288:	81 11       	cpse	r24, r1
    128a:	bb cf       	rjmp	.-138    	; 0x1202 <xTaskIncrementTick+0xa6>
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	9f ef       	ldi	r25, 0xFF	; 255
    1290:	80 93 f0 60 	sts	0x60F0, r24	; 0x8060f0 <xNextTaskUnblockTime>
    1294:	90 93 f1 60 	sts	0x60F1, r25	; 0x8060f1 <xNextTaskUnblockTime+0x1>
    1298:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
    129c:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
    12a0:	86 89       	ldd	r24, Z+22	; 0x16
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	fc 01       	movw	r30, r24
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	8e 0f       	add	r24, r30
    12b4:	9f 1f       	adc	r25, r31
    12b6:	fc 01       	movw	r30, r24
    12b8:	e3 5d       	subi	r30, 0xD3	; 211
    12ba:	fe 49       	sbci	r31, 0x9E	; 158
    12bc:	80 81       	ld	r24, Z
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	10 f0       	brcs	.+4      	; 0x12c6 <xTaskIncrementTick+0x16a>
    12c2:	dd 24       	eor	r13, r13
    12c4:	d3 94       	inc	r13
    12c6:	80 91 f4 60 	lds	r24, 0x60F4	; 0x8060f4 <xYieldPending>
    12ca:	88 23       	and	r24, r24
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <xTaskIncrementTick+0x176>
    12ce:	dd 24       	eor	r13, r13
    12d0:	d3 94       	inc	r13
    12d2:	8d 2d       	mov	r24, r13
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	08 95       	ret
    12e4:	80 91 f5 60 	lds	r24, 0x60F5	; 0x8060f5 <uxPendedTicks>
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 f5 60 	sts	0x60F5, r24	; 0x8060f5 <uxPendedTicks>
    12ee:	d1 2c       	mov	r13, r1
    12f0:	ea cf       	rjmp	.-44     	; 0x12c6 <xTaskIncrementTick+0x16a>
    12f2:	66 e6       	ldi	r22, 0x66	; 102
    12f4:	7a e0       	ldi	r23, 0x0A	; 10
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	90 e2       	ldi	r25, 0x20	; 32
    12fa:	0e 94 9e 0a 	call	0x153c	; 0x153c <vAssertCalled>
    12fe:	4e cf       	rjmp	.-356    	; 0x119c <xTaskIncrementTick+0x40>
    1300:	0e 94 0c 06 	call	0xc18	; 0xc18 <prvResetNextTaskUnblockTime.part.0>
    1304:	6d cf       	rjmp	.-294    	; 0x11e0 <xTaskIncrementTick+0x84>
    1306:	80 93 f0 60 	sts	0x60F0, r24	; 0x8060f0 <xNextTaskUnblockTime>
    130a:	90 93 f1 60 	sts	0x60F1, r25	; 0x8060f1 <xNextTaskUnblockTime+0x1>
    130e:	c4 cf       	rjmp	.-120    	; 0x1298 <xTaskIncrementTick+0x13c>

00001310 <xTaskResumeAll>:
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    131e:	88 23       	and	r24, r24
    1320:	09 f4       	brne	.+2      	; 0x1324 <xTaskResumeAll+0x14>
    1322:	77 c0       	rjmp	.+238    	; 0x1412 <xTaskResumeAll+0x102>
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	0f 92       	push	r0
    132a:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    132e:	81 50       	subi	r24, 0x01	; 1
    1330:	80 93 ed 60 	sts	0x60ED, r24	; 0x8060ed <uxSchedulerSuspended>
    1334:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    1338:	81 11       	cpse	r24, r1
    133a:	62 c0       	rjmp	.+196    	; 0x1400 <xTaskResumeAll+0xf0>
    133c:	80 91 fa 60 	lds	r24, 0x60FA	; 0x8060fa <uxCurrentNumberOfTasks>
    1340:	88 23       	and	r24, r24
    1342:	09 f4       	brne	.+2      	; 0x1346 <xTaskResumeAll+0x36>
    1344:	5d c0       	rjmp	.+186    	; 0x1400 <xTaskResumeAll+0xf0>
    1346:	c0 e0       	ldi	r28, 0x00	; 0
    1348:	d0 e0       	ldi	r29, 0x00	; 0
    134a:	ff 24       	eor	r15, r15
    134c:	f3 94       	inc	r15
    134e:	80 91 0e 61 	lds	r24, 0x610E	; 0x80610e <xPendingReadyList>
    1352:	88 23       	and	r24, r24
    1354:	a1 f1       	breq	.+104    	; 0x13be <xTaskResumeAll+0xae>
    1356:	e0 91 13 61 	lds	r30, 0x6113	; 0x806113 <xPendingReadyList+0x5>
    135a:	f0 91 14 61 	lds	r31, 0x6114	; 0x806114 <xPendingReadyList+0x6>
    135e:	c6 81       	ldd	r28, Z+6	; 0x06
    1360:	d7 81       	ldd	r29, Z+7	; 0x07
    1362:	ce 01       	movw	r24, r28
    1364:	0c 96       	adiw	r24, 0x0c	; 12
    1366:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    136a:	8e 01       	movw	r16, r28
    136c:	0e 5f       	subi	r16, 0xFE	; 254
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    1376:	8e 89       	ldd	r24, Y+22	; 0x16
    1378:	90 91 f7 60 	lds	r25, 0x60F7	; 0x8060f7 <uxTopReadyPriority>
    137c:	98 17       	cp	r25, r24
    137e:	10 f4       	brcc	.+4      	; 0x1384 <xTaskResumeAll+0x74>
    1380:	80 93 f7 60 	sts	0x60F7, r24	; 0x8060f7 <uxTopReadyPriority>
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 01       	movw	r18, r24
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	b8 01       	movw	r22, r16
    139a:	83 5d       	subi	r24, 0xD3	; 211
    139c:	9e 49       	sbci	r25, 0x9E	; 158
    139e:	0e 94 8f 03 	call	0x71e	; 0x71e <vListInsertEnd>
    13a2:	e0 91 51 61 	lds	r30, 0x6151	; 0x806151 <pxCurrentTCB>
    13a6:	f0 91 52 61 	lds	r31, 0x6152	; 0x806152 <pxCurrentTCB+0x1>
    13aa:	9e 89       	ldd	r25, Y+22	; 0x16
    13ac:	86 89       	ldd	r24, Z+22	; 0x16
    13ae:	98 17       	cp	r25, r24
    13b0:	70 f2       	brcs	.-100    	; 0x134e <xTaskResumeAll+0x3e>
    13b2:	f0 92 f4 60 	sts	0x60F4, r15	; 0x8060f4 <xYieldPending>
    13b6:	80 91 0e 61 	lds	r24, 0x610E	; 0x80610e <xPendingReadyList>
    13ba:	81 11       	cpse	r24, r1
    13bc:	cc cf       	rjmp	.-104    	; 0x1356 <xTaskResumeAll+0x46>
    13be:	cd 2b       	or	r28, r29
    13c0:	69 f0       	breq	.+26     	; 0x13dc <xTaskResumeAll+0xcc>
    13c2:	e0 91 19 61 	lds	r30, 0x6119	; 0x806119 <pxDelayedTaskList>
    13c6:	f0 91 1a 61 	lds	r31, 0x611A	; 0x80611a <pxDelayedTaskList+0x1>
    13ca:	80 81       	ld	r24, Z
    13cc:	81 11       	cpse	r24, r1
    13ce:	2c c0       	rjmp	.+88     	; 0x1428 <xTaskResumeAll+0x118>
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	80 93 f0 60 	sts	0x60F0, r24	; 0x8060f0 <xNextTaskUnblockTime>
    13d8:	90 93 f1 60 	sts	0x60F1, r25	; 0x8060f1 <xNextTaskUnblockTime+0x1>
    13dc:	c0 91 f5 60 	lds	r28, 0x60F5	; 0x8060f5 <uxPendedTicks>
    13e0:	cc 23       	and	r28, r28
    13e2:	51 f0       	breq	.+20     	; 0x13f8 <xTaskResumeAll+0xe8>
    13e4:	d1 e0       	ldi	r29, 0x01	; 1
    13e6:	0e 94 ae 08 	call	0x115c	; 0x115c <xTaskIncrementTick>
    13ea:	81 11       	cpse	r24, r1
    13ec:	d0 93 f4 60 	sts	0x60F4, r29	; 0x8060f4 <xYieldPending>
    13f0:	c1 50       	subi	r28, 0x01	; 1
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <xTaskResumeAll+0xd6>
    13f4:	10 92 f5 60 	sts	0x60F5, r1	; 0x8060f5 <uxPendedTicks>
    13f8:	80 91 f4 60 	lds	r24, 0x60F4	; 0x8060f4 <xYieldPending>
    13fc:	81 11       	cpse	r24, r1
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <xTaskResumeAll+0x110>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	08 95       	ret
    1412:	6c e6       	ldi	r22, 0x6C	; 108
    1414:	78 e0       	ldi	r23, 0x08	; 8
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	0e 94 9e 0a 	call	0x153c	; 0x153c <vAssertCalled>
    141e:	82 cf       	rjmp	.-252    	; 0x1324 <xTaskResumeAll+0x14>
    1420:	0e 94 b2 04 	call	0x964	; 0x964 <vPortYield>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	ed cf       	rjmp	.-38     	; 0x1402 <xTaskResumeAll+0xf2>
    1428:	0e 94 0c 06 	call	0xc18	; 0xc18 <prvResetNextTaskUnblockTime.part.0>
    142c:	d7 cf       	rjmp	.-82     	; 0x13dc <xTaskResumeAll+0xcc>

0000142e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1434:	89 2b       	or	r24, r25
    1436:	29 f4       	brne	.+10     	; 0x1442 <vTaskDelay+0x14>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
    1438:	0e 94 b2 04 	call	0x964	; 0x964 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
    1442:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    1446:	81 11       	cpse	r24, r1
    1448:	10 c0       	rjmp	.+32     	; 0x146a <vTaskDelay+0x3c>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    144a:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 ed 60 	sts	0x60ED, r24	; 0x8060ed <uxSchedulerSuspended>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	0e 94 1d 06 	call	0xc3a	; 0xc3a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    145c:	0e 94 88 09 	call	0x1310	; 0x1310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1460:	88 23       	and	r24, r24
    1462:	51 f3       	breq	.-44     	; 0x1438 <vTaskDelay+0xa>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
    146a:	60 e2       	ldi	r22, 0x20	; 32
    146c:	75 e0       	ldi	r23, 0x05	; 5
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	90 e2       	ldi	r25, 0x20	; 32
    1472:	0e 94 9e 0a 	call	0x153c	; 0x153c <vAssertCalled>
    1476:	e9 cf       	rjmp	.-46     	; 0x144a <vTaskDelay+0x1c>

00001478 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1478:	80 91 ed 60 	lds	r24, 0x60ED	; 0x8060ed <uxSchedulerSuspended>
    147c:	81 11       	cpse	r24, r1
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vTaskSwitchContext+0xc>
    1480:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <vTaskSwitchContext.part.5>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 f4 60 	sts	0x60F4, r24	; 0x8060f4 <xYieldPending>
    148a:	08 95       	ret

0000148c <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    148c:	08 95       	ret

0000148e <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    148e:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    1490:	83 e5       	ldi	r24, 0x53	; 83
    1492:	90 e2       	ldi	r25, 0x20	; 32
    1494:	0e 94 aa 01 	call	0x354	; 0x354 <DbgPrint>
	CFG_ERR_LED();
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    149e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14a2:	2f ef       	ldi	r18, 0xFF	; 255
    14a4:	33 ec       	ldi	r19, 0xC3	; 195
    14a6:	99 e0       	ldi	r25, 0x09	; 9
    14a8:	21 50       	subi	r18, 0x01	; 1
    14aa:	30 40       	sbci	r19, 0x00	; 0
    14ac:	90 40       	sbci	r25, 0x00	; 0
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <vApplicationMallocFailedHook+0x1a>
    14b0:	00 c0       	rjmp	.+0      	; 0x14b2 <vApplicationMallocFailedHook+0x24>
    14b2:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    14b4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    14b8:	2f ef       	ldi	r18, 0xFF	; 255
    14ba:	33 ec       	ldi	r19, 0xC3	; 195
    14bc:	99 e0       	ldi	r25, 0x09	; 9
    14be:	21 50       	subi	r18, 0x01	; 1
    14c0:	30 40       	sbci	r19, 0x00	; 0
    14c2:	90 40       	sbci	r25, 0x00	; 0
    14c4:	e1 f7       	brne	.-8      	; 0x14be <vApplicationMallocFailedHook+0x30>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <vApplicationMallocFailedHook+0x3a>
    14c8:	00 00       	nop
    14ca:	e9 cf       	rjmp	.-46     	; 0x149e <vApplicationMallocFailedHook+0x10>

000014cc <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	c0 58       	subi	r28, 0x80	; 128
    14d6:	d1 09       	sbc	r29, r1
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    14dc:	f8 94       	cli
	CFG_ERR_LED();
    14de:	80 e8       	ldi	r24, 0x80	; 128
    14e0:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    14e4:	7f 93       	push	r23
    14e6:	6f 93       	push	r22
    14e8:	25 e7       	ldi	r18, 0x75	; 117
    14ea:	30 e2       	ldi	r19, 0x20	; 32
    14ec:	3f 93       	push	r19
    14ee:	2f 93       	push	r18
    14f0:	1f 92       	push	r1
    14f2:	8f 93       	push	r24
    14f4:	8e 01       	movw	r16, r28
    14f6:	0f 5f       	subi	r16, 0xFF	; 255
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	1f 93       	push	r17
    14fc:	0f 93       	push	r16
    14fe:	0e 94 5d 10 	call	0x20ba	; 0x20ba <snprintf>
	DbgPrint(Dbg);
    1502:	c8 01       	movw	r24, r16
    1504:	0e 94 aa 01 	call	0x354	; 0x354 <DbgPrint>
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	93 ed       	ldi	r25, 0xD3	; 211
    1516:	20 e3       	ldi	r18, 0x30	; 48
    1518:	31 50       	subi	r19, 0x01	; 1
    151a:	90 40       	sbci	r25, 0x00	; 0
    151c:	20 40       	sbci	r18, 0x00	; 0
    151e:	e1 f7       	brne	.-8      	; 0x1518 <vApplicationStackOverflowHook+0x4c>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <vApplicationStackOverflowHook+0x56>
    1522:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    1524:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	93 ed       	ldi	r25, 0xD3	; 211
    152c:	20 e3       	ldi	r18, 0x30	; 48
    152e:	31 50       	subi	r19, 0x01	; 1
    1530:	90 40       	sbci	r25, 0x00	; 0
    1532:	20 40       	sbci	r18, 0x00	; 0
    1534:	e1 f7       	brne	.-8      	; 0x152e <vApplicationStackOverflowHook+0x62>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <vApplicationStackOverflowHook+0x6c>
    1538:	00 00       	nop
    153a:	e9 cf       	rjmp	.-46     	; 0x150e <vApplicationStackOverflowHook+0x42>

0000153c <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	c0 58       	subi	r28, 0x80	; 128
    1546:	d1 09       	sbc	r29, r1
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    154c:	f8 94       	cli
	CFG_ERR_LED();
    154e:	20 e8       	ldi	r18, 0x80	; 128
    1550:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    1554:	7f 93       	push	r23
    1556:	6f 93       	push	r22
    1558:	9f 93       	push	r25
    155a:	8f 93       	push	r24
    155c:	81 e9       	ldi	r24, 0x91	; 145
    155e:	90 e2       	ldi	r25, 0x20	; 32
    1560:	9f 93       	push	r25
    1562:	8f 93       	push	r24
    1564:	1f 92       	push	r1
    1566:	2f 93       	push	r18
    1568:	8e 01       	movw	r16, r28
    156a:	0f 5f       	subi	r16, 0xFF	; 255
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	1f 93       	push	r17
    1570:	0f 93       	push	r16
    1572:	0e 94 5d 10 	call	0x20ba	; 0x20ba <snprintf>
	DbgPrint(Dbg);
    1576:	c8 01       	movw	r24, r16
    1578:	0e 94 aa 01 	call	0x354	; 0x354 <DbgPrint>
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1580:	80 e8       	ldi	r24, 0x80	; 128
    1582:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	93 ec       	ldi	r25, 0xC3	; 195
    158a:	29 e0       	ldi	r18, 0x09	; 9
    158c:	31 50       	subi	r19, 0x01	; 1
    158e:	90 40       	sbci	r25, 0x00	; 0
    1590:	20 40       	sbci	r18, 0x00	; 0
    1592:	e1 f7       	brne	.-8      	; 0x158c <vAssertCalled+0x50>
    1594:	00 c0       	rjmp	.+0      	; 0x1596 <vAssertCalled+0x5a>
    1596:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1598:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	93 ed       	ldi	r25, 0xD3	; 211
    15a0:	20 e3       	ldi	r18, 0x30	; 48
    15a2:	31 50       	subi	r19, 0x01	; 1
    15a4:	90 40       	sbci	r25, 0x00	; 0
    15a6:	20 40       	sbci	r18, 0x00	; 0
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <vAssertCalled+0x66>
    15aa:	00 c0       	rjmp	.+0      	; 0x15ac <vAssertCalled+0x70>
    15ac:	00 00       	nop
    15ae:	e9 cf       	rjmp	.-46     	; 0x1582 <vAssertCalled+0x46>

000015b0 <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    15b0:	0e 94 c8 01 	call	0x390	; 0x390 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    15b4:	0e 94 94 02 	call	0x528	; 0x528 <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    15b8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DriverPowerInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 3e 0b 	call	0x167c	; 0x167c <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    15c2:	87 e0       	ldi	r24, 0x07	; 7
    15c4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    15c8:	78 94       	sei
    15ca:	2f ef       	ldi	r18, 0xFF	; 255
    15cc:	89 ef       	ldi	r24, 0xF9	; 249
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	80 40       	sbci	r24, 0x00	; 0
    15d4:	90 40       	sbci	r25, 0x00	; 0
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <main+0x20>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <main+0x2a>
    15da:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitMemTask();
    15dc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <InitMemTask>

	vTaskStartScheduler();	//Start scheduler loop
    15e0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <vTaskStartScheduler>

	return 0;
}
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	08 95       	ret

000015ea <InitMemTask>:
void WorkerMemTask(void *pvParameters);
void MemFunction();

//Function definitions
void InitMemTask()
{
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
	xTaskCreate( WorkerMemTask, "mem", 1024, NULL, tskIDLE_PRIORITY+1, NULL );
    15f0:	e1 2c       	mov	r14, r1
    15f2:	f1 2c       	mov	r15, r1
    15f4:	01 e0       	ldi	r16, 0x01	; 1
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	54 e0       	ldi	r21, 0x04	; 4
    15fe:	61 eb       	ldi	r22, 0xB1	; 177
    1600:	70 e2       	ldi	r23, 0x20	; 32
    1602:	83 e3       	ldi	r24, 0x33	; 51
    1604:	9b e0       	ldi	r25, 0x0B	; 11
    1606:	0e 94 3b 07 	call	0xe76	; 0xe76 <xTaskCreate>
}
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	08 95       	ret

00001612 <MemFunction>:
		vTaskDelay(100);
	}
}

void MemFunction()
{
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
	int *num;
	int a;
	
	num=pvPortMalloc(sizeof(int) * 100);
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 ae 02 	call	0x55c	; 0x55c <pvPortMalloc>
    161e:	d8 2f       	mov	r29, r24
    1620:	c9 2f       	mov	r28, r25
    1622:	e8 2f       	mov	r30, r24
    1624:	f9 2f       	mov	r31, r25
	
	for (a=0;a<100;a++)
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
	{	
		num[a]=a;
    162a:	81 93       	st	Z+, r24
    162c:	91 93       	st	Z+, r25
	int *num;
	int a;
	
	num=pvPortMalloc(sizeof(int) * 100);
	
	for (a=0;a<100;a++)
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	84 36       	cpi	r24, 0x64	; 100
    1632:	91 05       	cpc	r25, r1
    1634:	d1 f7       	brne	.-12     	; 0x162a <MemFunction+0x18>
	{	
		num[a]=a;
	}
	printf("Resterende heap: %d\r", xPortGetFreeHeapSize()); // Deze lijn heb ik er zelf bijgezet om de oorzaak van het probleem te kunnen vinden
    1636:	0e 94 78 03 	call	0x6f0	; 0x6f0 <xPortGetFreeHeapSize>
    163a:	9f 93       	push	r25
    163c:	8f 93       	push	r24
    163e:	85 eb       	ldi	r24, 0xB5	; 181
    1640:	90 e2       	ldi	r25, 0x20	; 32
    1642:	9f 93       	push	r25
    1644:	8f 93       	push	r24
    1646:	0e 94 19 10 	call	0x2032	; 0x2032 <printf>
	printf ("Complete!\r\n");
    164a:	8a ec       	ldi	r24, 0xCA	; 202
    164c:	90 e2       	ldi	r25, 0x20	; 32
    164e:	0e 94 2d 10 	call	0x205a	; 0x205a <puts>
	vPortFree(num);
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	8d 2f       	mov	r24, r29
    165c:	9c 2f       	mov	r25, r28
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
	{	
		num[a]=a;
	}
	printf("Resterende heap: %d\r", xPortGetFreeHeapSize()); // Deze lijn heb ik er zelf bijgezet om de oorzaak van het probleem te kunnen vinden
	printf ("Complete!\r\n");
	vPortFree(num);
    1662:	0c 94 4d 03 	jmp	0x69a	; 0x69a <vPortFree>

00001666 <WorkerMemTask>:

void WorkerMemTask(void *pvParameters)
{	
	while (1)
	{
		MemFunction();
    1666:	0e 94 09 0b 	call	0x1612	; 0x1612 <MemFunction>
		vTaskDelay(100);
    166a:	84 e6       	ldi	r24, 0x64	; 100
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 17 0a 	call	0x142e	; 0x142e <vTaskDelay>
    1672:	f9 cf       	rjmp	.-14     	; 0x1666 <WorkerMemTask>

00001674 <DriverPowerInit>:
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    167a:	08 95       	ret

0000167c <DriverPowerVccAuxSet>:
    167c:	81 11       	cpse	r24, r1
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <DriverPowerVccAuxSet+0xc>
    1680:	80 e2       	ldi	r24, 0x20	; 32
    1682:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1686:	08 95       	ret
    1688:	80 e2       	ldi	r24, 0x20	; 32
    168a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    168e:	08 95       	ret

00001690 <vfprintf>:
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	60 97       	sbiw	r28, 0x10	; 16
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	7c 01       	movw	r14, r24
    16c0:	1b 01       	movw	r2, r22
    16c2:	6a 01       	movw	r12, r20
    16c4:	fc 01       	movw	r30, r24
    16c6:	16 82       	std	Z+6, r1	; 0x06
    16c8:	17 82       	std	Z+7, r1	; 0x07
    16ca:	83 81       	ldd	r24, Z+3	; 0x03
    16cc:	81 ff       	sbrs	r24, 1
    16ce:	44 c3       	rjmp	.+1672   	; 0x1d58 <vfprintf+0x6c8>
    16d0:	9e 01       	movw	r18, r28
    16d2:	2f 5f       	subi	r18, 0xFF	; 255
    16d4:	3f 4f       	sbci	r19, 0xFF	; 255
    16d6:	39 01       	movw	r6, r18
    16d8:	f7 01       	movw	r30, r14
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	f1 01       	movw	r30, r2
    16de:	93 fd       	sbrc	r25, 3
    16e0:	85 91       	lpm	r24, Z+
    16e2:	93 ff       	sbrs	r25, 3
    16e4:	81 91       	ld	r24, Z+
    16e6:	1f 01       	movw	r2, r30
    16e8:	88 23       	and	r24, r24
    16ea:	09 f4       	brne	.+2      	; 0x16ee <vfprintf+0x5e>
    16ec:	31 c3       	rjmp	.+1634   	; 0x1d50 <vfprintf+0x6c0>
    16ee:	85 32       	cpi	r24, 0x25	; 37
    16f0:	39 f4       	brne	.+14     	; 0x1700 <vfprintf+0x70>
    16f2:	93 fd       	sbrc	r25, 3
    16f4:	85 91       	lpm	r24, Z+
    16f6:	93 ff       	sbrs	r25, 3
    16f8:	81 91       	ld	r24, Z+
    16fa:	1f 01       	movw	r2, r30
    16fc:	85 32       	cpi	r24, 0x25	; 37
    16fe:	39 f4       	brne	.+14     	; 0x170e <vfprintf+0x7e>
    1700:	b7 01       	movw	r22, r14
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1708:	56 01       	movw	r10, r12
    170a:	65 01       	movw	r12, r10
    170c:	e5 cf       	rjmp	.-54     	; 0x16d8 <vfprintf+0x48>
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	51 2c       	mov	r5, r1
    1712:	91 2c       	mov	r9, r1
    1714:	ff e1       	ldi	r31, 0x1F	; 31
    1716:	f9 15       	cp	r31, r9
    1718:	d8 f0       	brcs	.+54     	; 0x1750 <vfprintf+0xc0>
    171a:	8b 32       	cpi	r24, 0x2B	; 43
    171c:	79 f0       	breq	.+30     	; 0x173c <vfprintf+0xac>
    171e:	38 f4       	brcc	.+14     	; 0x172e <vfprintf+0x9e>
    1720:	80 32       	cpi	r24, 0x20	; 32
    1722:	79 f0       	breq	.+30     	; 0x1742 <vfprintf+0xb2>
    1724:	83 32       	cpi	r24, 0x23	; 35
    1726:	a1 f4       	brne	.+40     	; 0x1750 <vfprintf+0xc0>
    1728:	f9 2d       	mov	r31, r9
    172a:	f0 61       	ori	r31, 0x10	; 16
    172c:	2e c0       	rjmp	.+92     	; 0x178a <vfprintf+0xfa>
    172e:	8d 32       	cpi	r24, 0x2D	; 45
    1730:	61 f0       	breq	.+24     	; 0x174a <vfprintf+0xba>
    1732:	80 33       	cpi	r24, 0x30	; 48
    1734:	69 f4       	brne	.+26     	; 0x1750 <vfprintf+0xc0>
    1736:	29 2d       	mov	r18, r9
    1738:	21 60       	ori	r18, 0x01	; 1
    173a:	2d c0       	rjmp	.+90     	; 0x1796 <vfprintf+0x106>
    173c:	39 2d       	mov	r19, r9
    173e:	32 60       	ori	r19, 0x02	; 2
    1740:	93 2e       	mov	r9, r19
    1742:	89 2d       	mov	r24, r9
    1744:	84 60       	ori	r24, 0x04	; 4
    1746:	98 2e       	mov	r9, r24
    1748:	2a c0       	rjmp	.+84     	; 0x179e <vfprintf+0x10e>
    174a:	e9 2d       	mov	r30, r9
    174c:	e8 60       	ori	r30, 0x08	; 8
    174e:	15 c0       	rjmp	.+42     	; 0x177a <vfprintf+0xea>
    1750:	97 fc       	sbrc	r9, 7
    1752:	2d c0       	rjmp	.+90     	; 0x17ae <vfprintf+0x11e>
    1754:	20 ed       	ldi	r18, 0xD0	; 208
    1756:	28 0f       	add	r18, r24
    1758:	2a 30       	cpi	r18, 0x0A	; 10
    175a:	88 f4       	brcc	.+34     	; 0x177e <vfprintf+0xee>
    175c:	96 fe       	sbrs	r9, 6
    175e:	06 c0       	rjmp	.+12     	; 0x176c <vfprintf+0xdc>
    1760:	3a e0       	ldi	r19, 0x0A	; 10
    1762:	13 9f       	mul	r17, r19
    1764:	20 0d       	add	r18, r0
    1766:	11 24       	eor	r1, r1
    1768:	12 2f       	mov	r17, r18
    176a:	19 c0       	rjmp	.+50     	; 0x179e <vfprintf+0x10e>
    176c:	8a e0       	ldi	r24, 0x0A	; 10
    176e:	58 9e       	mul	r5, r24
    1770:	20 0d       	add	r18, r0
    1772:	11 24       	eor	r1, r1
    1774:	52 2e       	mov	r5, r18
    1776:	e9 2d       	mov	r30, r9
    1778:	e0 62       	ori	r30, 0x20	; 32
    177a:	9e 2e       	mov	r9, r30
    177c:	10 c0       	rjmp	.+32     	; 0x179e <vfprintf+0x10e>
    177e:	8e 32       	cpi	r24, 0x2E	; 46
    1780:	31 f4       	brne	.+12     	; 0x178e <vfprintf+0xfe>
    1782:	96 fc       	sbrc	r9, 6
    1784:	e5 c2       	rjmp	.+1482   	; 0x1d50 <vfprintf+0x6c0>
    1786:	f9 2d       	mov	r31, r9
    1788:	f0 64       	ori	r31, 0x40	; 64
    178a:	9f 2e       	mov	r9, r31
    178c:	08 c0       	rjmp	.+16     	; 0x179e <vfprintf+0x10e>
    178e:	8c 36       	cpi	r24, 0x6C	; 108
    1790:	21 f4       	brne	.+8      	; 0x179a <vfprintf+0x10a>
    1792:	29 2d       	mov	r18, r9
    1794:	20 68       	ori	r18, 0x80	; 128
    1796:	92 2e       	mov	r9, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x10e>
    179a:	88 36       	cpi	r24, 0x68	; 104
    179c:	41 f4       	brne	.+16     	; 0x17ae <vfprintf+0x11e>
    179e:	f1 01       	movw	r30, r2
    17a0:	93 fd       	sbrc	r25, 3
    17a2:	85 91       	lpm	r24, Z+
    17a4:	93 ff       	sbrs	r25, 3
    17a6:	81 91       	ld	r24, Z+
    17a8:	1f 01       	movw	r2, r30
    17aa:	81 11       	cpse	r24, r1
    17ac:	b3 cf       	rjmp	.-154    	; 0x1714 <vfprintf+0x84>
    17ae:	9b eb       	ldi	r25, 0xBB	; 187
    17b0:	98 0f       	add	r25, r24
    17b2:	93 30       	cpi	r25, 0x03	; 3
    17b4:	20 f4       	brcc	.+8      	; 0x17be <vfprintf+0x12e>
    17b6:	99 2d       	mov	r25, r9
    17b8:	90 61       	ori	r25, 0x10	; 16
    17ba:	80 5e       	subi	r24, 0xE0	; 224
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <vfprintf+0x13c>
    17be:	9b e9       	ldi	r25, 0x9B	; 155
    17c0:	98 0f       	add	r25, r24
    17c2:	93 30       	cpi	r25, 0x03	; 3
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <vfprintf+0x138>
    17c6:	66 c1       	rjmp	.+716    	; 0x1a94 <vfprintf+0x404>
    17c8:	99 2d       	mov	r25, r9
    17ca:	9f 7e       	andi	r25, 0xEF	; 239
    17cc:	96 ff       	sbrs	r25, 6
    17ce:	16 e0       	ldi	r17, 0x06	; 6
    17d0:	9f 73       	andi	r25, 0x3F	; 63
    17d2:	99 2e       	mov	r9, r25
    17d4:	85 36       	cpi	r24, 0x65	; 101
    17d6:	19 f4       	brne	.+6      	; 0x17de <vfprintf+0x14e>
    17d8:	90 64       	ori	r25, 0x40	; 64
    17da:	99 2e       	mov	r9, r25
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <vfprintf+0x15e>
    17de:	86 36       	cpi	r24, 0x66	; 102
    17e0:	21 f4       	brne	.+8      	; 0x17ea <vfprintf+0x15a>
    17e2:	39 2f       	mov	r19, r25
    17e4:	30 68       	ori	r19, 0x80	; 128
    17e6:	93 2e       	mov	r9, r19
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <vfprintf+0x15e>
    17ea:	11 11       	cpse	r17, r1
    17ec:	11 50       	subi	r17, 0x01	; 1
    17ee:	97 fe       	sbrs	r9, 7
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <vfprintf+0x170>
    17f2:	1c 33       	cpi	r17, 0x3C	; 60
    17f4:	50 f4       	brcc	.+20     	; 0x180a <vfprintf+0x17a>
    17f6:	44 24       	eor	r4, r4
    17f8:	43 94       	inc	r4
    17fa:	41 0e       	add	r4, r17
    17fc:	27 e0       	ldi	r18, 0x07	; 7
    17fe:	0b c0       	rjmp	.+22     	; 0x1816 <vfprintf+0x186>
    1800:	18 30       	cpi	r17, 0x08	; 8
    1802:	38 f0       	brcs	.+14     	; 0x1812 <vfprintf+0x182>
    1804:	27 e0       	ldi	r18, 0x07	; 7
    1806:	17 e0       	ldi	r17, 0x07	; 7
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <vfprintf+0x184>
    180a:	27 e0       	ldi	r18, 0x07	; 7
    180c:	9c e3       	ldi	r25, 0x3C	; 60
    180e:	49 2e       	mov	r4, r25
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0x186>
    1812:	21 2f       	mov	r18, r17
    1814:	41 2c       	mov	r4, r1
    1816:	56 01       	movw	r10, r12
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	a8 0e       	add	r10, r24
    181c:	b1 1c       	adc	r11, r1
    181e:	f6 01       	movw	r30, r12
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	04 2d       	mov	r16, r4
    182a:	a3 01       	movw	r20, r6
    182c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ftoa_engine>
    1830:	6c 01       	movw	r12, r24
    1832:	f9 81       	ldd	r31, Y+1	; 0x01
    1834:	fc 87       	std	Y+12, r31	; 0x0c
    1836:	f0 ff       	sbrs	r31, 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x1ae>
    183a:	f3 ff       	sbrs	r31, 3
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x1ba>
    183e:	91 fc       	sbrc	r9, 1
    1840:	06 c0       	rjmp	.+12     	; 0x184e <vfprintf+0x1be>
    1842:	92 fe       	sbrs	r9, 2
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x1c2>
    1846:	00 e2       	ldi	r16, 0x20	; 32
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <vfprintf+0x1c4>
    184a:	0d e2       	ldi	r16, 0x2D	; 45
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <vfprintf+0x1c4>
    184e:	0b e2       	ldi	r16, 0x2B	; 43
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <vfprintf+0x1c4>
    1852:	00 e0       	ldi	r16, 0x00	; 0
    1854:	8c 85       	ldd	r24, Y+12	; 0x0c
    1856:	8c 70       	andi	r24, 0x0C	; 12
    1858:	19 f0       	breq	.+6      	; 0x1860 <vfprintf+0x1d0>
    185a:	01 11       	cpse	r16, r1
    185c:	5a c2       	rjmp	.+1204   	; 0x1d12 <vfprintf+0x682>
    185e:	9b c2       	rjmp	.+1334   	; 0x1d96 <vfprintf+0x706>
    1860:	97 fe       	sbrs	r9, 7
    1862:	10 c0       	rjmp	.+32     	; 0x1884 <vfprintf+0x1f4>
    1864:	4c 0c       	add	r4, r12
    1866:	fc 85       	ldd	r31, Y+12	; 0x0c
    1868:	f4 ff       	sbrs	r31, 4
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <vfprintf+0x1e4>
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	81 33       	cpi	r24, 0x31	; 49
    1870:	09 f4       	brne	.+2      	; 0x1874 <vfprintf+0x1e4>
    1872:	4a 94       	dec	r4
    1874:	14 14       	cp	r1, r4
    1876:	74 f5       	brge	.+92     	; 0x18d4 <vfprintf+0x244>
    1878:	28 e0       	ldi	r18, 0x08	; 8
    187a:	24 15       	cp	r18, r4
    187c:	78 f5       	brcc	.+94     	; 0x18dc <vfprintf+0x24c>
    187e:	88 e0       	ldi	r24, 0x08	; 8
    1880:	48 2e       	mov	r4, r24
    1882:	2c c0       	rjmp	.+88     	; 0x18dc <vfprintf+0x24c>
    1884:	96 fc       	sbrc	r9, 6
    1886:	2a c0       	rjmp	.+84     	; 0x18dc <vfprintf+0x24c>
    1888:	81 2f       	mov	r24, r17
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	8c 15       	cp	r24, r12
    188e:	9d 05       	cpc	r25, r13
    1890:	9c f0       	brlt	.+38     	; 0x18b8 <vfprintf+0x228>
    1892:	3c ef       	ldi	r19, 0xFC	; 252
    1894:	c3 16       	cp	r12, r19
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	d3 06       	cpc	r13, r19
    189a:	74 f0       	brlt	.+28     	; 0x18b8 <vfprintf+0x228>
    189c:	89 2d       	mov	r24, r9
    189e:	80 68       	ori	r24, 0x80	; 128
    18a0:	98 2e       	mov	r9, r24
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <vfprintf+0x228>
    18a4:	e2 e0       	ldi	r30, 0x02	; 2
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	ec 0f       	add	r30, r28
    18aa:	fd 1f       	adc	r31, r29
    18ac:	e1 0f       	add	r30, r17
    18ae:	f1 1d       	adc	r31, r1
    18b0:	80 81       	ld	r24, Z
    18b2:	80 33       	cpi	r24, 0x30	; 48
    18b4:	19 f4       	brne	.+6      	; 0x18bc <vfprintf+0x22c>
    18b6:	11 50       	subi	r17, 0x01	; 1
    18b8:	11 11       	cpse	r17, r1
    18ba:	f4 cf       	rjmp	.-24     	; 0x18a4 <vfprintf+0x214>
    18bc:	97 fe       	sbrs	r9, 7
    18be:	0e c0       	rjmp	.+28     	; 0x18dc <vfprintf+0x24c>
    18c0:	44 24       	eor	r4, r4
    18c2:	43 94       	inc	r4
    18c4:	41 0e       	add	r4, r17
    18c6:	81 2f       	mov	r24, r17
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	c8 16       	cp	r12, r24
    18cc:	d9 06       	cpc	r13, r25
    18ce:	2c f4       	brge	.+10     	; 0x18da <vfprintf+0x24a>
    18d0:	1c 19       	sub	r17, r12
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <vfprintf+0x24c>
    18d4:	44 24       	eor	r4, r4
    18d6:	43 94       	inc	r4
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <vfprintf+0x24c>
    18da:	10 e0       	ldi	r17, 0x00	; 0
    18dc:	97 fe       	sbrs	r9, 7
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x25c>
    18e0:	1c 14       	cp	r1, r12
    18e2:	1d 04       	cpc	r1, r13
    18e4:	34 f4       	brge	.+12     	; 0x18f2 <vfprintf+0x262>
    18e6:	c6 01       	movw	r24, r12
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <vfprintf+0x266>
    18ec:	85 e0       	ldi	r24, 0x05	; 5
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x266>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	01 11       	cpse	r16, r1
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	11 23       	and	r17, r17
    18fc:	31 f0       	breq	.+12     	; 0x190a <vfprintf+0x27a>
    18fe:	21 2f       	mov	r18, r17
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	2f 5f       	subi	r18, 0xFF	; 255
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	82 0f       	add	r24, r18
    1908:	93 1f       	adc	r25, r19
    190a:	25 2d       	mov	r18, r5
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	82 17       	cp	r24, r18
    1910:	93 07       	cpc	r25, r19
    1912:	14 f4       	brge	.+4      	; 0x1918 <vfprintf+0x288>
    1914:	58 1a       	sub	r5, r24
    1916:	01 c0       	rjmp	.+2      	; 0x191a <vfprintf+0x28a>
    1918:	51 2c       	mov	r5, r1
    191a:	89 2d       	mov	r24, r9
    191c:	89 70       	andi	r24, 0x09	; 9
    191e:	49 f4       	brne	.+18     	; 0x1932 <vfprintf+0x2a2>
    1920:	55 20       	and	r5, r5
    1922:	39 f0       	breq	.+14     	; 0x1932 <vfprintf+0x2a2>
    1924:	b7 01       	movw	r22, r14
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    192e:	5a 94       	dec	r5
    1930:	f7 cf       	rjmp	.-18     	; 0x1920 <vfprintf+0x290>
    1932:	00 23       	and	r16, r16
    1934:	29 f0       	breq	.+10     	; 0x1940 <vfprintf+0x2b0>
    1936:	b7 01       	movw	r22, r14
    1938:	80 2f       	mov	r24, r16
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1940:	93 fc       	sbrc	r9, 3
    1942:	09 c0       	rjmp	.+18     	; 0x1956 <vfprintf+0x2c6>
    1944:	55 20       	and	r5, r5
    1946:	39 f0       	breq	.+14     	; 0x1956 <vfprintf+0x2c6>
    1948:	b7 01       	movw	r22, r14
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1952:	5a 94       	dec	r5
    1954:	f7 cf       	rjmp	.-18     	; 0x1944 <vfprintf+0x2b4>
    1956:	97 fe       	sbrs	r9, 7
    1958:	4c c0       	rjmp	.+152    	; 0x19f2 <vfprintf+0x362>
    195a:	46 01       	movw	r8, r12
    195c:	d7 fe       	sbrs	r13, 7
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <vfprintf+0x2d4>
    1960:	81 2c       	mov	r8, r1
    1962:	91 2c       	mov	r9, r1
    1964:	c6 01       	movw	r24, r12
    1966:	88 19       	sub	r24, r8
    1968:	99 09       	sbc	r25, r9
    196a:	f3 01       	movw	r30, r6
    196c:	e8 0f       	add	r30, r24
    196e:	f9 1f       	adc	r31, r25
    1970:	ed 87       	std	Y+13, r30	; 0x0d
    1972:	fe 87       	std	Y+14, r31	; 0x0e
    1974:	96 01       	movw	r18, r12
    1976:	24 19       	sub	r18, r4
    1978:	31 09       	sbc	r19, r1
    197a:	2f 87       	std	Y+15, r18	; 0x0f
    197c:	38 8b       	std	Y+16, r19	; 0x10
    197e:	01 2f       	mov	r16, r17
    1980:	10 e0       	ldi	r17, 0x00	; 0
    1982:	11 95       	neg	r17
    1984:	01 95       	neg	r16
    1986:	11 09       	sbc	r17, r1
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	83 16       	cp	r8, r19
    198c:	93 06       	cpc	r9, r19
    198e:	29 f4       	brne	.+10     	; 0x199a <vfprintf+0x30a>
    1990:	b7 01       	movw	r22, r14
    1992:	8e e2       	ldi	r24, 0x2E	; 46
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    199a:	c8 14       	cp	r12, r8
    199c:	d9 04       	cpc	r13, r9
    199e:	4c f0       	brlt	.+18     	; 0x19b2 <vfprintf+0x322>
    19a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a2:	98 89       	ldd	r25, Y+16	; 0x10
    19a4:	88 15       	cp	r24, r8
    19a6:	99 05       	cpc	r25, r9
    19a8:	24 f4       	brge	.+8      	; 0x19b2 <vfprintf+0x322>
    19aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    19ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <vfprintf+0x324>
    19b2:	80 e3       	ldi	r24, 0x30	; 48
    19b4:	f1 e0       	ldi	r31, 0x01	; 1
    19b6:	8f 1a       	sub	r8, r31
    19b8:	91 08       	sbc	r9, r1
    19ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    19bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    19be:	2f 5f       	subi	r18, 0xFF	; 255
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	2d 87       	std	Y+13, r18	; 0x0d
    19c4:	3e 87       	std	Y+14, r19	; 0x0e
    19c6:	80 16       	cp	r8, r16
    19c8:	91 06       	cpc	r9, r17
    19ca:	2c f0       	brlt	.+10     	; 0x19d6 <vfprintf+0x346>
    19cc:	b7 01       	movw	r22, r14
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    19d4:	d9 cf       	rjmp	.-78     	; 0x1988 <vfprintf+0x2f8>
    19d6:	c8 14       	cp	r12, r8
    19d8:	d9 04       	cpc	r13, r9
    19da:	41 f4       	brne	.+16     	; 0x19ec <vfprintf+0x35c>
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	96 33       	cpi	r25, 0x36	; 54
    19e0:	20 f4       	brcc	.+8      	; 0x19ea <vfprintf+0x35a>
    19e2:	95 33       	cpi	r25, 0x35	; 53
    19e4:	19 f4       	brne	.+6      	; 0x19ec <vfprintf+0x35c>
    19e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    19e8:	34 ff       	sbrs	r19, 4
    19ea:	81 e3       	ldi	r24, 0x31	; 49
    19ec:	b7 01       	movw	r22, r14
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	4e c0       	rjmp	.+156    	; 0x1a8e <vfprintf+0x3fe>
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	81 33       	cpi	r24, 0x31	; 49
    19f6:	19 f0       	breq	.+6      	; 0x19fe <vfprintf+0x36e>
    19f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    19fa:	9f 7e       	andi	r25, 0xEF	; 239
    19fc:	9c 87       	std	Y+12, r25	; 0x0c
    19fe:	b7 01       	movw	r22, r14
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a06:	11 11       	cpse	r17, r1
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <vfprintf+0x384>
    1a0a:	94 fc       	sbrc	r9, 4
    1a0c:	18 c0       	rjmp	.+48     	; 0x1a3e <vfprintf+0x3ae>
    1a0e:	85 e6       	ldi	r24, 0x65	; 101
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	17 c0       	rjmp	.+46     	; 0x1a42 <vfprintf+0x3b2>
    1a14:	b7 01       	movw	r22, r14
    1a16:	8e e2       	ldi	r24, 0x2E	; 46
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a1e:	1e 5f       	subi	r17, 0xFE	; 254
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	01 e0       	ldi	r16, 0x01	; 1
    1a24:	08 0f       	add	r16, r24
    1a26:	f3 01       	movw	r30, r6
    1a28:	e8 0f       	add	r30, r24
    1a2a:	f1 1d       	adc	r31, r1
    1a2c:	80 81       	ld	r24, Z
    1a2e:	b7 01       	movw	r22, r14
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a36:	80 2f       	mov	r24, r16
    1a38:	01 13       	cpse	r16, r17
    1a3a:	f3 cf       	rjmp	.-26     	; 0x1a22 <vfprintf+0x392>
    1a3c:	e6 cf       	rjmp	.-52     	; 0x1a0a <vfprintf+0x37a>
    1a3e:	85 e4       	ldi	r24, 0x45	; 69
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	b7 01       	movw	r22, r14
    1a44:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a48:	d7 fc       	sbrc	r13, 7
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <vfprintf+0x3c8>
    1a4c:	c1 14       	cp	r12, r1
    1a4e:	d1 04       	cpc	r13, r1
    1a50:	41 f4       	brne	.+16     	; 0x1a62 <vfprintf+0x3d2>
    1a52:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a54:	e4 ff       	sbrs	r30, 4
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <vfprintf+0x3d2>
    1a58:	d1 94       	neg	r13
    1a5a:	c1 94       	neg	r12
    1a5c:	d1 08       	sbc	r13, r1
    1a5e:	8d e2       	ldi	r24, 0x2D	; 45
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <vfprintf+0x3d4>
    1a62:	8b e2       	ldi	r24, 0x2B	; 43
    1a64:	b7 01       	movw	r22, r14
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a6c:	80 e3       	ldi	r24, 0x30	; 48
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	c2 16       	cp	r12, r18
    1a72:	d1 04       	cpc	r13, r1
    1a74:	2c f0       	brlt	.+10     	; 0x1a80 <vfprintf+0x3f0>
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	fa e0       	ldi	r31, 0x0A	; 10
    1a7a:	cf 1a       	sub	r12, r31
    1a7c:	d1 08       	sbc	r13, r1
    1a7e:	f7 cf       	rjmp	.-18     	; 0x1a6e <vfprintf+0x3de>
    1a80:	b7 01       	movw	r22, r14
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a88:	b7 01       	movw	r22, r14
    1a8a:	c6 01       	movw	r24, r12
    1a8c:	c0 96       	adiw	r24, 0x30	; 48
    1a8e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1a92:	54 c1       	rjmp	.+680    	; 0x1d3c <vfprintf+0x6ac>
    1a94:	83 36       	cpi	r24, 0x63	; 99
    1a96:	31 f0       	breq	.+12     	; 0x1aa4 <vfprintf+0x414>
    1a98:	83 37       	cpi	r24, 0x73	; 115
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <vfprintf+0x42a>
    1a9c:	83 35       	cpi	r24, 0x53	; 83
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <vfprintf+0x412>
    1aa0:	56 c0       	rjmp	.+172    	; 0x1b4e <vfprintf+0x4be>
    1aa2:	20 c0       	rjmp	.+64     	; 0x1ae4 <vfprintf+0x454>
    1aa4:	56 01       	movw	r10, r12
    1aa6:	32 e0       	ldi	r19, 0x02	; 2
    1aa8:	a3 0e       	add	r10, r19
    1aaa:	b1 1c       	adc	r11, r1
    1aac:	f6 01       	movw	r30, r12
    1aae:	80 81       	ld	r24, Z
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	01 e0       	ldi	r16, 0x01	; 1
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	63 01       	movw	r12, r6
    1ab8:	12 c0       	rjmp	.+36     	; 0x1ade <vfprintf+0x44e>
    1aba:	56 01       	movw	r10, r12
    1abc:	f2 e0       	ldi	r31, 0x02	; 2
    1abe:	af 0e       	add	r10, r31
    1ac0:	b1 1c       	adc	r11, r1
    1ac2:	f6 01       	movw	r30, r12
    1ac4:	c0 80       	ld	r12, Z
    1ac6:	d1 80       	ldd	r13, Z+1	; 0x01
    1ac8:	96 fe       	sbrs	r9, 6
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <vfprintf+0x442>
    1acc:	61 2f       	mov	r22, r17
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <vfprintf+0x446>
    1ad2:	6f ef       	ldi	r22, 0xFF	; 255
    1ad4:	7f ef       	ldi	r23, 0xFF	; 255
    1ad6:	c6 01       	movw	r24, r12
    1ad8:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <strnlen>
    1adc:	8c 01       	movw	r16, r24
    1ade:	f9 2d       	mov	r31, r9
    1ae0:	ff 77       	andi	r31, 0x7F	; 127
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <vfprintf+0x47c>
    1ae4:	56 01       	movw	r10, r12
    1ae6:	22 e0       	ldi	r18, 0x02	; 2
    1ae8:	a2 0e       	add	r10, r18
    1aea:	b1 1c       	adc	r11, r1
    1aec:	f6 01       	movw	r30, r12
    1aee:	c0 80       	ld	r12, Z
    1af0:	d1 80       	ldd	r13, Z+1	; 0x01
    1af2:	96 fe       	sbrs	r9, 6
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <vfprintf+0x46c>
    1af6:	61 2f       	mov	r22, r17
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <vfprintf+0x470>
    1afc:	6f ef       	ldi	r22, 0xFF	; 255
    1afe:	7f ef       	ldi	r23, 0xFF	; 255
    1b00:	c6 01       	movw	r24, r12
    1b02:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <strnlen_P>
    1b06:	8c 01       	movw	r16, r24
    1b08:	f9 2d       	mov	r31, r9
    1b0a:	f0 68       	ori	r31, 0x80	; 128
    1b0c:	9f 2e       	mov	r9, r31
    1b0e:	f3 fd       	sbrc	r31, 3
    1b10:	1a c0       	rjmp	.+52     	; 0x1b46 <vfprintf+0x4b6>
    1b12:	85 2d       	mov	r24, r5
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	08 17       	cp	r16, r24
    1b18:	19 07       	cpc	r17, r25
    1b1a:	a8 f4       	brcc	.+42     	; 0x1b46 <vfprintf+0x4b6>
    1b1c:	b7 01       	movw	r22, r14
    1b1e:	80 e2       	ldi	r24, 0x20	; 32
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1b26:	5a 94       	dec	r5
    1b28:	f4 cf       	rjmp	.-24     	; 0x1b12 <vfprintf+0x482>
    1b2a:	f6 01       	movw	r30, r12
    1b2c:	97 fc       	sbrc	r9, 7
    1b2e:	85 91       	lpm	r24, Z+
    1b30:	97 fe       	sbrs	r9, 7
    1b32:	81 91       	ld	r24, Z+
    1b34:	6f 01       	movw	r12, r30
    1b36:	b7 01       	movw	r22, r14
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1b3e:	51 10       	cpse	r5, r1
    1b40:	5a 94       	dec	r5
    1b42:	01 50       	subi	r16, 0x01	; 1
    1b44:	11 09       	sbc	r17, r1
    1b46:	01 15       	cp	r16, r1
    1b48:	11 05       	cpc	r17, r1
    1b4a:	79 f7       	brne	.-34     	; 0x1b2a <vfprintf+0x49a>
    1b4c:	f7 c0       	rjmp	.+494    	; 0x1d3c <vfprintf+0x6ac>
    1b4e:	84 36       	cpi	r24, 0x64	; 100
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <vfprintf+0x4c6>
    1b52:	89 36       	cpi	r24, 0x69	; 105
    1b54:	61 f5       	brne	.+88     	; 0x1bae <vfprintf+0x51e>
    1b56:	56 01       	movw	r10, r12
    1b58:	97 fe       	sbrs	r9, 7
    1b5a:	09 c0       	rjmp	.+18     	; 0x1b6e <vfprintf+0x4de>
    1b5c:	24 e0       	ldi	r18, 0x04	; 4
    1b5e:	a2 0e       	add	r10, r18
    1b60:	b1 1c       	adc	r11, r1
    1b62:	f6 01       	movw	r30, r12
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <vfprintf+0x4f2>
    1b6e:	f2 e0       	ldi	r31, 0x02	; 2
    1b70:	af 0e       	add	r10, r31
    1b72:	b1 1c       	adc	r11, r1
    1b74:	f6 01       	movw	r30, r12
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	07 2e       	mov	r0, r23
    1b7c:	00 0c       	add	r0, r0
    1b7e:	88 0b       	sbc	r24, r24
    1b80:	99 0b       	sbc	r25, r25
    1b82:	f9 2d       	mov	r31, r9
    1b84:	ff 76       	andi	r31, 0x6F	; 111
    1b86:	9f 2e       	mov	r9, r31
    1b88:	97 ff       	sbrs	r25, 7
    1b8a:	09 c0       	rjmp	.+18     	; 0x1b9e <vfprintf+0x50e>
    1b8c:	90 95       	com	r25
    1b8e:	80 95       	com	r24
    1b90:	70 95       	com	r23
    1b92:	61 95       	neg	r22
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	8f 4f       	sbci	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	f0 68       	ori	r31, 0x80	; 128
    1b9c:	9f 2e       	mov	r9, r31
    1b9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	a3 01       	movw	r20, r6
    1ba4:	0e 94 94 10 	call	0x2128	; 0x2128 <__ultoa_invert>
    1ba8:	c8 2e       	mov	r12, r24
    1baa:	c6 18       	sub	r12, r6
    1bac:	3f c0       	rjmp	.+126    	; 0x1c2c <vfprintf+0x59c>
    1bae:	09 2d       	mov	r16, r9
    1bb0:	85 37       	cpi	r24, 0x75	; 117
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <vfprintf+0x52c>
    1bb4:	0f 7e       	andi	r16, 0xEF	; 239
    1bb6:	2a e0       	ldi	r18, 0x0A	; 10
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	1d c0       	rjmp	.+58     	; 0x1bf6 <vfprintf+0x566>
    1bbc:	09 7f       	andi	r16, 0xF9	; 249
    1bbe:	8f 36       	cpi	r24, 0x6F	; 111
    1bc0:	91 f0       	breq	.+36     	; 0x1be6 <vfprintf+0x556>
    1bc2:	18 f4       	brcc	.+6      	; 0x1bca <vfprintf+0x53a>
    1bc4:	88 35       	cpi	r24, 0x58	; 88
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <vfprintf+0x54e>
    1bc8:	c3 c0       	rjmp	.+390    	; 0x1d50 <vfprintf+0x6c0>
    1bca:	80 37       	cpi	r24, 0x70	; 112
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <vfprintf+0x544>
    1bce:	88 37       	cpi	r24, 0x78	; 120
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <vfprintf+0x546>
    1bd2:	be c0       	rjmp	.+380    	; 0x1d50 <vfprintf+0x6c0>
    1bd4:	00 61       	ori	r16, 0x10	; 16
    1bd6:	04 ff       	sbrs	r16, 4
    1bd8:	09 c0       	rjmp	.+18     	; 0x1bec <vfprintf+0x55c>
    1bda:	04 60       	ori	r16, 0x04	; 4
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <vfprintf+0x55c>
    1bde:	94 fe       	sbrs	r9, 4
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <vfprintf+0x562>
    1be2:	06 60       	ori	r16, 0x06	; 6
    1be4:	06 c0       	rjmp	.+12     	; 0x1bf2 <vfprintf+0x562>
    1be6:	28 e0       	ldi	r18, 0x08	; 8
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <vfprintf+0x566>
    1bec:	20 e1       	ldi	r18, 0x10	; 16
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vfprintf+0x566>
    1bf2:	20 e1       	ldi	r18, 0x10	; 16
    1bf4:	32 e0       	ldi	r19, 0x02	; 2
    1bf6:	56 01       	movw	r10, r12
    1bf8:	07 ff       	sbrs	r16, 7
    1bfa:	09 c0       	rjmp	.+18     	; 0x1c0e <vfprintf+0x57e>
    1bfc:	84 e0       	ldi	r24, 0x04	; 4
    1bfe:	a8 0e       	add	r10, r24
    1c00:	b1 1c       	adc	r11, r1
    1c02:	f6 01       	movw	r30, r12
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	08 c0       	rjmp	.+16     	; 0x1c1e <vfprintf+0x58e>
    1c0e:	f2 e0       	ldi	r31, 0x02	; 2
    1c10:	af 0e       	add	r10, r31
    1c12:	b1 1c       	adc	r11, r1
    1c14:	f6 01       	movw	r30, r12
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a3 01       	movw	r20, r6
    1c20:	0e 94 94 10 	call	0x2128	; 0x2128 <__ultoa_invert>
    1c24:	c8 2e       	mov	r12, r24
    1c26:	c6 18       	sub	r12, r6
    1c28:	0f 77       	andi	r16, 0x7F	; 127
    1c2a:	90 2e       	mov	r9, r16
    1c2c:	96 fe       	sbrs	r9, 6
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <vfprintf+0x5b6>
    1c30:	09 2d       	mov	r16, r9
    1c32:	0e 7f       	andi	r16, 0xFE	; 254
    1c34:	c1 16       	cp	r12, r17
    1c36:	50 f4       	brcc	.+20     	; 0x1c4c <vfprintf+0x5bc>
    1c38:	94 fe       	sbrs	r9, 4
    1c3a:	0a c0       	rjmp	.+20     	; 0x1c50 <vfprintf+0x5c0>
    1c3c:	92 fc       	sbrc	r9, 2
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <vfprintf+0x5c0>
    1c40:	09 2d       	mov	r16, r9
    1c42:	0e 7e       	andi	r16, 0xEE	; 238
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <vfprintf+0x5c0>
    1c46:	dc 2c       	mov	r13, r12
    1c48:	09 2d       	mov	r16, r9
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <vfprintf+0x5c2>
    1c4c:	dc 2c       	mov	r13, r12
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <vfprintf+0x5c2>
    1c50:	d1 2e       	mov	r13, r17
    1c52:	04 ff       	sbrs	r16, 4
    1c54:	0d c0       	rjmp	.+26     	; 0x1c70 <vfprintf+0x5e0>
    1c56:	fe 01       	movw	r30, r28
    1c58:	ec 0d       	add	r30, r12
    1c5a:	f1 1d       	adc	r31, r1
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 33       	cpi	r24, 0x30	; 48
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <vfprintf+0x5d6>
    1c62:	09 7e       	andi	r16, 0xE9	; 233
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <vfprintf+0x5e8>
    1c66:	02 ff       	sbrs	r16, 2
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <vfprintf+0x5e6>
    1c6a:	d3 94       	inc	r13
    1c6c:	d3 94       	inc	r13
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <vfprintf+0x5e8>
    1c70:	80 2f       	mov	r24, r16
    1c72:	86 78       	andi	r24, 0x86	; 134
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <vfprintf+0x5e8>
    1c76:	d3 94       	inc	r13
    1c78:	03 fd       	sbrc	r16, 3
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <vfprintf+0x60e>
    1c7c:	00 ff       	sbrs	r16, 0
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <vfprintf+0x5fc>
    1c80:	1c 2d       	mov	r17, r12
    1c82:	d5 14       	cp	r13, r5
    1c84:	80 f4       	brcc	.+32     	; 0x1ca6 <vfprintf+0x616>
    1c86:	15 0d       	add	r17, r5
    1c88:	1d 19       	sub	r17, r13
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <vfprintf+0x616>
    1c8c:	d5 14       	cp	r13, r5
    1c8e:	58 f4       	brcc	.+22     	; 0x1ca6 <vfprintf+0x616>
    1c90:	b7 01       	movw	r22, r14
    1c92:	80 e2       	ldi	r24, 0x20	; 32
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1c9a:	d3 94       	inc	r13
    1c9c:	f7 cf       	rjmp	.-18     	; 0x1c8c <vfprintf+0x5fc>
    1c9e:	d5 14       	cp	r13, r5
    1ca0:	10 f4       	brcc	.+4      	; 0x1ca6 <vfprintf+0x616>
    1ca2:	5d 18       	sub	r5, r13
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <vfprintf+0x618>
    1ca6:	51 2c       	mov	r5, r1
    1ca8:	04 ff       	sbrs	r16, 4
    1caa:	10 c0       	rjmp	.+32     	; 0x1ccc <vfprintf+0x63c>
    1cac:	b7 01       	movw	r22, r14
    1cae:	80 e3       	ldi	r24, 0x30	; 48
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1cb6:	02 ff       	sbrs	r16, 2
    1cb8:	17 c0       	rjmp	.+46     	; 0x1ce8 <vfprintf+0x658>
    1cba:	01 fd       	sbrc	r16, 1
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <vfprintf+0x634>
    1cbe:	88 e7       	ldi	r24, 0x78	; 120
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <vfprintf+0x638>
    1cc4:	88 e5       	ldi	r24, 0x58	; 88
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	b7 01       	movw	r22, r14
    1cca:	0c c0       	rjmp	.+24     	; 0x1ce4 <vfprintf+0x654>
    1ccc:	80 2f       	mov	r24, r16
    1cce:	86 78       	andi	r24, 0x86	; 134
    1cd0:	59 f0       	breq	.+22     	; 0x1ce8 <vfprintf+0x658>
    1cd2:	01 ff       	sbrs	r16, 1
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <vfprintf+0x64a>
    1cd6:	8b e2       	ldi	r24, 0x2B	; 43
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <vfprintf+0x64c>
    1cda:	80 e2       	ldi	r24, 0x20	; 32
    1cdc:	07 fd       	sbrc	r16, 7
    1cde:	8d e2       	ldi	r24, 0x2D	; 45
    1ce0:	b7 01       	movw	r22, r14
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1ce8:	c1 16       	cp	r12, r17
    1cea:	38 f4       	brcc	.+14     	; 0x1cfa <vfprintf+0x66a>
    1cec:	b7 01       	movw	r22, r14
    1cee:	80 e3       	ldi	r24, 0x30	; 48
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1cf6:	11 50       	subi	r17, 0x01	; 1
    1cf8:	f7 cf       	rjmp	.-18     	; 0x1ce8 <vfprintf+0x658>
    1cfa:	ca 94       	dec	r12
    1cfc:	f3 01       	movw	r30, r6
    1cfe:	ec 0d       	add	r30, r12
    1d00:	f1 1d       	adc	r31, r1
    1d02:	80 81       	ld	r24, Z
    1d04:	b7 01       	movw	r22, r14
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1d0c:	c1 10       	cpse	r12, r1
    1d0e:	f5 cf       	rjmp	.-22     	; 0x1cfa <vfprintf+0x66a>
    1d10:	15 c0       	rjmp	.+42     	; 0x1d3c <vfprintf+0x6ac>
    1d12:	f4 e0       	ldi	r31, 0x04	; 4
    1d14:	f5 15       	cp	r31, r5
    1d16:	60 f5       	brcc	.+88     	; 0x1d70 <vfprintf+0x6e0>
    1d18:	84 e0       	ldi	r24, 0x04	; 4
    1d1a:	58 1a       	sub	r5, r24
    1d1c:	93 fe       	sbrs	r9, 3
    1d1e:	1f c0       	rjmp	.+62     	; 0x1d5e <vfprintf+0x6ce>
    1d20:	01 11       	cpse	r16, r1
    1d22:	27 c0       	rjmp	.+78     	; 0x1d72 <vfprintf+0x6e2>
    1d24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d26:	23 ff       	sbrs	r18, 3
    1d28:	2a c0       	rjmp	.+84     	; 0x1d7e <vfprintf+0x6ee>
    1d2a:	0c e0       	ldi	r16, 0x0C	; 12
    1d2c:	12 e0       	ldi	r17, 0x02	; 2
    1d2e:	39 2d       	mov	r19, r9
    1d30:	30 71       	andi	r19, 0x10	; 16
    1d32:	93 2e       	mov	r9, r19
    1d34:	f8 01       	movw	r30, r16
    1d36:	84 91       	lpm	r24, Z
    1d38:	81 11       	cpse	r24, r1
    1d3a:	24 c0       	rjmp	.+72     	; 0x1d84 <vfprintf+0x6f4>
    1d3c:	55 20       	and	r5, r5
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <vfprintf+0x6b2>
    1d40:	e4 cc       	rjmp	.-1592   	; 0x170a <vfprintf+0x7a>
    1d42:	b7 01       	movw	r22, r14
    1d44:	80 e2       	ldi	r24, 0x20	; 32
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1d4c:	5a 94       	dec	r5
    1d4e:	f6 cf       	rjmp	.-20     	; 0x1d3c <vfprintf+0x6ac>
    1d50:	f7 01       	movw	r30, r14
    1d52:	86 81       	ldd	r24, Z+6	; 0x06
    1d54:	97 81       	ldd	r25, Z+7	; 0x07
    1d56:	26 c0       	rjmp	.+76     	; 0x1da4 <vfprintf+0x714>
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	9f ef       	ldi	r25, 0xFF	; 255
    1d5c:	23 c0       	rjmp	.+70     	; 0x1da4 <vfprintf+0x714>
    1d5e:	b7 01       	movw	r22, r14
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1d68:	5a 94       	dec	r5
    1d6a:	51 10       	cpse	r5, r1
    1d6c:	f8 cf       	rjmp	.-16     	; 0x1d5e <vfprintf+0x6ce>
    1d6e:	d8 cf       	rjmp	.-80     	; 0x1d20 <vfprintf+0x690>
    1d70:	51 2c       	mov	r5, r1
    1d72:	b7 01       	movw	r22, r14
    1d74:	80 2f       	mov	r24, r16
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1d7c:	d3 cf       	rjmp	.-90     	; 0x1d24 <vfprintf+0x694>
    1d7e:	00 e1       	ldi	r16, 0x10	; 16
    1d80:	12 e0       	ldi	r17, 0x02	; 2
    1d82:	d5 cf       	rjmp	.-86     	; 0x1d2e <vfprintf+0x69e>
    1d84:	91 10       	cpse	r9, r1
    1d86:	80 52       	subi	r24, 0x20	; 32
    1d88:	b7 01       	movw	r22, r14
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <fputc>
    1d90:	0f 5f       	subi	r16, 0xFF	; 255
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	cf cf       	rjmp	.-98     	; 0x1d34 <vfprintf+0x6a4>
    1d96:	23 e0       	ldi	r18, 0x03	; 3
    1d98:	25 15       	cp	r18, r5
    1d9a:	10 f4       	brcc	.+4      	; 0x1da0 <vfprintf+0x710>
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	bd cf       	rjmp	.-134    	; 0x1d1a <vfprintf+0x68a>
    1da0:	51 2c       	mov	r5, r1
    1da2:	c0 cf       	rjmp	.-128    	; 0x1d24 <vfprintf+0x694>
    1da4:	60 96       	adiw	r28, 0x10	; 16
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	bf 90       	pop	r11
    1dbc:	af 90       	pop	r10
    1dbe:	9f 90       	pop	r9
    1dc0:	8f 90       	pop	r8
    1dc2:	7f 90       	pop	r7
    1dc4:	6f 90       	pop	r6
    1dc6:	5f 90       	pop	r5
    1dc8:	4f 90       	pop	r4
    1dca:	3f 90       	pop	r3
    1dcc:	2f 90       	pop	r2
    1dce:	08 95       	ret

00001dd0 <__ftoa_engine>:
    1dd0:	28 30       	cpi	r18, 0x08	; 8
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <__ftoa_engine+0x6>
    1dd4:	27 e0       	ldi	r18, 0x07	; 7
    1dd6:	33 27       	eor	r19, r19
    1dd8:	da 01       	movw	r26, r20
    1dda:	99 0f       	add	r25, r25
    1ddc:	31 1d       	adc	r19, r1
    1dde:	87 fd       	sbrc	r24, 7
    1de0:	91 60       	ori	r25, 0x01	; 1
    1de2:	00 96       	adiw	r24, 0x00	; 0
    1de4:	61 05       	cpc	r22, r1
    1de6:	71 05       	cpc	r23, r1
    1de8:	39 f4       	brne	.+14     	; 0x1df8 <__ftoa_engine+0x28>
    1dea:	32 60       	ori	r19, 0x02	; 2
    1dec:	2e 5f       	subi	r18, 0xFE	; 254
    1dee:	3d 93       	st	X+, r19
    1df0:	30 e3       	ldi	r19, 0x30	; 48
    1df2:	2a 95       	dec	r18
    1df4:	e1 f7       	brne	.-8      	; 0x1dee <__ftoa_engine+0x1e>
    1df6:	08 95       	ret
    1df8:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfa:	30 f0       	brcs	.+12     	; 0x1e08 <__ftoa_engine+0x38>
    1dfc:	80 38       	cpi	r24, 0x80	; 128
    1dfe:	71 05       	cpc	r23, r1
    1e00:	61 05       	cpc	r22, r1
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <__ftoa_engine+0x36>
    1e04:	3c 5f       	subi	r19, 0xFC	; 252
    1e06:	3c 5f       	subi	r19, 0xFC	; 252
    1e08:	3d 93       	st	X+, r19
    1e0a:	91 30       	cpi	r25, 0x01	; 1
    1e0c:	08 f0       	brcs	.+2      	; 0x1e10 <__ftoa_engine+0x40>
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	91 1d       	adc	r25, r1
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	1f 93       	push	r17
    1e18:	0f 93       	push	r16
    1e1a:	ff 92       	push	r15
    1e1c:	ef 92       	push	r14
    1e1e:	19 2f       	mov	r17, r25
    1e20:	98 7f       	andi	r25, 0xF8	; 248
    1e22:	96 95       	lsr	r25
    1e24:	e9 2f       	mov	r30, r25
    1e26:	96 95       	lsr	r25
    1e28:	96 95       	lsr	r25
    1e2a:	e9 0f       	add	r30, r25
    1e2c:	ff 27       	eor	r31, r31
    1e2e:	e2 59       	subi	r30, 0x92	; 146
    1e30:	fd 4f       	sbci	r31, 0xFD	; 253
    1e32:	99 27       	eor	r25, r25
    1e34:	33 27       	eor	r19, r19
    1e36:	ee 24       	eor	r14, r14
    1e38:	ff 24       	eor	r15, r15
    1e3a:	a7 01       	movw	r20, r14
    1e3c:	e7 01       	movw	r28, r14
    1e3e:	05 90       	lpm	r0, Z+
    1e40:	08 94       	sec
    1e42:	07 94       	ror	r0
    1e44:	28 f4       	brcc	.+10     	; 0x1e50 <__ftoa_engine+0x80>
    1e46:	36 0f       	add	r19, r22
    1e48:	e7 1e       	adc	r14, r23
    1e4a:	f8 1e       	adc	r15, r24
    1e4c:	49 1f       	adc	r20, r25
    1e4e:	51 1d       	adc	r21, r1
    1e50:	66 0f       	add	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	88 1f       	adc	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	06 94       	lsr	r0
    1e5a:	a1 f7       	brne	.-24     	; 0x1e44 <__ftoa_engine+0x74>
    1e5c:	05 90       	lpm	r0, Z+
    1e5e:	07 94       	ror	r0
    1e60:	28 f4       	brcc	.+10     	; 0x1e6c <__ftoa_engine+0x9c>
    1e62:	e7 0e       	add	r14, r23
    1e64:	f8 1e       	adc	r15, r24
    1e66:	49 1f       	adc	r20, r25
    1e68:	56 1f       	adc	r21, r22
    1e6a:	c1 1d       	adc	r28, r1
    1e6c:	77 0f       	add	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	66 1f       	adc	r22, r22
    1e74:	06 94       	lsr	r0
    1e76:	a1 f7       	brne	.-24     	; 0x1e60 <__ftoa_engine+0x90>
    1e78:	05 90       	lpm	r0, Z+
    1e7a:	07 94       	ror	r0
    1e7c:	28 f4       	brcc	.+10     	; 0x1e88 <__ftoa_engine+0xb8>
    1e7e:	f8 0e       	add	r15, r24
    1e80:	49 1f       	adc	r20, r25
    1e82:	56 1f       	adc	r21, r22
    1e84:	c7 1f       	adc	r28, r23
    1e86:	d1 1d       	adc	r29, r1
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	66 1f       	adc	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	06 94       	lsr	r0
    1e92:	a1 f7       	brne	.-24     	; 0x1e7c <__ftoa_engine+0xac>
    1e94:	05 90       	lpm	r0, Z+
    1e96:	07 94       	ror	r0
    1e98:	20 f4       	brcc	.+8      	; 0x1ea2 <__ftoa_engine+0xd2>
    1e9a:	49 0f       	add	r20, r25
    1e9c:	56 1f       	adc	r21, r22
    1e9e:	c7 1f       	adc	r28, r23
    1ea0:	d8 1f       	adc	r29, r24
    1ea2:	99 0f       	add	r25, r25
    1ea4:	66 1f       	adc	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	06 94       	lsr	r0
    1eac:	a9 f7       	brne	.-22     	; 0x1e98 <__ftoa_engine+0xc8>
    1eae:	84 91       	lpm	r24, Z
    1eb0:	10 95       	com	r17
    1eb2:	17 70       	andi	r17, 0x07	; 7
    1eb4:	41 f0       	breq	.+16     	; 0x1ec6 <__ftoa_engine+0xf6>
    1eb6:	d6 95       	lsr	r29
    1eb8:	c7 95       	ror	r28
    1eba:	57 95       	ror	r21
    1ebc:	47 95       	ror	r20
    1ebe:	f7 94       	ror	r15
    1ec0:	e7 94       	ror	r14
    1ec2:	1a 95       	dec	r17
    1ec4:	c1 f7       	brne	.-16     	; 0x1eb6 <__ftoa_engine+0xe6>
    1ec6:	e4 e1       	ldi	r30, 0x14	; 20
    1ec8:	f2 e0       	ldi	r31, 0x02	; 2
    1eca:	68 94       	set
    1ecc:	15 90       	lpm	r1, Z+
    1ece:	15 91       	lpm	r17, Z+
    1ed0:	35 91       	lpm	r19, Z+
    1ed2:	65 91       	lpm	r22, Z+
    1ed4:	95 91       	lpm	r25, Z+
    1ed6:	05 90       	lpm	r0, Z+
    1ed8:	7f e2       	ldi	r23, 0x2F	; 47
    1eda:	73 95       	inc	r23
    1edc:	e1 18       	sub	r14, r1
    1ede:	f1 0a       	sbc	r15, r17
    1ee0:	43 0b       	sbc	r20, r19
    1ee2:	56 0b       	sbc	r21, r22
    1ee4:	c9 0b       	sbc	r28, r25
    1ee6:	d0 09       	sbc	r29, r0
    1ee8:	c0 f7       	brcc	.-16     	; 0x1eda <__ftoa_engine+0x10a>
    1eea:	e1 0c       	add	r14, r1
    1eec:	f1 1e       	adc	r15, r17
    1eee:	43 1f       	adc	r20, r19
    1ef0:	56 1f       	adc	r21, r22
    1ef2:	c9 1f       	adc	r28, r25
    1ef4:	d0 1d       	adc	r29, r0
    1ef6:	7e f4       	brtc	.+30     	; 0x1f16 <__ftoa_engine+0x146>
    1ef8:	70 33       	cpi	r23, 0x30	; 48
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <__ftoa_engine+0x130>
    1efc:	8a 95       	dec	r24
    1efe:	e6 cf       	rjmp	.-52     	; 0x1ecc <__ftoa_engine+0xfc>
    1f00:	e8 94       	clt
    1f02:	01 50       	subi	r16, 0x01	; 1
    1f04:	30 f0       	brcs	.+12     	; 0x1f12 <__ftoa_engine+0x142>
    1f06:	08 0f       	add	r16, r24
    1f08:	0a f4       	brpl	.+2      	; 0x1f0c <__ftoa_engine+0x13c>
    1f0a:	00 27       	eor	r16, r16
    1f0c:	02 17       	cp	r16, r18
    1f0e:	08 f4       	brcc	.+2      	; 0x1f12 <__ftoa_engine+0x142>
    1f10:	20 2f       	mov	r18, r16
    1f12:	23 95       	inc	r18
    1f14:	02 2f       	mov	r16, r18
    1f16:	7a 33       	cpi	r23, 0x3A	; 58
    1f18:	28 f0       	brcs	.+10     	; 0x1f24 <__ftoa_engine+0x154>
    1f1a:	79 e3       	ldi	r23, 0x39	; 57
    1f1c:	7d 93       	st	X+, r23
    1f1e:	2a 95       	dec	r18
    1f20:	e9 f7       	brne	.-6      	; 0x1f1c <__ftoa_engine+0x14c>
    1f22:	10 c0       	rjmp	.+32     	; 0x1f44 <__ftoa_engine+0x174>
    1f24:	7d 93       	st	X+, r23
    1f26:	2a 95       	dec	r18
    1f28:	89 f6       	brne	.-94     	; 0x1ecc <__ftoa_engine+0xfc>
    1f2a:	06 94       	lsr	r0
    1f2c:	97 95       	ror	r25
    1f2e:	67 95       	ror	r22
    1f30:	37 95       	ror	r19
    1f32:	17 95       	ror	r17
    1f34:	17 94       	ror	r1
    1f36:	e1 18       	sub	r14, r1
    1f38:	f1 0a       	sbc	r15, r17
    1f3a:	43 0b       	sbc	r20, r19
    1f3c:	56 0b       	sbc	r21, r22
    1f3e:	c9 0b       	sbc	r28, r25
    1f40:	d0 09       	sbc	r29, r0
    1f42:	98 f0       	brcs	.+38     	; 0x1f6a <__ftoa_engine+0x19a>
    1f44:	23 95       	inc	r18
    1f46:	7e 91       	ld	r23, -X
    1f48:	73 95       	inc	r23
    1f4a:	7a 33       	cpi	r23, 0x3A	; 58
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <__ftoa_engine+0x180>
    1f4e:	70 e3       	ldi	r23, 0x30	; 48
    1f50:	7c 93       	st	X, r23
    1f52:	20 13       	cpse	r18, r16
    1f54:	b8 f7       	brcc	.-18     	; 0x1f44 <__ftoa_engine+0x174>
    1f56:	7e 91       	ld	r23, -X
    1f58:	70 61       	ori	r23, 0x10	; 16
    1f5a:	7d 93       	st	X+, r23
    1f5c:	30 f0       	brcs	.+12     	; 0x1f6a <__ftoa_engine+0x19a>
    1f5e:	83 95       	inc	r24
    1f60:	71 e3       	ldi	r23, 0x31	; 49
    1f62:	7d 93       	st	X+, r23
    1f64:	70 e3       	ldi	r23, 0x30	; 48
    1f66:	2a 95       	dec	r18
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <__ftoa_engine+0x192>
    1f6a:	11 24       	eor	r1, r1
    1f6c:	ef 90       	pop	r14
    1f6e:	ff 90       	pop	r15
    1f70:	0f 91       	pop	r16
    1f72:	1f 91       	pop	r17
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	99 27       	eor	r25, r25
    1f7a:	87 fd       	sbrc	r24, 7
    1f7c:	90 95       	com	r25
    1f7e:	08 95       	ret

00001f80 <strnlen_P>:
    1f80:	fc 01       	movw	r30, r24
    1f82:	05 90       	lpm	r0, Z+
    1f84:	61 50       	subi	r22, 0x01	; 1
    1f86:	70 40       	sbci	r23, 0x00	; 0
    1f88:	01 10       	cpse	r0, r1
    1f8a:	d8 f7       	brcc	.-10     	; 0x1f82 <strnlen_P+0x2>
    1f8c:	80 95       	com	r24
    1f8e:	90 95       	com	r25
    1f90:	8e 0f       	add	r24, r30
    1f92:	9f 1f       	adc	r25, r31
    1f94:	08 95       	ret

00001f96 <memset>:
    1f96:	dc 01       	movw	r26, r24
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <memset+0x6>
    1f9a:	6d 93       	st	X+, r22
    1f9c:	41 50       	subi	r20, 0x01	; 1
    1f9e:	50 40       	sbci	r21, 0x00	; 0
    1fa0:	e0 f7       	brcc	.-8      	; 0x1f9a <memset+0x4>
    1fa2:	08 95       	ret

00001fa4 <strnlen>:
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	61 50       	subi	r22, 0x01	; 1
    1fa8:	70 40       	sbci	r23, 0x00	; 0
    1faa:	01 90       	ld	r0, Z+
    1fac:	01 10       	cpse	r0, r1
    1fae:	d8 f7       	brcc	.-10     	; 0x1fa6 <strnlen+0x2>
    1fb0:	80 95       	com	r24
    1fb2:	90 95       	com	r25
    1fb4:	8e 0f       	add	r24, r30
    1fb6:	9f 1f       	adc	r25, r31
    1fb8:	08 95       	ret

00001fba <fputc>:
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	fb 01       	movw	r30, r22
    1fc4:	23 81       	ldd	r18, Z+3	; 0x03
    1fc6:	21 fd       	sbrc	r18, 1
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <fputc+0x16>
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	9f ef       	ldi	r25, 0xFF	; 255
    1fce:	2c c0       	rjmp	.+88     	; 0x2028 <fputc+0x6e>
    1fd0:	22 ff       	sbrs	r18, 2
    1fd2:	16 c0       	rjmp	.+44     	; 0x2000 <fputc+0x46>
    1fd4:	46 81       	ldd	r20, Z+6	; 0x06
    1fd6:	57 81       	ldd	r21, Z+7	; 0x07
    1fd8:	24 81       	ldd	r18, Z+4	; 0x04
    1fda:	35 81       	ldd	r19, Z+5	; 0x05
    1fdc:	42 17       	cp	r20, r18
    1fde:	53 07       	cpc	r21, r19
    1fe0:	44 f4       	brge	.+16     	; 0x1ff2 <fputc+0x38>
    1fe2:	a0 81       	ld	r26, Z
    1fe4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fe6:	9d 01       	movw	r18, r26
    1fe8:	2f 5f       	subi	r18, 0xFF	; 255
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	20 83       	st	Z, r18
    1fee:	31 83       	std	Z+1, r19	; 0x01
    1ff0:	8c 93       	st	X, r24
    1ff2:	26 81       	ldd	r18, Z+6	; 0x06
    1ff4:	37 81       	ldd	r19, Z+7	; 0x07
    1ff6:	2f 5f       	subi	r18, 0xFF	; 255
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	26 83       	std	Z+6, r18	; 0x06
    1ffc:	37 83       	std	Z+7, r19	; 0x07
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <fputc+0x6e>
    2000:	8b 01       	movw	r16, r22
    2002:	ec 01       	movw	r28, r24
    2004:	fb 01       	movw	r30, r22
    2006:	00 84       	ldd	r0, Z+8	; 0x08
    2008:	f1 85       	ldd	r31, Z+9	; 0x09
    200a:	e0 2d       	mov	r30, r0
    200c:	19 95       	eicall
    200e:	89 2b       	or	r24, r25
    2010:	e1 f6       	brne	.-72     	; 0x1fca <fputc+0x10>
    2012:	d8 01       	movw	r26, r16
    2014:	16 96       	adiw	r26, 0x06	; 6
    2016:	8d 91       	ld	r24, X+
    2018:	9c 91       	ld	r25, X
    201a:	17 97       	sbiw	r26, 0x07	; 7
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	16 96       	adiw	r26, 0x06	; 6
    2020:	8d 93       	st	X+, r24
    2022:	9c 93       	st	X, r25
    2024:	17 97       	sbiw	r26, 0x07	; 7
    2026:	ce 01       	movw	r24, r28
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

00002032 <printf>:
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	ae 01       	movw	r20, r28
    203c:	4a 5f       	subi	r20, 0xFA	; 250
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	fa 01       	movw	r30, r20
    2042:	61 91       	ld	r22, Z+
    2044:	71 91       	ld	r23, Z+
    2046:	af 01       	movw	r20, r30
    2048:	80 91 59 61 	lds	r24, 0x6159	; 0x806159 <__iob+0x2>
    204c:	90 91 5a 61 	lds	r25, 0x615A	; 0x80615a <__iob+0x3>
    2050:	0e 94 48 0b 	call	0x1690	; 0x1690 <vfprintf>
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	08 95       	ret

0000205a <puts>:
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	e0 91 59 61 	lds	r30, 0x6159	; 0x806159 <__iob+0x2>
    2066:	f0 91 5a 61 	lds	r31, 0x615A	; 0x80615a <__iob+0x3>
    206a:	23 81       	ldd	r18, Z+3	; 0x03
    206c:	21 ff       	sbrs	r18, 1
    206e:	1b c0       	rjmp	.+54     	; 0x20a6 <puts+0x4c>
    2070:	8c 01       	movw	r16, r24
    2072:	d0 e0       	ldi	r29, 0x00	; 0
    2074:	c0 e0       	ldi	r28, 0x00	; 0
    2076:	f8 01       	movw	r30, r16
    2078:	81 91       	ld	r24, Z+
    207a:	8f 01       	movw	r16, r30
    207c:	60 91 59 61 	lds	r22, 0x6159	; 0x806159 <__iob+0x2>
    2080:	70 91 5a 61 	lds	r23, 0x615A	; 0x80615a <__iob+0x3>
    2084:	db 01       	movw	r26, r22
    2086:	18 96       	adiw	r26, 0x08	; 8
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	19 97       	sbiw	r26, 0x09	; 9
    208e:	88 23       	and	r24, r24
    2090:	31 f0       	breq	.+12     	; 0x209e <puts+0x44>
    2092:	19 95       	eicall
    2094:	89 2b       	or	r24, r25
    2096:	79 f3       	breq	.-34     	; 0x2076 <puts+0x1c>
    2098:	df ef       	ldi	r29, 0xFF	; 255
    209a:	cf ef       	ldi	r28, 0xFF	; 255
    209c:	ec cf       	rjmp	.-40     	; 0x2076 <puts+0x1c>
    209e:	8a e0       	ldi	r24, 0x0A	; 10
    20a0:	19 95       	eicall
    20a2:	89 2b       	or	r24, r25
    20a4:	19 f0       	breq	.+6      	; 0x20ac <puts+0x52>
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	9f ef       	ldi	r25, 0xFF	; 255
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <puts+0x56>
    20ac:	8d 2f       	mov	r24, r29
    20ae:	9c 2f       	mov	r25, r28
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <snprintf>:
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	2e 97       	sbiw	r28, 0x0e	; 14
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0e 89       	ldd	r16, Y+22	; 0x16
    20ce:	1f 89       	ldd	r17, Y+23	; 0x17
    20d0:	88 8d       	ldd	r24, Y+24	; 0x18
    20d2:	99 8d       	ldd	r25, Y+25	; 0x19
    20d4:	26 e0       	ldi	r18, 0x06	; 6
    20d6:	2c 83       	std	Y+4, r18	; 0x04
    20d8:	09 83       	std	Y+1, r16	; 0x01
    20da:	1a 83       	std	Y+2, r17	; 0x02
    20dc:	97 ff       	sbrs	r25, 7
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <snprintf+0x2a>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e8       	ldi	r25, 0x80	; 128
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	ae 01       	movw	r20, r28
    20ec:	44 5e       	subi	r20, 0xE4	; 228
    20ee:	5f 4f       	sbci	r21, 0xFF	; 255
    20f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 48 0b 	call	0x1690	; 0x1690 <vfprintf>
    20fc:	4d 81       	ldd	r20, Y+5	; 0x05
    20fe:	5e 81       	ldd	r21, Y+6	; 0x06
    2100:	57 fd       	sbrc	r21, 7
    2102:	0a c0       	rjmp	.+20     	; 0x2118 <snprintf+0x5e>
    2104:	2f 81       	ldd	r18, Y+7	; 0x07
    2106:	38 85       	ldd	r19, Y+8	; 0x08
    2108:	42 17       	cp	r20, r18
    210a:	53 07       	cpc	r21, r19
    210c:	0c f4       	brge	.+2      	; 0x2110 <snprintf+0x56>
    210e:	9a 01       	movw	r18, r20
    2110:	f8 01       	movw	r30, r16
    2112:	e2 0f       	add	r30, r18
    2114:	f3 1f       	adc	r31, r19
    2116:	10 82       	st	Z, r1
    2118:	2e 96       	adiw	r28, 0x0e	; 14
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <__ultoa_invert>:
    2128:	fa 01       	movw	r30, r20
    212a:	aa 27       	eor	r26, r26
    212c:	28 30       	cpi	r18, 0x08	; 8
    212e:	51 f1       	breq	.+84     	; 0x2184 <__ultoa_invert+0x5c>
    2130:	20 31       	cpi	r18, 0x10	; 16
    2132:	81 f1       	breq	.+96     	; 0x2194 <__ultoa_invert+0x6c>
    2134:	e8 94       	clt
    2136:	6f 93       	push	r22
    2138:	6e 7f       	andi	r22, 0xFE	; 254
    213a:	6e 5f       	subi	r22, 0xFE	; 254
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	8f 4f       	sbci	r24, 0xFF	; 255
    2140:	9f 4f       	sbci	r25, 0xFF	; 255
    2142:	af 4f       	sbci	r26, 0xFF	; 255
    2144:	b1 e0       	ldi	r27, 0x01	; 1
    2146:	3e d0       	rcall	.+124    	; 0x21c4 <__ultoa_invert+0x9c>
    2148:	b4 e0       	ldi	r27, 0x04	; 4
    214a:	3c d0       	rcall	.+120    	; 0x21c4 <__ultoa_invert+0x9c>
    214c:	67 0f       	add	r22, r23
    214e:	78 1f       	adc	r23, r24
    2150:	89 1f       	adc	r24, r25
    2152:	9a 1f       	adc	r25, r26
    2154:	a1 1d       	adc	r26, r1
    2156:	68 0f       	add	r22, r24
    2158:	79 1f       	adc	r23, r25
    215a:	8a 1f       	adc	r24, r26
    215c:	91 1d       	adc	r25, r1
    215e:	a1 1d       	adc	r26, r1
    2160:	6a 0f       	add	r22, r26
    2162:	71 1d       	adc	r23, r1
    2164:	81 1d       	adc	r24, r1
    2166:	91 1d       	adc	r25, r1
    2168:	a1 1d       	adc	r26, r1
    216a:	20 d0       	rcall	.+64     	; 0x21ac <__ultoa_invert+0x84>
    216c:	09 f4       	brne	.+2      	; 0x2170 <__ultoa_invert+0x48>
    216e:	68 94       	set
    2170:	3f 91       	pop	r19
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	26 9f       	mul	r18, r22
    2176:	11 24       	eor	r1, r1
    2178:	30 19       	sub	r19, r0
    217a:	30 5d       	subi	r19, 0xD0	; 208
    217c:	31 93       	st	Z+, r19
    217e:	de f6       	brtc	.-74     	; 0x2136 <__ultoa_invert+0xe>
    2180:	cf 01       	movw	r24, r30
    2182:	08 95       	ret
    2184:	46 2f       	mov	r20, r22
    2186:	47 70       	andi	r20, 0x07	; 7
    2188:	40 5d       	subi	r20, 0xD0	; 208
    218a:	41 93       	st	Z+, r20
    218c:	b3 e0       	ldi	r27, 0x03	; 3
    218e:	0f d0       	rcall	.+30     	; 0x21ae <__ultoa_invert+0x86>
    2190:	c9 f7       	brne	.-14     	; 0x2184 <__ultoa_invert+0x5c>
    2192:	f6 cf       	rjmp	.-20     	; 0x2180 <__ultoa_invert+0x58>
    2194:	46 2f       	mov	r20, r22
    2196:	4f 70       	andi	r20, 0x0F	; 15
    2198:	40 5d       	subi	r20, 0xD0	; 208
    219a:	4a 33       	cpi	r20, 0x3A	; 58
    219c:	18 f0       	brcs	.+6      	; 0x21a4 <__ultoa_invert+0x7c>
    219e:	49 5d       	subi	r20, 0xD9	; 217
    21a0:	31 fd       	sbrc	r19, 1
    21a2:	40 52       	subi	r20, 0x20	; 32
    21a4:	41 93       	st	Z+, r20
    21a6:	02 d0       	rcall	.+4      	; 0x21ac <__ultoa_invert+0x84>
    21a8:	a9 f7       	brne	.-22     	; 0x2194 <__ultoa_invert+0x6c>
    21aa:	ea cf       	rjmp	.-44     	; 0x2180 <__ultoa_invert+0x58>
    21ac:	b4 e0       	ldi	r27, 0x04	; 4
    21ae:	a6 95       	lsr	r26
    21b0:	97 95       	ror	r25
    21b2:	87 95       	ror	r24
    21b4:	77 95       	ror	r23
    21b6:	67 95       	ror	r22
    21b8:	ba 95       	dec	r27
    21ba:	c9 f7       	brne	.-14     	; 0x21ae <__ultoa_invert+0x86>
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	61 05       	cpc	r22, r1
    21c0:	71 05       	cpc	r23, r1
    21c2:	08 95       	ret
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	0a 2e       	mov	r0, r26
    21ca:	06 94       	lsr	r0
    21cc:	57 95       	ror	r21
    21ce:	47 95       	ror	r20
    21d0:	37 95       	ror	r19
    21d2:	27 95       	ror	r18
    21d4:	ba 95       	dec	r27
    21d6:	c9 f7       	brne	.-14     	; 0x21ca <__ultoa_invert+0xa2>
    21d8:	62 0f       	add	r22, r18
    21da:	73 1f       	adc	r23, r19
    21dc:	84 1f       	adc	r24, r20
    21de:	95 1f       	adc	r25, r21
    21e0:	a0 1d       	adc	r26, r0
    21e2:	08 95       	ret

000021e4 <_exit>:
    21e4:	f8 94       	cli

000021e6 <__stop_program>:
    21e6:	ff cf       	rjmp	.-2      	; 0x21e6 <__stop_program>
