
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  000033c8  0000345c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000408c  008020b2  008020b2  0000350e  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  0000350e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000035dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000071b8  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000373c  00000000  00000000  0000ac34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a15  00000000  00000000  0000e370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f38  00000000  00000000  00011d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039dc  00000000  00000000  00012cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e31  00000000  00000000  0001669c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  000184cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 01 	jmp	0x30a	; 0x30a <__ctors_end>
       4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
       8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
       c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      10:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      14:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      18:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      1c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      20:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      24:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      28:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      2c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      30:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      34:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      38:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_14>
      3c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      40:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      44:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      48:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      4c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      50:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_20>
      54:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      58:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      5c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      60:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      64:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      68:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      6c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      70:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      74:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      78:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      7c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      80:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      84:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      88:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      8c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      90:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      94:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      98:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      9c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      a0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      a4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      a8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      ac:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      b0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      b4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      b8:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_46>
      bc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      c0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      c4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      c8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      cc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      d0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      d4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      d8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      dc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      e0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      e4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      e8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      ec:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      f0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      f4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      f8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
      fc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     100:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     104:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     108:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     10c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     110:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     114:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     118:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     11c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     120:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     124:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     128:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     12c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     130:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     134:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     138:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     13c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     140:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     144:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     148:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     14c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     150:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     154:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     158:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     15c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     160:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     164:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     168:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     16c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     170:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     174:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     178:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     17c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     180:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     184:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     188:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     18c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     190:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     194:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     198:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     19c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1a0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1a4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1a8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1ac:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1b0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1b4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1b8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1bc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1c0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1c4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1c8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1cc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1d0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1d4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1d8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1dc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1e0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1e4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1e8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1ec:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1f0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1f4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>
     1f8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 bb 03 	jmp	0x776	; 0x776 <stdio_putchar>
     200:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <stdio_getchar>
     204:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <prvIdleTask>

00000208 <__trampolines_end>:
     208:	6e 61       	ori	r22, 0x1E	; 30
     20a:	6e 00       	.word	0x006e	; ????

0000020c <__c.2332>:
     20c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     21c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     22c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     23c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     24c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     25c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     26c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     27c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     28c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     29c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2ac:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2bc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2cc:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2dc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ec:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2fc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	cf ef       	ldi	r28, 0xFF	; 255
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df e9       	ldi	r29, 0x9F	; 159
     314:	de bf       	out	0x3e, r29	; 62
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0c bf       	out	0x3c, r16	; 60

0000031a <__do_copy_data>:
     31a:	10 e2       	ldi	r17, 0x20	; 32
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e2       	ldi	r27, 0x20	; 32
     320:	e8 ec       	ldi	r30, 0xC8	; 200
     322:	f3 e3       	ldi	r31, 0x33	; 51
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	0b bf       	out	0x3b, r16	; 59
     328:	02 c0       	rjmp	.+4      	; 0x32e <__do_copy_data+0x14>
     32a:	07 90       	elpm	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	a2 3b       	cpi	r26, 0xB2	; 178
     330:	b1 07       	cpc	r27, r17
     332:	d9 f7       	brne	.-10     	; 0x32a <__do_copy_data+0x10>

00000334 <__do_clear_bss>:
     334:	21 e6       	ldi	r18, 0x61	; 97
     336:	a2 eb       	ldi	r26, 0xB2	; 178
     338:	b0 e2       	ldi	r27, 0x20	; 32
     33a:	01 c0       	rjmp	.+2      	; 0x33e <.do_clear_bss_start>

0000033c <.do_clear_bss_loop>:
     33c:	1d 92       	st	X+, r1

0000033e <.do_clear_bss_start>:
     33e:	ae 33       	cpi	r26, 0x3E	; 62
     340:	b2 07       	cpc	r27, r18
     342:	e1 f7       	brne	.-8      	; 0x33c <.do_clear_bss_loop>
     344:	0e 94 b9 12 	call	0x2572	; 0x2572 <main>
     348:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <_exit>

0000034c <__bad_interrupt>:
     34c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000350 <DriverAdcInit>:
#include "DriverAdc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void DriverAdcInit(void)
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	//ADCA.CTRLA=
	//ADCA.CTRLB=
	//ADCA.REFCTRL=
	//ADCA.PRESCALER=
	//ADCA.CH0.INTCTRL=	
}
     358:	00 00       	nop
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <DriverCursorstickInit>:
#include "DriverCursorstick.h"

void DriverCursorstickInit(void)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
	//PORTB.PIN3CTRL=
	//PORTB.PIN4CTRL=	
	//PORTB.PIN5CTRL=
	//PORTB.PIN6CTRL=
	//PORTB.PIN7CTRL=
}
     368:	00 00       	nop
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	25 97       	sbiw	r28, 0x05	; 5
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	8c 83       	std	Y+4, r24	; 0x04
     380:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     382:	80 ea       	ldi	r24, 0xA0	; 160
     384:	9a e0       	ldi	r25, 0x0A	; 10
     386:	fc 01       	movw	r30, r24
     388:	83 81       	ldd	r24, Z+3	; 0x03
     38a:	89 83       	std	Y+1, r24	; 0x01
	CtrlBBack=USART.CTRLB;
     38c:	80 ea       	ldi	r24, 0xA0	; 160
     38e:	9a e0       	ldi	r25, 0x0A	; 10
     390:	fc 01       	movw	r30, r24
     392:	84 81       	ldd	r24, Z+4	; 0x04
     394:	8a 83       	std	Y+2, r24	; 0x02
	CtrlCBack=USART.CTRLC;
     396:	80 ea       	ldi	r24, 0xA0	; 160
     398:	9a e0       	ldi	r25, 0x0A	; 10
     39a:	fc 01       	movw	r30, r24
     39c:	85 81       	ldd	r24, Z+5	; 0x05
     39e:	8b 83       	std	Y+3, r24	; 0x03
	
	while (*Text!=0)
     3a0:	1d c0       	rjmp	.+58     	; 0x3dc <DbgPrint+0x6c>
	{
		USART.DATA = *Text;
     3a2:	80 ea       	ldi	r24, 0xA0	; 160
     3a4:	9a e0       	ldi	r25, 0x0A	; 10
     3a6:	2c 81       	ldd	r18, Y+4	; 0x04
     3a8:	3d 81       	ldd	r19, Y+5	; 0x05
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
		while (!(USART.STATUS & 0b01000000));
     3b2:	00 00       	nop
     3b4:	80 ea       	ldi	r24, 0xA0	; 160
     3b6:	9a e0       	ldi	r25, 0x0A	; 10
     3b8:	fc 01       	movw	r30, r24
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 74       	andi	r24, 0x40	; 64
     3c2:	99 27       	eor	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	b1 f3       	breq	.-20     	; 0x3b4 <DbgPrint+0x44>
		USART.STATUS=0b01000000;
     3c8:	80 ea       	ldi	r24, 0xA0	; 160
     3ca:	9a e0       	ldi	r25, 0x0A	; 10
     3cc:	20 e4       	ldi	r18, 0x40	; 64
     3ce:	fc 01       	movw	r30, r24
     3d0:	21 83       	std	Z+1, r18	; 0x01
		Text++;
     3d2:	8c 81       	ldd	r24, Y+4	; 0x04
     3d4:	9d 81       	ldd	r25, Y+5	; 0x05
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	8c 83       	std	Y+4, r24	; 0x04
     3da:	9d 83       	std	Y+5, r25	; 0x05
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     3dc:	8c 81       	ldd	r24, Y+4	; 0x04
     3de:	9d 81       	ldd	r25, Y+5	; 0x05
     3e0:	fc 01       	movw	r30, r24
     3e2:	80 81       	ld	r24, Z
     3e4:	88 23       	and	r24, r24
     3e6:	e9 f6       	brne	.-70     	; 0x3a2 <DbgPrint+0x32>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     3e8:	80 ea       	ldi	r24, 0xA0	; 160
     3ea:	9a e0       	ldi	r25, 0x0A	; 10
     3ec:	29 81       	ldd	r18, Y+1	; 0x01
     3ee:	fc 01       	movw	r30, r24
     3f0:	23 83       	std	Z+3, r18	; 0x03
	USART.CTRLB=CtrlBBack;
     3f2:	80 ea       	ldi	r24, 0xA0	; 160
     3f4:	9a e0       	ldi	r25, 0x0A	; 10
     3f6:	2a 81       	ldd	r18, Y+2	; 0x02
     3f8:	fc 01       	movw	r30, r24
     3fa:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=CtrlCBack;
     3fc:	80 ea       	ldi	r24, 0xA0	; 160
     3fe:	9a e0       	ldi	r25, 0x0A	; 10
     400:	2b 81       	ldd	r18, Y+3	; 0x03
     402:	fc 01       	movw	r30, r24
     404:	25 83       	std	Z+5, r18	; 0x05
}
     406:	00 00       	nop
     408:	25 96       	adiw	r28, 0x05	; 5
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <DriverLedInit>:
#include "DriverLed.h"

void DriverLedInit(void)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	//PORTB.PIN1CTRL=
	//PORTB.PIN2CTRL=
	
	//PORTA.DIRSET=
	//PORTA.PIN7CTRL=
}
     41c:	00 00       	nop
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     424:	8b ec       	ldi	r24, 0xCB	; 203
     426:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     42a:	88 e0       	ldi	r24, 0x08	; 8
     42c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     430:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     434:	83 ff       	sbrs	r24, 3
     436:	fc cf       	rjmp	.-8      	; 0x430 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     438:	82 ec       	ldi	r24, 0xC2	; 194
     43a:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     43e:	88 e1       	ldi	r24, 0x18	; 24
     440:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     444:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     448:	84 ff       	sbrs	r24, 4
     44a:	fc cf       	rjmp	.-8      	; 0x444 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     44c:	88 ed       	ldi	r24, 0xD8	; 216
     44e:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	08 95       	ret

0000045a <DriverTWIMInit>:
	} 
	else 
	{
		return false;
	}
}
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <Twim_status>
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	96 e0       	ldi	r25, 0x06	; 6
     46a:	28 e1       	ldi	r18, 0x18	; 24
     46c:	fc 01       	movw	r30, r24
     46e:	20 8b       	std	Z+16, r18	; 0x10
     470:	80 e8       	ldi	r24, 0x80	; 128
     472:	96 e0       	ldi	r25, 0x06	; 6
     474:	28 e1       	ldi	r18, 0x18	; 24
     476:	fc 01       	movw	r30, r24
     478:	21 8b       	std	Z+17, r18	; 0x11
     47a:	80 ea       	ldi	r24, 0xA0	; 160
     47c:	94 e0       	ldi	r25, 0x04	; 4
     47e:	28 e7       	ldi	r18, 0x78	; 120
     480:	fc 01       	movw	r30, r24
     482:	21 83       	std	Z+1, r18	; 0x01
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	94 e0       	ldi	r25, 0x04	; 4
     488:	23 e2       	ldi	r18, 0x23	; 35
     48a:	fc 01       	movw	r30, r24
     48c:	25 83       	std	Z+5, r18	; 0x05
     48e:	80 ea       	ldi	r24, 0xA0	; 160
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	fc 01       	movw	r30, r24
     496:	24 83       	std	Z+4, r18	; 0x04
     498:	00 00       	nop
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <TWIMArbitrationLostBusErrorHandler>:

void TWIMArbitrationLostBusErrorHandler()
{
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	1f 92       	push	r1
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
     4ac:	94 e0       	ldi	r25, 0x04	; 4
     4ae:	fc 01       	movw	r30, r24
     4b0:	84 81       	ldd	r24, Z+4	; 0x04
     4b2:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	84 70       	andi	r24, 0x04	; 4
     4bc:	99 27       	eor	r25, r25
     4be:	89 2b       	or	r24, r25
     4c0:	21 f0       	breq	.+8      	; 0x4ca <TWIMArbitrationLostBusErrorHandler+0x2a>
		Twim_result = TWIM_RESULT_BUS_ERROR;
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <Twim_result>
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <TWIMArbitrationLostBusErrorHandler+0x30>
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     4d0:	80 ea       	ldi	r24, 0xA0	; 160
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	29 81       	ldd	r18, Y+1	; 0x01
     4d6:	28 60       	ori	r18, 0x08	; 8
     4d8:	fc 01       	movw	r30, r24
     4da:	24 83       	std	Z+4, r18	; 0x04

	Twim_status = TWIM_STATUS_READY;
     4dc:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <Twim_status>
}
     4e0:	00 00       	nop
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <TWIMWriteHandler>:

void TWIMWriteHandler()
{
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <TWIMWriteHandler+0x6>
     4f0:	1f 92       	push	r1
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = Twim_bytesToWrite;
     4f6:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <Twim_bytesToWrite>
     4fa:	89 83       	std	Y+1, r24	; 0x01
	uint8_t bytesToRead   = Twim_bytesToRead;
     4fc:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <Twim_bytesToRead>
     500:	8a 83       	std	Y+2, r24	; 0x02

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (TWIM_BUS.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     502:	80 ea       	ldi	r24, 0xA0	; 160
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	fc 01       	movw	r30, r24
     508:	84 81       	ldd	r24, Z+4	; 0x04
     50a:	88 2f       	mov	r24, r24
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	80 71       	andi	r24, 0x10	; 16
     510:	99 27       	eor	r25, r25
     512:	89 2b       	or	r24, r25
     514:	59 f0       	breq	.+22     	; 0x52c <TWIMWriteHandler+0x42>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     516:	80 ea       	ldi	r24, 0xA0	; 160
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	23 e0       	ldi	r18, 0x03	; 3
     51c:	fc 01       	movw	r30, r24
     51e:	23 83       	std	Z+3, r18	; 0x03
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <Twim_result>
		Twim_status = TWIM_STATUS_READY;
     526:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <Twim_status>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     52a:	34 c0       	rjmp	.+104    	; 0x594 <TWIMWriteHandler+0xaa>
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
		Twim_status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (Twim_bytesWritten < bytesToWrite) {
     52c:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <Twim_bytesWritten>
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	98 17       	cp	r25, r24
     534:	c0 f4       	brcc	.+48     	; 0x566 <TWIMWriteHandler+0x7c>
		uint8_t data = Twim_writeData[Twim_bytesWritten];
     536:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <Twim_writeData>
     53a:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <Twim_writeData+0x1>
     53e:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <Twim_bytesWritten>
     542:	88 2f       	mov	r24, r24
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	8b 83       	std	Y+3, r24	; 0x03
			TWIM_BUS.MASTER.DATA = data;
     550:	80 ea       	ldi	r24, 0xA0	; 160
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	2b 81       	ldd	r18, Y+3	; 0x03
     556:	fc 01       	movw	r30, r24
     558:	27 83       	std	Z+7, r18	; 0x07
		++Twim_bytesWritten;
     55a:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <Twim_bytesWritten>
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <Twim_bytesWritten>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     564:	17 c0       	rjmp	.+46     	; 0x594 <TWIMWriteHandler+0xaa>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (Twim_bytesRead < bytesToRead) {
     566:	90 91 ba 20 	lds	r25, 0x20BA	; 0x8020ba <Twim_bytesRead>
     56a:	8a 81       	ldd	r24, Y+2	; 0x02
     56c:	98 17       	cp	r25, r24
     56e:	50 f4       	brcc	.+20     	; 0x584 <TWIMWriteHandler+0x9a>
		uint8_t readAddress = Twim_address | 0x01;
     570:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     574:	81 60       	ori	r24, 0x01	; 1
     576:	8c 83       	std	Y+4, r24	; 0x04
		TWIM_BUS.MASTER.ADDR = readAddress;
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	94 e0       	ldi	r25, 0x04	; 4
     57c:	2c 81       	ldd	r18, Y+4	; 0x04
     57e:	fc 01       	movw	r30, r24
     580:	26 83       	std	Z+6, r18	; 0x06
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     582:	08 c0       	rjmp	.+16     	; 0x594 <TWIMWriteHandler+0xaa>
		TWIM_BUS.MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     584:	80 ea       	ldi	r24, 0xA0	; 160
     586:	94 e0       	ldi	r25, 0x04	; 4
     588:	23 e0       	ldi	r18, 0x03	; 3
     58a:	fc 01       	movw	r30, r24
     58c:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_OK);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 17 03 	call	0x62e	; 0x62e <TWIMTransactionFinished>
	}
}
     594:	00 00       	nop
     596:	24 96       	adiw	r28, 0x04	; 4
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <TWIMReadHandler>:

void TWIMReadHandler()
{
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	1f 92       	push	r1
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
	/* Fetch data if bytes to be read. */
	if (Twim_bytesRead < TWIM_READ_BUFFER_SIZE) {
     5ae:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <Twim_bytesRead>
     5b2:	80 32       	cpi	r24, 0x20	; 32
     5b4:	c0 f4       	brcc	.+48     	; 0x5e6 <TWIMReadHandler+0x44>
		uint8_t data = TWIM_BUS.MASTER.DATA;
     5b6:	80 ea       	ldi	r24, 0xA0	; 160
     5b8:	94 e0       	ldi	r25, 0x04	; 4
     5ba:	fc 01       	movw	r30, r24
     5bc:	87 81       	ldd	r24, Z+7	; 0x07
     5be:	89 83       	std	Y+1, r24	; 0x01
		Twim_readData[Twim_bytesRead] = data;
     5c0:	20 91 b5 20 	lds	r18, 0x20B5	; 0x8020b5 <Twim_readData>
     5c4:	30 91 b6 20 	lds	r19, 0x20B6	; 0x8020b6 <Twim_readData+0x1>
     5c8:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <Twim_bytesRead>
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	82 0f       	add	r24, r18
     5d2:	93 1f       	adc	r25, r19
     5d4:	29 81       	ldd	r18, Y+1	; 0x01
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
		Twim_bytesRead++;
     5da:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <Twim_bytesRead>
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <Twim_bytesRead>
     5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <TWIMReadHandler+0x54>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5e6:	80 ea       	ldi	r24, 0xA0	; 160
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	23 e0       	ldi	r18, 0x03	; 3
     5ec:	fc 01       	movw	r30, r24
     5ee:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 17 03 	call	0x62e	; 0x62e <TWIMTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = Twim_bytesToRead;
     5f6:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <Twim_bytesToRead>
     5fa:	8a 83       	std	Y+2, r24	; 0x02

	/* If more bytes to read, issue ACK and start a byte read. */
	if (Twim_bytesRead < bytesToRead) {
     5fc:	90 91 ba 20 	lds	r25, 0x20BA	; 0x8020ba <Twim_bytesRead>
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	98 17       	cp	r25, r24
     604:	30 f4       	brcc	.+12     	; 0x612 <TWIMReadHandler+0x70>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     606:	80 ea       	ldi	r24, 0xA0	; 160
     608:	94 e0       	ldi	r25, 0x04	; 4
     60a:	22 e0       	ldi	r18, 0x02	; 2
     60c:	fc 01       	movw	r30, r24
     60e:	23 83       	std	Z+3, r18	; 0x03
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     610:	08 c0       	rjmp	.+16     	; 0x622 <TWIMReadHandler+0x80>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     612:	80 ea       	ldi	r24, 0xA0	; 160
     614:	94 e0       	ldi	r25, 0x04	; 4
     616:	27 e0       	ldi	r18, 0x07	; 7
     618:	fc 01       	movw	r30, r24
     61a:	23 83       	std	Z+3, r18	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 17 03 	call	0x62e	; 0x62e <TWIMTransactionFinished>
	}
}
     622:	00 00       	nop
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <TWIMTransactionFinished>:

void TWIMTransactionFinished( uint8_t result)
{
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	89 83       	std	Y+1, r24	; 0x01
	Twim_result = result;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <Twim_result>
	Twim_status = TWIM_STATUS_READY;
     640:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <Twim_status>
}
     644:	00 00       	nop
     646:	0f 90       	pop	r0
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <__vector_46>:

ISR (TWIM_BUS_vect)
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     65e:	0f 92       	push	r0
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     682:	80 ea       	ldi	r24, 0xA0	; 160
     684:	94 e0       	ldi	r25, 0x04	; 4
     686:	fc 01       	movw	r30, r24
     688:	84 81       	ldd	r24, Z+4	; 0x04
     68a:	89 83       	std	Y+1, r24	; 0x01

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	88 70       	andi	r24, 0x08	; 8
     694:	99 27       	eor	r25, r25
     696:	89 2b       	or	r24, r25
     698:	39 f4       	brne	.+14     	; 0x6a8 <__vector_46+0x5a>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	84 70       	andi	r24, 0x04	; 4
     6a2:	99 27       	eor	r25, r25
ISR (TWIM_BUS_vect)
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     6a4:	89 2b       	or	r24, r25
     6a6:	19 f0       	breq	.+6      	; 0x6ae <__vector_46+0x60>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWIMArbitrationLostBusErrorHandler();
     6a8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <TWIMArbitrationLostBusErrorHandler>
     6ac:	13 c0       	rjmp	.+38     	; 0x6d4 <__vector_46+0x86>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	80 74       	andi	r24, 0x40	; 64
     6b6:	99 27       	eor	r25, r25
     6b8:	89 2b       	or	r24, r25
     6ba:	19 f0       	breq	.+6      	; 0x6c2 <__vector_46+0x74>
		TWIMWriteHandler();
     6bc:	0e 94 75 02 	call	0x4ea	; 0x4ea <TWIMWriteHandler>
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <__vector_46+0x86>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	88 23       	and	r24, r24
     6c6:	1c f4       	brge	.+6      	; 0x6ce <__vector_46+0x80>
		TWIMReadHandler();
     6c8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <TWIMReadHandler>
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <__vector_46+0x86>
	}

	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	0e 94 17 03 	call	0x62e	; 0x62e <TWIMTransactionFinished>
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     6d4:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <Twim_status>
	{	
	}
}
     6d8:	00 00       	nop
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6fe:	0f 90       	pop	r0
     700:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <DriverUSARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
     712:	80 e8       	ldi	r24, 0x80	; 128
     714:	96 e0       	ldi	r25, 0x06	; 6
     716:	28 e0       	ldi	r18, 0x08	; 8
     718:	fc 01       	movw	r30, r24
     71a:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	96 e0       	ldi	r25, 0x06	; 6
     720:	24 e0       	ldi	r18, 0x04	; 4
     722:	fc 01       	movw	r30, r24
     724:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000;
     726:	80 ea       	ldi	r24, 0xA0	; 160
     728:	9a e0       	ldi	r25, 0x0A	; 10
     72a:	fc 01       	movw	r30, r24
     72c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     72e:	80 ea       	ldi	r24, 0xA0	; 160
     730:	9a e0       	ldi	r25, 0x0A	; 10
     732:	28 e1       	ldi	r18, 0x18	; 24
     734:	fc 01       	movw	r30, r24
     736:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;	
     738:	80 ea       	ldi	r24, 0xA0	; 160
     73a:	9a e0       	ldi	r25, 0x0A	; 10
     73c:	23 e0       	ldi	r18, 0x03	; 3
     73e:	fc 01       	movw	r30, r24
     740:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     742:	80 ea       	ldi	r24, 0xA0	; 160
     744:	9a e0       	ldi	r25, 0x0A	; 10
     746:	25 ee       	ldi	r18, 0xE5	; 229
     748:	fc 01       	movw	r30, r24
     74a:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0xBC; 
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	9a e0       	ldi	r25, 0x0A	; 10
     750:	2c eb       	ldi	r18, 0xBC	; 188
     752:	fc 01       	movw	r30, r24
     754:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e2       	ldi	r25, 0x20	; 32
     75a:	80 93 3a 61 	sts	0x613A, r24	; 0x80613a <__iob+0x2>
     75e:	90 93 3b 61 	sts	0x613B, r25	; 0x80613b <__iob+0x3>
	stdin=&UsartStdio;
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e2       	ldi	r25, 0x20	; 32
     766:	80 93 38 61 	sts	0x6138, r24	; 0x806138 <__iob>
     76a:	90 93 39 61 	sts	0x6139, r25	; 0x806139 <__iob+0x1>
}
     76e:	00 00       	nop
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <stdio_putchar>:


static int stdio_putchar(char c, FILE * stream)
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	00 d0       	rcall	.+0      	; 0x77c <stdio_putchar+0x6>
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	6a 83       	std	Y+2, r22	; 0x02
     784:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     786:	80 ea       	ldi	r24, 0xA0	; 160
     788:	9a e0       	ldi	r25, 0x0A	; 10
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
     790:	00 00       	nop
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	9a e0       	ldi	r25, 0x0A	; 10
     796:	fc 01       	movw	r30, r24
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	80 74       	andi	r24, 0x40	; 64
     7a0:	99 27       	eor	r25, r25
     7a2:	89 2b       	or	r24, r25
     7a4:	b1 f3       	breq	.-20     	; 0x792 <stdio_putchar+0x1c>
	USART.STATUS=0b01000000;
     7a6:	80 ea       	ldi	r24, 0xA0	; 160
     7a8:	9a e0       	ldi	r25, 0x0A	; 10
     7aa:	20 e4       	ldi	r18, 0x40	; 64
     7ac:	fc 01       	movw	r30, r24
     7ae:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
}
     7b4:	23 96       	adiw	r28, 0x03	; 3
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1f 92       	push	r1
     7c6:	1f 92       	push	r1
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
     7d0:	00 00       	nop
     7d2:	80 ea       	ldi	r24, 0xA0	; 160
     7d4:	9a e0       	ldi	r25, 0x0A	; 10
     7d6:	fc 01       	movw	r30, r24
     7d8:	81 81       	ldd	r24, Z+1	; 0x01
     7da:	88 23       	and	r24, r24
     7dc:	d4 f7       	brge	.-12     	; 0x7d2 <stdio_getchar+0x12>
	return USART.DATA;
     7de:	80 ea       	ldi	r24, 0xA0	; 160
     7e0:	9a e0       	ldi	r25, 0x0A	; 10
     7e2:	fc 01       	movw	r30, r24
     7e4:	80 81       	ld	r24, Z
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
}
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	2e 97       	sbiw	r28, 0x0e	; 14
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	8d 87       	std	Y+13, r24	; 0x0d
     804:	9e 87       	std	Y+14, r25	; 0x0e
     806:	1d 82       	std	Y+5, r1	; 0x05
     808:	1e 82       	std	Y+6, r1	; 0x06
     80a:	0e 94 84 0b 	call	0x1708	; 0x1708 <vTaskSuspendAll>
     80e:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <xHeapHasBeenInitialised.4117>
     812:	88 23       	and	r24, r24
     814:	29 f4       	brne	.+10     	; 0x820 <pvPortMalloc+0x2c>
     816:	0e 94 55 05 	call	0xaaa	; 0xaaa <prvHeapInit>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <xHeapHasBeenInitialised.4117>
     820:	8d 85       	ldd	r24, Y+13	; 0x0d
     822:	9e 85       	ldd	r25, Y+14	; 0x0e
     824:	89 2b       	or	r24, r25
     826:	41 f0       	breq	.+16     	; 0x838 <pvPortMalloc+0x44>
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	2d 85       	ldd	r18, Y+13	; 0x0d
     82e:	3e 85       	ldd	r19, Y+14	; 0x0e
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	8d 87       	std	Y+13, r24	; 0x0d
     836:	9e 87       	std	Y+14, r25	; 0x0e
     838:	8d 85       	ldd	r24, Y+13	; 0x0d
     83a:	9e 85       	ldd	r25, Y+14	; 0x0e
     83c:	89 2b       	or	r24, r25
     83e:	09 f4       	brne	.+2      	; 0x842 <pvPortMalloc+0x4e>
     840:	b8 c0       	rjmp	.+368    	; 0x9b2 <pvPortMalloc+0x1be>
     842:	8d 85       	ldd	r24, Y+13	; 0x0d
     844:	9e 85       	ldd	r25, Y+14	; 0x0e
     846:	8f 3f       	cpi	r24, 0xFF	; 255
     848:	9f 43       	sbci	r25, 0x3F	; 63
     84a:	08 f0       	brcs	.+2      	; 0x84e <pvPortMalloc+0x5a>
     84c:	b2 c0       	rjmp	.+356    	; 0x9b2 <pvPortMalloc+0x1be>
     84e:	8d eb       	ldi	r24, 0xBD	; 189
     850:	90 e6       	ldi	r25, 0x60	; 96
     852:	8b 83       	std	Y+3, r24	; 0x03
     854:	9c 83       	std	Y+4, r25	; 0x04
     856:	80 91 bd 60 	lds	r24, 0x60BD	; 0x8060bd <xStart>
     85a:	90 91 be 60 	lds	r25, 0x60BE	; 0x8060be <xStart+0x1>
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	9a 83       	std	Y+2, r25	; 0x02
     862:	0b c0       	rjmp	.+22     	; 0x87a <pvPortMalloc+0x86>
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	8b 83       	std	Y+3, r24	; 0x03
     86a:	9c 83       	std	Y+4, r25	; 0x04
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	9a 81       	ldd	r25, Y+2	; 0x02
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	fc 01       	movw	r30, r24
     880:	22 81       	ldd	r18, Z+2	; 0x02
     882:	33 81       	ldd	r19, Z+3	; 0x03
     884:	8d 85       	ldd	r24, Y+13	; 0x0d
     886:	9e 85       	ldd	r25, Y+14	; 0x0e
     888:	28 17       	cp	r18, r24
     88a:	39 07       	cpc	r19, r25
     88c:	38 f4       	brcc	.+14     	; 0x89c <pvPortMalloc+0xa8>
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	fc 01       	movw	r30, r24
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	89 2b       	or	r24, r25
     89a:	21 f7       	brne	.-56     	; 0x864 <pvPortMalloc+0x70>
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	81 5c       	subi	r24, 0xC1	; 193
     8a2:	90 46       	sbci	r25, 0x60	; 96
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <pvPortMalloc+0xb4>
     8a6:	85 c0       	rjmp	.+266    	; 0x9b2 <pvPortMalloc+0x1be>
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 81       	ld	r18, Z
     8b0:	31 81       	ldd	r19, Z+1	; 0x01
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	8d 83       	std	Y+5, r24	; 0x05
     8bc:	9e 83       	std	Y+6, r25	; 0x06
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 81       	ld	r18, Z
     8c6:	31 81       	ldd	r19, Z+1	; 0x01
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
     8d0:	31 83       	std	Z+1, r19	; 0x01
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	fc 01       	movw	r30, r24
     8d8:	22 81       	ldd	r18, Z+2	; 0x02
     8da:	33 81       	ldd	r19, Z+3	; 0x03
     8dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     8de:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e0:	28 1b       	sub	r18, r24
     8e2:	39 0b       	sbc	r19, r25
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	82 17       	cp	r24, r18
     8ee:	93 07       	cpc	r25, r19
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <pvPortMalloc+0x100>
     8f2:	4e c0       	rjmp	.+156    	; 0x990 <pvPortMalloc+0x19c>
     8f4:	29 81       	ldd	r18, Y+1	; 0x01
     8f6:	3a 81       	ldd	r19, Y+2	; 0x02
     8f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     8fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	89 87       	std	Y+9, r24	; 0x09
     902:	9a 87       	std	Y+10, r25	; 0x0a
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	fc 01       	movw	r30, r24
     90a:	22 81       	ldd	r18, Z+2	; 0x02
     90c:	33 81       	ldd	r19, Z+3	; 0x03
     90e:	8d 85       	ldd	r24, Y+13	; 0x0d
     910:	9e 85       	ldd	r25, Y+14	; 0x0e
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	89 85       	ldd	r24, Y+9	; 0x09
     918:	9a 85       	ldd	r25, Y+10	; 0x0a
     91a:	fc 01       	movw	r30, r24
     91c:	22 83       	std	Z+2, r18	; 0x02
     91e:	33 83       	std	Z+3, r19	; 0x03
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	9a 81       	ldd	r25, Y+2	; 0x02
     924:	2d 85       	ldd	r18, Y+13	; 0x0d
     926:	3e 85       	ldd	r19, Y+14	; 0x0e
     928:	fc 01       	movw	r30, r24
     92a:	22 83       	std	Z+2, r18	; 0x02
     92c:	33 83       	std	Z+3, r19	; 0x03
     92e:	89 85       	ldd	r24, Y+9	; 0x09
     930:	9a 85       	ldd	r25, Y+10	; 0x0a
     932:	fc 01       	movw	r30, r24
     934:	82 81       	ldd	r24, Z+2	; 0x02
     936:	93 81       	ldd	r25, Z+3	; 0x03
     938:	8b 87       	std	Y+11, r24	; 0x0b
     93a:	9c 87       	std	Y+12, r25	; 0x0c
     93c:	8d eb       	ldi	r24, 0xBD	; 189
     93e:	90 e6       	ldi	r25, 0x60	; 96
     940:	8f 83       	std	Y+7, r24	; 0x07
     942:	98 87       	std	Y+8, r25	; 0x08
     944:	07 c0       	rjmp	.+14     	; 0x954 <pvPortMalloc+0x160>
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	8f 83       	std	Y+7, r24	; 0x07
     952:	98 87       	std	Y+8, r25	; 0x08
     954:	8f 81       	ldd	r24, Y+7	; 0x07
     956:	98 85       	ldd	r25, Y+8	; 0x08
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	91 81       	ldd	r25, Z+1	; 0x01
     95e:	fc 01       	movw	r30, r24
     960:	22 81       	ldd	r18, Z+2	; 0x02
     962:	33 81       	ldd	r19, Z+3	; 0x03
     964:	8b 85       	ldd	r24, Y+11	; 0x0b
     966:	9c 85       	ldd	r25, Y+12	; 0x0c
     968:	28 17       	cp	r18, r24
     96a:	39 07       	cpc	r19, r25
     96c:	60 f3       	brcs	.-40     	; 0x946 <pvPortMalloc+0x152>
     96e:	8f 81       	ldd	r24, Y+7	; 0x07
     970:	98 85       	ldd	r25, Y+8	; 0x08
     972:	fc 01       	movw	r30, r24
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	89 85       	ldd	r24, Y+9	; 0x09
     97a:	9a 85       	ldd	r25, Y+10	; 0x0a
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
     980:	31 83       	std	Z+1, r19	; 0x01
     982:	8f 81       	ldd	r24, Y+7	; 0x07
     984:	98 85       	ldd	r25, Y+8	; 0x08
     986:	29 85       	ldd	r18, Y+9	; 0x09
     988:	3a 85       	ldd	r19, Y+10	; 0x0a
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <xFreeBytesRemaining>
     994:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	fc 01       	movw	r30, r24
     99e:	82 81       	ldd	r24, Z+2	; 0x02
     9a0:	93 81       	ldd	r25, Z+3	; 0x03
     9a2:	a9 01       	movw	r20, r18
     9a4:	48 1b       	sub	r20, r24
     9a6:	59 0b       	sbc	r21, r25
     9a8:	ca 01       	movw	r24, r20
     9aa:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     9ae:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
     9b2:	0e 94 91 0b 	call	0x1722	; 0x1722 <xTaskResumeAll>
     9b6:	8d 81       	ldd	r24, Y+5	; 0x05
     9b8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ba:	89 2b       	or	r24, r25
     9bc:	11 f4       	brne	.+4      	; 0x9c2 <pvPortMalloc+0x1ce>
     9be:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <vApplicationMallocFailedHook>
     9c2:	8d 81       	ldd	r24, Y+5	; 0x05
     9c4:	9e 81       	ldd	r25, Y+6	; 0x06
     9c6:	2e 96       	adiw	r28, 0x0e	; 14
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <vPortFree>:
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	2a 97       	sbiw	r28, 0x0a	; 10
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	89 87       	std	Y+9, r24	; 0x09
     9e2:	9a 87       	std	Y+10, r25	; 0x0a
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	89 85       	ldd	r24, Y+9	; 0x09
     9ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f0:	89 2b       	or	r24, r25
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <vPortFree+0x24>
     9f4:	53 c0       	rjmp	.+166    	; 0xa9c <vPortFree+0xca>
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	91 95       	neg	r25
     9fc:	81 95       	neg	r24
     9fe:	91 09       	sbc	r25, r1
     a00:	2b 81       	ldd	r18, Y+3	; 0x03
     a02:	3c 81       	ldd	r19, Y+4	; 0x04
     a04:	82 0f       	add	r24, r18
     a06:	93 1f       	adc	r25, r19
     a08:	8b 83       	std	Y+3, r24	; 0x03
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	8d 83       	std	Y+5, r24	; 0x05
     a12:	9e 83       	std	Y+6, r25	; 0x06
     a14:	0e 94 84 0b 	call	0x1708	; 0x1708 <vTaskSuspendAll>
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	9e 81       	ldd	r25, Y+6	; 0x06
     a1c:	fc 01       	movw	r30, r24
     a1e:	82 81       	ldd	r24, Z+2	; 0x02
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	8f 83       	std	Y+7, r24	; 0x07
     a24:	98 87       	std	Y+8, r25	; 0x08
     a26:	8d eb       	ldi	r24, 0xBD	; 189
     a28:	90 e6       	ldi	r25, 0x60	; 96
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	9a 83       	std	Y+2, r25	; 0x02
     a2e:	07 c0       	rjmp	.+14     	; 0xa3e <vPortFree+0x6c>
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	fc 01       	movw	r30, r24
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	9a 83       	std	Y+2, r25	; 0x02
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	fc 01       	movw	r30, r24
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	fc 01       	movw	r30, r24
     a4a:	22 81       	ldd	r18, Z+2	; 0x02
     a4c:	33 81       	ldd	r19, Z+3	; 0x03
     a4e:	8f 81       	ldd	r24, Y+7	; 0x07
     a50:	98 85       	ldd	r25, Y+8	; 0x08
     a52:	28 17       	cp	r18, r24
     a54:	39 07       	cpc	r19, r25
     a56:	60 f3       	brcs	.-40     	; 0xa30 <vPortFree+0x5e>
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	9a 81       	ldd	r25, Y+2	; 0x02
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 81       	ld	r18, Z
     a60:	31 81       	ldd	r19, Z+1	; 0x01
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
     a6a:	31 83       	std	Z+1, r19	; 0x01
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	2d 81       	ldd	r18, Y+5	; 0x05
     a72:	3e 81       	ldd	r19, Y+6	; 0x06
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	31 83       	std	Z+1, r19	; 0x01
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	9e 81       	ldd	r25, Y+6	; 0x06
     a7e:	fc 01       	movw	r30, r24
     a80:	22 81       	ldd	r18, Z+2	; 0x02
     a82:	33 81       	ldd	r19, Z+3	; 0x03
     a84:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     a88:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     a94:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
     a98:	0e 94 91 0b 	call	0x1722	; 0x1722 <xTaskResumeAll>
     a9c:	00 00       	nop
     a9e:	2a 96       	adiw	r28, 0x0a	; 10
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	00 d0       	rcall	.+0      	; 0xab0 <prvHeapInit+0x6>
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     ab6:	8e eb       	ldi	r24, 0xBE	; 190
     ab8:	90 e2       	ldi	r25, 0x20	; 32
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	9a 83       	std	Y+2, r25	; 0x02

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	80 93 bd 60 	sts	0x60BD, r24	; 0x8060bd <xStart>
     ac6:	90 93 be 60 	sts	0x60BE, r25	; 0x8060be <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     aca:	10 92 bf 60 	sts	0x60BF, r1	; 0x8060bf <xStart+0x2>
     ace:	10 92 c0 60 	sts	0x60C0, r1	; 0x8060c0 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	9f e3       	ldi	r25, 0x3F	; 63
     ad6:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <xEnd+0x2>
     ada:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     ade:	10 92 c1 60 	sts	0x60C1, r1	; 0x8060c1 <xEnd>
     ae2:	10 92 c2 60 	sts	0x60C2, r1	; 0x8060c2 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	8b 83       	std	Y+3, r24	; 0x03
     aec:	9c 83       	std	Y+4, r25	; 0x04
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	9c 81       	ldd	r25, Y+4	; 0x04
     af2:	2f ef       	ldi	r18, 0xFF	; 255
     af4:	3f e3       	ldi	r19, 0x3F	; 63
     af6:	fc 01       	movw	r30, r24
     af8:	22 83       	std	Z+2, r18	; 0x02
     afa:	33 83       	std	Z+3, r19	; 0x03
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	21 ec       	ldi	r18, 0xC1	; 193
     b02:	30 e6       	ldi	r19, 0x60	; 96
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
     b08:	31 83       	std	Z+1, r19	; 0x01
}
     b0a:	00 00       	nop
     b0c:	24 96       	adiw	r28, 0x04	; 4
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
}
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	1f 92       	push	r1
     b1e:	1f 92       	push	r1
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	9c 01       	movw	r18, r24
     b2e:	2d 5f       	subi	r18, 0xFD	; 253
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	fc 01       	movw	r30, r24
     b38:	21 83       	std	Z+1, r18	; 0x01
     b3a:	32 83       	std	Z+2, r19	; 0x02
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	9a 81       	ldd	r25, Y+2	; 0x02
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	fc 01       	movw	r30, r24
     b46:	23 83       	std	Z+3, r18	; 0x03
     b48:	34 83       	std	Z+4, r19	; 0x04
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	9c 01       	movw	r18, r24
     b50:	2d 5f       	subi	r18, 0xFD	; 253
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	fc 01       	movw	r30, r24
     b5a:	25 83       	std	Z+5, r18	; 0x05
     b5c:	36 83       	std	Z+6, r19	; 0x06
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	9c 01       	movw	r18, r24
     b64:	2d 5f       	subi	r18, 0xFD	; 253
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	fc 01       	movw	r30, r24
     b6e:	27 83       	std	Z+7, r18	; 0x07
     b70:	30 87       	std	Z+8, r19	; 0x08
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	fc 01       	movw	r30, r24
     b78:	10 82       	st	Z, r1
     b7a:	00 00       	nop
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <vListInitialiseItem>:
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	1f 92       	push	r1
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	9a 83       	std	Y+2, r25	; 0x02
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	fc 01       	movw	r30, r24
     b9c:	10 86       	std	Z+8, r1	; 0x08
     b9e:	11 86       	std	Z+9, r1	; 0x09
     ba0:	00 00       	nop
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <vListInsertEnd>:
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <vListInsertEnd+0x6>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <vListInsertEnd+0x8>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	8b 83       	std	Y+3, r24	; 0x03
     bba:	9c 83       	std	Y+4, r25	; 0x04
     bbc:	6d 83       	std	Y+5, r22	; 0x05
     bbe:	7e 83       	std	Y+6, r23	; 0x06
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	fc 01       	movw	r30, r24
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	92 81       	ldd	r25, Z+2	; 0x02
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	8d 81       	ldd	r24, Y+5	; 0x05
     bd0:	9e 81       	ldd	r25, Y+6	; 0x06
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	3a 81       	ldd	r19, Y+2	; 0x02
     bd6:	fc 01       	movw	r30, r24
     bd8:	22 83       	std	Z+2, r18	; 0x02
     bda:	33 83       	std	Z+3, r19	; 0x03
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	fc 01       	movw	r30, r24
     be2:	24 81       	ldd	r18, Z+4	; 0x04
     be4:	35 81       	ldd	r19, Z+5	; 0x05
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	9e 81       	ldd	r25, Y+6	; 0x06
     bea:	fc 01       	movw	r30, r24
     bec:	24 83       	std	Z+4, r18	; 0x04
     bee:	35 83       	std	Z+5, r19	; 0x05
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	fc 01       	movw	r30, r24
     bf6:	84 81       	ldd	r24, Z+4	; 0x04
     bf8:	95 81       	ldd	r25, Z+5	; 0x05
     bfa:	2d 81       	ldd	r18, Y+5	; 0x05
     bfc:	3e 81       	ldd	r19, Y+6	; 0x06
     bfe:	fc 01       	movw	r30, r24
     c00:	22 83       	std	Z+2, r18	; 0x02
     c02:	33 83       	std	Z+3, r19	; 0x03
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	2d 81       	ldd	r18, Y+5	; 0x05
     c0a:	3e 81       	ldd	r19, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	24 83       	std	Z+4, r18	; 0x04
     c10:	35 83       	std	Z+5, r19	; 0x05
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	2b 81       	ldd	r18, Y+3	; 0x03
     c18:	3c 81       	ldd	r19, Y+4	; 0x04
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 87       	std	Z+8, r18	; 0x08
     c1e:	31 87       	std	Z+9, r19	; 0x09
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	fc 01       	movw	r30, r24
     c26:	80 81       	ld	r24, Z
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	28 0f       	add	r18, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
     c34:	00 00       	nop
     c36:	26 96       	adiw	r28, 0x06	; 6
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	00 d0       	rcall	.+0      	; 0xc48 <uxListRemove+0x6>
     c48:	1f 92       	push	r1
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	fc 01       	movw	r30, r24
     c58:	80 85       	ldd	r24, Z+8	; 0x08
     c5a:	91 85       	ldd	r25, Z+9	; 0x09
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	fc 01       	movw	r30, r24
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	2b 81       	ldd	r18, Y+3	; 0x03
     c6c:	3c 81       	ldd	r19, Y+4	; 0x04
     c6e:	f9 01       	movw	r30, r18
     c70:	24 81       	ldd	r18, Z+4	; 0x04
     c72:	35 81       	ldd	r19, Z+5	; 0x05
     c74:	fc 01       	movw	r30, r24
     c76:	24 83       	std	Z+4, r18	; 0x04
     c78:	35 83       	std	Z+5, r19	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	fc 01       	movw	r30, r24
     c80:	84 81       	ldd	r24, Z+4	; 0x04
     c82:	95 81       	ldd	r25, Z+5	; 0x05
     c84:	2b 81       	ldd	r18, Y+3	; 0x03
     c86:	3c 81       	ldd	r19, Y+4	; 0x04
     c88:	f9 01       	movw	r30, r18
     c8a:	22 81       	ldd	r18, Z+2	; 0x02
     c8c:	33 81       	ldd	r19, Z+3	; 0x03
     c8e:	fc 01       	movw	r30, r24
     c90:	22 83       	std	Z+2, r18	; 0x02
     c92:	33 83       	std	Z+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	fc 01       	movw	r30, r24
     c9a:	21 81       	ldd	r18, Z+1	; 0x01
     c9c:	32 81       	ldd	r19, Z+2	; 0x02
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	51 f4       	brne	.+20     	; 0xcbc <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	fc 01       	movw	r30, r24
     cae:	24 81       	ldd	r18, Z+4	; 0x04
     cb0:	35 81       	ldd	r19, Z+5	; 0x05
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	21 83       	std	Z+1, r18	; 0x01
     cba:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	fc 01       	movw	r30, r24
     cc2:	10 86       	std	Z+8, r1	; 0x08
     cc4:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	2f ef       	ldi	r18, 0xFF	; 255
     cd0:	28 0f       	add	r18, r24
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
}
     ce2:	24 96       	adiw	r28, 0x04	; 4
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <pxPortInitialiseStack>:
	portSAVE_CONTEXT();
	vTaskSwitchContext();
	portRESTORE_CONTEXT();
	asm volatile ( "reti" );

}
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	6d 83       	std	Y+5, r22	; 0x05
     d02:	7e 83       	std	Y+6, r23	; 0x06
     d04:	4f 83       	std	Y+7, r20	; 0x07
     d06:	58 87       	std	Y+8, r21	; 0x08
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	21 e1       	ldi	r18, 0x11	; 17
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	8b 83       	std	Y+3, r24	; 0x03
     d1a:	9c 83       	std	Y+4, r25	; 0x04
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	22 e2       	ldi	r18, 0x22	; 34
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	8b 83       	std	Y+3, r24	; 0x03
     d2e:	9c 83       	std	Y+4, r25	; 0x04
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	23 e3       	ldi	r18, 0x33	; 51
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	8b 83       	std	Y+3, r24	; 0x03
     d42:	9c 83       	std	Y+4, r25	; 0x04
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	29 81       	ldd	r18, Y+1	; 0x01
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	89 2f       	mov	r24, r25
     d66:	99 27       	eor	r25, r25
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	29 81       	ldd	r18, Y+1	; 0x01
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	89 2f       	mov	r24, r25
     d86:	99 27       	eor	r25, r25
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	29 81       	ldd	r18, Y+1	; 0x01
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	fc 01       	movw	r30, r24
     d94:	20 83       	st	Z, r18
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	8b 83       	std	Y+3, r24	; 0x03
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	fc 01       	movw	r30, r24
     da6:	10 82       	st	Z, r1
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	8b 83       	std	Y+3, r24	; 0x03
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	20 e8       	ldi	r18, 0x80	; 128
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	fc 01       	movw	r30, r24
     dcc:	10 82       	st	Z, r1
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	22 e0       	ldi	r18, 0x02	; 2
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	23 e0       	ldi	r18, 0x03	; 3
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	24 e0       	ldi	r18, 0x04	; 4
     e06:	fc 01       	movw	r30, r24
     e08:	20 83       	st	Z, r18
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	8b 83       	std	Y+3, r24	; 0x03
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	25 e0       	ldi	r18, 0x05	; 5
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	8b 83       	std	Y+3, r24	; 0x03
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	26 e0       	ldi	r18, 0x06	; 6
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	27 e0       	ldi	r18, 0x07	; 7
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	8b 83       	std	Y+3, r24	; 0x03
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	28 e0       	ldi	r18, 0x08	; 8
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	29 e0       	ldi	r18, 0x09	; 9
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 83       	st	Z, r18
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	20 e1       	ldi	r18, 0x10	; 16
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	8b 83       	std	Y+3, r24	; 0x03
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	21 e1       	ldi	r18, 0x11	; 17
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	22 e1       	ldi	r18, 0x12	; 18
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 83       	st	Z, r18
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	23 e1       	ldi	r18, 0x13	; 19
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	9c 81       	ldd	r25, Y+4	; 0x04
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	24 e1       	ldi	r18, 0x14	; 20
     ece:	fc 01       	movw	r30, r24
     ed0:	20 83       	st	Z, r18
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	8b 83       	std	Y+3, r24	; 0x03
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	25 e1       	ldi	r18, 0x15	; 21
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	9c 83       	std	Y+4, r25	; 0x04
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	26 e1       	ldi	r18, 0x16	; 22
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	27 e1       	ldi	r18, 0x17	; 23
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	8b 83       	std	Y+3, r24	; 0x03
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	28 e1       	ldi	r18, 0x18	; 24
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	8b 83       	std	Y+3, r24	; 0x03
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	29 e1       	ldi	r18, 0x19	; 25
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	20 e2       	ldi	r18, 0x20	; 32
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	21 e2       	ldi	r18, 0x21	; 33
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	22 e2       	ldi	r18, 0x22	; 34
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	8b 83       	std	Y+3, r24	; 0x03
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	23 e2       	ldi	r18, 0x23	; 35
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8f 81       	ldd	r24, Y+7	; 0x07
     f92:	98 85       	ldd	r25, Y+8	; 0x08
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	29 81       	ldd	r18, Y+1	; 0x01
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	89 2f       	mov	r24, r25
     fb2:	99 27       	eor	r25, r25
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	29 81       	ldd	r18, Y+1	; 0x01
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	26 e2       	ldi	r18, 0x26	; 38
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 83       	st	Z, r18
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	27 e2       	ldi	r18, 0x27	; 39
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	9c 83       	std	Y+4, r25	; 0x04
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	28 e2       	ldi	r18, 0x28	; 40
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	29 e2       	ldi	r18, 0x29	; 41
    100e:	fc 01       	movw	r30, r24
    1010:	20 83       	st	Z, r18
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	9c 83       	std	Y+4, r25	; 0x04
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	20 e3       	ldi	r18, 0x30	; 48
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	8b 83       	std	Y+3, r24	; 0x03
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	21 e3       	ldi	r18, 0x31	; 49
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	28 96       	adiw	r28, 0x08	; 8
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <xPortStartScheduler>:
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	0e 94 b9 08 	call	0x1172	; 0x1172 <prvSetupTimerInterrupt>
    1060:	a0 91 c6 60 	lds	r26, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1064:	b0 91 c7 60 	lds	r27, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1068:	cd 91       	ld	r28, X+
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	dd 91       	ld	r29, X+
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	7f 90       	pop	r7
    10a2:	6f 90       	pop	r6
    10a4:	5f 90       	pop	r5
    10a6:	4f 90       	pop	r4
    10a8:	3f 90       	pop	r3
    10aa:	2f 90       	pop	r2
    10ac:	1f 90       	pop	r1
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	08 95       	ret
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <vPortYield>:
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	0f 92       	push	r0
    10c6:	1f 92       	push	r1
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 92       	push	r2
    10cc:	3f 92       	push	r3
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	a0 91 c6 60 	lds	r26, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    110a:	b0 91 c7 60 	lds	r27, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    110e:	0d b6       	in	r0, 0x3d	; 61
    1110:	0d 92       	st	X+, r0
    1112:	0e b6       	in	r0, 0x3e	; 62
    1114:	0d 92       	st	X+, r0
    1116:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskSwitchContext>
    111a:	a0 91 c6 60 	lds	r26, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    111e:	b0 91 c7 60 	lds	r27, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1122:	cd 91       	ld	r28, X+
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	dd 91       	ld	r29, X+
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	7f 90       	pop	r7
    115c:	6f 90       	pop	r6
    115e:	5f 90       	pop	r5
    1160:	4f 90       	pop	r4
    1162:	3f 90       	pop	r3
    1164:	2f 90       	pop	r2
    1166:	1f 90       	pop	r1
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	08 95       	ret
	...

00001172 <prvSetupTimerInterrupt>:
/*
 * Setup timer to generate a tick timer interrupt
 */

static void prvSetupTimerInterrupt( void )
{
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	//TCC0 is used as tick timer
	TCC0.CTRLA=0b00000001; //DIV1
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	98 e0       	ldi	r25, 0x08	; 8
    117e:	21 e0       	ldi	r18, 0x01	; 1
    1180:	fc 01       	movw	r30, r24
    1182:	20 83       	st	Z, r18
	TCC0.INTCTRLA=0b00000001; //OVF priority LOW
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	98 e0       	ldi	r25, 0x08	; 8
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	fc 01       	movw	r30, r24
    118c:	26 83       	std	Z+6, r18	; 0x06
	TCC0.PER=configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	98 e0       	ldi	r25, 0x08	; 8
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	3d e7       	ldi	r19, 0x7D	; 125
    1196:	fc 01       	movw	r30, r24
    1198:	26 a3       	std	Z+38, r18	; 0x26
    119a:	37 a3       	std	Z+39, r19	; 0x27
	//TCC0.PER=configCPU_CLOCK_HZ / 1000;

}
    119c:	00 00       	nop
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	0f 92       	push	r0
    11ac:	1f 92       	push	r1
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 92       	push	r2
    11b2:	3f 92       	push	r3
    11b4:	4f 92       	push	r4
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ef 93       	push	r30
    11ea:	ff 93       	push	r31
    11ec:	a0 91 c6 60 	lds	r26, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    11f0:	b0 91 c7 60 	lds	r27, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    11f4:	0d b6       	in	r0, 0x3d	; 61
    11f6:	0d 92       	st	X+, r0
    11f8:	0e b6       	in	r0, 0x3e	; 62
    11fa:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	98 e0       	ldi	r25, 0x08	; 8
    1200:	fc 01       	movw	r30, r24
    1202:	86 a1       	ldd	r24, Z+38	; 0x26
    1204:	97 a1       	ldd	r25, Z+39	; 0x27
    1206:	9c 01       	movw	r18, r24
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	80 91 34 61 	lds	r24, 0x6134	; 0x806134 <StatsTimer>
    1210:	90 91 35 61 	lds	r25, 0x6135	; 0x806135 <StatsTimer+0x1>
    1214:	a0 91 36 61 	lds	r26, 0x6136	; 0x806136 <StatsTimer+0x2>
    1218:	b0 91 37 61 	lds	r27, 0x6137	; 0x806137 <StatsTimer+0x3>
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	a4 1f       	adc	r26, r20
    1222:	b5 1f       	adc	r27, r21
    1224:	80 93 34 61 	sts	0x6134, r24	; 0x806134 <StatsTimer>
    1228:	90 93 35 61 	sts	0x6135, r25	; 0x806135 <StatsTimer+0x1>
    122c:	a0 93 36 61 	sts	0x6136, r26	; 0x806136 <StatsTimer+0x2>
    1230:	b0 93 37 61 	sts	0x6137, r27	; 0x806137 <StatsTimer+0x3>
		xTaskIncrementTick();
    1234:	0e 94 31 0c 	call	0x1862	; 0x1862 <xTaskIncrementTick>
		vTaskSwitchContext();
    1238:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskSwitchContext>
		portRESTORE_CONTEXT();
    123c:	a0 91 c6 60 	lds	r26, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1240:	b0 91 c7 60 	lds	r27, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1244:	cd 91       	ld	r28, X+
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	dd 91       	ld	r29, X+
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	bf 90       	pop	r11
    1276:	af 90       	pop	r10
    1278:	9f 90       	pop	r9
    127a:	8f 90       	pop	r8
    127c:	7f 90       	pop	r7
    127e:	6f 90       	pop	r6
    1280:	5f 90       	pop	r5
    1282:	4f 90       	pop	r4
    1284:	3f 90       	pop	r3
    1286:	2f 90       	pop	r2
    1288:	1f 90       	pop	r1
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0

		asm volatile ( "reti" );
    1290:	18 95       	reti
	...

00001294 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	//TCC1 is used as stats timer
	//TCC1.CTRLA=0b0111; //DIV1024	
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}
    129c:	00 00       	nop
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <__vector_20>:

ISR(TCC1_OVF_vect)
{
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	//StatsTimer++;
}
    12b8:	00 00       	nop
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	0f 90       	pop	r0
    12c0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <xTaskCreate>:
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	60 97       	sbiw	r28, 0x10	; 16
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	8e 83       	std	Y+6, r24	; 0x06
    12ee:	9f 83       	std	Y+7, r25	; 0x07
    12f0:	68 87       	std	Y+8, r22	; 0x08
    12f2:	79 87       	std	Y+9, r23	; 0x09
    12f4:	4a 87       	std	Y+10, r20	; 0x0a
    12f6:	5b 87       	std	Y+11, r21	; 0x0b
    12f8:	2c 87       	std	Y+12, r18	; 0x0c
    12fa:	3d 87       	std	Y+13, r19	; 0x0d
    12fc:	0e 87       	std	Y+14, r16	; 0x0e
    12fe:	ef 86       	std	Y+15, r14	; 0x0f
    1300:	f8 8a       	std	Y+16, r15	; 0x10
    1302:	8a 85       	ldd	r24, Y+10	; 0x0a
    1304:	9b 85       	ldd	r25, Y+11	; 0x0b
    1306:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <pvPortMalloc>
    130a:	8c 83       	std	Y+4, r24	; 0x04
    130c:	9d 83       	std	Y+5, r25	; 0x05
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	89 2b       	or	r24, r25
    1314:	b9 f0       	breq	.+46     	; 0x1344 <xTaskCreate+0x7a>
    1316:	8e e2       	ldi	r24, 0x2E	; 46
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <pvPortMalloc>
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	89 2b       	or	r24, r25
    1328:	41 f0       	breq	.+16     	; 0x133a <xTaskCreate+0x70>
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	2c 81       	ldd	r18, Y+4	; 0x04
    1330:	3d 81       	ldd	r19, Y+5	; 0x05
    1332:	fc 01       	movw	r30, r24
    1334:	27 8b       	std	Z+23, r18	; 0x17
    1336:	30 8f       	std	Z+24, r19	; 0x18
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <xTaskCreate+0x7e>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <vPortFree>
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <xTaskCreate+0x7e>
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	1a 82       	std	Y+2, r1	; 0x02
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	89 2b       	or	r24, r25
    134e:	09 f1       	breq	.+66     	; 0x1392 <xTaskCreate+0xc8>
    1350:	8a 85       	ldd	r24, Y+10	; 0x0a
    1352:	9b 85       	ldd	r25, Y+11	; 0x0b
    1354:	cc 01       	movw	r24, r24
    1356:	a0 e0       	ldi	r26, 0x00	; 0
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	09 81       	ldd	r16, Y+1	; 0x01
    135c:	1a 81       	ldd	r17, Y+2	; 0x02
    135e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1360:	58 89       	ldd	r21, Y+16	; 0x10
    1362:	2c 85       	ldd	r18, Y+12	; 0x0c
    1364:	3d 85       	ldd	r19, Y+13	; 0x0d
    1366:	68 85       	ldd	r22, Y+8	; 0x08
    1368:	79 85       	ldd	r23, Y+9	; 0x09
    136a:	ee 81       	ldd	r30, Y+6	; 0x06
    136c:	ff 81       	ldd	r31, Y+7	; 0x07
    136e:	81 2c       	mov	r8, r1
    1370:	91 2c       	mov	r9, r1
    1372:	58 01       	movw	r10, r16
    1374:	6a 01       	movw	r12, r20
    1376:	ee 84       	ldd	r14, Y+14	; 0x0e
    1378:	89 01       	movw	r16, r18
    137a:	9c 01       	movw	r18, r24
    137c:	ad 01       	movw	r20, r26
    137e:	cf 01       	movw	r24, r30
    1380:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <prvInitialiseNewTask>
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	0e 94 be 0a 	call	0x157c	; 0x157c <prvAddNewTaskToReadyList>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <xTaskCreate+0xcc>
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	8b 83       	std	Y+3, r24	; 0x03
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	60 96       	adiw	r28, 0x10	; 16
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	08 95       	ret

000013b8 <prvInitialiseNewTask>:
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	64 97       	sbiw	r28, 0x14	; 20
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	8c 83       	std	Y+4, r24	; 0x04
    13da:	9d 83       	std	Y+5, r25	; 0x05
    13dc:	6e 83       	std	Y+6, r22	; 0x06
    13de:	7f 83       	std	Y+7, r23	; 0x07
    13e0:	28 87       	std	Y+8, r18	; 0x08
    13e2:	39 87       	std	Y+9, r19	; 0x09
    13e4:	4a 87       	std	Y+10, r20	; 0x0a
    13e6:	5b 87       	std	Y+11, r21	; 0x0b
    13e8:	0c 87       	std	Y+12, r16	; 0x0c
    13ea:	1d 87       	std	Y+13, r17	; 0x0d
    13ec:	ee 86       	std	Y+14, r14	; 0x0e
    13ee:	cf 86       	std	Y+15, r12	; 0x0f
    13f0:	d8 8a       	std	Y+16, r13	; 0x10
    13f2:	a9 8a       	std	Y+17, r10	; 0x11
    13f4:	ba 8a       	std	Y+18, r11	; 0x12
    13f6:	8b 8a       	std	Y+19, r8	; 0x13
    13f8:	9c 8a       	std	Y+20, r9	; 0x14
    13fa:	8e 81       	ldd	r24, Y+6	; 0x06
    13fc:	9f 81       	ldd	r25, Y+7	; 0x07
    13fe:	89 2b       	or	r24, r25
    1400:	31 f4       	brne	.+12     	; 0x140e <prvInitialiseNewTask+0x56>
    1402:	60 e6       	ldi	r22, 0x60	; 96
    1404:	73 e0       	ldi	r23, 0x03	; 3
    1406:	80 e1       	ldi	r24, 0x10	; 16
    1408:	90 e2       	ldi	r25, 0x20	; 32
    140a:	0e 94 84 11 	call	0x2308	; 0x2308 <vAssertCalled>
    140e:	28 85       	ldd	r18, Y+8	; 0x08
    1410:	39 85       	ldd	r19, Y+9	; 0x09
    1412:	89 89       	ldd	r24, Y+17	; 0x11
    1414:	9a 89       	ldd	r25, Y+18	; 0x12
    1416:	fc 01       	movw	r30, r24
    1418:	87 89       	ldd	r24, Z+23	; 0x17
    141a:	90 8d       	ldd	r25, Z+24	; 0x18
    141c:	a9 01       	movw	r20, r18
    141e:	65 ea       	ldi	r22, 0xA5	; 165
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	0e 94 ff 18 	call	0x31fe	; 0x31fe <memset>
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	fc 01       	movw	r30, r24
    142c:	27 89       	ldd	r18, Z+23	; 0x17
    142e:	30 8d       	ldd	r19, Z+24	; 0x18
    1430:	88 85       	ldd	r24, Y+8	; 0x08
    1432:	99 85       	ldd	r25, Y+9	; 0x09
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	82 0f       	add	r24, r18
    1438:	93 1f       	adc	r25, r19
    143a:	8a 83       	std	Y+2, r24	; 0x02
    143c:	9b 83       	std	Y+3, r25	; 0x03
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	21 c0       	rjmp	.+66     	; 0x1484 <prvInitialiseNewTask+0xcc>
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	29 81       	ldd	r18, Y+1	; 0x01
    144a:	22 2f       	mov	r18, r18
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4e 81       	ldd	r20, Y+6	; 0x06
    1450:	5f 81       	ldd	r21, Y+7	; 0x07
    1452:	24 0f       	add	r18, r20
    1454:	35 1f       	adc	r19, r21
    1456:	f9 01       	movw	r30, r18
    1458:	40 81       	ld	r20, Z
    145a:	29 89       	ldd	r18, Y+17	; 0x11
    145c:	3a 89       	ldd	r19, Y+18	; 0x12
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	49 96       	adiw	r24, 0x19	; 25
    1464:	fc 01       	movw	r30, r24
    1466:	40 83       	st	Z, r20
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	2e 81       	ldd	r18, Y+6	; 0x06
    1470:	3f 81       	ldd	r19, Y+7	; 0x07
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	fc 01       	movw	r30, r24
    1478:	80 81       	ld	r24, Z
    147a:	88 23       	and	r24, r24
    147c:	39 f0       	breq	.+14     	; 0x148c <prvInitialiseNewTask+0xd4>
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 30       	cpi	r24, 0x08	; 8
    1488:	e0 f2       	brcs	.-72     	; 0x1442 <prvInitialiseNewTask+0x8a>
    148a:	01 c0       	rjmp	.+2      	; 0x148e <prvInitialiseNewTask+0xd6>
    148c:	00 00       	nop
    148e:	89 89       	ldd	r24, Y+17	; 0x11
    1490:	9a 89       	ldd	r25, Y+18	; 0x12
    1492:	fc 01       	movw	r30, r24
    1494:	10 a2       	std	Z+32, r1	; 0x20
    1496:	8e 85       	ldd	r24, Y+14	; 0x0e
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	10 f0       	brcs	.+4      	; 0x14a0 <prvInitialiseNewTask+0xe8>
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	8e 87       	std	Y+14, r24	; 0x0e
    14a0:	89 89       	ldd	r24, Y+17	; 0x11
    14a2:	9a 89       	ldd	r25, Y+18	; 0x12
    14a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    14a6:	fc 01       	movw	r30, r24
    14a8:	26 8b       	std	Z+22, r18	; 0x16
    14aa:	89 89       	ldd	r24, Y+17	; 0x11
    14ac:	9a 89       	ldd	r25, Y+18	; 0x12
    14ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    14b0:	fc 01       	movw	r30, r24
    14b2:	23 a3       	std	Z+35, r18	; 0x23
    14b4:	89 89       	ldd	r24, Y+17	; 0x11
    14b6:	9a 89       	ldd	r25, Y+18	; 0x12
    14b8:	fc 01       	movw	r30, r24
    14ba:	14 a2       	std	Z+36, r1	; 0x24
    14bc:	89 89       	ldd	r24, Y+17	; 0x11
    14be:	9a 89       	ldd	r25, Y+18	; 0x12
    14c0:	02 96       	adiw	r24, 0x02	; 2
    14c2:	0e 94 c3 05 	call	0xb86	; 0xb86 <vListInitialiseItem>
    14c6:	89 89       	ldd	r24, Y+17	; 0x11
    14c8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ca:	0c 96       	adiw	r24, 0x0c	; 12
    14cc:	0e 94 c3 05 	call	0xb86	; 0xb86 <vListInitialiseItem>
    14d0:	89 89       	ldd	r24, Y+17	; 0x11
    14d2:	9a 89       	ldd	r25, Y+18	; 0x12
    14d4:	29 89       	ldd	r18, Y+17	; 0x11
    14d6:	3a 89       	ldd	r19, Y+18	; 0x12
    14d8:	fc 01       	movw	r30, r24
    14da:	20 87       	std	Z+8, r18	; 0x08
    14dc:	31 87       	std	Z+9, r19	; 0x09
    14de:	8e 85       	ldd	r24, Y+14	; 0x0e
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	24 e0       	ldi	r18, 0x04	; 4
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	28 1b       	sub	r18, r24
    14ea:	39 0b       	sbc	r19, r25
    14ec:	89 89       	ldd	r24, Y+17	; 0x11
    14ee:	9a 89       	ldd	r25, Y+18	; 0x12
    14f0:	fc 01       	movw	r30, r24
    14f2:	24 87       	std	Z+12, r18	; 0x0c
    14f4:	35 87       	std	Z+13, r19	; 0x0d
    14f6:	89 89       	ldd	r24, Y+17	; 0x11
    14f8:	9a 89       	ldd	r25, Y+18	; 0x12
    14fa:	29 89       	ldd	r18, Y+17	; 0x11
    14fc:	3a 89       	ldd	r19, Y+18	; 0x12
    14fe:	fc 01       	movw	r30, r24
    1500:	22 8b       	std	Z+18, r18	; 0x12
    1502:	33 8b       	std	Z+19, r19	; 0x13
    1504:	89 89       	ldd	r24, Y+17	; 0x11
    1506:	9a 89       	ldd	r25, Y+18	; 0x12
    1508:	fc 01       	movw	r30, r24
    150a:	15 a2       	std	Z+37, r1	; 0x25
    150c:	16 a2       	std	Z+38, r1	; 0x26
    150e:	17 a2       	std	Z+39, r1	; 0x27
    1510:	10 a6       	std	Z+40, r1	; 0x28
    1512:	89 89       	ldd	r24, Y+17	; 0x11
    1514:	9a 89       	ldd	r25, Y+18	; 0x12
    1516:	fc 01       	movw	r30, r24
    1518:	11 a6       	std	Z+41, r1	; 0x29
    151a:	12 a6       	std	Z+42, r1	; 0x2a
    151c:	13 a6       	std	Z+43, r1	; 0x2b
    151e:	14 a6       	std	Z+44, r1	; 0x2c
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	9a 89       	ldd	r25, Y+18	; 0x12
    1524:	fc 01       	movw	r30, r24
    1526:	15 a6       	std	Z+45, r1	; 0x2d
    1528:	4c 85       	ldd	r20, Y+12	; 0x0c
    152a:	5d 85       	ldd	r21, Y+13	; 0x0d
    152c:	2c 81       	ldd	r18, Y+4	; 0x04
    152e:	3d 81       	ldd	r19, Y+5	; 0x05
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	b9 01       	movw	r22, r18
    1536:	0e 94 77 06 	call	0xcee	; 0xcee <pxPortInitialiseStack>
    153a:	9c 01       	movw	r18, r24
    153c:	89 89       	ldd	r24, Y+17	; 0x11
    153e:	9a 89       	ldd	r25, Y+18	; 0x12
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
    1544:	31 83       	std	Z+1, r19	; 0x01
    1546:	8f 85       	ldd	r24, Y+15	; 0x0f
    1548:	98 89       	ldd	r25, Y+16	; 0x10
    154a:	89 2b       	or	r24, r25
    154c:	39 f0       	breq	.+14     	; 0x155c <prvInitialiseNewTask+0x1a4>
    154e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1550:	98 89       	ldd	r25, Y+16	; 0x10
    1552:	29 89       	ldd	r18, Y+17	; 0x11
    1554:	3a 89       	ldd	r19, Y+18	; 0x12
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
    155a:	31 83       	std	Z+1, r19	; 0x01
    155c:	00 00       	nop
    155e:	64 96       	adiw	r28, 0x14	; 20
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	9f 90       	pop	r9
    1578:	8f 90       	pop	r8
    157a:	08 95       	ret

0000157c <prvAddNewTaskToReadyList>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	1f 92       	push	r1
    1582:	1f 92       	push	r1
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	0f 92       	push	r0
    1592:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <uxCurrentNumberOfTasks>
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <uxCurrentNumberOfTasks>
    159c:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    15a0:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    15a4:	89 2b       	or	r24, r25
    15a6:	69 f4       	brne	.+26     	; 0x15c2 <prvAddNewTaskToReadyList+0x46>
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	80 93 c6 60 	sts	0x60C6, r24	; 0x8060c6 <pxCurrentTCB>
    15b0:	90 93 c7 60 	sts	0x60C7, r25	; 0x8060c7 <pxCurrentTCB+0x1>
    15b4:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <uxCurrentNumberOfTasks>
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	c9 f4       	brne	.+50     	; 0x15ee <prvAddNewTaskToReadyList+0x72>
    15bc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <prvInitialiseTaskLists>
    15c0:	16 c0       	rjmp	.+44     	; 0x15ee <prvAddNewTaskToReadyList+0x72>
    15c2:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <xSchedulerRunning>
    15c6:	88 23       	and	r24, r24
    15c8:	91 f4       	brne	.+36     	; 0x15ee <prvAddNewTaskToReadyList+0x72>
    15ca:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    15ce:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    15d2:	fc 01       	movw	r30, r24
    15d4:	26 89       	ldd	r18, Z+22	; 0x16
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	fc 01       	movw	r30, r24
    15dc:	86 89       	ldd	r24, Z+22	; 0x16
    15de:	82 17       	cp	r24, r18
    15e0:	30 f0       	brcs	.+12     	; 0x15ee <prvAddNewTaskToReadyList+0x72>
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	80 93 c6 60 	sts	0x60C6, r24	; 0x8060c6 <pxCurrentTCB>
    15ea:	90 93 c7 60 	sts	0x60C7, r25	; 0x8060c7 <pxCurrentTCB+0x1>
    15ee:	80 91 26 61 	lds	r24, 0x6126	; 0x806126 <uxTaskNumber>
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	80 93 26 61 	sts	0x6126, r24	; 0x806126 <uxTaskNumber>
    15f8:	20 91 26 61 	lds	r18, 0x6126	; 0x806126 <uxTaskNumber>
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	fc 01       	movw	r30, r24
    1602:	21 a3       	std	Z+33, r18	; 0x21
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	fc 01       	movw	r30, r24
    160a:	96 89       	ldd	r25, Z+22	; 0x16
    160c:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <uxTopReadyPriority>
    1610:	89 17       	cp	r24, r25
    1612:	30 f4       	brcc	.+12     	; 0x1620 <prvAddNewTaskToReadyList+0xa4>
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	fc 01       	movw	r30, r24
    161a:	86 89       	ldd	r24, Z+22	; 0x16
    161c:	80 93 21 61 	sts	0x6121, r24	; 0x806121 <uxTopReadyPriority>
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	ac 01       	movw	r20, r24
    1626:	4e 5f       	subi	r20, 0xFE	; 254
    1628:	5f 4f       	sbci	r21, 0xFF	; 255
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	fc 01       	movw	r30, r24
    1630:	86 89       	ldd	r24, Z+22	; 0x16
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	c9 01       	movw	r24, r18
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	88 53       	subi	r24, 0x38	; 56
    164a:	9f 49       	sbci	r25, 0x9F	; 159
    164c:	ba 01       	movw	r22, r20
    164e:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInsertEnd>
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <xSchedulerRunning>
    165a:	88 23       	and	r24, r24
    165c:	71 f0       	breq	.+28     	; 0x167a <prvAddNewTaskToReadyList+0xfe>
    165e:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1662:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1666:	fc 01       	movw	r30, r24
    1668:	26 89       	ldd	r18, Z+22	; 0x16
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	fc 01       	movw	r30, r24
    1670:	86 89       	ldd	r24, Z+22	; 0x16
    1672:	28 17       	cp	r18, r24
    1674:	10 f4       	brcc	.+4      	; 0x167a <prvAddNewTaskToReadyList+0xfe>
    1676:	0e 94 5f 08 	call	0x10be	; 0x10be <vPortYield>
    167a:	00 00       	nop
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <vTaskStartScheduler>:
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	1f 92       	push	r1
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	0f 2e       	mov	r0, r31
    1698:	f9 e2       	ldi	r31, 0x29	; 41
    169a:	ef 2e       	mov	r14, r31
    169c:	f1 e6       	ldi	r31, 0x61	; 97
    169e:	ff 2e       	mov	r15, r31
    16a0:	f0 2d       	mov	r31, r0
    16a2:	00 e0       	ldi	r16, 0x00	; 0
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	51 e0       	ldi	r21, 0x01	; 1
    16ac:	64 e2       	ldi	r22, 0x24	; 36
    16ae:	70 e2       	ldi	r23, 0x20	; 32
    16b0:	80 e8       	ldi	r24, 0x80	; 128
    16b2:	9e e0       	ldi	r25, 0x0E	; 14
    16b4:	0e 94 65 09 	call	0x12ca	; 0x12ca <xTaskCreate>
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	99 f4       	brne	.+38     	; 0x16e6 <vTaskStartScheduler+0x60>
    16c0:	f8 94       	cli
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	9f ef       	ldi	r25, 0xFF	; 255
    16c6:	80 93 27 61 	sts	0x6127, r24	; 0x806127 <xNextTaskUnblockTime>
    16ca:	90 93 28 61 	sts	0x6128, r25	; 0x806128 <xNextTaskUnblockTime+0x1>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xSchedulerRunning>
    16d4:	10 92 1f 61 	sts	0x611F, r1	; 0x80611f <xTickCount>
    16d8:	10 92 20 61 	sts	0x6120, r1	; 0x806120 <xTickCount+0x1>
    16dc:	0e 94 4a 09 	call	0x1294	; 0x1294 <vConfigureTimerForRunTimeStats>
    16e0:	0e 94 2a 08 	call	0x1054	; 0x1054 <xPortStartScheduler>
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <vTaskStartScheduler+0x72>
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <vTaskStartScheduler+0x72>
    16ec:	67 e0       	ldi	r22, 0x07	; 7
    16ee:	78 e0       	ldi	r23, 0x08	; 8
    16f0:	80 e1       	ldi	r24, 0x10	; 16
    16f2:	90 e2       	ldi	r25, 0x20	; 32
    16f4:	0e 94 84 11 	call	0x2308	; 0x2308 <vAssertCalled>
    16f8:	00 00       	nop
    16fa:	0f 90       	pop	r0
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	08 95       	ret

00001708 <vTaskSuspendAll>:
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	80 91 2b 61 	lds	r24, 0x612B	; 0x80612b <uxSchedulerSuspended>
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	80 93 2b 61 	sts	0x612B, r24	; 0x80612b <uxSchedulerSuspended>
    171a:	00 00       	nop
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <xTaskResumeAll>:
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	00 d0       	rcall	.+0      	; 0x1728 <xTaskResumeAll+0x6>
    1728:	1f 92       	push	r1
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	19 82       	std	Y+1, r1	; 0x01
    1730:	1a 82       	std	Y+2, r1	; 0x02
    1732:	1b 82       	std	Y+3, r1	; 0x03
    1734:	80 91 2b 61 	lds	r24, 0x612B	; 0x80612b <uxSchedulerSuspended>
    1738:	88 23       	and	r24, r24
    173a:	31 f4       	brne	.+12     	; 0x1748 <xTaskResumeAll+0x26>
    173c:	6c e6       	ldi	r22, 0x6C	; 108
    173e:	78 e0       	ldi	r23, 0x08	; 8
    1740:	80 e1       	ldi	r24, 0x10	; 16
    1742:	90 e2       	ldi	r25, 0x20	; 32
    1744:	0e 94 84 11 	call	0x2308	; 0x2308 <vAssertCalled>
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	0f 92       	push	r0
    174e:	80 91 2b 61 	lds	r24, 0x612B	; 0x80612b <uxSchedulerSuspended>
    1752:	81 50       	subi	r24, 0x01	; 1
    1754:	80 93 2b 61 	sts	0x612B, r24	; 0x80612b <uxSchedulerSuspended>
    1758:	80 91 2b 61 	lds	r24, 0x612B	; 0x80612b <uxSchedulerSuspended>
    175c:	88 23       	and	r24, r24
    175e:	09 f0       	breq	.+2      	; 0x1762 <xTaskResumeAll+0x40>
    1760:	77 c0       	rjmp	.+238    	; 0x1850 <xTaskResumeAll+0x12e>
    1762:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <uxCurrentNumberOfTasks>
    1766:	88 23       	and	r24, r24
    1768:	09 f4       	brne	.+2      	; 0x176c <xTaskResumeAll+0x4a>
    176a:	72 c0       	rjmp	.+228    	; 0x1850 <xTaskResumeAll+0x12e>
    176c:	49 c0       	rjmp	.+146    	; 0x1800 <xTaskResumeAll+0xde>
    176e:	80 91 07 61 	lds	r24, 0x6107	; 0x806107 <xPendingReadyList+0x5>
    1772:	90 91 08 61 	lds	r25, 0x6108	; 0x806108 <xPendingReadyList+0x6>
    1776:	fc 01       	movw	r30, r24
    1778:	86 81       	ldd	r24, Z+6	; 0x06
    177a:	97 81       	ldd	r25, Z+7	; 0x07
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	0c 96       	adiw	r24, 0x0c	; 12
    1786:	0e 94 21 06 	call	0xc42	; 0xc42 <uxListRemove>
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
    178e:	02 96       	adiw	r24, 0x02	; 2
    1790:	0e 94 21 06 	call	0xc42	; 0xc42 <uxListRemove>
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	fc 01       	movw	r30, r24
    179a:	96 89       	ldd	r25, Z+22	; 0x16
    179c:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <uxTopReadyPriority>
    17a0:	89 17       	cp	r24, r25
    17a2:	30 f4       	brcc	.+12     	; 0x17b0 <xTaskResumeAll+0x8e>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	fc 01       	movw	r30, r24
    17aa:	86 89       	ldd	r24, Z+22	; 0x16
    17ac:	80 93 21 61 	sts	0x6121, r24	; 0x806121 <uxTopReadyPriority>
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	ac 01       	movw	r20, r24
    17b6:	4e 5f       	subi	r20, 0xFE	; 254
    17b8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	fc 01       	movw	r30, r24
    17c0:	86 89       	ldd	r24, Z+22	; 0x16
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	c9 01       	movw	r24, r18
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	82 0f       	add	r24, r18
    17d6:	93 1f       	adc	r25, r19
    17d8:	88 53       	subi	r24, 0x38	; 56
    17da:	9f 49       	sbci	r25, 0x9F	; 159
    17dc:	ba 01       	movw	r22, r20
    17de:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInsertEnd>
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	fc 01       	movw	r30, r24
    17e8:	26 89       	ldd	r18, Z+22	; 0x16
    17ea:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    17ee:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    17f2:	fc 01       	movw	r30, r24
    17f4:	86 89       	ldd	r24, Z+22	; 0x16
    17f6:	28 17       	cp	r18, r24
    17f8:	18 f0       	brcs	.+6      	; 0x1800 <xTaskResumeAll+0xde>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	80 93 24 61 	sts	0x6124, r24	; 0x806124 <xYieldPending>
    1800:	80 91 02 61 	lds	r24, 0x6102	; 0x806102 <xPendingReadyList>
    1804:	88 23       	and	r24, r24
    1806:	09 f0       	breq	.+2      	; 0x180a <xTaskResumeAll+0xe8>
    1808:	b2 cf       	rjmp	.-156    	; 0x176e <xTaskResumeAll+0x4c>
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	89 2b       	or	r24, r25
    1810:	11 f0       	breq	.+4      	; 0x1816 <xTaskResumeAll+0xf4>
    1812:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <prvResetNextTaskUnblockTime>
    1816:	80 91 23 61 	lds	r24, 0x6123	; 0x806123 <uxPendedTicks>
    181a:	8c 83       	std	Y+4, r24	; 0x04
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	88 23       	and	r24, r24
    1820:	79 f0       	breq	.+30     	; 0x1840 <xTaskResumeAll+0x11e>
    1822:	0e 94 31 0c 	call	0x1862	; 0x1862 <xTaskIncrementTick>
    1826:	88 23       	and	r24, r24
    1828:	19 f0       	breq	.+6      	; 0x1830 <xTaskResumeAll+0x10e>
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	80 93 24 61 	sts	0x6124, r24	; 0x806124 <xYieldPending>
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	81 50       	subi	r24, 0x01	; 1
    1834:	8c 83       	std	Y+4, r24	; 0x04
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	88 23       	and	r24, r24
    183a:	99 f7       	brne	.-26     	; 0x1822 <xTaskResumeAll+0x100>
    183c:	10 92 23 61 	sts	0x6123, r1	; 0x806123 <uxPendedTicks>
    1840:	80 91 24 61 	lds	r24, 0x6124	; 0x806124 <xYieldPending>
    1844:	88 23       	and	r24, r24
    1846:	21 f0       	breq	.+8      	; 0x1850 <xTaskResumeAll+0x12e>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	0e 94 5f 08 	call	0x10be	; 0x10be <vPortYield>
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	24 96       	adiw	r28, 0x04	; 4
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <xTaskIncrementTick>:
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	19 82       	std	Y+1, r1	; 0x01
    1872:	80 91 2b 61 	lds	r24, 0x612B	; 0x80612b <uxSchedulerSuspended>
    1876:	88 23       	and	r24, r24
    1878:	09 f0       	breq	.+2      	; 0x187c <xTaskIncrementTick+0x1a>
    187a:	d6 c0       	rjmp	.+428    	; 0x1a28 <xTaskIncrementTick+0x1c6>
    187c:	80 91 1f 61 	lds	r24, 0x611F	; 0x80611f <xTickCount>
    1880:	90 91 20 61 	lds	r25, 0x6120	; 0x806120 <xTickCount+0x1>
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	80 93 1f 61 	sts	0x611F, r24	; 0x80611f <xTickCount>
    1892:	90 93 20 61 	sts	0x6120, r25	; 0x806120 <xTickCount+0x1>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	89 2b       	or	r24, r25
    189c:	49 f5       	brne	.+82     	; 0x18f0 <xTaskIncrementTick+0x8e>
    189e:	80 91 fe 60 	lds	r24, 0x60FE	; 0x8060fe <pxDelayedTaskList>
    18a2:	90 91 ff 60 	lds	r25, 0x60FF	; 0x8060ff <pxDelayedTaskList+0x1>
    18a6:	fc 01       	movw	r30, r24
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	31 f0       	breq	.+12     	; 0x18ba <xTaskIncrementTick+0x58>
    18ae:	66 e6       	ldi	r22, 0x66	; 102
    18b0:	7a e0       	ldi	r23, 0x0A	; 10
    18b2:	80 e1       	ldi	r24, 0x10	; 16
    18b4:	90 e2       	ldi	r25, 0x20	; 32
    18b6:	0e 94 84 11 	call	0x2308	; 0x2308 <vAssertCalled>
    18ba:	80 91 fe 60 	lds	r24, 0x60FE	; 0x8060fe <pxDelayedTaskList>
    18be:	90 91 ff 60 	lds	r25, 0x60FF	; 0x8060ff <pxDelayedTaskList+0x1>
    18c2:	8c 83       	std	Y+4, r24	; 0x04
    18c4:	9d 83       	std	Y+5, r25	; 0x05
    18c6:	80 91 00 61 	lds	r24, 0x6100	; 0x806100 <pxOverflowDelayedTaskList>
    18ca:	90 91 01 61 	lds	r25, 0x6101	; 0x806101 <pxOverflowDelayedTaskList+0x1>
    18ce:	80 93 fe 60 	sts	0x60FE, r24	; 0x8060fe <pxDelayedTaskList>
    18d2:	90 93 ff 60 	sts	0x60FF, r25	; 0x8060ff <pxDelayedTaskList+0x1>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	80 93 00 61 	sts	0x6100, r24	; 0x806100 <pxOverflowDelayedTaskList>
    18de:	90 93 01 61 	sts	0x6101, r25	; 0x806101 <pxOverflowDelayedTaskList+0x1>
    18e2:	80 91 25 61 	lds	r24, 0x6125	; 0x806125 <xNumOfOverflows>
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <xNumOfOverflows>
    18ec:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <prvResetNextTaskUnblockTime>
    18f0:	80 91 27 61 	lds	r24, 0x6127	; 0x806127 <xNextTaskUnblockTime>
    18f4:	90 91 28 61 	lds	r25, 0x6128	; 0x806128 <xNextTaskUnblockTime+0x1>
    18f8:	2a 81       	ldd	r18, Y+2	; 0x02
    18fa:	3b 81       	ldd	r19, Y+3	; 0x03
    18fc:	28 17       	cp	r18, r24
    18fe:	39 07       	cpc	r19, r25
    1900:	08 f4       	brcc	.+2      	; 0x1904 <xTaskIncrementTick+0xa2>
    1902:	78 c0       	rjmp	.+240    	; 0x19f4 <xTaskIncrementTick+0x192>
    1904:	80 91 fe 60 	lds	r24, 0x60FE	; 0x8060fe <pxDelayedTaskList>
    1908:	90 91 ff 60 	lds	r25, 0x60FF	; 0x8060ff <pxDelayedTaskList+0x1>
    190c:	fc 01       	movw	r30, r24
    190e:	80 81       	ld	r24, Z
    1910:	88 23       	and	r24, r24
    1912:	39 f4       	brne	.+14     	; 0x1922 <xTaskIncrementTick+0xc0>
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	9f ef       	ldi	r25, 0xFF	; 255
    1918:	80 93 27 61 	sts	0x6127, r24	; 0x806127 <xNextTaskUnblockTime>
    191c:	90 93 28 61 	sts	0x6128, r25	; 0x806128 <xNextTaskUnblockTime+0x1>
    1920:	69 c0       	rjmp	.+210    	; 0x19f4 <xTaskIncrementTick+0x192>
    1922:	80 91 fe 60 	lds	r24, 0x60FE	; 0x8060fe <pxDelayedTaskList>
    1926:	90 91 ff 60 	lds	r25, 0x60FF	; 0x8060ff <pxDelayedTaskList+0x1>
    192a:	fc 01       	movw	r30, r24
    192c:	85 81       	ldd	r24, Z+5	; 0x05
    192e:	96 81       	ldd	r25, Z+6	; 0x06
    1930:	fc 01       	movw	r30, r24
    1932:	86 81       	ldd	r24, Z+6	; 0x06
    1934:	97 81       	ldd	r25, Z+7	; 0x07
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	9f 83       	std	Y+7, r25	; 0x07
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	9f 81       	ldd	r25, Y+7	; 0x07
    193e:	fc 01       	movw	r30, r24
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	88 87       	std	Y+8, r24	; 0x08
    1946:	99 87       	std	Y+9, r25	; 0x09
    1948:	2a 81       	ldd	r18, Y+2	; 0x02
    194a:	3b 81       	ldd	r19, Y+3	; 0x03
    194c:	88 85       	ldd	r24, Y+8	; 0x08
    194e:	99 85       	ldd	r25, Y+9	; 0x09
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	38 f4       	brcc	.+14     	; 0x1964 <xTaskIncrementTick+0x102>
    1956:	88 85       	ldd	r24, Y+8	; 0x08
    1958:	99 85       	ldd	r25, Y+9	; 0x09
    195a:	80 93 27 61 	sts	0x6127, r24	; 0x806127 <xNextTaskUnblockTime>
    195e:	90 93 28 61 	sts	0x6128, r25	; 0x806128 <xNextTaskUnblockTime+0x1>
    1962:	48 c0       	rjmp	.+144    	; 0x19f4 <xTaskIncrementTick+0x192>
    1964:	8e 81       	ldd	r24, Y+6	; 0x06
    1966:	9f 81       	ldd	r25, Y+7	; 0x07
    1968:	02 96       	adiw	r24, 0x02	; 2
    196a:	0e 94 21 06 	call	0xc42	; 0xc42 <uxListRemove>
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	fc 01       	movw	r30, r24
    1974:	84 89       	ldd	r24, Z+20	; 0x14
    1976:	95 89       	ldd	r25, Z+21	; 0x15
    1978:	89 2b       	or	r24, r25
    197a:	29 f0       	breq	.+10     	; 0x1986 <xTaskIncrementTick+0x124>
    197c:	8e 81       	ldd	r24, Y+6	; 0x06
    197e:	9f 81       	ldd	r25, Y+7	; 0x07
    1980:	0c 96       	adiw	r24, 0x0c	; 12
    1982:	0e 94 21 06 	call	0xc42	; 0xc42 <uxListRemove>
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	fc 01       	movw	r30, r24
    198c:	96 89       	ldd	r25, Z+22	; 0x16
    198e:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <uxTopReadyPriority>
    1992:	89 17       	cp	r24, r25
    1994:	30 f4       	brcc	.+12     	; 0x19a2 <xTaskIncrementTick+0x140>
    1996:	8e 81       	ldd	r24, Y+6	; 0x06
    1998:	9f 81       	ldd	r25, Y+7	; 0x07
    199a:	fc 01       	movw	r30, r24
    199c:	86 89       	ldd	r24, Z+22	; 0x16
    199e:	80 93 21 61 	sts	0x6121, r24	; 0x806121 <uxTopReadyPriority>
    19a2:	8e 81       	ldd	r24, Y+6	; 0x06
    19a4:	9f 81       	ldd	r25, Y+7	; 0x07
    19a6:	ac 01       	movw	r20, r24
    19a8:	4e 5f       	subi	r20, 0xFE	; 254
    19aa:	5f 4f       	sbci	r21, 0xFF	; 255
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	fc 01       	movw	r30, r24
    19b2:	86 89       	ldd	r24, Z+22	; 0x16
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	c9 01       	movw	r24, r18
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	88 53       	subi	r24, 0x38	; 56
    19cc:	9f 49       	sbci	r25, 0x9F	; 159
    19ce:	ba 01       	movw	r22, r20
    19d0:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInsertEnd>
    19d4:	8e 81       	ldd	r24, Y+6	; 0x06
    19d6:	9f 81       	ldd	r25, Y+7	; 0x07
    19d8:	fc 01       	movw	r30, r24
    19da:	26 89       	ldd	r18, Z+22	; 0x16
    19dc:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    19e0:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    19e4:	fc 01       	movw	r30, r24
    19e6:	86 89       	ldd	r24, Z+22	; 0x16
    19e8:	28 17       	cp	r18, r24
    19ea:	08 f4       	brcc	.+2      	; 0x19ee <xTaskIncrementTick+0x18c>
    19ec:	8b cf       	rjmp	.-234    	; 0x1904 <xTaskIncrementTick+0xa2>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	88 cf       	rjmp	.-240    	; 0x1904 <xTaskIncrementTick+0xa2>
    19f4:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    19f8:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    19fc:	fc 01       	movw	r30, r24
    19fe:	86 89       	ldd	r24, Z+22	; 0x16
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	c9 01       	movw	r24, r18
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	82 0f       	add	r24, r18
    1a14:	93 1f       	adc	r25, r19
    1a16:	88 53       	subi	r24, 0x38	; 56
    1a18:	9f 49       	sbci	r25, 0x9F	; 159
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	40 f0       	brcs	.+16     	; 0x1a32 <xTaskIncrementTick+0x1d0>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <xTaskIncrementTick+0x1d0>
    1a28:	80 91 23 61 	lds	r24, 0x6123	; 0x806123 <uxPendedTicks>
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	80 93 23 61 	sts	0x6123, r24	; 0x806123 <uxPendedTicks>
    1a32:	80 91 24 61 	lds	r24, 0x6124	; 0x806124 <xYieldPending>
    1a36:	88 23       	and	r24, r24
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <xTaskIncrementTick+0x1dc>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	29 96       	adiw	r28, 0x09	; 9
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <vTaskSwitchContext>:
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	29 97       	sbiw	r28, 0x09	; 9
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	80 91 2b 61 	lds	r24, 0x612B	; 0x80612b <uxSchedulerSuspended>
    1a6e:	88 23       	and	r24, r24
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <vTaskSwitchContext+0x2e>
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 24 61 	sts	0x6124, r24	; 0x806124 <xYieldPending>
    1a78:	34 c1       	rjmp	.+616    	; 0x1ce2 <vTaskSwitchContext+0x296>
    1a7a:	10 92 24 61 	sts	0x6124, r1	; 0x806124 <xYieldPending>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	98 e0       	ldi	r25, 0x08	; 8
    1a82:	fc 01       	movw	r30, r24
    1a84:	80 a1       	ldd	r24, Z+32	; 0x20
    1a86:	91 a1       	ldd	r25, Z+33	; 0x21
    1a88:	9c 01       	movw	r18, r24
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	80 91 34 61 	lds	r24, 0x6134	; 0x806134 <StatsTimer>
    1a92:	90 91 35 61 	lds	r25, 0x6135	; 0x806135 <StatsTimer+0x1>
    1a96:	a0 91 36 61 	lds	r26, 0x6136	; 0x806136 <StatsTimer+0x2>
    1a9a:	b0 91 37 61 	lds	r27, 0x6137	; 0x806137 <StatsTimer+0x3>
    1a9e:	82 0f       	add	r24, r18
    1aa0:	93 1f       	adc	r25, r19
    1aa2:	a4 1f       	adc	r26, r20
    1aa4:	b5 1f       	adc	r27, r21
    1aa6:	80 93 30 61 	sts	0x6130, r24	; 0x806130 <ulTotalRunTime>
    1aaa:	90 93 31 61 	sts	0x6131, r25	; 0x806131 <ulTotalRunTime+0x1>
    1aae:	a0 93 32 61 	sts	0x6132, r26	; 0x806132 <ulTotalRunTime+0x2>
    1ab2:	b0 93 33 61 	sts	0x6133, r27	; 0x806133 <ulTotalRunTime+0x3>
    1ab6:	20 91 30 61 	lds	r18, 0x6130	; 0x806130 <ulTotalRunTime>
    1aba:	30 91 31 61 	lds	r19, 0x6131	; 0x806131 <ulTotalRunTime+0x1>
    1abe:	40 91 32 61 	lds	r20, 0x6132	; 0x806132 <ulTotalRunTime+0x2>
    1ac2:	50 91 33 61 	lds	r21, 0x6133	; 0x806133 <ulTotalRunTime+0x3>
    1ac6:	80 91 2c 61 	lds	r24, 0x612C	; 0x80612c <ulTaskSwitchedInTime>
    1aca:	90 91 2d 61 	lds	r25, 0x612D	; 0x80612d <ulTaskSwitchedInTime+0x1>
    1ace:	a0 91 2e 61 	lds	r26, 0x612E	; 0x80612e <ulTaskSwitchedInTime+0x2>
    1ad2:	b0 91 2f 61 	lds	r27, 0x612F	; 0x80612f <ulTaskSwitchedInTime+0x3>
    1ad6:	82 17       	cp	r24, r18
    1ad8:	93 07       	cpc	r25, r19
    1ada:	a4 07       	cpc	r26, r20
    1adc:	b5 07       	cpc	r27, r21
    1ade:	50 f5       	brcc	.+84     	; 0x1b34 <vTaskSwitchContext+0xe8>
    1ae0:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1ae4:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1ae8:	fb 01       	movw	r30, r22
    1aea:	25 a1       	ldd	r18, Z+37	; 0x25
    1aec:	36 a1       	ldd	r19, Z+38	; 0x26
    1aee:	47 a1       	ldd	r20, Z+39	; 0x27
    1af0:	50 a5       	ldd	r21, Z+40	; 0x28
    1af2:	e0 90 30 61 	lds	r14, 0x6130	; 0x806130 <ulTotalRunTime>
    1af6:	f0 90 31 61 	lds	r15, 0x6131	; 0x806131 <ulTotalRunTime+0x1>
    1afa:	00 91 32 61 	lds	r16, 0x6132	; 0x806132 <ulTotalRunTime+0x2>
    1afe:	10 91 33 61 	lds	r17, 0x6133	; 0x806133 <ulTotalRunTime+0x3>
    1b02:	80 91 2c 61 	lds	r24, 0x612C	; 0x80612c <ulTaskSwitchedInTime>
    1b06:	90 91 2d 61 	lds	r25, 0x612D	; 0x80612d <ulTaskSwitchedInTime+0x1>
    1b0a:	a0 91 2e 61 	lds	r26, 0x612E	; 0x80612e <ulTaskSwitchedInTime+0x2>
    1b0e:	b0 91 2f 61 	lds	r27, 0x612F	; 0x80612f <ulTaskSwitchedInTime+0x3>
    1b12:	57 01       	movw	r10, r14
    1b14:	68 01       	movw	r12, r16
    1b16:	a8 1a       	sub	r10, r24
    1b18:	b9 0a       	sbc	r11, r25
    1b1a:	ca 0a       	sbc	r12, r26
    1b1c:	db 0a       	sbc	r13, r27
    1b1e:	d6 01       	movw	r26, r12
    1b20:	c5 01       	movw	r24, r10
    1b22:	82 0f       	add	r24, r18
    1b24:	93 1f       	adc	r25, r19
    1b26:	a4 1f       	adc	r26, r20
    1b28:	b5 1f       	adc	r27, r21
    1b2a:	fb 01       	movw	r30, r22
    1b2c:	85 a3       	std	Z+37, r24	; 0x25
    1b2e:	96 a3       	std	Z+38, r25	; 0x26
    1b30:	a7 a3       	std	Z+39, r26	; 0x27
    1b32:	b0 a7       	std	Z+40, r27	; 0x28
    1b34:	80 91 30 61 	lds	r24, 0x6130	; 0x806130 <ulTotalRunTime>
    1b38:	90 91 31 61 	lds	r25, 0x6131	; 0x806131 <ulTotalRunTime+0x1>
    1b3c:	a0 91 32 61 	lds	r26, 0x6132	; 0x806132 <ulTotalRunTime+0x2>
    1b40:	b0 91 33 61 	lds	r27, 0x6133	; 0x806133 <ulTotalRunTime+0x3>
    1b44:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <ulTaskSwitchedInTime>
    1b48:	90 93 2d 61 	sts	0x612D, r25	; 0x80612d <ulTaskSwitchedInTime+0x1>
    1b4c:	a0 93 2e 61 	sts	0x612E, r26	; 0x80612e <ulTaskSwitchedInTime+0x2>
    1b50:	b0 93 2f 61 	sts	0x612F, r27	; 0x80612f <ulTaskSwitchedInTime+0x3>
    1b54:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1b58:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	87 89       	ldd	r24, Z+23	; 0x17
    1b60:	90 8d       	ldd	r25, Z+24	; 0x18
    1b62:	8a 83       	std	Y+2, r24	; 0x02
    1b64:	9b 83       	std	Y+3, r25	; 0x03
    1b66:	85 ea       	ldi	r24, 0xA5	; 165
    1b68:	95 ea       	ldi	r25, 0xA5	; 165
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	8c 83       	std	Y+4, r24	; 0x04
    1b6e:	9d 83       	std	Y+5, r25	; 0x05
    1b70:	ae 83       	std	Y+6, r26	; 0x06
    1b72:	bf 83       	std	Y+7, r27	; 0x07
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	9b 81       	ldd	r25, Y+3	; 0x03
    1b78:	fc 01       	movw	r30, r24
    1b7a:	20 81       	ld	r18, Z
    1b7c:	31 81       	ldd	r19, Z+1	; 0x01
    1b7e:	42 81       	ldd	r20, Z+2	; 0x02
    1b80:	53 81       	ldd	r21, Z+3	; 0x03
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	ae 81       	ldd	r26, Y+6	; 0x06
    1b88:	bf 81       	ldd	r27, Y+7	; 0x07
    1b8a:	28 17       	cp	r18, r24
    1b8c:	39 07       	cpc	r19, r25
    1b8e:	4a 07       	cpc	r20, r26
    1b90:	5b 07       	cpc	r21, r27
    1b92:	99 f5       	brne	.+102    	; 0x1bfa <vTaskSwitchContext+0x1ae>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	04 96       	adiw	r24, 0x04	; 4
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	20 81       	ld	r18, Z
    1b9e:	31 81       	ldd	r19, Z+1	; 0x01
    1ba0:	42 81       	ldd	r20, Z+2	; 0x02
    1ba2:	53 81       	ldd	r21, Z+3	; 0x03
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	ae 81       	ldd	r26, Y+6	; 0x06
    1baa:	bf 81       	ldd	r27, Y+7	; 0x07
    1bac:	28 17       	cp	r18, r24
    1bae:	39 07       	cpc	r19, r25
    1bb0:	4a 07       	cpc	r20, r26
    1bb2:	5b 07       	cpc	r21, r27
    1bb4:	11 f5       	brne	.+68     	; 0x1bfa <vTaskSwitchContext+0x1ae>
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	08 96       	adiw	r24, 0x08	; 8
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	20 81       	ld	r18, Z
    1bc0:	31 81       	ldd	r19, Z+1	; 0x01
    1bc2:	42 81       	ldd	r20, Z+2	; 0x02
    1bc4:	53 81       	ldd	r21, Z+3	; 0x03
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	ae 81       	ldd	r26, Y+6	; 0x06
    1bcc:	bf 81       	ldd	r27, Y+7	; 0x07
    1bce:	28 17       	cp	r18, r24
    1bd0:	39 07       	cpc	r19, r25
    1bd2:	4a 07       	cpc	r20, r26
    1bd4:	5b 07       	cpc	r21, r27
    1bd6:	89 f4       	brne	.+34     	; 0x1bfa <vTaskSwitchContext+0x1ae>
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	0c 96       	adiw	r24, 0x0c	; 12
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 81       	ld	r18, Z
    1be2:	31 81       	ldd	r19, Z+1	; 0x01
    1be4:	42 81       	ldd	r20, Z+2	; 0x02
    1be6:	53 81       	ldd	r21, Z+3	; 0x03
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	ae 81       	ldd	r26, Y+6	; 0x06
    1bee:	bf 81       	ldd	r27, Y+7	; 0x07
    1bf0:	28 17       	cp	r18, r24
    1bf2:	39 07       	cpc	r19, r25
    1bf4:	4a 07       	cpc	r20, r26
    1bf6:	5b 07       	cpc	r21, r27
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <vTaskSwitchContext+0x1ca>
    1bfa:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1bfe:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1c02:	9c 01       	movw	r18, r24
    1c04:	27 5e       	subi	r18, 0xE7	; 231
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <pxCurrentTCB>
    1c0c:	90 91 c7 60 	lds	r25, 0x60C7	; 0x8060c7 <pxCurrentTCB+0x1>
    1c10:	b9 01       	movw	r22, r18
    1c12:	0e 94 58 10 	call	0x20b0	; 0x20b0 <vApplicationStackOverflowHook>
    1c16:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <uxTopReadyPriority>
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	0c c0       	rjmp	.+24     	; 0x1c36 <vTaskSwitchContext+0x1ea>
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	88 23       	and	r24, r24
    1c22:	31 f4       	brne	.+12     	; 0x1c30 <vTaskSwitchContext+0x1e4>
    1c24:	6c e8       	ldi	r22, 0x8C	; 140
    1c26:	7b e0       	ldi	r23, 0x0B	; 11
    1c28:	80 e1       	ldi	r24, 0x10	; 16
    1c2a:	90 e2       	ldi	r25, 0x20	; 32
    1c2c:	0e 94 84 11 	call	0x2308	; 0x2308 <vAssertCalled>
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	81 50       	subi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	c9 01       	movw	r24, r18
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	88 53       	subi	r24, 0x38	; 56
    1c50:	9f 49       	sbci	r25, 0x9F	; 159
    1c52:	fc 01       	movw	r30, r24
    1c54:	80 81       	ld	r24, Z
    1c56:	88 23       	and	r24, r24
    1c58:	11 f3       	breq	.-60     	; 0x1c1e <vTaskSwitchContext+0x1d2>
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	c9 01       	movw	r24, r18
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	82 0f       	add	r24, r18
    1c70:	93 1f       	adc	r25, r19
    1c72:	88 53       	subi	r24, 0x38	; 56
    1c74:	9f 49       	sbci	r25, 0x9F	; 159
    1c76:	88 87       	std	Y+8, r24	; 0x08
    1c78:	99 87       	std	Y+9, r25	; 0x09
    1c7a:	88 85       	ldd	r24, Y+8	; 0x08
    1c7c:	99 85       	ldd	r25, Y+9	; 0x09
    1c7e:	fc 01       	movw	r30, r24
    1c80:	81 81       	ldd	r24, Z+1	; 0x01
    1c82:	92 81       	ldd	r25, Z+2	; 0x02
    1c84:	fc 01       	movw	r30, r24
    1c86:	22 81       	ldd	r18, Z+2	; 0x02
    1c88:	33 81       	ldd	r19, Z+3	; 0x03
    1c8a:	88 85       	ldd	r24, Y+8	; 0x08
    1c8c:	99 85       	ldd	r25, Y+9	; 0x09
    1c8e:	fc 01       	movw	r30, r24
    1c90:	21 83       	std	Z+1, r18	; 0x01
    1c92:	32 83       	std	Z+2, r19	; 0x02
    1c94:	88 85       	ldd	r24, Y+8	; 0x08
    1c96:	99 85       	ldd	r25, Y+9	; 0x09
    1c98:	fc 01       	movw	r30, r24
    1c9a:	21 81       	ldd	r18, Z+1	; 0x01
    1c9c:	32 81       	ldd	r19, Z+2	; 0x02
    1c9e:	88 85       	ldd	r24, Y+8	; 0x08
    1ca0:	99 85       	ldd	r25, Y+9	; 0x09
    1ca2:	03 96       	adiw	r24, 0x03	; 3
    1ca4:	28 17       	cp	r18, r24
    1ca6:	39 07       	cpc	r19, r25
    1ca8:	69 f4       	brne	.+26     	; 0x1cc4 <vTaskSwitchContext+0x278>
    1caa:	88 85       	ldd	r24, Y+8	; 0x08
    1cac:	99 85       	ldd	r25, Y+9	; 0x09
    1cae:	fc 01       	movw	r30, r24
    1cb0:	81 81       	ldd	r24, Z+1	; 0x01
    1cb2:	92 81       	ldd	r25, Z+2	; 0x02
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	22 81       	ldd	r18, Z+2	; 0x02
    1cb8:	33 81       	ldd	r19, Z+3	; 0x03
    1cba:	88 85       	ldd	r24, Y+8	; 0x08
    1cbc:	99 85       	ldd	r25, Y+9	; 0x09
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	21 83       	std	Z+1, r18	; 0x01
    1cc2:	32 83       	std	Z+2, r19	; 0x02
    1cc4:	88 85       	ldd	r24, Y+8	; 0x08
    1cc6:	99 85       	ldd	r25, Y+9	; 0x09
    1cc8:	fc 01       	movw	r30, r24
    1cca:	81 81       	ldd	r24, Z+1	; 0x01
    1ccc:	92 81       	ldd	r25, Z+2	; 0x02
    1cce:	fc 01       	movw	r30, r24
    1cd0:	86 81       	ldd	r24, Z+6	; 0x06
    1cd2:	97 81       	ldd	r25, Z+7	; 0x07
    1cd4:	80 93 c6 60 	sts	0x60C6, r24	; 0x8060c6 <pxCurrentTCB>
    1cd8:	90 93 c7 60 	sts	0x60C7, r25	; 0x8060c7 <pxCurrentTCB+0x1>
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	80 93 21 61 	sts	0x6121, r24	; 0x806121 <uxTopReadyPriority>
    1ce2:	00 00       	nop
    1ce4:	29 96       	adiw	r28, 0x09	; 9
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	08 95       	ret

00001d00 <prvIdleTask>:
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	1f 92       	push	r1
    1d06:	1f 92       	push	r1
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <prvCheckTasksWaitingTermination>
    1d14:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <pxReadyTasksLists>
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	10 f0       	brcs	.+4      	; 0x1d20 <prvIdleTask+0x20>
    1d1c:	0e 94 5f 08 	call	0x10be	; 0x10be <vPortYield>
    1d20:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <vApplicationIdleHook>
    1d24:	f5 cf       	rjmp	.-22     	; 0x1d10 <prvIdleTask+0x10>

00001d26 <prvInitialiseTaskLists>:
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	1f 92       	push	r1
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <prvInitialiseTaskLists+0x34>
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	88 53       	subi	r24, 0x38	; 56
    1d4e:	9f 49       	sbci	r25, 0x9F	; 159
    1d50:	0e 94 8c 05 	call	0xb18	; 0xb18 <vListInitialise>
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	84 30       	cpi	r24, 0x04	; 4
    1d5e:	50 f3       	brcs	.-44     	; 0x1d34 <prvInitialiseTaskLists+0xe>
    1d60:	8c ee       	ldi	r24, 0xEC	; 236
    1d62:	90 e6       	ldi	r25, 0x60	; 96
    1d64:	0e 94 8c 05 	call	0xb18	; 0xb18 <vListInitialise>
    1d68:	85 ef       	ldi	r24, 0xF5	; 245
    1d6a:	90 e6       	ldi	r25, 0x60	; 96
    1d6c:	0e 94 8c 05 	call	0xb18	; 0xb18 <vListInitialise>
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	91 e6       	ldi	r25, 0x61	; 97
    1d74:	0e 94 8c 05 	call	0xb18	; 0xb18 <vListInitialise>
    1d78:	8b e0       	ldi	r24, 0x0B	; 11
    1d7a:	91 e6       	ldi	r25, 0x61	; 97
    1d7c:	0e 94 8c 05 	call	0xb18	; 0xb18 <vListInitialise>
    1d80:	85 e1       	ldi	r24, 0x15	; 21
    1d82:	91 e6       	ldi	r25, 0x61	; 97
    1d84:	0e 94 8c 05 	call	0xb18	; 0xb18 <vListInitialise>
    1d88:	8c ee       	ldi	r24, 0xEC	; 236
    1d8a:	90 e6       	ldi	r25, 0x60	; 96
    1d8c:	80 93 fe 60 	sts	0x60FE, r24	; 0x8060fe <pxDelayedTaskList>
    1d90:	90 93 ff 60 	sts	0x60FF, r25	; 0x8060ff <pxDelayedTaskList+0x1>
    1d94:	85 ef       	ldi	r24, 0xF5	; 245
    1d96:	90 e6       	ldi	r25, 0x60	; 96
    1d98:	80 93 00 61 	sts	0x6100, r24	; 0x806100 <pxOverflowDelayedTaskList>
    1d9c:	90 93 01 61 	sts	0x6101, r25	; 0x806101 <pxOverflowDelayedTaskList+0x1>
    1da0:	00 00       	nop
    1da2:	0f 90       	pop	r0
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <prvCheckTasksWaitingTermination>:
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	1f 92       	push	r1
    1db0:	1f 92       	push	r1
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	21 c0       	rjmp	.+66     	; 0x1dfa <prvCheckTasksWaitingTermination+0x50>
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	0f 92       	push	r0
    1dbe:	80 91 10 61 	lds	r24, 0x6110	; 0x806110 <xTasksWaitingTermination+0x5>
    1dc2:	90 91 11 61 	lds	r25, 0x6111	; 0x806111 <xTasksWaitingTermination+0x6>
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	86 81       	ldd	r24, Z+6	; 0x06
    1dca:	97 81       	ldd	r25, Z+7	; 0x07
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	02 96       	adiw	r24, 0x02	; 2
    1dd6:	0e 94 21 06 	call	0xc42	; 0xc42 <uxListRemove>
    1dda:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <uxCurrentNumberOfTasks>
    1dde:	81 50       	subi	r24, 0x01	; 1
    1de0:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <uxCurrentNumberOfTasks>
    1de4:	80 91 14 61 	lds	r24, 0x6114	; 0x806114 <uxDeletedTasksWaitingCleanUp>
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	80 93 14 61 	sts	0x6114, r24	; 0x806114 <uxDeletedTasksWaitingCleanUp>
    1dee:	0f 90       	pop	r0
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <prvDeleteTCB>
    1dfa:	80 91 14 61 	lds	r24, 0x6114	; 0x806114 <uxDeletedTasksWaitingCleanUp>
    1dfe:	88 23       	and	r24, r24
    1e00:	d9 f6       	brne	.-74     	; 0x1db8 <prvCheckTasksWaitingTermination+0xe>
    1e02:	00 00       	nop
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	08 95       	ret

00001e0e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	1f 92       	push	r1
    1e14:	1f 92       	push	r1
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	9a 83       	std	Y+2, r25	; 0x02

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	fc 01       	movw	r30, r24
    1e24:	87 89       	ldd	r24, Z+23	; 0x17
    1e26:	90 8d       	ldd	r25, Z+24	; 0x18
    1e28:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <vPortFree>
			vPortFree( pxTCB );
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    1e34:	00 00       	nop
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	1f 92       	push	r1
    1e46:	1f 92       	push	r1
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1e4c:	80 91 fe 60 	lds	r24, 0x60FE	; 0x8060fe <pxDelayedTaskList>
    1e50:	90 91 ff 60 	lds	r25, 0x60FF	; 0x8060ff <pxDelayedTaskList+0x1>
    1e54:	fc 01       	movw	r30, r24
    1e56:	80 81       	ld	r24, Z
    1e58:	88 23       	and	r24, r24
    1e5a:	39 f4       	brne	.+14     	; 0x1e6a <prvResetNextTaskUnblockTime+0x2a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	9f ef       	ldi	r25, 0xFF	; 255
    1e60:	80 93 27 61 	sts	0x6127, r24	; 0x806127 <xNextTaskUnblockTime>
    1e64:	90 93 28 61 	sts	0x6128, r25	; 0x806128 <xNextTaskUnblockTime+0x1>
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    1e68:	15 c0       	rjmp	.+42     	; 0x1e94 <prvResetNextTaskUnblockTime+0x54>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1e6a:	80 91 fe 60 	lds	r24, 0x60FE	; 0x8060fe <pxDelayedTaskList>
    1e6e:	90 91 ff 60 	lds	r25, 0x60FF	; 0x8060ff <pxDelayedTaskList+0x1>
    1e72:	fc 01       	movw	r30, r24
    1e74:	85 81       	ldd	r24, Z+5	; 0x05
    1e76:	96 81       	ldd	r25, Z+6	; 0x06
    1e78:	fc 01       	movw	r30, r24
    1e7a:	86 81       	ldd	r24, Z+6	; 0x06
    1e7c:	97 81       	ldd	r25, Z+7	; 0x07
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	9a 83       	std	Y+2, r25	; 0x02
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	fc 01       	movw	r30, r24
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	80 93 27 61 	sts	0x6127, r24	; 0x806127 <xNextTaskUnblockTime>
    1e90:	90 93 28 61 	sts	0x6128, r25	; 0x806128 <xNextTaskUnblockTime+0x1>
	}
}
    1e94:	00 00       	nop
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	
}
    1ea8:	00 00       	nop
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	6c 97       	sbiw	r28, 0x1c	; 28
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	de bf       	out	0x3e, r29	; 62
	taskDISABLE_INTERRUPTS();
    1ebe:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    1ec0:	83 e5       	ldi	r24, 0x53	; 83
    1ec2:	90 e2       	ldi	r25, 0x20	; 32
    1ec4:	0e 94 b8 01 	call	0x370	; 0x370 <DbgPrint>
	CFG_ERR_LED();
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	96 e0       	ldi	r25, 0x06	; 6
    1ecc:	20 e8       	ldi	r18, 0x80	; 128
    1ece:	fc 01       	movw	r30, r24
    1ed0:	21 83       	std	Z+1, r18	; 0x01
	while (1)
	{
		SET_ERR_LED();
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	96 e0       	ldi	r25, 0x06	; 6
    1ed6:	20 e8       	ldi	r18, 0x80	; 128
    1ed8:	fc 01       	movw	r30, r24
    1eda:	25 83       	std	Z+5, r18	; 0x05
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ee2:	b2 e4       	ldi	r27, 0x42	; 66
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	ab 83       	std	Y+3, r26	; 0x03
    1eea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a ef       	ldi	r20, 0xFA	; 250
    1ef2:	55 e4       	ldi	r21, 0x45	; 69
    1ef4:	69 81       	ldd	r22, Y+1	; 0x01
    1ef6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	9c 8b       	std	Y+20, r25	; 0x14
    1f08:	ad 8b       	std	Y+21, r26	; 0x15
    1f0a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	6b 89       	ldd	r22, Y+19	; 0x13
    1f16:	7c 89       	ldd	r23, Y+20	; 0x14
    1f18:	8d 89       	ldd	r24, Y+21	; 0x15
    1f1a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f1c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <vApplicationMallocFailedHook+0x7e>
		__ticks = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	8f 8b       	std	Y+23, r24	; 0x17
    1f2a:	98 8f       	std	Y+24, r25	; 0x18
    1f2c:	3f c0       	rjmp	.+126    	; 0x1fac <vApplicationMallocFailedHook+0xfc>
	else if (__tmp > 65535)
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	6b 89       	ldd	r22, Y+19	; 0x13
    1f38:	7c 89       	ldd	r23, Y+20	; 0x14
    1f3a:	8d 89       	ldd	r24, Y+21	; 0x15
    1f3c:	9e 89       	ldd	r25, Y+22	; 0x16
    1f3e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    1f42:	18 16       	cp	r1, r24
    1f44:	4c f5       	brge	.+82     	; 0x1f98 <vApplicationMallocFailedHook+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	69 81       	ldd	r22, Y+1	; 0x01
    1f50:	7a 81       	ldd	r23, Y+2	; 0x02
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8f 8b       	std	Y+23, r24	; 0x17
    1f6c:	98 8f       	std	Y+24, r25	; 0x18
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <vApplicationMallocFailedHook+0xde>
    1f70:	80 e2       	ldi	r24, 0x20	; 32
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	89 8f       	std	Y+25, r24	; 0x19
    1f76:	9a 8f       	std	Y+26, r25	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f78:	89 8d       	ldd	r24, Y+25	; 0x19
    1f7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <vApplicationMallocFailedHook+0xcc>
    1f80:	89 8f       	std	Y+25, r24	; 0x19
    1f82:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	8f 89       	ldd	r24, Y+23	; 0x17
    1f86:	98 8d       	ldd	r25, Y+24	; 0x18
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	8f 8b       	std	Y+23, r24	; 0x17
    1f8c:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f90:	98 8d       	ldd	r25, Y+24	; 0x18
    1f92:	89 2b       	or	r24, r25
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <vApplicationMallocFailedHook+0xc0>
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <vApplicationMallocFailedHook+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	6b 89       	ldd	r22, Y+19	; 0x13
    1f9a:	7c 89       	ldd	r23, Y+20	; 0x14
    1f9c:	8d 89       	ldd	r24, Y+21	; 0x15
    1f9e:	9e 89       	ldd	r25, Y+22	; 0x16
    1fa0:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	8f 8b       	std	Y+23, r24	; 0x17
    1faa:	98 8f       	std	Y+24, r25	; 0x18
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	8b 8f       	std	Y+27, r24	; 0x1b
    1fb2:	9c 8f       	std	Y+28, r25	; 0x1c
    1fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <vApplicationMallocFailedHook+0x108>
    1fbc:	8b 8f       	std	Y+27, r24	; 0x1b
    1fbe:	9c 8f       	std	Y+28, r25	; 0x1c
		_delay_ms(100);
		CLR_ERR_LED();
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	96 e0       	ldi	r25, 0x06	; 6
    1fc4:	20 e8       	ldi	r18, 0x80	; 128
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	26 83       	std	Z+6, r18	; 0x06
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a8 ec       	ldi	r26, 0xC8	; 200
    1fd0:	b2 e4       	ldi	r27, 0x42	; 66
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	af 83       	std	Y+7, r26	; 0x07
    1fd8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	55 e4       	ldi	r21, 0x45	; 69
    1fe2:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe4:	7e 81       	ldd	r23, Y+6	; 0x06
    1fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe8:	98 85       	ldd	r25, Y+8	; 0x08
    1fea:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	89 87       	std	Y+9, r24	; 0x09
    1ff4:	9a 87       	std	Y+10, r25	; 0x0a
    1ff6:	ab 87       	std	Y+11, r26	; 0x0b
    1ff8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	69 85       	ldd	r22, Y+9	; 0x09
    2004:	7a 85       	ldd	r23, Y+10	; 0x0a
    2006:	8b 85       	ldd	r24, Y+11	; 0x0b
    2008:	9c 85       	ldd	r25, Y+12	; 0x0c
    200a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <vApplicationMallocFailedHook+0x16c>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	8d 87       	std	Y+13, r24	; 0x0d
    2018:	9e 87       	std	Y+14, r25	; 0x0e
    201a:	3f c0       	rjmp	.+126    	; 0x209a <vApplicationMallocFailedHook+0x1ea>
	else if (__tmp > 65535)
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	69 85       	ldd	r22, Y+9	; 0x09
    2026:	7a 85       	ldd	r23, Y+10	; 0x0a
    2028:	8b 85       	ldd	r24, Y+11	; 0x0b
    202a:	9c 85       	ldd	r25, Y+12	; 0x0c
    202c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <vApplicationMallocFailedHook+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	6d 81       	ldd	r22, Y+5	; 0x05
    203e:	7e 81       	ldd	r23, Y+6	; 0x06
    2040:	8f 81       	ldd	r24, Y+7	; 0x07
    2042:	98 85       	ldd	r25, Y+8	; 0x08
    2044:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8d 87       	std	Y+13, r24	; 0x0d
    205a:	9e 87       	std	Y+14, r25	; 0x0e
    205c:	0f c0       	rjmp	.+30     	; 0x207c <vApplicationMallocFailedHook+0x1cc>
    205e:	80 e2       	ldi	r24, 0x20	; 32
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	8f 87       	std	Y+15, r24	; 0x0f
    2064:	98 8b       	std	Y+16, r25	; 0x10
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	98 89       	ldd	r25, Y+16	; 0x10
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <vApplicationMallocFailedHook+0x1ba>
    206e:	8f 87       	std	Y+15, r24	; 0x0f
    2070:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	8d 87       	std	Y+13, r24	; 0x0d
    207a:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	89 2b       	or	r24, r25
    2082:	69 f7       	brne	.-38     	; 0x205e <vApplicationMallocFailedHook+0x1ae>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <vApplicationMallocFailedHook+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	69 85       	ldd	r22, Y+9	; 0x09
    2088:	7a 85       	ldd	r23, Y+10	; 0x0a
    208a:	8b 85       	ldd	r24, Y+11	; 0x0b
    208c:	9c 85       	ldd	r25, Y+12	; 0x0c
    208e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8d 87       	std	Y+13, r24	; 0x0d
    2098:	9e 87       	std	Y+14, r25	; 0x0e
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	89 8b       	std	Y+17, r24	; 0x11
    20a0:	9a 8b       	std	Y+18, r25	; 0x12
    20a2:	89 89       	ldd	r24, Y+17	; 0x11
    20a4:	9a 89       	ldd	r25, Y+18	; 0x12
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <vApplicationMallocFailedHook+0x1f6>
    20aa:	89 8b       	std	Y+17, r24	; 0x11
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
		_delay_ms(100);
	}
    20ae:	11 cf       	rjmp	.-478    	; 0x1ed2 <vApplicationMallocFailedHook+0x22>

000020b0 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	c0 5a       	subi	r28, 0xA0	; 160
    20ba:	d1 09       	sbc	r29, r1
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	9e 01       	movw	r18, r28
    20c2:	23 56       	subi	r18, 0x63	; 99
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
    20c6:	f9 01       	movw	r30, r18
    20c8:	80 83       	st	Z, r24
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	ce 01       	movw	r24, r28
    20ce:	81 56       	subi	r24, 0x61	; 97
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	fc 01       	movw	r30, r24
    20d4:	60 83       	st	Z, r22
    20d6:	71 83       	std	Z+1, r23	; 0x01
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    20d8:	f8 94       	cli
	CFG_ERR_LED();
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	96 e0       	ldi	r25, 0x06	; 6
    20de:	20 e8       	ldi	r18, 0x80	; 128
    20e0:	fc 01       	movw	r30, r24
    20e2:	21 83       	std	Z+1, r18	; 0x01
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    20e4:	ce 01       	movw	r24, r28
    20e6:	81 56       	subi	r24, 0x61	; 97
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	fc 01       	movw	r30, r24
    20ec:	21 81       	ldd	r18, Z+1	; 0x01
    20ee:	2f 93       	push	r18
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	8f 93       	push	r24
    20f6:	85 e7       	ldi	r24, 0x75	; 117
    20f8:	90 e2       	ldi	r25, 0x20	; 32
    20fa:	89 2f       	mov	r24, r25
    20fc:	8f 93       	push	r24
    20fe:	85 e7       	ldi	r24, 0x75	; 117
    2100:	90 e2       	ldi	r25, 0x20	; 32
    2102:	8f 93       	push	r24
    2104:	1f 92       	push	r1
    2106:	80 e8       	ldi	r24, 0x80	; 128
    2108:	8f 93       	push	r24
    210a:	ce 01       	movw	r24, r28
    210c:	4d 96       	adiw	r24, 0x1d	; 29
    210e:	29 2f       	mov	r18, r25
    2110:	2f 93       	push	r18
    2112:	8f 93       	push	r24
    2114:	0e 94 4d 19 	call	0x329a	; 0x329a <snprintf>
    2118:	8d b7       	in	r24, 0x3d	; 61
    211a:	9e b7       	in	r25, 0x3e	; 62
    211c:	08 96       	adiw	r24, 0x08	; 8
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	de bf       	out	0x3e, r29	; 62
	DbgPrint(Dbg);
    2122:	ce 01       	movw	r24, r28
    2124:	4d 96       	adiw	r24, 0x1d	; 29
    2126:	0e 94 b8 01 	call	0x370	; 0x370 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	96 e0       	ldi	r25, 0x06	; 6
    212e:	20 e8       	ldi	r18, 0x80	; 128
    2130:	fc 01       	movw	r30, r24
    2132:	25 83       	std	Z+5, r18	; 0x05
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	aa ef       	ldi	r26, 0xFA	; 250
    213a:	b3 e4       	ldi	r27, 0x43	; 67
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	ab 83       	std	Y+3, r26	; 0x03
    2142:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a ef       	ldi	r20, 0xFA	; 250
    214a:	55 e4       	ldi	r21, 0x45	; 69
    214c:	69 81       	ldd	r22, Y+1	; 0x01
    214e:	7a 81       	ldd	r23, Y+2	; 0x02
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8b 8b       	std	Y+19, r24	; 0x13
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	ad 8b       	std	Y+21, r26	; 0x15
    2162:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	6b 89       	ldd	r22, Y+19	; 0x13
    216e:	7c 89       	ldd	r23, Y+20	; 0x14
    2170:	8d 89       	ldd	r24, Y+21	; 0x15
    2172:	9e 89       	ldd	r25, Y+22	; 0x16
    2174:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <vApplicationStackOverflowHook+0xd6>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	8f 8b       	std	Y+23, r24	; 0x17
    2182:	98 8f       	std	Y+24, r25	; 0x18
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <vApplicationStackOverflowHook+0x154>
	else if (__tmp > 65535)
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	6b 89       	ldd	r22, Y+19	; 0x13
    2190:	7c 89       	ldd	r23, Y+20	; 0x14
    2192:	8d 89       	ldd	r24, Y+21	; 0x15
    2194:	9e 89       	ldd	r25, Y+22	; 0x16
    2196:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <vApplicationStackOverflowHook+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	69 81       	ldd	r22, Y+1	; 0x01
    21a8:	7a 81       	ldd	r23, Y+2	; 0x02
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8f 8b       	std	Y+23, r24	; 0x17
    21c4:	98 8f       	std	Y+24, r25	; 0x18
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <vApplicationStackOverflowHook+0x136>
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	93 e0       	ldi	r25, 0x03	; 3
    21cc:	89 8f       	std	Y+25, r24	; 0x19
    21ce:	9a 8f       	std	Y+26, r25	; 0x1a
    21d0:	89 8d       	ldd	r24, Y+25	; 0x19
    21d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <vApplicationStackOverflowHook+0x124>
    21d8:	89 8f       	std	Y+25, r24	; 0x19
    21da:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	8f 8b       	std	Y+23, r24	; 0x17
    21e4:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	89 2b       	or	r24, r25
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <vApplicationStackOverflowHook+0x118>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <vApplicationStackOverflowHook+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6b 89       	ldd	r22, Y+19	; 0x13
    21f2:	7c 89       	ldd	r23, Y+20	; 0x14
    21f4:	8d 89       	ldd	r24, Y+21	; 0x15
    21f6:	9e 89       	ldd	r25, Y+22	; 0x16
    21f8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8f 8b       	std	Y+23, r24	; 0x17
    2202:	98 8f       	std	Y+24, r25	; 0x18
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	98 8d       	ldd	r25, Y+24	; 0x18
    2208:	8b 8f       	std	Y+27, r24	; 0x1b
    220a:	9c 8f       	std	Y+28, r25	; 0x1c
    220c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <vApplicationStackOverflowHook+0x160>
    2214:	8b 8f       	std	Y+27, r24	; 0x1b
    2216:	9c 8f       	std	Y+28, r25	; 0x1c
		_delay_ms(500);
		CLR_ERR_LED();
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	96 e0       	ldi	r25, 0x06	; 6
    221c:	20 e8       	ldi	r18, 0x80	; 128
    221e:	fc 01       	movw	r30, r24
    2220:	26 83       	std	Z+6, r18	; 0x06
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	aa ef       	ldi	r26, 0xFA	; 250
    2228:	b3 e4       	ldi	r27, 0x43	; 67
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	af 83       	std	Y+7, r26	; 0x07
    2230:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a ef       	ldi	r20, 0xFA	; 250
    2238:	55 e4       	ldi	r21, 0x45	; 69
    223a:	6d 81       	ldd	r22, Y+5	; 0x05
    223c:	7e 81       	ldd	r23, Y+6	; 0x06
    223e:	8f 81       	ldd	r24, Y+7	; 0x07
    2240:	98 85       	ldd	r25, Y+8	; 0x08
    2242:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	89 87       	std	Y+9, r24	; 0x09
    224c:	9a 87       	std	Y+10, r25	; 0x0a
    224e:	ab 87       	std	Y+11, r26	; 0x0b
    2250:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	69 85       	ldd	r22, Y+9	; 0x09
    225c:	7a 85       	ldd	r23, Y+10	; 0x0a
    225e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2260:	9c 85       	ldd	r25, Y+12	; 0x0c
    2262:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <vApplicationStackOverflowHook+0x1c4>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	8d 87       	std	Y+13, r24	; 0x0d
    2270:	9e 87       	std	Y+14, r25	; 0x0e
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <vApplicationStackOverflowHook+0x242>
	else if (__tmp > 65535)
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	69 85       	ldd	r22, Y+9	; 0x09
    227e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2280:	8b 85       	ldd	r24, Y+11	; 0x0b
    2282:	9c 85       	ldd	r25, Y+12	; 0x0c
    2284:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <vApplicationStackOverflowHook+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	6d 81       	ldd	r22, Y+5	; 0x05
    2296:	7e 81       	ldd	r23, Y+6	; 0x06
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	98 85       	ldd	r25, Y+8	; 0x08
    229c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8d 87       	std	Y+13, r24	; 0x0d
    22b2:	9e 87       	std	Y+14, r25	; 0x0e
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <vApplicationStackOverflowHook+0x224>
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	93 e0       	ldi	r25, 0x03	; 3
    22ba:	8f 87       	std	Y+15, r24	; 0x0f
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	98 89       	ldd	r25, Y+16	; 0x10
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <vApplicationStackOverflowHook+0x212>
    22c6:	8f 87       	std	Y+15, r24	; 0x0f
    22c8:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	8d 87       	std	Y+13, r24	; 0x0d
    22d2:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d8:	89 2b       	or	r24, r25
    22da:	69 f7       	brne	.-38     	; 0x22b6 <vApplicationStackOverflowHook+0x206>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <vApplicationStackOverflowHook+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	69 85       	ldd	r22, Y+9	; 0x09
    22e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    22e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    22e6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8d 87       	std	Y+13, r24	; 0x0d
    22f0:	9e 87       	std	Y+14, r25	; 0x0e
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	89 8b       	std	Y+17, r24	; 0x11
    22f8:	9a 8b       	std	Y+18, r25	; 0x12
    22fa:	89 89       	ldd	r24, Y+17	; 0x11
    22fc:	9a 89       	ldd	r25, Y+18	; 0x12
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <vApplicationStackOverflowHook+0x24e>
    2302:	89 8b       	std	Y+17, r24	; 0x11
    2304:	9a 8b       	std	Y+18, r25	; 0x12
		_delay_ms(500);
	}
    2306:	11 cf       	rjmp	.-478    	; 0x212a <vApplicationStackOverflowHook+0x7a>

00002308 <vAssertCalled>:
}

void vAssertCalled( char *File, int Line)
{
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	c0 5a       	subi	r28, 0xA0	; 160
    2312:	d1 09       	sbc	r29, r1
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	9e 01       	movw	r18, r28
    231a:	23 56       	subi	r18, 0x63	; 99
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	f9 01       	movw	r30, r18
    2320:	80 83       	st	Z, r24
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	ce 01       	movw	r24, r28
    2326:	81 56       	subi	r24, 0x61	; 97
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
    232a:	fc 01       	movw	r30, r24
    232c:	60 83       	st	Z, r22
    232e:	71 83       	std	Z+1, r23	; 0x01
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    2330:	f8 94       	cli
	CFG_ERR_LED();
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	96 e0       	ldi	r25, 0x06	; 6
    2336:	20 e8       	ldi	r18, 0x80	; 128
    2338:	fc 01       	movw	r30, r24
    233a:	21 83       	std	Z+1, r18	; 0x01
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    233c:	ce 01       	movw	r24, r28
    233e:	81 56       	subi	r24, 0x61	; 97
    2340:	9f 4f       	sbci	r25, 0xFF	; 255
    2342:	fc 01       	movw	r30, r24
    2344:	21 81       	ldd	r18, Z+1	; 0x01
    2346:	2f 93       	push	r18
    2348:	fc 01       	movw	r30, r24
    234a:	80 81       	ld	r24, Z
    234c:	8f 93       	push	r24
    234e:	ce 01       	movw	r24, r28
    2350:	83 56       	subi	r24, 0x63	; 99
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	fc 01       	movw	r30, r24
    2356:	21 81       	ldd	r18, Z+1	; 0x01
    2358:	2f 93       	push	r18
    235a:	fc 01       	movw	r30, r24
    235c:	80 81       	ld	r24, Z
    235e:	8f 93       	push	r24
    2360:	81 e9       	ldi	r24, 0x91	; 145
    2362:	90 e2       	ldi	r25, 0x20	; 32
    2364:	89 2f       	mov	r24, r25
    2366:	8f 93       	push	r24
    2368:	81 e9       	ldi	r24, 0x91	; 145
    236a:	90 e2       	ldi	r25, 0x20	; 32
    236c:	8f 93       	push	r24
    236e:	1f 92       	push	r1
    2370:	80 e8       	ldi	r24, 0x80	; 128
    2372:	8f 93       	push	r24
    2374:	ce 01       	movw	r24, r28
    2376:	4d 96       	adiw	r24, 0x1d	; 29
    2378:	29 2f       	mov	r18, r25
    237a:	2f 93       	push	r18
    237c:	8f 93       	push	r24
    237e:	0e 94 4d 19 	call	0x329a	; 0x329a <snprintf>
    2382:	8d b7       	in	r24, 0x3d	; 61
    2384:	9e b7       	in	r25, 0x3e	; 62
    2386:	0a 96       	adiw	r24, 0x0a	; 10
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	de bf       	out	0x3e, r29	; 62
	DbgPrint(Dbg);
    238c:	ce 01       	movw	r24, r28
    238e:	4d 96       	adiw	r24, 0x1d	; 29
    2390:	0e 94 b8 01 	call	0x370	; 0x370 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	96 e0       	ldi	r25, 0x06	; 6
    2398:	20 e8       	ldi	r18, 0x80	; 128
    239a:	fc 01       	movw	r30, r24
    239c:	25 83       	std	Z+5, r18	; 0x05
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a8 ec       	ldi	r26, 0xC8	; 200
    23a4:	b2 e4       	ldi	r27, 0x42	; 66
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	ab 83       	std	Y+3, r26	; 0x03
    23ac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	55 e4       	ldi	r21, 0x45	; 69
    23b6:	69 81       	ldd	r22, Y+1	; 0x01
    23b8:	7a 81       	ldd	r23, Y+2	; 0x02
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8b 8b       	std	Y+19, r24	; 0x13
    23c8:	9c 8b       	std	Y+20, r25	; 0x14
    23ca:	ad 8b       	std	Y+21, r26	; 0x15
    23cc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	6b 89       	ldd	r22, Y+19	; 0x13
    23d8:	7c 89       	ldd	r23, Y+20	; 0x14
    23da:	8d 89       	ldd	r24, Y+21	; 0x15
    23dc:	9e 89       	ldd	r25, Y+22	; 0x16
    23de:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <vAssertCalled+0xe8>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	8f 8b       	std	Y+23, r24	; 0x17
    23ec:	98 8f       	std	Y+24, r25	; 0x18
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <vAssertCalled+0x166>
	else if (__tmp > 65535)
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	6b 89       	ldd	r22, Y+19	; 0x13
    23fa:	7c 89       	ldd	r23, Y+20	; 0x14
    23fc:	8d 89       	ldd	r24, Y+21	; 0x15
    23fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2400:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    2404:	18 16       	cp	r1, r24
    2406:	4c f5       	brge	.+82     	; 0x245a <vAssertCalled+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	69 81       	ldd	r22, Y+1	; 0x01
    2412:	7a 81       	ldd	r23, Y+2	; 0x02
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8f 8b       	std	Y+23, r24	; 0x17
    242e:	98 8f       	std	Y+24, r25	; 0x18
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <vAssertCalled+0x148>
    2432:	80 e2       	ldi	r24, 0x20	; 32
    2434:	93 e0       	ldi	r25, 0x03	; 3
    2436:	89 8f       	std	Y+25, r24	; 0x19
    2438:	9a 8f       	std	Y+26, r25	; 0x1a
    243a:	89 8d       	ldd	r24, Y+25	; 0x19
    243c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <vAssertCalled+0x136>
    2442:	89 8f       	std	Y+25, r24	; 0x19
    2444:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	8f 89       	ldd	r24, Y+23	; 0x17
    2448:	98 8d       	ldd	r25, Y+24	; 0x18
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	8f 8b       	std	Y+23, r24	; 0x17
    244e:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	89 2b       	or	r24, r25
    2456:	69 f7       	brne	.-38     	; 0x2432 <vAssertCalled+0x12a>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <vAssertCalled+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	6b 89       	ldd	r22, Y+19	; 0x13
    245c:	7c 89       	ldd	r23, Y+20	; 0x14
    245e:	8d 89       	ldd	r24, Y+21	; 0x15
    2460:	9e 89       	ldd	r25, Y+22	; 0x16
    2462:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8f 8b       	std	Y+23, r24	; 0x17
    246c:	98 8f       	std	Y+24, r25	; 0x18
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	8b 8f       	std	Y+27, r24	; 0x1b
    2474:	9c 8f       	std	Y+28, r25	; 0x1c
    2476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <vAssertCalled+0x172>
    247e:	8b 8f       	std	Y+27, r24	; 0x1b
    2480:	9c 8f       	std	Y+28, r25	; 0x1c
		_delay_ms(100);
		CLR_ERR_LED();
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	96 e0       	ldi	r25, 0x06	; 6
    2486:	20 e8       	ldi	r18, 0x80	; 128
    2488:	fc 01       	movw	r30, r24
    248a:	26 83       	std	Z+6, r18	; 0x06
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	aa ef       	ldi	r26, 0xFA	; 250
    2492:	b3 e4       	ldi	r27, 0x43	; 67
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	af 83       	std	Y+7, r26	; 0x07
    249a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	55 e4       	ldi	r21, 0x45	; 69
    24a4:	6d 81       	ldd	r22, Y+5	; 0x05
    24a6:	7e 81       	ldd	r23, Y+6	; 0x06
    24a8:	8f 81       	ldd	r24, Y+7	; 0x07
    24aa:	98 85       	ldd	r25, Y+8	; 0x08
    24ac:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	89 87       	std	Y+9, r24	; 0x09
    24b6:	9a 87       	std	Y+10, r25	; 0x0a
    24b8:	ab 87       	std	Y+11, r26	; 0x0b
    24ba:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	69 85       	ldd	r22, Y+9	; 0x09
    24c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    24c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    24cc:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <vAssertCalled+0x1d6>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	8d 87       	std	Y+13, r24	; 0x0d
    24da:	9e 87       	std	Y+14, r25	; 0x0e
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <vAssertCalled+0x254>
	else if (__tmp > 65535)
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	69 85       	ldd	r22, Y+9	; 0x09
    24e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    24ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ee:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <vAssertCalled+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2500:	7e 81       	ldd	r23, Y+6	; 0x06
    2502:	8f 81       	ldd	r24, Y+7	; 0x07
    2504:	98 85       	ldd	r25, Y+8	; 0x08
    2506:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8d 87       	std	Y+13, r24	; 0x0d
    251c:	9e 87       	std	Y+14, r25	; 0x0e
    251e:	0f c0       	rjmp	.+30     	; 0x253e <vAssertCalled+0x236>
    2520:	80 e2       	ldi	r24, 0x20	; 32
    2522:	93 e0       	ldi	r25, 0x03	; 3
    2524:	8f 87       	std	Y+15, r24	; 0x0f
    2526:	98 8b       	std	Y+16, r25	; 0x10
    2528:	8f 85       	ldd	r24, Y+15	; 0x0f
    252a:	98 89       	ldd	r25, Y+16	; 0x10
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <vAssertCalled+0x224>
    2530:	8f 87       	std	Y+15, r24	; 0x0f
    2532:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	8d 87       	std	Y+13, r24	; 0x0d
    253c:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	89 2b       	or	r24, r25
    2544:	69 f7       	brne	.-38     	; 0x2520 <vAssertCalled+0x218>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <vAssertCalled+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	69 85       	ldd	r22, Y+9	; 0x09
    254a:	7a 85       	ldd	r23, Y+10	; 0x0a
    254c:	8b 85       	ldd	r24, Y+11	; 0x0b
    254e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2550:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8d 87       	std	Y+13, r24	; 0x0d
    255a:	9e 87       	std	Y+14, r25	; 0x0e
    255c:	8d 85       	ldd	r24, Y+13	; 0x0d
    255e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2560:	89 8b       	std	Y+17, r24	; 0x11
    2562:	9a 8b       	std	Y+18, r25	; 0x12
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	9a 89       	ldd	r25, Y+18	; 0x12
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <vAssertCalled+0x260>
    256c:	89 8b       	std	Y+17, r24	; 0x11
    256e:	9a 8b       	std	Y+18, r25	; 0x12
		_delay_ms(500);
	}
    2570:	11 cf       	rjmp	.-478    	; 0x2394 <vAssertCalled+0x8c>

00002572 <main>:
#include <util/delay.h>

#include <stdio.h>

int main(void)
{
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	2e 97       	sbiw	r28, 0x0e	; 14
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	de bf       	out	0x3e, r29	; 62
	DriverSysClkXtalInit();	//Clock init
    2580:	0e 94 12 02 	call	0x424	; 0x424 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    2584:	0e 94 85 03 	call	0x70a	; 0x70a <DriverUSARTInit>
	DriverTWIMInit();		//Initialize TWI in master mode
    2588:	0e 94 2d 02 	call	0x45a	; 0x45a <DriverTWIMInit>
	DriverCursorstickInit();//Initialize cursor stick
    258c:	0e 94 b0 01 	call	0x360	; 0x360 <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    2590:	0e 94 0a 02 	call	0x414	; 0x414 <DriverLedInit>
	DriverPowerInit();		//Initialize aux power driver
    2594:	0e 94 6e 14 	call	0x28dc	; 0x28dc <DriverPowerInit>
	DriverAdcInit();		//Initialize ADC driver
    2598:	0e 94 a8 01 	call	0x350	; 0x350 <DriverAdcInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    25a2:	80 ea       	ldi	r24, 0xA0	; 160
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	27 e0       	ldi	r18, 0x07	; 7
    25a8:	fc 01       	movw	r30, r24
    25aa:	22 83       	std	Z+2, r18	; 0x02
	sei();
    25ac:	78 94       	sei
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e2       	ldi	r26, 0x20	; 32
    25b4:	b1 e4       	ldi	r27, 0x41	; 65
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	ab 83       	std	Y+3, r26	; 0x03
    25bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a ef       	ldi	r20, 0xFA	; 250
    25c4:	55 e4       	ldi	r21, 0x45	; 69
    25c6:	69 81       	ldd	r22, Y+1	; 0x01
    25c8:	7a 81       	ldd	r23, Y+2	; 0x02
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	af 83       	std	Y+7, r26	; 0x07
    25dc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	6d 81       	ldd	r22, Y+5	; 0x05
    25e8:	7e 81       	ldd	r23, Y+6	; 0x06
    25ea:	8f 81       	ldd	r24, Y+7	; 0x07
    25ec:	98 85       	ldd	r25, Y+8	; 0x08
    25ee:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__cmpsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	2c f4       	brge	.+10     	; 0x2600 <main+0x8e>
		__ticks = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	89 87       	std	Y+9, r24	; 0x09
    25fc:	9a 87       	std	Y+10, r25	; 0x0a
    25fe:	3f c0       	rjmp	.+126    	; 0x267e <main+0x10c>
	else if (__tmp > 65535)
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	6d 81       	ldd	r22, Y+5	; 0x05
    260a:	7e 81       	ldd	r23, Y+6	; 0x06
    260c:	8f 81       	ldd	r24, Y+7	; 0x07
    260e:	98 85       	ldd	r25, Y+8	; 0x08
    2610:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__gesf2>
    2614:	18 16       	cp	r1, r24
    2616:	4c f5       	brge	.+82     	; 0x266a <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	69 81       	ldd	r22, Y+1	; 0x01
    2622:	7a 81       	ldd	r23, Y+2	; 0x02
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	89 87       	std	Y+9, r24	; 0x09
    263e:	9a 87       	std	Y+10, r25	; 0x0a
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <main+0xee>
    2642:	80 e2       	ldi	r24, 0x20	; 32
    2644:	93 e0       	ldi	r25, 0x03	; 3
    2646:	8b 87       	std	Y+11, r24	; 0x0b
    2648:	9c 87       	std	Y+12, r25	; 0x0c
    264a:	8b 85       	ldd	r24, Y+11	; 0x0b
    264c:	9c 85       	ldd	r25, Y+12	; 0x0c
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <main+0xdc>
    2652:	8b 87       	std	Y+11, r24	; 0x0b
    2654:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2656:	89 85       	ldd	r24, Y+9	; 0x09
    2658:	9a 85       	ldd	r25, Y+10	; 0x0a
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	89 87       	std	Y+9, r24	; 0x09
    265e:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	89 2b       	or	r24, r25
    2666:	69 f7       	brne	.-38     	; 0x2642 <main+0xd0>
    2668:	14 c0       	rjmp	.+40     	; 0x2692 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266a:	6d 81       	ldd	r22, Y+5	; 0x05
    266c:	7e 81       	ldd	r23, Y+6	; 0x06
    266e:	8f 81       	ldd	r24, Y+7	; 0x07
    2670:	98 85       	ldd	r25, Y+8	; 0x08
    2672:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	89 87       	std	Y+9, r24	; 0x09
    267c:	9a 87       	std	Y+10, r25	; 0x0a
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	8d 87       	std	Y+13, r24	; 0x0d
    2684:	9e 87       	std	Y+14, r25	; 0x0e
    2686:	8d 85       	ldd	r24, Y+13	; 0x0d
    2688:	9e 85       	ldd	r25, Y+14	; 0x0e
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <main+0x118>
    268e:	8d 87       	std	Y+13, r24	; 0x0d
    2690:	9e 87       	std	Y+14, r25	; 0x0e

	_delay_ms(10);

	//Init tasks

	vTaskStartScheduler();	//Start scheduler loop
    2692:	0e 94 43 0b 	call	0x1686	; 0x1686 <vTaskStartScheduler>

	return 0;
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
}
    269a:	2e 96       	adiw	r28, 0x0e	; 14
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	08 95       	ret

000026a6 <__cmpsf2>:
    26a6:	0e 94 87 13 	call	0x270e	; 0x270e <__fp_cmp>
    26aa:	08 f4       	brcc	.+2      	; 0x26ae <__cmpsf2+0x8>
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	08 95       	ret

000026b0 <__fixunssfsi>:
    26b0:	0e 94 b3 13 	call	0x2766	; 0x2766 <__fp_splitA>
    26b4:	88 f0       	brcs	.+34     	; 0x26d8 <__fixunssfsi+0x28>
    26b6:	9f 57       	subi	r25, 0x7F	; 127
    26b8:	98 f0       	brcs	.+38     	; 0x26e0 <__fixunssfsi+0x30>
    26ba:	b9 2f       	mov	r27, r25
    26bc:	99 27       	eor	r25, r25
    26be:	b7 51       	subi	r27, 0x17	; 23
    26c0:	b0 f0       	brcs	.+44     	; 0x26ee <__fixunssfsi+0x3e>
    26c2:	e1 f0       	breq	.+56     	; 0x26fc <__fixunssfsi+0x4c>
    26c4:	66 0f       	add	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	88 1f       	adc	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	1a f0       	brmi	.+6      	; 0x26d4 <__fixunssfsi+0x24>
    26ce:	ba 95       	dec	r27
    26d0:	c9 f7       	brne	.-14     	; 0x26c4 <__fixunssfsi+0x14>
    26d2:	14 c0       	rjmp	.+40     	; 0x26fc <__fixunssfsi+0x4c>
    26d4:	b1 30       	cpi	r27, 0x01	; 1
    26d6:	91 f0       	breq	.+36     	; 0x26fc <__fixunssfsi+0x4c>
    26d8:	0e 94 cd 13 	call	0x279a	; 0x279a <__fp_zero>
    26dc:	b1 e0       	ldi	r27, 0x01	; 1
    26de:	08 95       	ret
    26e0:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__fp_zero>
    26e4:	67 2f       	mov	r22, r23
    26e6:	78 2f       	mov	r23, r24
    26e8:	88 27       	eor	r24, r24
    26ea:	b8 5f       	subi	r27, 0xF8	; 248
    26ec:	39 f0       	breq	.+14     	; 0x26fc <__fixunssfsi+0x4c>
    26ee:	b9 3f       	cpi	r27, 0xF9	; 249
    26f0:	cc f3       	brlt	.-14     	; 0x26e4 <__fixunssfsi+0x34>
    26f2:	86 95       	lsr	r24
    26f4:	77 95       	ror	r23
    26f6:	67 95       	ror	r22
    26f8:	b3 95       	inc	r27
    26fa:	d9 f7       	brne	.-10     	; 0x26f2 <__fixunssfsi+0x42>
    26fc:	3e f4       	brtc	.+14     	; 0x270c <__fixunssfsi+0x5c>
    26fe:	90 95       	com	r25
    2700:	80 95       	com	r24
    2702:	70 95       	com	r23
    2704:	61 95       	neg	r22
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	8f 4f       	sbci	r24, 0xFF	; 255
    270a:	9f 4f       	sbci	r25, 0xFF	; 255
    270c:	08 95       	ret

0000270e <__fp_cmp>:
    270e:	99 0f       	add	r25, r25
    2710:	00 08       	sbc	r0, r0
    2712:	55 0f       	add	r21, r21
    2714:	aa 0b       	sbc	r26, r26
    2716:	e0 e8       	ldi	r30, 0x80	; 128
    2718:	fe ef       	ldi	r31, 0xFE	; 254
    271a:	16 16       	cp	r1, r22
    271c:	17 06       	cpc	r1, r23
    271e:	e8 07       	cpc	r30, r24
    2720:	f9 07       	cpc	r31, r25
    2722:	c0 f0       	brcs	.+48     	; 0x2754 <__fp_cmp+0x46>
    2724:	12 16       	cp	r1, r18
    2726:	13 06       	cpc	r1, r19
    2728:	e4 07       	cpc	r30, r20
    272a:	f5 07       	cpc	r31, r21
    272c:	98 f0       	brcs	.+38     	; 0x2754 <__fp_cmp+0x46>
    272e:	62 1b       	sub	r22, r18
    2730:	73 0b       	sbc	r23, r19
    2732:	84 0b       	sbc	r24, r20
    2734:	95 0b       	sbc	r25, r21
    2736:	39 f4       	brne	.+14     	; 0x2746 <__fp_cmp+0x38>
    2738:	0a 26       	eor	r0, r26
    273a:	61 f0       	breq	.+24     	; 0x2754 <__fp_cmp+0x46>
    273c:	23 2b       	or	r18, r19
    273e:	24 2b       	or	r18, r20
    2740:	25 2b       	or	r18, r21
    2742:	21 f4       	brne	.+8      	; 0x274c <__fp_cmp+0x3e>
    2744:	08 95       	ret
    2746:	0a 26       	eor	r0, r26
    2748:	09 f4       	brne	.+2      	; 0x274c <__fp_cmp+0x3e>
    274a:	a1 40       	sbci	r26, 0x01	; 1
    274c:	a6 95       	lsr	r26
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	81 1d       	adc	r24, r1
    2752:	81 1d       	adc	r24, r1
    2754:	08 95       	ret

00002756 <__fp_split3>:
    2756:	57 fd       	sbrc	r21, 7
    2758:	90 58       	subi	r25, 0x80	; 128
    275a:	44 0f       	add	r20, r20
    275c:	55 1f       	adc	r21, r21
    275e:	59 f0       	breq	.+22     	; 0x2776 <__fp_splitA+0x10>
    2760:	5f 3f       	cpi	r21, 0xFF	; 255
    2762:	71 f0       	breq	.+28     	; 0x2780 <__fp_splitA+0x1a>
    2764:	47 95       	ror	r20

00002766 <__fp_splitA>:
    2766:	88 0f       	add	r24, r24
    2768:	97 fb       	bst	r25, 7
    276a:	99 1f       	adc	r25, r25
    276c:	61 f0       	breq	.+24     	; 0x2786 <__fp_splitA+0x20>
    276e:	9f 3f       	cpi	r25, 0xFF	; 255
    2770:	79 f0       	breq	.+30     	; 0x2790 <__fp_splitA+0x2a>
    2772:	87 95       	ror	r24
    2774:	08 95       	ret
    2776:	12 16       	cp	r1, r18
    2778:	13 06       	cpc	r1, r19
    277a:	14 06       	cpc	r1, r20
    277c:	55 1f       	adc	r21, r21
    277e:	f2 cf       	rjmp	.-28     	; 0x2764 <__fp_split3+0xe>
    2780:	46 95       	lsr	r20
    2782:	f1 df       	rcall	.-30     	; 0x2766 <__fp_splitA>
    2784:	08 c0       	rjmp	.+16     	; 0x2796 <__fp_splitA+0x30>
    2786:	16 16       	cp	r1, r22
    2788:	17 06       	cpc	r1, r23
    278a:	18 06       	cpc	r1, r24
    278c:	99 1f       	adc	r25, r25
    278e:	f1 cf       	rjmp	.-30     	; 0x2772 <__fp_splitA+0xc>
    2790:	86 95       	lsr	r24
    2792:	71 05       	cpc	r23, r1
    2794:	61 05       	cpc	r22, r1
    2796:	08 94       	sec
    2798:	08 95       	ret

0000279a <__fp_zero>:
    279a:	e8 94       	clt

0000279c <__fp_szero>:
    279c:	bb 27       	eor	r27, r27
    279e:	66 27       	eor	r22, r22
    27a0:	77 27       	eor	r23, r23
    27a2:	cb 01       	movw	r24, r22
    27a4:	97 f9       	bld	r25, 7
    27a6:	08 95       	ret

000027a8 <__gesf2>:
    27a8:	0e 94 87 13 	call	0x270e	; 0x270e <__fp_cmp>
    27ac:	08 f4       	brcc	.+2      	; 0x27b0 <__gesf2+0x8>
    27ae:	8f ef       	ldi	r24, 0xFF	; 255
    27b0:	08 95       	ret

000027b2 <__mulsf3>:
    27b2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__mulsf3x>
    27b6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__fp_round>
    27ba:	0e 94 4f 14 	call	0x289e	; 0x289e <__fp_pscA>
    27be:	38 f0       	brcs	.+14     	; 0x27ce <__mulsf3+0x1c>
    27c0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__fp_pscB>
    27c4:	20 f0       	brcs	.+8      	; 0x27ce <__mulsf3+0x1c>
    27c6:	95 23       	and	r25, r21
    27c8:	11 f0       	breq	.+4      	; 0x27ce <__mulsf3+0x1c>
    27ca:	0c 94 46 14 	jmp	0x288c	; 0x288c <__fp_inf>
    27ce:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__fp_nan>
    27d2:	11 24       	eor	r1, r1
    27d4:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__fp_szero>

000027d8 <__mulsf3x>:
    27d8:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fp_split3>
    27dc:	70 f3       	brcs	.-36     	; 0x27ba <__mulsf3+0x8>

000027de <__mulsf3_pse>:
    27de:	95 9f       	mul	r25, r21
    27e0:	c1 f3       	breq	.-16     	; 0x27d2 <__mulsf3+0x20>
    27e2:	95 0f       	add	r25, r21
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	55 1f       	adc	r21, r21
    27e8:	62 9f       	mul	r22, r18
    27ea:	f0 01       	movw	r30, r0
    27ec:	72 9f       	mul	r23, r18
    27ee:	bb 27       	eor	r27, r27
    27f0:	f0 0d       	add	r31, r0
    27f2:	b1 1d       	adc	r27, r1
    27f4:	63 9f       	mul	r22, r19
    27f6:	aa 27       	eor	r26, r26
    27f8:	f0 0d       	add	r31, r0
    27fa:	b1 1d       	adc	r27, r1
    27fc:	aa 1f       	adc	r26, r26
    27fe:	64 9f       	mul	r22, r20
    2800:	66 27       	eor	r22, r22
    2802:	b0 0d       	add	r27, r0
    2804:	a1 1d       	adc	r26, r1
    2806:	66 1f       	adc	r22, r22
    2808:	82 9f       	mul	r24, r18
    280a:	22 27       	eor	r18, r18
    280c:	b0 0d       	add	r27, r0
    280e:	a1 1d       	adc	r26, r1
    2810:	62 1f       	adc	r22, r18
    2812:	73 9f       	mul	r23, r19
    2814:	b0 0d       	add	r27, r0
    2816:	a1 1d       	adc	r26, r1
    2818:	62 1f       	adc	r22, r18
    281a:	83 9f       	mul	r24, r19
    281c:	a0 0d       	add	r26, r0
    281e:	61 1d       	adc	r22, r1
    2820:	22 1f       	adc	r18, r18
    2822:	74 9f       	mul	r23, r20
    2824:	33 27       	eor	r19, r19
    2826:	a0 0d       	add	r26, r0
    2828:	61 1d       	adc	r22, r1
    282a:	23 1f       	adc	r18, r19
    282c:	84 9f       	mul	r24, r20
    282e:	60 0d       	add	r22, r0
    2830:	21 1d       	adc	r18, r1
    2832:	82 2f       	mov	r24, r18
    2834:	76 2f       	mov	r23, r22
    2836:	6a 2f       	mov	r22, r26
    2838:	11 24       	eor	r1, r1
    283a:	9f 57       	subi	r25, 0x7F	; 127
    283c:	50 40       	sbci	r21, 0x00	; 0
    283e:	9a f0       	brmi	.+38     	; 0x2866 <__mulsf3_pse+0x88>
    2840:	f1 f0       	breq	.+60     	; 0x287e <__mulsf3_pse+0xa0>
    2842:	88 23       	and	r24, r24
    2844:	4a f0       	brmi	.+18     	; 0x2858 <__mulsf3_pse+0x7a>
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	bb 1f       	adc	r27, r27
    284c:	66 1f       	adc	r22, r22
    284e:	77 1f       	adc	r23, r23
    2850:	88 1f       	adc	r24, r24
    2852:	91 50       	subi	r25, 0x01	; 1
    2854:	50 40       	sbci	r21, 0x00	; 0
    2856:	a9 f7       	brne	.-22     	; 0x2842 <__mulsf3_pse+0x64>
    2858:	9e 3f       	cpi	r25, 0xFE	; 254
    285a:	51 05       	cpc	r21, r1
    285c:	80 f0       	brcs	.+32     	; 0x287e <__mulsf3_pse+0xa0>
    285e:	0c 94 46 14 	jmp	0x288c	; 0x288c <__fp_inf>
    2862:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__fp_szero>
    2866:	5f 3f       	cpi	r21, 0xFF	; 255
    2868:	e4 f3       	brlt	.-8      	; 0x2862 <__mulsf3_pse+0x84>
    286a:	98 3e       	cpi	r25, 0xE8	; 232
    286c:	d4 f3       	brlt	.-12     	; 0x2862 <__mulsf3_pse+0x84>
    286e:	86 95       	lsr	r24
    2870:	77 95       	ror	r23
    2872:	67 95       	ror	r22
    2874:	b7 95       	ror	r27
    2876:	f7 95       	ror	r31
    2878:	e7 95       	ror	r30
    287a:	9f 5f       	subi	r25, 0xFF	; 255
    287c:	c1 f7       	brne	.-16     	; 0x286e <__mulsf3_pse+0x90>
    287e:	fe 2b       	or	r31, r30
    2880:	88 0f       	add	r24, r24
    2882:	91 1d       	adc	r25, r1
    2884:	96 95       	lsr	r25
    2886:	87 95       	ror	r24
    2888:	97 f9       	bld	r25, 7
    288a:	08 95       	ret

0000288c <__fp_inf>:
    288c:	97 f9       	bld	r25, 7
    288e:	9f 67       	ori	r25, 0x7F	; 127
    2890:	80 e8       	ldi	r24, 0x80	; 128
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	08 95       	ret

00002898 <__fp_nan>:
    2898:	9f ef       	ldi	r25, 0xFF	; 255
    289a:	80 ec       	ldi	r24, 0xC0	; 192
    289c:	08 95       	ret

0000289e <__fp_pscA>:
    289e:	00 24       	eor	r0, r0
    28a0:	0a 94       	dec	r0
    28a2:	16 16       	cp	r1, r22
    28a4:	17 06       	cpc	r1, r23
    28a6:	18 06       	cpc	r1, r24
    28a8:	09 06       	cpc	r0, r25
    28aa:	08 95       	ret

000028ac <__fp_pscB>:
    28ac:	00 24       	eor	r0, r0
    28ae:	0a 94       	dec	r0
    28b0:	12 16       	cp	r1, r18
    28b2:	13 06       	cpc	r1, r19
    28b4:	14 06       	cpc	r1, r20
    28b6:	05 06       	cpc	r0, r21
    28b8:	08 95       	ret

000028ba <__fp_round>:
    28ba:	09 2e       	mov	r0, r25
    28bc:	03 94       	inc	r0
    28be:	00 0c       	add	r0, r0
    28c0:	11 f4       	brne	.+4      	; 0x28c6 <__fp_round+0xc>
    28c2:	88 23       	and	r24, r24
    28c4:	52 f0       	brmi	.+20     	; 0x28da <__fp_round+0x20>
    28c6:	bb 0f       	add	r27, r27
    28c8:	40 f4       	brcc	.+16     	; 0x28da <__fp_round+0x20>
    28ca:	bf 2b       	or	r27, r31
    28cc:	11 f4       	brne	.+4      	; 0x28d2 <__fp_round+0x18>
    28ce:	60 ff       	sbrs	r22, 0
    28d0:	04 c0       	rjmp	.+8      	; 0x28da <__fp_round+0x20>
    28d2:	6f 5f       	subi	r22, 0xFF	; 255
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255
    28d6:	8f 4f       	sbci	r24, 0xFF	; 255
    28d8:	9f 4f       	sbci	r25, 0xFF	; 255
    28da:	08 95       	ret

000028dc <DriverPowerInit>:
    28dc:	80 e2       	ldi	r24, 0x20	; 32
    28de:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    28e2:	08 95       	ret

000028e4 <DriverPowerVccAuxSet>:
    28e4:	81 11       	cpse	r24, r1
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <DriverPowerVccAuxSet+0xc>
    28e8:	80 e2       	ldi	r24, 0x20	; 32
    28ea:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    28ee:	08 95       	ret
    28f0:	80 e2       	ldi	r24, 0x20	; 32
    28f2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    28f6:	08 95       	ret

000028f8 <vfprintf>:
    28f8:	2f 92       	push	r2
    28fa:	3f 92       	push	r3
    28fc:	4f 92       	push	r4
    28fe:	5f 92       	push	r5
    2900:	6f 92       	push	r6
    2902:	7f 92       	push	r7
    2904:	8f 92       	push	r8
    2906:	9f 92       	push	r9
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	60 97       	sbiw	r28, 0x10	; 16
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	7c 01       	movw	r14, r24
    2928:	1b 01       	movw	r2, r22
    292a:	6a 01       	movw	r12, r20
    292c:	fc 01       	movw	r30, r24
    292e:	16 82       	std	Z+6, r1	; 0x06
    2930:	17 82       	std	Z+7, r1	; 0x07
    2932:	83 81       	ldd	r24, Z+3	; 0x03
    2934:	81 ff       	sbrs	r24, 1
    2936:	44 c3       	rjmp	.+1672   	; 0x2fc0 <vfprintf+0x6c8>
    2938:	9e 01       	movw	r18, r28
    293a:	2f 5f       	subi	r18, 0xFF	; 255
    293c:	3f 4f       	sbci	r19, 0xFF	; 255
    293e:	39 01       	movw	r6, r18
    2940:	f7 01       	movw	r30, r14
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	f1 01       	movw	r30, r2
    2946:	93 fd       	sbrc	r25, 3
    2948:	85 91       	lpm	r24, Z+
    294a:	93 ff       	sbrs	r25, 3
    294c:	81 91       	ld	r24, Z+
    294e:	1f 01       	movw	r2, r30
    2950:	88 23       	and	r24, r24
    2952:	09 f4       	brne	.+2      	; 0x2956 <vfprintf+0x5e>
    2954:	31 c3       	rjmp	.+1634   	; 0x2fb8 <vfprintf+0x6c0>
    2956:	85 32       	cpi	r24, 0x25	; 37
    2958:	39 f4       	brne	.+14     	; 0x2968 <vfprintf+0x70>
    295a:	93 fd       	sbrc	r25, 3
    295c:	85 91       	lpm	r24, Z+
    295e:	93 ff       	sbrs	r25, 3
    2960:	81 91       	ld	r24, Z+
    2962:	1f 01       	movw	r2, r30
    2964:	85 32       	cpi	r24, 0x25	; 37
    2966:	39 f4       	brne	.+14     	; 0x2976 <vfprintf+0x7e>
    2968:	b7 01       	movw	r22, r14
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2970:	56 01       	movw	r10, r12
    2972:	65 01       	movw	r12, r10
    2974:	e5 cf       	rjmp	.-54     	; 0x2940 <vfprintf+0x48>
    2976:	10 e0       	ldi	r17, 0x00	; 0
    2978:	51 2c       	mov	r5, r1
    297a:	91 2c       	mov	r9, r1
    297c:	ff e1       	ldi	r31, 0x1F	; 31
    297e:	f9 15       	cp	r31, r9
    2980:	d8 f0       	brcs	.+54     	; 0x29b8 <vfprintf+0xc0>
    2982:	8b 32       	cpi	r24, 0x2B	; 43
    2984:	79 f0       	breq	.+30     	; 0x29a4 <vfprintf+0xac>
    2986:	38 f4       	brcc	.+14     	; 0x2996 <vfprintf+0x9e>
    2988:	80 32       	cpi	r24, 0x20	; 32
    298a:	79 f0       	breq	.+30     	; 0x29aa <vfprintf+0xb2>
    298c:	83 32       	cpi	r24, 0x23	; 35
    298e:	a1 f4       	brne	.+40     	; 0x29b8 <vfprintf+0xc0>
    2990:	f9 2d       	mov	r31, r9
    2992:	f0 61       	ori	r31, 0x10	; 16
    2994:	2e c0       	rjmp	.+92     	; 0x29f2 <vfprintf+0xfa>
    2996:	8d 32       	cpi	r24, 0x2D	; 45
    2998:	61 f0       	breq	.+24     	; 0x29b2 <vfprintf+0xba>
    299a:	80 33       	cpi	r24, 0x30	; 48
    299c:	69 f4       	brne	.+26     	; 0x29b8 <vfprintf+0xc0>
    299e:	29 2d       	mov	r18, r9
    29a0:	21 60       	ori	r18, 0x01	; 1
    29a2:	2d c0       	rjmp	.+90     	; 0x29fe <vfprintf+0x106>
    29a4:	39 2d       	mov	r19, r9
    29a6:	32 60       	ori	r19, 0x02	; 2
    29a8:	93 2e       	mov	r9, r19
    29aa:	89 2d       	mov	r24, r9
    29ac:	84 60       	ori	r24, 0x04	; 4
    29ae:	98 2e       	mov	r9, r24
    29b0:	2a c0       	rjmp	.+84     	; 0x2a06 <vfprintf+0x10e>
    29b2:	e9 2d       	mov	r30, r9
    29b4:	e8 60       	ori	r30, 0x08	; 8
    29b6:	15 c0       	rjmp	.+42     	; 0x29e2 <vfprintf+0xea>
    29b8:	97 fc       	sbrc	r9, 7
    29ba:	2d c0       	rjmp	.+90     	; 0x2a16 <vfprintf+0x11e>
    29bc:	20 ed       	ldi	r18, 0xD0	; 208
    29be:	28 0f       	add	r18, r24
    29c0:	2a 30       	cpi	r18, 0x0A	; 10
    29c2:	88 f4       	brcc	.+34     	; 0x29e6 <vfprintf+0xee>
    29c4:	96 fe       	sbrs	r9, 6
    29c6:	06 c0       	rjmp	.+12     	; 0x29d4 <vfprintf+0xdc>
    29c8:	3a e0       	ldi	r19, 0x0A	; 10
    29ca:	13 9f       	mul	r17, r19
    29cc:	20 0d       	add	r18, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	12 2f       	mov	r17, r18
    29d2:	19 c0       	rjmp	.+50     	; 0x2a06 <vfprintf+0x10e>
    29d4:	8a e0       	ldi	r24, 0x0A	; 10
    29d6:	58 9e       	mul	r5, r24
    29d8:	20 0d       	add	r18, r0
    29da:	11 24       	eor	r1, r1
    29dc:	52 2e       	mov	r5, r18
    29de:	e9 2d       	mov	r30, r9
    29e0:	e0 62       	ori	r30, 0x20	; 32
    29e2:	9e 2e       	mov	r9, r30
    29e4:	10 c0       	rjmp	.+32     	; 0x2a06 <vfprintf+0x10e>
    29e6:	8e 32       	cpi	r24, 0x2E	; 46
    29e8:	31 f4       	brne	.+12     	; 0x29f6 <vfprintf+0xfe>
    29ea:	96 fc       	sbrc	r9, 6
    29ec:	e5 c2       	rjmp	.+1482   	; 0x2fb8 <vfprintf+0x6c0>
    29ee:	f9 2d       	mov	r31, r9
    29f0:	f0 64       	ori	r31, 0x40	; 64
    29f2:	9f 2e       	mov	r9, r31
    29f4:	08 c0       	rjmp	.+16     	; 0x2a06 <vfprintf+0x10e>
    29f6:	8c 36       	cpi	r24, 0x6C	; 108
    29f8:	21 f4       	brne	.+8      	; 0x2a02 <vfprintf+0x10a>
    29fa:	29 2d       	mov	r18, r9
    29fc:	20 68       	ori	r18, 0x80	; 128
    29fe:	92 2e       	mov	r9, r18
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <vfprintf+0x10e>
    2a02:	88 36       	cpi	r24, 0x68	; 104
    2a04:	41 f4       	brne	.+16     	; 0x2a16 <vfprintf+0x11e>
    2a06:	f1 01       	movw	r30, r2
    2a08:	93 fd       	sbrc	r25, 3
    2a0a:	85 91       	lpm	r24, Z+
    2a0c:	93 ff       	sbrs	r25, 3
    2a0e:	81 91       	ld	r24, Z+
    2a10:	1f 01       	movw	r2, r30
    2a12:	81 11       	cpse	r24, r1
    2a14:	b3 cf       	rjmp	.-154    	; 0x297c <vfprintf+0x84>
    2a16:	9b eb       	ldi	r25, 0xBB	; 187
    2a18:	98 0f       	add	r25, r24
    2a1a:	93 30       	cpi	r25, 0x03	; 3
    2a1c:	20 f4       	brcc	.+8      	; 0x2a26 <vfprintf+0x12e>
    2a1e:	99 2d       	mov	r25, r9
    2a20:	90 61       	ori	r25, 0x10	; 16
    2a22:	80 5e       	subi	r24, 0xE0	; 224
    2a24:	07 c0       	rjmp	.+14     	; 0x2a34 <vfprintf+0x13c>
    2a26:	9b e9       	ldi	r25, 0x9B	; 155
    2a28:	98 0f       	add	r25, r24
    2a2a:	93 30       	cpi	r25, 0x03	; 3
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <vfprintf+0x138>
    2a2e:	66 c1       	rjmp	.+716    	; 0x2cfc <vfprintf+0x404>
    2a30:	99 2d       	mov	r25, r9
    2a32:	9f 7e       	andi	r25, 0xEF	; 239
    2a34:	96 ff       	sbrs	r25, 6
    2a36:	16 e0       	ldi	r17, 0x06	; 6
    2a38:	9f 73       	andi	r25, 0x3F	; 63
    2a3a:	99 2e       	mov	r9, r25
    2a3c:	85 36       	cpi	r24, 0x65	; 101
    2a3e:	19 f4       	brne	.+6      	; 0x2a46 <vfprintf+0x14e>
    2a40:	90 64       	ori	r25, 0x40	; 64
    2a42:	99 2e       	mov	r9, r25
    2a44:	08 c0       	rjmp	.+16     	; 0x2a56 <vfprintf+0x15e>
    2a46:	86 36       	cpi	r24, 0x66	; 102
    2a48:	21 f4       	brne	.+8      	; 0x2a52 <vfprintf+0x15a>
    2a4a:	39 2f       	mov	r19, r25
    2a4c:	30 68       	ori	r19, 0x80	; 128
    2a4e:	93 2e       	mov	r9, r19
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <vfprintf+0x15e>
    2a52:	11 11       	cpse	r17, r1
    2a54:	11 50       	subi	r17, 0x01	; 1
    2a56:	97 fe       	sbrs	r9, 7
    2a58:	07 c0       	rjmp	.+14     	; 0x2a68 <vfprintf+0x170>
    2a5a:	1c 33       	cpi	r17, 0x3C	; 60
    2a5c:	50 f4       	brcc	.+20     	; 0x2a72 <vfprintf+0x17a>
    2a5e:	44 24       	eor	r4, r4
    2a60:	43 94       	inc	r4
    2a62:	41 0e       	add	r4, r17
    2a64:	27 e0       	ldi	r18, 0x07	; 7
    2a66:	0b c0       	rjmp	.+22     	; 0x2a7e <vfprintf+0x186>
    2a68:	18 30       	cpi	r17, 0x08	; 8
    2a6a:	38 f0       	brcs	.+14     	; 0x2a7a <vfprintf+0x182>
    2a6c:	27 e0       	ldi	r18, 0x07	; 7
    2a6e:	17 e0       	ldi	r17, 0x07	; 7
    2a70:	05 c0       	rjmp	.+10     	; 0x2a7c <vfprintf+0x184>
    2a72:	27 e0       	ldi	r18, 0x07	; 7
    2a74:	9c e3       	ldi	r25, 0x3C	; 60
    2a76:	49 2e       	mov	r4, r25
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <vfprintf+0x186>
    2a7a:	21 2f       	mov	r18, r17
    2a7c:	41 2c       	mov	r4, r1
    2a7e:	56 01       	movw	r10, r12
    2a80:	84 e0       	ldi	r24, 0x04	; 4
    2a82:	a8 0e       	add	r10, r24
    2a84:	b1 1c       	adc	r11, r1
    2a86:	f6 01       	movw	r30, r12
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	04 2d       	mov	r16, r4
    2a92:	a3 01       	movw	r20, r6
    2a94:	0e 94 1c 18 	call	0x3038	; 0x3038 <__ftoa_engine>
    2a98:	6c 01       	movw	r12, r24
    2a9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a9c:	fc 87       	std	Y+12, r31	; 0x0c
    2a9e:	f0 ff       	sbrs	r31, 0
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <vfprintf+0x1ae>
    2aa2:	f3 ff       	sbrs	r31, 3
    2aa4:	06 c0       	rjmp	.+12     	; 0x2ab2 <vfprintf+0x1ba>
    2aa6:	91 fc       	sbrc	r9, 1
    2aa8:	06 c0       	rjmp	.+12     	; 0x2ab6 <vfprintf+0x1be>
    2aaa:	92 fe       	sbrs	r9, 2
    2aac:	06 c0       	rjmp	.+12     	; 0x2aba <vfprintf+0x1c2>
    2aae:	00 e2       	ldi	r16, 0x20	; 32
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <vfprintf+0x1c4>
    2ab2:	0d e2       	ldi	r16, 0x2D	; 45
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <vfprintf+0x1c4>
    2ab6:	0b e2       	ldi	r16, 0x2B	; 43
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <vfprintf+0x1c4>
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2abe:	8c 70       	andi	r24, 0x0C	; 12
    2ac0:	19 f0       	breq	.+6      	; 0x2ac8 <vfprintf+0x1d0>
    2ac2:	01 11       	cpse	r16, r1
    2ac4:	5a c2       	rjmp	.+1204   	; 0x2f7a <vfprintf+0x682>
    2ac6:	9b c2       	rjmp	.+1334   	; 0x2ffe <vfprintf+0x706>
    2ac8:	97 fe       	sbrs	r9, 7
    2aca:	10 c0       	rjmp	.+32     	; 0x2aec <vfprintf+0x1f4>
    2acc:	4c 0c       	add	r4, r12
    2ace:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ad0:	f4 ff       	sbrs	r31, 4
    2ad2:	04 c0       	rjmp	.+8      	; 0x2adc <vfprintf+0x1e4>
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	81 33       	cpi	r24, 0x31	; 49
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <vfprintf+0x1e4>
    2ada:	4a 94       	dec	r4
    2adc:	14 14       	cp	r1, r4
    2ade:	74 f5       	brge	.+92     	; 0x2b3c <vfprintf+0x244>
    2ae0:	28 e0       	ldi	r18, 0x08	; 8
    2ae2:	24 15       	cp	r18, r4
    2ae4:	78 f5       	brcc	.+94     	; 0x2b44 <vfprintf+0x24c>
    2ae6:	88 e0       	ldi	r24, 0x08	; 8
    2ae8:	48 2e       	mov	r4, r24
    2aea:	2c c0       	rjmp	.+88     	; 0x2b44 <vfprintf+0x24c>
    2aec:	96 fc       	sbrc	r9, 6
    2aee:	2a c0       	rjmp	.+84     	; 0x2b44 <vfprintf+0x24c>
    2af0:	81 2f       	mov	r24, r17
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	8c 15       	cp	r24, r12
    2af6:	9d 05       	cpc	r25, r13
    2af8:	9c f0       	brlt	.+38     	; 0x2b20 <vfprintf+0x228>
    2afa:	3c ef       	ldi	r19, 0xFC	; 252
    2afc:	c3 16       	cp	r12, r19
    2afe:	3f ef       	ldi	r19, 0xFF	; 255
    2b00:	d3 06       	cpc	r13, r19
    2b02:	74 f0       	brlt	.+28     	; 0x2b20 <vfprintf+0x228>
    2b04:	89 2d       	mov	r24, r9
    2b06:	80 68       	ori	r24, 0x80	; 128
    2b08:	98 2e       	mov	r9, r24
    2b0a:	0a c0       	rjmp	.+20     	; 0x2b20 <vfprintf+0x228>
    2b0c:	e2 e0       	ldi	r30, 0x02	; 2
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	ec 0f       	add	r30, r28
    2b12:	fd 1f       	adc	r31, r29
    2b14:	e1 0f       	add	r30, r17
    2b16:	f1 1d       	adc	r31, r1
    2b18:	80 81       	ld	r24, Z
    2b1a:	80 33       	cpi	r24, 0x30	; 48
    2b1c:	19 f4       	brne	.+6      	; 0x2b24 <vfprintf+0x22c>
    2b1e:	11 50       	subi	r17, 0x01	; 1
    2b20:	11 11       	cpse	r17, r1
    2b22:	f4 cf       	rjmp	.-24     	; 0x2b0c <vfprintf+0x214>
    2b24:	97 fe       	sbrs	r9, 7
    2b26:	0e c0       	rjmp	.+28     	; 0x2b44 <vfprintf+0x24c>
    2b28:	44 24       	eor	r4, r4
    2b2a:	43 94       	inc	r4
    2b2c:	41 0e       	add	r4, r17
    2b2e:	81 2f       	mov	r24, r17
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	c8 16       	cp	r12, r24
    2b34:	d9 06       	cpc	r13, r25
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <vfprintf+0x24a>
    2b38:	1c 19       	sub	r17, r12
    2b3a:	04 c0       	rjmp	.+8      	; 0x2b44 <vfprintf+0x24c>
    2b3c:	44 24       	eor	r4, r4
    2b3e:	43 94       	inc	r4
    2b40:	01 c0       	rjmp	.+2      	; 0x2b44 <vfprintf+0x24c>
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	97 fe       	sbrs	r9, 7
    2b46:	06 c0       	rjmp	.+12     	; 0x2b54 <vfprintf+0x25c>
    2b48:	1c 14       	cp	r1, r12
    2b4a:	1d 04       	cpc	r1, r13
    2b4c:	34 f4       	brge	.+12     	; 0x2b5a <vfprintf+0x262>
    2b4e:	c6 01       	movw	r24, r12
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	05 c0       	rjmp	.+10     	; 0x2b5e <vfprintf+0x266>
    2b54:	85 e0       	ldi	r24, 0x05	; 5
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <vfprintf+0x266>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	01 11       	cpse	r16, r1
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	11 23       	and	r17, r17
    2b64:	31 f0       	breq	.+12     	; 0x2b72 <vfprintf+0x27a>
    2b66:	21 2f       	mov	r18, r17
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	2f 5f       	subi	r18, 0xFF	; 255
    2b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6e:	82 0f       	add	r24, r18
    2b70:	93 1f       	adc	r25, r19
    2b72:	25 2d       	mov	r18, r5
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	82 17       	cp	r24, r18
    2b78:	93 07       	cpc	r25, r19
    2b7a:	14 f4       	brge	.+4      	; 0x2b80 <vfprintf+0x288>
    2b7c:	58 1a       	sub	r5, r24
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <vfprintf+0x28a>
    2b80:	51 2c       	mov	r5, r1
    2b82:	89 2d       	mov	r24, r9
    2b84:	89 70       	andi	r24, 0x09	; 9
    2b86:	49 f4       	brne	.+18     	; 0x2b9a <vfprintf+0x2a2>
    2b88:	55 20       	and	r5, r5
    2b8a:	39 f0       	breq	.+14     	; 0x2b9a <vfprintf+0x2a2>
    2b8c:	b7 01       	movw	r22, r14
    2b8e:	80 e2       	ldi	r24, 0x20	; 32
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2b96:	5a 94       	dec	r5
    2b98:	f7 cf       	rjmp	.-18     	; 0x2b88 <vfprintf+0x290>
    2b9a:	00 23       	and	r16, r16
    2b9c:	29 f0       	breq	.+10     	; 0x2ba8 <vfprintf+0x2b0>
    2b9e:	b7 01       	movw	r22, r14
    2ba0:	80 2f       	mov	r24, r16
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2ba8:	93 fc       	sbrc	r9, 3
    2baa:	09 c0       	rjmp	.+18     	; 0x2bbe <vfprintf+0x2c6>
    2bac:	55 20       	and	r5, r5
    2bae:	39 f0       	breq	.+14     	; 0x2bbe <vfprintf+0x2c6>
    2bb0:	b7 01       	movw	r22, r14
    2bb2:	80 e3       	ldi	r24, 0x30	; 48
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2bba:	5a 94       	dec	r5
    2bbc:	f7 cf       	rjmp	.-18     	; 0x2bac <vfprintf+0x2b4>
    2bbe:	97 fe       	sbrs	r9, 7
    2bc0:	4c c0       	rjmp	.+152    	; 0x2c5a <vfprintf+0x362>
    2bc2:	46 01       	movw	r8, r12
    2bc4:	d7 fe       	sbrs	r13, 7
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <vfprintf+0x2d4>
    2bc8:	81 2c       	mov	r8, r1
    2bca:	91 2c       	mov	r9, r1
    2bcc:	c6 01       	movw	r24, r12
    2bce:	88 19       	sub	r24, r8
    2bd0:	99 09       	sbc	r25, r9
    2bd2:	f3 01       	movw	r30, r6
    2bd4:	e8 0f       	add	r30, r24
    2bd6:	f9 1f       	adc	r31, r25
    2bd8:	ed 87       	std	Y+13, r30	; 0x0d
    2bda:	fe 87       	std	Y+14, r31	; 0x0e
    2bdc:	96 01       	movw	r18, r12
    2bde:	24 19       	sub	r18, r4
    2be0:	31 09       	sbc	r19, r1
    2be2:	2f 87       	std	Y+15, r18	; 0x0f
    2be4:	38 8b       	std	Y+16, r19	; 0x10
    2be6:	01 2f       	mov	r16, r17
    2be8:	10 e0       	ldi	r17, 0x00	; 0
    2bea:	11 95       	neg	r17
    2bec:	01 95       	neg	r16
    2bee:	11 09       	sbc	r17, r1
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	83 16       	cp	r8, r19
    2bf4:	93 06       	cpc	r9, r19
    2bf6:	29 f4       	brne	.+10     	; 0x2c02 <vfprintf+0x30a>
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	8e e2       	ldi	r24, 0x2E	; 46
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2c02:	c8 14       	cp	r12, r8
    2c04:	d9 04       	cpc	r13, r9
    2c06:	4c f0       	brlt	.+18     	; 0x2c1a <vfprintf+0x322>
    2c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0a:	98 89       	ldd	r25, Y+16	; 0x10
    2c0c:	88 15       	cp	r24, r8
    2c0e:	99 05       	cpc	r25, r9
    2c10:	24 f4       	brge	.+8      	; 0x2c1a <vfprintf+0x322>
    2c12:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c14:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c16:	81 81       	ldd	r24, Z+1	; 0x01
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <vfprintf+0x324>
    2c1a:	80 e3       	ldi	r24, 0x30	; 48
    2c1c:	f1 e0       	ldi	r31, 0x01	; 1
    2c1e:	8f 1a       	sub	r8, r31
    2c20:	91 08       	sbc	r9, r1
    2c22:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c24:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c26:	2f 5f       	subi	r18, 0xFF	; 255
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	2d 87       	std	Y+13, r18	; 0x0d
    2c2c:	3e 87       	std	Y+14, r19	; 0x0e
    2c2e:	80 16       	cp	r8, r16
    2c30:	91 06       	cpc	r9, r17
    2c32:	2c f0       	brlt	.+10     	; 0x2c3e <vfprintf+0x346>
    2c34:	b7 01       	movw	r22, r14
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2c3c:	d9 cf       	rjmp	.-78     	; 0x2bf0 <vfprintf+0x2f8>
    2c3e:	c8 14       	cp	r12, r8
    2c40:	d9 04       	cpc	r13, r9
    2c42:	41 f4       	brne	.+16     	; 0x2c54 <vfprintf+0x35c>
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	96 33       	cpi	r25, 0x36	; 54
    2c48:	20 f4       	brcc	.+8      	; 0x2c52 <vfprintf+0x35a>
    2c4a:	95 33       	cpi	r25, 0x35	; 53
    2c4c:	19 f4       	brne	.+6      	; 0x2c54 <vfprintf+0x35c>
    2c4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c50:	34 ff       	sbrs	r19, 4
    2c52:	81 e3       	ldi	r24, 0x31	; 49
    2c54:	b7 01       	movw	r22, r14
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	4e c0       	rjmp	.+156    	; 0x2cf6 <vfprintf+0x3fe>
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	81 33       	cpi	r24, 0x31	; 49
    2c5e:	19 f0       	breq	.+6      	; 0x2c66 <vfprintf+0x36e>
    2c60:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c62:	9f 7e       	andi	r25, 0xEF	; 239
    2c64:	9c 87       	std	Y+12, r25	; 0x0c
    2c66:	b7 01       	movw	r22, r14
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2c6e:	11 11       	cpse	r17, r1
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <vfprintf+0x384>
    2c72:	94 fc       	sbrc	r9, 4
    2c74:	18 c0       	rjmp	.+48     	; 0x2ca6 <vfprintf+0x3ae>
    2c76:	85 e6       	ldi	r24, 0x65	; 101
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	17 c0       	rjmp	.+46     	; 0x2caa <vfprintf+0x3b2>
    2c7c:	b7 01       	movw	r22, r14
    2c7e:	8e e2       	ldi	r24, 0x2E	; 46
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2c86:	1e 5f       	subi	r17, 0xFE	; 254
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	01 e0       	ldi	r16, 0x01	; 1
    2c8c:	08 0f       	add	r16, r24
    2c8e:	f3 01       	movw	r30, r6
    2c90:	e8 0f       	add	r30, r24
    2c92:	f1 1d       	adc	r31, r1
    2c94:	80 81       	ld	r24, Z
    2c96:	b7 01       	movw	r22, r14
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2c9e:	80 2f       	mov	r24, r16
    2ca0:	01 13       	cpse	r16, r17
    2ca2:	f3 cf       	rjmp	.-26     	; 0x2c8a <vfprintf+0x392>
    2ca4:	e6 cf       	rjmp	.-52     	; 0x2c72 <vfprintf+0x37a>
    2ca6:	85 e4       	ldi	r24, 0x45	; 69
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	b7 01       	movw	r22, r14
    2cac:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2cb0:	d7 fc       	sbrc	r13, 7
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <vfprintf+0x3c8>
    2cb4:	c1 14       	cp	r12, r1
    2cb6:	d1 04       	cpc	r13, r1
    2cb8:	41 f4       	brne	.+16     	; 0x2cca <vfprintf+0x3d2>
    2cba:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cbc:	e4 ff       	sbrs	r30, 4
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <vfprintf+0x3d2>
    2cc0:	d1 94       	neg	r13
    2cc2:	c1 94       	neg	r12
    2cc4:	d1 08       	sbc	r13, r1
    2cc6:	8d e2       	ldi	r24, 0x2D	; 45
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <vfprintf+0x3d4>
    2cca:	8b e2       	ldi	r24, 0x2B	; 43
    2ccc:	b7 01       	movw	r22, r14
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2cd4:	80 e3       	ldi	r24, 0x30	; 48
    2cd6:	2a e0       	ldi	r18, 0x0A	; 10
    2cd8:	c2 16       	cp	r12, r18
    2cda:	d1 04       	cpc	r13, r1
    2cdc:	2c f0       	brlt	.+10     	; 0x2ce8 <vfprintf+0x3f0>
    2cde:	8f 5f       	subi	r24, 0xFF	; 255
    2ce0:	fa e0       	ldi	r31, 0x0A	; 10
    2ce2:	cf 1a       	sub	r12, r31
    2ce4:	d1 08       	sbc	r13, r1
    2ce6:	f7 cf       	rjmp	.-18     	; 0x2cd6 <vfprintf+0x3de>
    2ce8:	b7 01       	movw	r22, r14
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	c6 01       	movw	r24, r12
    2cf4:	c0 96       	adiw	r24, 0x30	; 48
    2cf6:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2cfa:	54 c1       	rjmp	.+680    	; 0x2fa4 <vfprintf+0x6ac>
    2cfc:	83 36       	cpi	r24, 0x63	; 99
    2cfe:	31 f0       	breq	.+12     	; 0x2d0c <vfprintf+0x414>
    2d00:	83 37       	cpi	r24, 0x73	; 115
    2d02:	79 f0       	breq	.+30     	; 0x2d22 <vfprintf+0x42a>
    2d04:	83 35       	cpi	r24, 0x53	; 83
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <vfprintf+0x412>
    2d08:	56 c0       	rjmp	.+172    	; 0x2db6 <vfprintf+0x4be>
    2d0a:	20 c0       	rjmp	.+64     	; 0x2d4c <vfprintf+0x454>
    2d0c:	56 01       	movw	r10, r12
    2d0e:	32 e0       	ldi	r19, 0x02	; 2
    2d10:	a3 0e       	add	r10, r19
    2d12:	b1 1c       	adc	r11, r1
    2d14:	f6 01       	movw	r30, r12
    2d16:	80 81       	ld	r24, Z
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	01 e0       	ldi	r16, 0x01	; 1
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	63 01       	movw	r12, r6
    2d20:	12 c0       	rjmp	.+36     	; 0x2d46 <vfprintf+0x44e>
    2d22:	56 01       	movw	r10, r12
    2d24:	f2 e0       	ldi	r31, 0x02	; 2
    2d26:	af 0e       	add	r10, r31
    2d28:	b1 1c       	adc	r11, r1
    2d2a:	f6 01       	movw	r30, r12
    2d2c:	c0 80       	ld	r12, Z
    2d2e:	d1 80       	ldd	r13, Z+1	; 0x01
    2d30:	96 fe       	sbrs	r9, 6
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <vfprintf+0x442>
    2d34:	61 2f       	mov	r22, r17
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <vfprintf+0x446>
    2d3a:	6f ef       	ldi	r22, 0xFF	; 255
    2d3c:	7f ef       	ldi	r23, 0xFF	; 255
    2d3e:	c6 01       	movw	r24, r12
    2d40:	0e 94 06 19 	call	0x320c	; 0x320c <strnlen>
    2d44:	8c 01       	movw	r16, r24
    2d46:	f9 2d       	mov	r31, r9
    2d48:	ff 77       	andi	r31, 0x7F	; 127
    2d4a:	14 c0       	rjmp	.+40     	; 0x2d74 <vfprintf+0x47c>
    2d4c:	56 01       	movw	r10, r12
    2d4e:	22 e0       	ldi	r18, 0x02	; 2
    2d50:	a2 0e       	add	r10, r18
    2d52:	b1 1c       	adc	r11, r1
    2d54:	f6 01       	movw	r30, r12
    2d56:	c0 80       	ld	r12, Z
    2d58:	d1 80       	ldd	r13, Z+1	; 0x01
    2d5a:	96 fe       	sbrs	r9, 6
    2d5c:	03 c0       	rjmp	.+6      	; 0x2d64 <vfprintf+0x46c>
    2d5e:	61 2f       	mov	r22, r17
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <vfprintf+0x470>
    2d64:	6f ef       	ldi	r22, 0xFF	; 255
    2d66:	7f ef       	ldi	r23, 0xFF	; 255
    2d68:	c6 01       	movw	r24, r12
    2d6a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <strnlen_P>
    2d6e:	8c 01       	movw	r16, r24
    2d70:	f9 2d       	mov	r31, r9
    2d72:	f0 68       	ori	r31, 0x80	; 128
    2d74:	9f 2e       	mov	r9, r31
    2d76:	f3 fd       	sbrc	r31, 3
    2d78:	1a c0       	rjmp	.+52     	; 0x2dae <vfprintf+0x4b6>
    2d7a:	85 2d       	mov	r24, r5
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	08 17       	cp	r16, r24
    2d80:	19 07       	cpc	r17, r25
    2d82:	a8 f4       	brcc	.+42     	; 0x2dae <vfprintf+0x4b6>
    2d84:	b7 01       	movw	r22, r14
    2d86:	80 e2       	ldi	r24, 0x20	; 32
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2d8e:	5a 94       	dec	r5
    2d90:	f4 cf       	rjmp	.-24     	; 0x2d7a <vfprintf+0x482>
    2d92:	f6 01       	movw	r30, r12
    2d94:	97 fc       	sbrc	r9, 7
    2d96:	85 91       	lpm	r24, Z+
    2d98:	97 fe       	sbrs	r9, 7
    2d9a:	81 91       	ld	r24, Z+
    2d9c:	6f 01       	movw	r12, r30
    2d9e:	b7 01       	movw	r22, r14
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2da6:	51 10       	cpse	r5, r1
    2da8:	5a 94       	dec	r5
    2daa:	01 50       	subi	r16, 0x01	; 1
    2dac:	11 09       	sbc	r17, r1
    2dae:	01 15       	cp	r16, r1
    2db0:	11 05       	cpc	r17, r1
    2db2:	79 f7       	brne	.-34     	; 0x2d92 <vfprintf+0x49a>
    2db4:	f7 c0       	rjmp	.+494    	; 0x2fa4 <vfprintf+0x6ac>
    2db6:	84 36       	cpi	r24, 0x64	; 100
    2db8:	11 f0       	breq	.+4      	; 0x2dbe <vfprintf+0x4c6>
    2dba:	89 36       	cpi	r24, 0x69	; 105
    2dbc:	61 f5       	brne	.+88     	; 0x2e16 <vfprintf+0x51e>
    2dbe:	56 01       	movw	r10, r12
    2dc0:	97 fe       	sbrs	r9, 7
    2dc2:	09 c0       	rjmp	.+18     	; 0x2dd6 <vfprintf+0x4de>
    2dc4:	24 e0       	ldi	r18, 0x04	; 4
    2dc6:	a2 0e       	add	r10, r18
    2dc8:	b1 1c       	adc	r11, r1
    2dca:	f6 01       	movw	r30, r12
    2dcc:	60 81       	ld	r22, Z
    2dce:	71 81       	ldd	r23, Z+1	; 0x01
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	0a c0       	rjmp	.+20     	; 0x2dea <vfprintf+0x4f2>
    2dd6:	f2 e0       	ldi	r31, 0x02	; 2
    2dd8:	af 0e       	add	r10, r31
    2dda:	b1 1c       	adc	r11, r1
    2ddc:	f6 01       	movw	r30, r12
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	07 2e       	mov	r0, r23
    2de4:	00 0c       	add	r0, r0
    2de6:	88 0b       	sbc	r24, r24
    2de8:	99 0b       	sbc	r25, r25
    2dea:	f9 2d       	mov	r31, r9
    2dec:	ff 76       	andi	r31, 0x6F	; 111
    2dee:	9f 2e       	mov	r9, r31
    2df0:	97 ff       	sbrs	r25, 7
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <vfprintf+0x50e>
    2df4:	90 95       	com	r25
    2df6:	80 95       	com	r24
    2df8:	70 95       	com	r23
    2dfa:	61 95       	neg	r22
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    2e00:	9f 4f       	sbci	r25, 0xFF	; 255
    2e02:	f0 68       	ori	r31, 0x80	; 128
    2e04:	9f 2e       	mov	r9, r31
    2e06:	2a e0       	ldi	r18, 0x0A	; 10
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	a3 01       	movw	r20, r6
    2e0c:	0e 94 84 19 	call	0x3308	; 0x3308 <__ultoa_invert>
    2e10:	c8 2e       	mov	r12, r24
    2e12:	c6 18       	sub	r12, r6
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <vfprintf+0x59c>
    2e16:	09 2d       	mov	r16, r9
    2e18:	85 37       	cpi	r24, 0x75	; 117
    2e1a:	21 f4       	brne	.+8      	; 0x2e24 <vfprintf+0x52c>
    2e1c:	0f 7e       	andi	r16, 0xEF	; 239
    2e1e:	2a e0       	ldi	r18, 0x0A	; 10
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	1d c0       	rjmp	.+58     	; 0x2e5e <vfprintf+0x566>
    2e24:	09 7f       	andi	r16, 0xF9	; 249
    2e26:	8f 36       	cpi	r24, 0x6F	; 111
    2e28:	91 f0       	breq	.+36     	; 0x2e4e <vfprintf+0x556>
    2e2a:	18 f4       	brcc	.+6      	; 0x2e32 <vfprintf+0x53a>
    2e2c:	88 35       	cpi	r24, 0x58	; 88
    2e2e:	59 f0       	breq	.+22     	; 0x2e46 <vfprintf+0x54e>
    2e30:	c3 c0       	rjmp	.+390    	; 0x2fb8 <vfprintf+0x6c0>
    2e32:	80 37       	cpi	r24, 0x70	; 112
    2e34:	19 f0       	breq	.+6      	; 0x2e3c <vfprintf+0x544>
    2e36:	88 37       	cpi	r24, 0x78	; 120
    2e38:	11 f0       	breq	.+4      	; 0x2e3e <vfprintf+0x546>
    2e3a:	be c0       	rjmp	.+380    	; 0x2fb8 <vfprintf+0x6c0>
    2e3c:	00 61       	ori	r16, 0x10	; 16
    2e3e:	04 ff       	sbrs	r16, 4
    2e40:	09 c0       	rjmp	.+18     	; 0x2e54 <vfprintf+0x55c>
    2e42:	04 60       	ori	r16, 0x04	; 4
    2e44:	07 c0       	rjmp	.+14     	; 0x2e54 <vfprintf+0x55c>
    2e46:	94 fe       	sbrs	r9, 4
    2e48:	08 c0       	rjmp	.+16     	; 0x2e5a <vfprintf+0x562>
    2e4a:	06 60       	ori	r16, 0x06	; 6
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <vfprintf+0x562>
    2e4e:	28 e0       	ldi	r18, 0x08	; 8
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	05 c0       	rjmp	.+10     	; 0x2e5e <vfprintf+0x566>
    2e54:	20 e1       	ldi	r18, 0x10	; 16
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <vfprintf+0x566>
    2e5a:	20 e1       	ldi	r18, 0x10	; 16
    2e5c:	32 e0       	ldi	r19, 0x02	; 2
    2e5e:	56 01       	movw	r10, r12
    2e60:	07 ff       	sbrs	r16, 7
    2e62:	09 c0       	rjmp	.+18     	; 0x2e76 <vfprintf+0x57e>
    2e64:	84 e0       	ldi	r24, 0x04	; 4
    2e66:	a8 0e       	add	r10, r24
    2e68:	b1 1c       	adc	r11, r1
    2e6a:	f6 01       	movw	r30, r12
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	08 c0       	rjmp	.+16     	; 0x2e86 <vfprintf+0x58e>
    2e76:	f2 e0       	ldi	r31, 0x02	; 2
    2e78:	af 0e       	add	r10, r31
    2e7a:	b1 1c       	adc	r11, r1
    2e7c:	f6 01       	movw	r30, r12
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a3 01       	movw	r20, r6
    2e88:	0e 94 84 19 	call	0x3308	; 0x3308 <__ultoa_invert>
    2e8c:	c8 2e       	mov	r12, r24
    2e8e:	c6 18       	sub	r12, r6
    2e90:	0f 77       	andi	r16, 0x7F	; 127
    2e92:	90 2e       	mov	r9, r16
    2e94:	96 fe       	sbrs	r9, 6
    2e96:	0b c0       	rjmp	.+22     	; 0x2eae <vfprintf+0x5b6>
    2e98:	09 2d       	mov	r16, r9
    2e9a:	0e 7f       	andi	r16, 0xFE	; 254
    2e9c:	c1 16       	cp	r12, r17
    2e9e:	50 f4       	brcc	.+20     	; 0x2eb4 <vfprintf+0x5bc>
    2ea0:	94 fe       	sbrs	r9, 4
    2ea2:	0a c0       	rjmp	.+20     	; 0x2eb8 <vfprintf+0x5c0>
    2ea4:	92 fc       	sbrc	r9, 2
    2ea6:	08 c0       	rjmp	.+16     	; 0x2eb8 <vfprintf+0x5c0>
    2ea8:	09 2d       	mov	r16, r9
    2eaa:	0e 7e       	andi	r16, 0xEE	; 238
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <vfprintf+0x5c0>
    2eae:	dc 2c       	mov	r13, r12
    2eb0:	09 2d       	mov	r16, r9
    2eb2:	03 c0       	rjmp	.+6      	; 0x2eba <vfprintf+0x5c2>
    2eb4:	dc 2c       	mov	r13, r12
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <vfprintf+0x5c2>
    2eb8:	d1 2e       	mov	r13, r17
    2eba:	04 ff       	sbrs	r16, 4
    2ebc:	0d c0       	rjmp	.+26     	; 0x2ed8 <vfprintf+0x5e0>
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ec 0d       	add	r30, r12
    2ec2:	f1 1d       	adc	r31, r1
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 33       	cpi	r24, 0x30	; 48
    2ec8:	11 f4       	brne	.+4      	; 0x2ece <vfprintf+0x5d6>
    2eca:	09 7e       	andi	r16, 0xE9	; 233
    2ecc:	09 c0       	rjmp	.+18     	; 0x2ee0 <vfprintf+0x5e8>
    2ece:	02 ff       	sbrs	r16, 2
    2ed0:	06 c0       	rjmp	.+12     	; 0x2ede <vfprintf+0x5e6>
    2ed2:	d3 94       	inc	r13
    2ed4:	d3 94       	inc	r13
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <vfprintf+0x5e8>
    2ed8:	80 2f       	mov	r24, r16
    2eda:	86 78       	andi	r24, 0x86	; 134
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <vfprintf+0x5e8>
    2ede:	d3 94       	inc	r13
    2ee0:	03 fd       	sbrc	r16, 3
    2ee2:	11 c0       	rjmp	.+34     	; 0x2f06 <vfprintf+0x60e>
    2ee4:	00 ff       	sbrs	r16, 0
    2ee6:	06 c0       	rjmp	.+12     	; 0x2ef4 <vfprintf+0x5fc>
    2ee8:	1c 2d       	mov	r17, r12
    2eea:	d5 14       	cp	r13, r5
    2eec:	80 f4       	brcc	.+32     	; 0x2f0e <vfprintf+0x616>
    2eee:	15 0d       	add	r17, r5
    2ef0:	1d 19       	sub	r17, r13
    2ef2:	0d c0       	rjmp	.+26     	; 0x2f0e <vfprintf+0x616>
    2ef4:	d5 14       	cp	r13, r5
    2ef6:	58 f4       	brcc	.+22     	; 0x2f0e <vfprintf+0x616>
    2ef8:	b7 01       	movw	r22, r14
    2efa:	80 e2       	ldi	r24, 0x20	; 32
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2f02:	d3 94       	inc	r13
    2f04:	f7 cf       	rjmp	.-18     	; 0x2ef4 <vfprintf+0x5fc>
    2f06:	d5 14       	cp	r13, r5
    2f08:	10 f4       	brcc	.+4      	; 0x2f0e <vfprintf+0x616>
    2f0a:	5d 18       	sub	r5, r13
    2f0c:	01 c0       	rjmp	.+2      	; 0x2f10 <vfprintf+0x618>
    2f0e:	51 2c       	mov	r5, r1
    2f10:	04 ff       	sbrs	r16, 4
    2f12:	10 c0       	rjmp	.+32     	; 0x2f34 <vfprintf+0x63c>
    2f14:	b7 01       	movw	r22, r14
    2f16:	80 e3       	ldi	r24, 0x30	; 48
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2f1e:	02 ff       	sbrs	r16, 2
    2f20:	17 c0       	rjmp	.+46     	; 0x2f50 <vfprintf+0x658>
    2f22:	01 fd       	sbrc	r16, 1
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <vfprintf+0x634>
    2f26:	88 e7       	ldi	r24, 0x78	; 120
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <vfprintf+0x638>
    2f2c:	88 e5       	ldi	r24, 0x58	; 88
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	b7 01       	movw	r22, r14
    2f32:	0c c0       	rjmp	.+24     	; 0x2f4c <vfprintf+0x654>
    2f34:	80 2f       	mov	r24, r16
    2f36:	86 78       	andi	r24, 0x86	; 134
    2f38:	59 f0       	breq	.+22     	; 0x2f50 <vfprintf+0x658>
    2f3a:	01 ff       	sbrs	r16, 1
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <vfprintf+0x64a>
    2f3e:	8b e2       	ldi	r24, 0x2B	; 43
    2f40:	01 c0       	rjmp	.+2      	; 0x2f44 <vfprintf+0x64c>
    2f42:	80 e2       	ldi	r24, 0x20	; 32
    2f44:	07 fd       	sbrc	r16, 7
    2f46:	8d e2       	ldi	r24, 0x2D	; 45
    2f48:	b7 01       	movw	r22, r14
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2f50:	c1 16       	cp	r12, r17
    2f52:	38 f4       	brcc	.+14     	; 0x2f62 <vfprintf+0x66a>
    2f54:	b7 01       	movw	r22, r14
    2f56:	80 e3       	ldi	r24, 0x30	; 48
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2f5e:	11 50       	subi	r17, 0x01	; 1
    2f60:	f7 cf       	rjmp	.-18     	; 0x2f50 <vfprintf+0x658>
    2f62:	ca 94       	dec	r12
    2f64:	f3 01       	movw	r30, r6
    2f66:	ec 0d       	add	r30, r12
    2f68:	f1 1d       	adc	r31, r1
    2f6a:	80 81       	ld	r24, Z
    2f6c:	b7 01       	movw	r22, r14
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2f74:	c1 10       	cpse	r12, r1
    2f76:	f5 cf       	rjmp	.-22     	; 0x2f62 <vfprintf+0x66a>
    2f78:	15 c0       	rjmp	.+42     	; 0x2fa4 <vfprintf+0x6ac>
    2f7a:	f4 e0       	ldi	r31, 0x04	; 4
    2f7c:	f5 15       	cp	r31, r5
    2f7e:	60 f5       	brcc	.+88     	; 0x2fd8 <vfprintf+0x6e0>
    2f80:	84 e0       	ldi	r24, 0x04	; 4
    2f82:	58 1a       	sub	r5, r24
    2f84:	93 fe       	sbrs	r9, 3
    2f86:	1f c0       	rjmp	.+62     	; 0x2fc6 <vfprintf+0x6ce>
    2f88:	01 11       	cpse	r16, r1
    2f8a:	27 c0       	rjmp	.+78     	; 0x2fda <vfprintf+0x6e2>
    2f8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f8e:	23 ff       	sbrs	r18, 3
    2f90:	2a c0       	rjmp	.+84     	; 0x2fe6 <vfprintf+0x6ee>
    2f92:	08 e0       	ldi	r16, 0x08	; 8
    2f94:	12 e0       	ldi	r17, 0x02	; 2
    2f96:	39 2d       	mov	r19, r9
    2f98:	30 71       	andi	r19, 0x10	; 16
    2f9a:	93 2e       	mov	r9, r19
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	84 91       	lpm	r24, Z
    2fa0:	81 11       	cpse	r24, r1
    2fa2:	24 c0       	rjmp	.+72     	; 0x2fec <vfprintf+0x6f4>
    2fa4:	55 20       	and	r5, r5
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <vfprintf+0x6b2>
    2fa8:	e4 cc       	rjmp	.-1592   	; 0x2972 <vfprintf+0x7a>
    2faa:	b7 01       	movw	r22, r14
    2fac:	80 e2       	ldi	r24, 0x20	; 32
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2fb4:	5a 94       	dec	r5
    2fb6:	f6 cf       	rjmp	.-20     	; 0x2fa4 <vfprintf+0x6ac>
    2fb8:	f7 01       	movw	r30, r14
    2fba:	86 81       	ldd	r24, Z+6	; 0x06
    2fbc:	97 81       	ldd	r25, Z+7	; 0x07
    2fbe:	26 c0       	rjmp	.+76     	; 0x300c <vfprintf+0x714>
    2fc0:	8f ef       	ldi	r24, 0xFF	; 255
    2fc2:	9f ef       	ldi	r25, 0xFF	; 255
    2fc4:	23 c0       	rjmp	.+70     	; 0x300c <vfprintf+0x714>
    2fc6:	b7 01       	movw	r22, r14
    2fc8:	80 e2       	ldi	r24, 0x20	; 32
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2fd0:	5a 94       	dec	r5
    2fd2:	51 10       	cpse	r5, r1
    2fd4:	f8 cf       	rjmp	.-16     	; 0x2fc6 <vfprintf+0x6ce>
    2fd6:	d8 cf       	rjmp	.-80     	; 0x2f88 <vfprintf+0x690>
    2fd8:	51 2c       	mov	r5, r1
    2fda:	b7 01       	movw	r22, r14
    2fdc:	80 2f       	mov	r24, r16
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2fe4:	d3 cf       	rjmp	.-90     	; 0x2f8c <vfprintf+0x694>
    2fe6:	0c e0       	ldi	r16, 0x0C	; 12
    2fe8:	12 e0       	ldi	r17, 0x02	; 2
    2fea:	d5 cf       	rjmp	.-86     	; 0x2f96 <vfprintf+0x69e>
    2fec:	91 10       	cpse	r9, r1
    2fee:	80 52       	subi	r24, 0x20	; 32
    2ff0:	b7 01       	movw	r22, r14
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 11 19 	call	0x3222	; 0x3222 <fputc>
    2ff8:	0f 5f       	subi	r16, 0xFF	; 255
    2ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffc:	cf cf       	rjmp	.-98     	; 0x2f9c <vfprintf+0x6a4>
    2ffe:	23 e0       	ldi	r18, 0x03	; 3
    3000:	25 15       	cp	r18, r5
    3002:	10 f4       	brcc	.+4      	; 0x3008 <vfprintf+0x710>
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	bd cf       	rjmp	.-134    	; 0x2f82 <vfprintf+0x68a>
    3008:	51 2c       	mov	r5, r1
    300a:	c0 cf       	rjmp	.-128    	; 0x2f8c <vfprintf+0x694>
    300c:	60 96       	adiw	r28, 0x10	; 16
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	df 90       	pop	r13
    3020:	cf 90       	pop	r12
    3022:	bf 90       	pop	r11
    3024:	af 90       	pop	r10
    3026:	9f 90       	pop	r9
    3028:	8f 90       	pop	r8
    302a:	7f 90       	pop	r7
    302c:	6f 90       	pop	r6
    302e:	5f 90       	pop	r5
    3030:	4f 90       	pop	r4
    3032:	3f 90       	pop	r3
    3034:	2f 90       	pop	r2
    3036:	08 95       	ret

00003038 <__ftoa_engine>:
    3038:	28 30       	cpi	r18, 0x08	; 8
    303a:	08 f0       	brcs	.+2      	; 0x303e <__ftoa_engine+0x6>
    303c:	27 e0       	ldi	r18, 0x07	; 7
    303e:	33 27       	eor	r19, r19
    3040:	da 01       	movw	r26, r20
    3042:	99 0f       	add	r25, r25
    3044:	31 1d       	adc	r19, r1
    3046:	87 fd       	sbrc	r24, 7
    3048:	91 60       	ori	r25, 0x01	; 1
    304a:	00 96       	adiw	r24, 0x00	; 0
    304c:	61 05       	cpc	r22, r1
    304e:	71 05       	cpc	r23, r1
    3050:	39 f4       	brne	.+14     	; 0x3060 <__ftoa_engine+0x28>
    3052:	32 60       	ori	r19, 0x02	; 2
    3054:	2e 5f       	subi	r18, 0xFE	; 254
    3056:	3d 93       	st	X+, r19
    3058:	30 e3       	ldi	r19, 0x30	; 48
    305a:	2a 95       	dec	r18
    305c:	e1 f7       	brne	.-8      	; 0x3056 <__ftoa_engine+0x1e>
    305e:	08 95       	ret
    3060:	9f 3f       	cpi	r25, 0xFF	; 255
    3062:	30 f0       	brcs	.+12     	; 0x3070 <__ftoa_engine+0x38>
    3064:	80 38       	cpi	r24, 0x80	; 128
    3066:	71 05       	cpc	r23, r1
    3068:	61 05       	cpc	r22, r1
    306a:	09 f0       	breq	.+2      	; 0x306e <__ftoa_engine+0x36>
    306c:	3c 5f       	subi	r19, 0xFC	; 252
    306e:	3c 5f       	subi	r19, 0xFC	; 252
    3070:	3d 93       	st	X+, r19
    3072:	91 30       	cpi	r25, 0x01	; 1
    3074:	08 f0       	brcs	.+2      	; 0x3078 <__ftoa_engine+0x40>
    3076:	80 68       	ori	r24, 0x80	; 128
    3078:	91 1d       	adc	r25, r1
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	1f 93       	push	r17
    3080:	0f 93       	push	r16
    3082:	ff 92       	push	r15
    3084:	ef 92       	push	r14
    3086:	19 2f       	mov	r17, r25
    3088:	98 7f       	andi	r25, 0xF8	; 248
    308a:	96 95       	lsr	r25
    308c:	e9 2f       	mov	r30, r25
    308e:	96 95       	lsr	r25
    3090:	96 95       	lsr	r25
    3092:	e9 0f       	add	r30, r25
    3094:	ff 27       	eor	r31, r31
    3096:	e6 59       	subi	r30, 0x96	; 150
    3098:	fd 4f       	sbci	r31, 0xFD	; 253
    309a:	99 27       	eor	r25, r25
    309c:	33 27       	eor	r19, r19
    309e:	ee 24       	eor	r14, r14
    30a0:	ff 24       	eor	r15, r15
    30a2:	a7 01       	movw	r20, r14
    30a4:	e7 01       	movw	r28, r14
    30a6:	05 90       	lpm	r0, Z+
    30a8:	08 94       	sec
    30aa:	07 94       	ror	r0
    30ac:	28 f4       	brcc	.+10     	; 0x30b8 <__ftoa_engine+0x80>
    30ae:	36 0f       	add	r19, r22
    30b0:	e7 1e       	adc	r14, r23
    30b2:	f8 1e       	adc	r15, r24
    30b4:	49 1f       	adc	r20, r25
    30b6:	51 1d       	adc	r21, r1
    30b8:	66 0f       	add	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	88 1f       	adc	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	06 94       	lsr	r0
    30c2:	a1 f7       	brne	.-24     	; 0x30ac <__ftoa_engine+0x74>
    30c4:	05 90       	lpm	r0, Z+
    30c6:	07 94       	ror	r0
    30c8:	28 f4       	brcc	.+10     	; 0x30d4 <__ftoa_engine+0x9c>
    30ca:	e7 0e       	add	r14, r23
    30cc:	f8 1e       	adc	r15, r24
    30ce:	49 1f       	adc	r20, r25
    30d0:	56 1f       	adc	r21, r22
    30d2:	c1 1d       	adc	r28, r1
    30d4:	77 0f       	add	r23, r23
    30d6:	88 1f       	adc	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	66 1f       	adc	r22, r22
    30dc:	06 94       	lsr	r0
    30de:	a1 f7       	brne	.-24     	; 0x30c8 <__ftoa_engine+0x90>
    30e0:	05 90       	lpm	r0, Z+
    30e2:	07 94       	ror	r0
    30e4:	28 f4       	brcc	.+10     	; 0x30f0 <__ftoa_engine+0xb8>
    30e6:	f8 0e       	add	r15, r24
    30e8:	49 1f       	adc	r20, r25
    30ea:	56 1f       	adc	r21, r22
    30ec:	c7 1f       	adc	r28, r23
    30ee:	d1 1d       	adc	r29, r1
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	66 1f       	adc	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	06 94       	lsr	r0
    30fa:	a1 f7       	brne	.-24     	; 0x30e4 <__ftoa_engine+0xac>
    30fc:	05 90       	lpm	r0, Z+
    30fe:	07 94       	ror	r0
    3100:	20 f4       	brcc	.+8      	; 0x310a <__ftoa_engine+0xd2>
    3102:	49 0f       	add	r20, r25
    3104:	56 1f       	adc	r21, r22
    3106:	c7 1f       	adc	r28, r23
    3108:	d8 1f       	adc	r29, r24
    310a:	99 0f       	add	r25, r25
    310c:	66 1f       	adc	r22, r22
    310e:	77 1f       	adc	r23, r23
    3110:	88 1f       	adc	r24, r24
    3112:	06 94       	lsr	r0
    3114:	a9 f7       	brne	.-22     	; 0x3100 <__ftoa_engine+0xc8>
    3116:	84 91       	lpm	r24, Z
    3118:	10 95       	com	r17
    311a:	17 70       	andi	r17, 0x07	; 7
    311c:	41 f0       	breq	.+16     	; 0x312e <__ftoa_engine+0xf6>
    311e:	d6 95       	lsr	r29
    3120:	c7 95       	ror	r28
    3122:	57 95       	ror	r21
    3124:	47 95       	ror	r20
    3126:	f7 94       	ror	r15
    3128:	e7 94       	ror	r14
    312a:	1a 95       	dec	r17
    312c:	c1 f7       	brne	.-16     	; 0x311e <__ftoa_engine+0xe6>
    312e:	e0 e1       	ldi	r30, 0x10	; 16
    3130:	f2 e0       	ldi	r31, 0x02	; 2
    3132:	68 94       	set
    3134:	15 90       	lpm	r1, Z+
    3136:	15 91       	lpm	r17, Z+
    3138:	35 91       	lpm	r19, Z+
    313a:	65 91       	lpm	r22, Z+
    313c:	95 91       	lpm	r25, Z+
    313e:	05 90       	lpm	r0, Z+
    3140:	7f e2       	ldi	r23, 0x2F	; 47
    3142:	73 95       	inc	r23
    3144:	e1 18       	sub	r14, r1
    3146:	f1 0a       	sbc	r15, r17
    3148:	43 0b       	sbc	r20, r19
    314a:	56 0b       	sbc	r21, r22
    314c:	c9 0b       	sbc	r28, r25
    314e:	d0 09       	sbc	r29, r0
    3150:	c0 f7       	brcc	.-16     	; 0x3142 <__ftoa_engine+0x10a>
    3152:	e1 0c       	add	r14, r1
    3154:	f1 1e       	adc	r15, r17
    3156:	43 1f       	adc	r20, r19
    3158:	56 1f       	adc	r21, r22
    315a:	c9 1f       	adc	r28, r25
    315c:	d0 1d       	adc	r29, r0
    315e:	7e f4       	brtc	.+30     	; 0x317e <__ftoa_engine+0x146>
    3160:	70 33       	cpi	r23, 0x30	; 48
    3162:	11 f4       	brne	.+4      	; 0x3168 <__ftoa_engine+0x130>
    3164:	8a 95       	dec	r24
    3166:	e6 cf       	rjmp	.-52     	; 0x3134 <__ftoa_engine+0xfc>
    3168:	e8 94       	clt
    316a:	01 50       	subi	r16, 0x01	; 1
    316c:	30 f0       	brcs	.+12     	; 0x317a <__ftoa_engine+0x142>
    316e:	08 0f       	add	r16, r24
    3170:	0a f4       	brpl	.+2      	; 0x3174 <__ftoa_engine+0x13c>
    3172:	00 27       	eor	r16, r16
    3174:	02 17       	cp	r16, r18
    3176:	08 f4       	brcc	.+2      	; 0x317a <__ftoa_engine+0x142>
    3178:	20 2f       	mov	r18, r16
    317a:	23 95       	inc	r18
    317c:	02 2f       	mov	r16, r18
    317e:	7a 33       	cpi	r23, 0x3A	; 58
    3180:	28 f0       	brcs	.+10     	; 0x318c <__ftoa_engine+0x154>
    3182:	79 e3       	ldi	r23, 0x39	; 57
    3184:	7d 93       	st	X+, r23
    3186:	2a 95       	dec	r18
    3188:	e9 f7       	brne	.-6      	; 0x3184 <__ftoa_engine+0x14c>
    318a:	10 c0       	rjmp	.+32     	; 0x31ac <__ftoa_engine+0x174>
    318c:	7d 93       	st	X+, r23
    318e:	2a 95       	dec	r18
    3190:	89 f6       	brne	.-94     	; 0x3134 <__ftoa_engine+0xfc>
    3192:	06 94       	lsr	r0
    3194:	97 95       	ror	r25
    3196:	67 95       	ror	r22
    3198:	37 95       	ror	r19
    319a:	17 95       	ror	r17
    319c:	17 94       	ror	r1
    319e:	e1 18       	sub	r14, r1
    31a0:	f1 0a       	sbc	r15, r17
    31a2:	43 0b       	sbc	r20, r19
    31a4:	56 0b       	sbc	r21, r22
    31a6:	c9 0b       	sbc	r28, r25
    31a8:	d0 09       	sbc	r29, r0
    31aa:	98 f0       	brcs	.+38     	; 0x31d2 <__ftoa_engine+0x19a>
    31ac:	23 95       	inc	r18
    31ae:	7e 91       	ld	r23, -X
    31b0:	73 95       	inc	r23
    31b2:	7a 33       	cpi	r23, 0x3A	; 58
    31b4:	08 f0       	brcs	.+2      	; 0x31b8 <__ftoa_engine+0x180>
    31b6:	70 e3       	ldi	r23, 0x30	; 48
    31b8:	7c 93       	st	X, r23
    31ba:	20 13       	cpse	r18, r16
    31bc:	b8 f7       	brcc	.-18     	; 0x31ac <__ftoa_engine+0x174>
    31be:	7e 91       	ld	r23, -X
    31c0:	70 61       	ori	r23, 0x10	; 16
    31c2:	7d 93       	st	X+, r23
    31c4:	30 f0       	brcs	.+12     	; 0x31d2 <__ftoa_engine+0x19a>
    31c6:	83 95       	inc	r24
    31c8:	71 e3       	ldi	r23, 0x31	; 49
    31ca:	7d 93       	st	X+, r23
    31cc:	70 e3       	ldi	r23, 0x30	; 48
    31ce:	2a 95       	dec	r18
    31d0:	e1 f7       	brne	.-8      	; 0x31ca <__ftoa_engine+0x192>
    31d2:	11 24       	eor	r1, r1
    31d4:	ef 90       	pop	r14
    31d6:	ff 90       	pop	r15
    31d8:	0f 91       	pop	r16
    31da:	1f 91       	pop	r17
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	99 27       	eor	r25, r25
    31e2:	87 fd       	sbrc	r24, 7
    31e4:	90 95       	com	r25
    31e6:	08 95       	ret

000031e8 <strnlen_P>:
    31e8:	fc 01       	movw	r30, r24
    31ea:	05 90       	lpm	r0, Z+
    31ec:	61 50       	subi	r22, 0x01	; 1
    31ee:	70 40       	sbci	r23, 0x00	; 0
    31f0:	01 10       	cpse	r0, r1
    31f2:	d8 f7       	brcc	.-10     	; 0x31ea <strnlen_P+0x2>
    31f4:	80 95       	com	r24
    31f6:	90 95       	com	r25
    31f8:	8e 0f       	add	r24, r30
    31fa:	9f 1f       	adc	r25, r31
    31fc:	08 95       	ret

000031fe <memset>:
    31fe:	dc 01       	movw	r26, r24
    3200:	01 c0       	rjmp	.+2      	; 0x3204 <memset+0x6>
    3202:	6d 93       	st	X+, r22
    3204:	41 50       	subi	r20, 0x01	; 1
    3206:	50 40       	sbci	r21, 0x00	; 0
    3208:	e0 f7       	brcc	.-8      	; 0x3202 <memset+0x4>
    320a:	08 95       	ret

0000320c <strnlen>:
    320c:	fc 01       	movw	r30, r24
    320e:	61 50       	subi	r22, 0x01	; 1
    3210:	70 40       	sbci	r23, 0x00	; 0
    3212:	01 90       	ld	r0, Z+
    3214:	01 10       	cpse	r0, r1
    3216:	d8 f7       	brcc	.-10     	; 0x320e <strnlen+0x2>
    3218:	80 95       	com	r24
    321a:	90 95       	com	r25
    321c:	8e 0f       	add	r24, r30
    321e:	9f 1f       	adc	r25, r31
    3220:	08 95       	ret

00003222 <fputc>:
    3222:	0f 93       	push	r16
    3224:	1f 93       	push	r17
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	fb 01       	movw	r30, r22
    322c:	23 81       	ldd	r18, Z+3	; 0x03
    322e:	21 fd       	sbrc	r18, 1
    3230:	03 c0       	rjmp	.+6      	; 0x3238 <fputc+0x16>
    3232:	8f ef       	ldi	r24, 0xFF	; 255
    3234:	9f ef       	ldi	r25, 0xFF	; 255
    3236:	2c c0       	rjmp	.+88     	; 0x3290 <fputc+0x6e>
    3238:	22 ff       	sbrs	r18, 2
    323a:	16 c0       	rjmp	.+44     	; 0x3268 <fputc+0x46>
    323c:	46 81       	ldd	r20, Z+6	; 0x06
    323e:	57 81       	ldd	r21, Z+7	; 0x07
    3240:	24 81       	ldd	r18, Z+4	; 0x04
    3242:	35 81       	ldd	r19, Z+5	; 0x05
    3244:	42 17       	cp	r20, r18
    3246:	53 07       	cpc	r21, r19
    3248:	44 f4       	brge	.+16     	; 0x325a <fputc+0x38>
    324a:	a0 81       	ld	r26, Z
    324c:	b1 81       	ldd	r27, Z+1	; 0x01
    324e:	9d 01       	movw	r18, r26
    3250:	2f 5f       	subi	r18, 0xFF	; 255
    3252:	3f 4f       	sbci	r19, 0xFF	; 255
    3254:	20 83       	st	Z, r18
    3256:	31 83       	std	Z+1, r19	; 0x01
    3258:	8c 93       	st	X, r24
    325a:	26 81       	ldd	r18, Z+6	; 0x06
    325c:	37 81       	ldd	r19, Z+7	; 0x07
    325e:	2f 5f       	subi	r18, 0xFF	; 255
    3260:	3f 4f       	sbci	r19, 0xFF	; 255
    3262:	26 83       	std	Z+6, r18	; 0x06
    3264:	37 83       	std	Z+7, r19	; 0x07
    3266:	14 c0       	rjmp	.+40     	; 0x3290 <fputc+0x6e>
    3268:	8b 01       	movw	r16, r22
    326a:	ec 01       	movw	r28, r24
    326c:	fb 01       	movw	r30, r22
    326e:	00 84       	ldd	r0, Z+8	; 0x08
    3270:	f1 85       	ldd	r31, Z+9	; 0x09
    3272:	e0 2d       	mov	r30, r0
    3274:	19 95       	eicall
    3276:	89 2b       	or	r24, r25
    3278:	e1 f6       	brne	.-72     	; 0x3232 <fputc+0x10>
    327a:	d8 01       	movw	r26, r16
    327c:	16 96       	adiw	r26, 0x06	; 6
    327e:	8d 91       	ld	r24, X+
    3280:	9c 91       	ld	r25, X
    3282:	17 97       	sbiw	r26, 0x07	; 7
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	16 96       	adiw	r26, 0x06	; 6
    3288:	8d 93       	st	X+, r24
    328a:	9c 93       	st	X, r25
    328c:	17 97       	sbiw	r26, 0x07	; 7
    328e:	ce 01       	movw	r24, r28
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	08 95       	ret

0000329a <snprintf>:
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	2e 97       	sbiw	r28, 0x0e	; 14
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0e 89       	ldd	r16, Y+22	; 0x16
    32ae:	1f 89       	ldd	r17, Y+23	; 0x17
    32b0:	88 8d       	ldd	r24, Y+24	; 0x18
    32b2:	99 8d       	ldd	r25, Y+25	; 0x19
    32b4:	26 e0       	ldi	r18, 0x06	; 6
    32b6:	2c 83       	std	Y+4, r18	; 0x04
    32b8:	09 83       	std	Y+1, r16	; 0x01
    32ba:	1a 83       	std	Y+2, r17	; 0x02
    32bc:	97 ff       	sbrs	r25, 7
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <snprintf+0x2a>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e8       	ldi	r25, 0x80	; 128
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	ae 01       	movw	r20, r28
    32cc:	44 5e       	subi	r20, 0xE4	; 228
    32ce:	5f 4f       	sbci	r21, 0xFF	; 255
    32d0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    32d2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    32d4:	ce 01       	movw	r24, r28
    32d6:	01 96       	adiw	r24, 0x01	; 1
    32d8:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <vfprintf>
    32dc:	4d 81       	ldd	r20, Y+5	; 0x05
    32de:	5e 81       	ldd	r21, Y+6	; 0x06
    32e0:	57 fd       	sbrc	r21, 7
    32e2:	0a c0       	rjmp	.+20     	; 0x32f8 <snprintf+0x5e>
    32e4:	2f 81       	ldd	r18, Y+7	; 0x07
    32e6:	38 85       	ldd	r19, Y+8	; 0x08
    32e8:	42 17       	cp	r20, r18
    32ea:	53 07       	cpc	r21, r19
    32ec:	0c f4       	brge	.+2      	; 0x32f0 <snprintf+0x56>
    32ee:	9a 01       	movw	r18, r20
    32f0:	f8 01       	movw	r30, r16
    32f2:	e2 0f       	add	r30, r18
    32f4:	f3 1f       	adc	r31, r19
    32f6:	10 82       	st	Z, r1
    32f8:	2e 96       	adiw	r28, 0x0e	; 14
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	08 95       	ret

00003308 <__ultoa_invert>:
    3308:	fa 01       	movw	r30, r20
    330a:	aa 27       	eor	r26, r26
    330c:	28 30       	cpi	r18, 0x08	; 8
    330e:	51 f1       	breq	.+84     	; 0x3364 <__ultoa_invert+0x5c>
    3310:	20 31       	cpi	r18, 0x10	; 16
    3312:	81 f1       	breq	.+96     	; 0x3374 <__ultoa_invert+0x6c>
    3314:	e8 94       	clt
    3316:	6f 93       	push	r22
    3318:	6e 7f       	andi	r22, 0xFE	; 254
    331a:	6e 5f       	subi	r22, 0xFE	; 254
    331c:	7f 4f       	sbci	r23, 0xFF	; 255
    331e:	8f 4f       	sbci	r24, 0xFF	; 255
    3320:	9f 4f       	sbci	r25, 0xFF	; 255
    3322:	af 4f       	sbci	r26, 0xFF	; 255
    3324:	b1 e0       	ldi	r27, 0x01	; 1
    3326:	3e d0       	rcall	.+124    	; 0x33a4 <__ultoa_invert+0x9c>
    3328:	b4 e0       	ldi	r27, 0x04	; 4
    332a:	3c d0       	rcall	.+120    	; 0x33a4 <__ultoa_invert+0x9c>
    332c:	67 0f       	add	r22, r23
    332e:	78 1f       	adc	r23, r24
    3330:	89 1f       	adc	r24, r25
    3332:	9a 1f       	adc	r25, r26
    3334:	a1 1d       	adc	r26, r1
    3336:	68 0f       	add	r22, r24
    3338:	79 1f       	adc	r23, r25
    333a:	8a 1f       	adc	r24, r26
    333c:	91 1d       	adc	r25, r1
    333e:	a1 1d       	adc	r26, r1
    3340:	6a 0f       	add	r22, r26
    3342:	71 1d       	adc	r23, r1
    3344:	81 1d       	adc	r24, r1
    3346:	91 1d       	adc	r25, r1
    3348:	a1 1d       	adc	r26, r1
    334a:	20 d0       	rcall	.+64     	; 0x338c <__ultoa_invert+0x84>
    334c:	09 f4       	brne	.+2      	; 0x3350 <__ultoa_invert+0x48>
    334e:	68 94       	set
    3350:	3f 91       	pop	r19
    3352:	2a e0       	ldi	r18, 0x0A	; 10
    3354:	26 9f       	mul	r18, r22
    3356:	11 24       	eor	r1, r1
    3358:	30 19       	sub	r19, r0
    335a:	30 5d       	subi	r19, 0xD0	; 208
    335c:	31 93       	st	Z+, r19
    335e:	de f6       	brtc	.-74     	; 0x3316 <__ultoa_invert+0xe>
    3360:	cf 01       	movw	r24, r30
    3362:	08 95       	ret
    3364:	46 2f       	mov	r20, r22
    3366:	47 70       	andi	r20, 0x07	; 7
    3368:	40 5d       	subi	r20, 0xD0	; 208
    336a:	41 93       	st	Z+, r20
    336c:	b3 e0       	ldi	r27, 0x03	; 3
    336e:	0f d0       	rcall	.+30     	; 0x338e <__ultoa_invert+0x86>
    3370:	c9 f7       	brne	.-14     	; 0x3364 <__ultoa_invert+0x5c>
    3372:	f6 cf       	rjmp	.-20     	; 0x3360 <__ultoa_invert+0x58>
    3374:	46 2f       	mov	r20, r22
    3376:	4f 70       	andi	r20, 0x0F	; 15
    3378:	40 5d       	subi	r20, 0xD0	; 208
    337a:	4a 33       	cpi	r20, 0x3A	; 58
    337c:	18 f0       	brcs	.+6      	; 0x3384 <__ultoa_invert+0x7c>
    337e:	49 5d       	subi	r20, 0xD9	; 217
    3380:	31 fd       	sbrc	r19, 1
    3382:	40 52       	subi	r20, 0x20	; 32
    3384:	41 93       	st	Z+, r20
    3386:	02 d0       	rcall	.+4      	; 0x338c <__ultoa_invert+0x84>
    3388:	a9 f7       	brne	.-22     	; 0x3374 <__ultoa_invert+0x6c>
    338a:	ea cf       	rjmp	.-44     	; 0x3360 <__ultoa_invert+0x58>
    338c:	b4 e0       	ldi	r27, 0x04	; 4
    338e:	a6 95       	lsr	r26
    3390:	97 95       	ror	r25
    3392:	87 95       	ror	r24
    3394:	77 95       	ror	r23
    3396:	67 95       	ror	r22
    3398:	ba 95       	dec	r27
    339a:	c9 f7       	brne	.-14     	; 0x338e <__ultoa_invert+0x86>
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	61 05       	cpc	r22, r1
    33a0:	71 05       	cpc	r23, r1
    33a2:	08 95       	ret
    33a4:	9b 01       	movw	r18, r22
    33a6:	ac 01       	movw	r20, r24
    33a8:	0a 2e       	mov	r0, r26
    33aa:	06 94       	lsr	r0
    33ac:	57 95       	ror	r21
    33ae:	47 95       	ror	r20
    33b0:	37 95       	ror	r19
    33b2:	27 95       	ror	r18
    33b4:	ba 95       	dec	r27
    33b6:	c9 f7       	brne	.-14     	; 0x33aa <__ultoa_invert+0xa2>
    33b8:	62 0f       	add	r22, r18
    33ba:	73 1f       	adc	r23, r19
    33bc:	84 1f       	adc	r24, r20
    33be:	95 1f       	adc	r25, r21
    33c0:	a0 1d       	adc	r26, r0
    33c2:	08 95       	ret

000033c4 <_exit>:
    33c4:	f8 94       	cli

000033c6 <__stop_program>:
    33c6:	ff cf       	rjmp	.-2      	; 0x33c6 <__stop_program>
