
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  000038c8  0000395c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000428f  00802128  00802128  00003a84  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b45e  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042c6  00000000  00000000  0000f56e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000494f  00000000  00000000  00013834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000115c  00000000  00000000  00018184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fae  00000000  00000000  000192e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000077f1  00000000  00000000  0001d28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000818  00000000  00000000  00024a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 01 	jmp	0x322	; 0x322 <__ctors_end>
       4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
       8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
       c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      10:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      14:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      18:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      1c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      20:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      24:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      28:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      30:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      38:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_14>
      3c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      40:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      44:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      48:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      4c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      50:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_20>
      54:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      58:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      5c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      60:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      64:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      68:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      6c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      70:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      74:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      78:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      7c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      80:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      84:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      88:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      8c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      90:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      94:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      98:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      9c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      a0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      a4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      a8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      ac:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      b0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      b4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      b8:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_46>
      bc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      c0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      c4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      c8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      cc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      d0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      d4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      d8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      dc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      e0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      e4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      e8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      ec:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      f0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      f4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      f8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      fc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     100:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     104:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     108:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     10c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     110:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     114:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     118:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     11c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     120:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     124:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     128:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     12c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     130:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     134:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     138:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     13c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     140:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     144:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     148:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     14c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     150:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     154:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     158:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     15c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     160:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     164:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     168:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     16c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     170:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     174:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     178:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     17c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     180:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     184:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     188:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     18c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     190:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     194:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     198:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     19c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1a0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1a4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1a8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1ac:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1b0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1b4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1b8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1bc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1c0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1c4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1c8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1cc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1d0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1d4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1d8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1dc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1e0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1e4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1e8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1ec:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1f0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1f4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
     1f8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 af 12 	jmp	0x255e	; 0x255e <WorkerTerminal>
     200:	0c 94 1d 12 	jmp	0x243a	; 0x243a <WorkerFifo>
     204:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <stdio_putchar>
     208:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <prvIdleTask>
     20c:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <WorkerLooplicht>
     210:	0c 94 06 03 	jmp	0x60c	; 0x60c <stdio_getchar>

00000214 <__trampolines_end>:
     214:	6e 61       	ori	r22, 0x1E	; 30
     216:	6e 00       	.word	0x006e	; ????

00000218 <__c.2332>:
     218:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     228:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     238:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     248:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     258:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     268:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     278:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     288:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     298:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     308:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000316 <__c.2474>:
     316:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000322 <__ctors_end>:
     322:	11 24       	eor	r1, r1
     324:	1f be       	out	0x3f, r1	; 63
     326:	cf ef       	ldi	r28, 0xFF	; 255
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df e9       	ldi	r29, 0x9F	; 159
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	00 e0       	ldi	r16, 0x00	; 0
     330:	0c bf       	out	0x3c, r16	; 60

00000332 <__do_copy_data>:
     332:	11 e2       	ldi	r17, 0x21	; 33
     334:	a0 e0       	ldi	r26, 0x00	; 0
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	e8 ec       	ldi	r30, 0xC8	; 200
     33a:	f8 e3       	ldi	r31, 0x38	; 56
     33c:	00 e0       	ldi	r16, 0x00	; 0
     33e:	0b bf       	out	0x3b, r16	; 59
     340:	02 c0       	rjmp	.+4      	; 0x346 <__do_copy_data+0x14>
     342:	07 90       	elpm	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	a8 32       	cpi	r26, 0x28	; 40
     348:	b1 07       	cpc	r27, r17
     34a:	d9 f7       	brne	.-10     	; 0x342 <__do_copy_data+0x10>

0000034c <__do_clear_bss>:
     34c:	23 e6       	ldi	r18, 0x63	; 99
     34e:	a8 e2       	ldi	r26, 0x28	; 40
     350:	b1 e2       	ldi	r27, 0x21	; 33
     352:	01 c0       	rjmp	.+2      	; 0x356 <.do_clear_bss_start>

00000354 <.do_clear_bss_loop>:
     354:	1d 92       	st	X+, r1

00000356 <.do_clear_bss_start>:
     356:	a7 3b       	cpi	r26, 0xB7	; 183
     358:	b2 07       	cpc	r27, r18
     35a:	e1 f7       	brne	.-8      	; 0x354 <.do_clear_bss_loop>
     35c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <main>
     360:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <_exit>

00000364 <__bad_interrupt>:
     364:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000368 <DriverAdcInit>:
#include "DriverAdc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void DriverAdcInit(void)
{
     368:	08 95       	ret

0000036a <DriverCursorstickInit>:
static uint8_t CursorstickOutput=0b00000000;

void DriverCursorstickInit(void)
{
	// Pagina 129
	PORTB.DIRCLR=0b00000111; // Pin 2-7 als ingang zetten
     36a:	e0 e2       	ldi	r30, 0x20	; 32
     36c:	f6 e0       	ldi	r31, 0x06	; 6
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	82 83       	std	Z+2, r24	; 0x02
	// Als pullup instellen zie pagina 133 en inverteren, zodat als de switch wordt gebruikt er een 1 komt ipv 0
	PORTB.PIN3CTRL=0b01011000;
     372:	88 e5       	ldi	r24, 0x58	; 88
     374:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL=0b01011000;
     376:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL=0b01011000;
     378:	85 8b       	std	Z+21, r24	; 0x15
	PORTB.PIN6CTRL=0b01011000;
     37a:	86 8b       	std	Z+22, r24	; 0x16
	PORTB.PIN7CTRL=0b01011000;
     37c:	87 8b       	std	Z+23, r24	; 0x17
     37e:	08 95       	ret

00000380 <DriverCursorstickGet>:
}

uint8_t DriverCursorstickGet(void)
{	
	uint8_t Opslag = PORTB.IN & 0b11111000;// We willen enkel de cursorstickwaarden en niet degene van de LED's
     380:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     384:	88 7f       	andi	r24, 0xF8	; 248
	if (Opslag == Center) {
     386:	80 38       	cpi	r24, 0x80	; 128
     388:	01 f1       	breq	.+64     	; 0x3ca <DriverCursorstickGet+0x4a>
		CursorstickOutput = 0b00000001;
	} else if (Opslag == Right) {
     38a:	80 34       	cpi	r24, 0x40	; 64
     38c:	21 f1       	breq	.+72     	; 0x3d6 <DriverCursorstickGet+0x56>
		CursorstickOutput = 0b00000010;
	} else if (Opslag == Down) {
     38e:	80 32       	cpi	r24, 0x20	; 32
     390:	71 f1       	breq	.+92     	; 0x3ee <DriverCursorstickGet+0x6e>
		CursorstickOutput = 0b00000100;
	} else if (Opslag == Left) {
     392:	80 31       	cpi	r24, 0x10	; 16
     394:	a1 f0       	breq	.+40     	; 0x3be <DriverCursorstickGet+0x3e>
		CursorstickOutput = 0b00001000;
	} else if (Opslag == Up) {
     396:	88 30       	cpi	r24, 0x08	; 8
     398:	21 f1       	breq	.+72     	; 0x3e2 <DriverCursorstickGet+0x62>
     39a:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     39e:	90 e0       	ldi	r25, 0x00	; 0
		CursorstickOutput = 0b00010000;
	} 
	printf("%p\r", CursorstickOutput);
     3a0:	9f 93       	push	r25
     3a2:	8f 93       	push	r24
     3a4:	8b e1       	ldi	r24, 0x1B	; 27
     3a6:	91 e2       	ldi	r25, 0x21	; 33
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	0e 94 30 18 	call	0x3060	; 0x3060 <printf>
	return CursorstickOutput;
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     3bc:	08 95       	ret
	} else if (Opslag == Right) {
		CursorstickOutput = 0b00000010;
	} else if (Opslag == Down) {
		CursorstickOutput = 0b00000100;
	} else if (Opslag == Left) {
		CursorstickOutput = 0b00001000;
     3be:	88 e0       	ldi	r24, 0x08	; 8
     3c0:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>
     3c4:	88 e0       	ldi	r24, 0x08	; 8
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	eb cf       	rjmp	.-42     	; 0x3a0 <DriverCursorstickGet+0x20>

uint8_t DriverCursorstickGet(void)
{	
	uint8_t Opslag = PORTB.IN & 0b11111000;// We willen enkel de cursorstickwaarden en niet degene van de LED's
	if (Opslag == Center) {
		CursorstickOutput = 0b00000001;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	e5 cf       	rjmp	.-54     	; 0x3a0 <DriverCursorstickGet+0x20>
	} else if (Opslag == Right) {
		CursorstickOutput = 0b00000010;
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	df cf       	rjmp	.-66     	; 0x3a0 <DriverCursorstickGet+0x20>
	} else if (Opslag == Down) {
		CursorstickOutput = 0b00000100;
	} else if (Opslag == Left) {
		CursorstickOutput = 0b00001000;
	} else if (Opslag == Up) {
		CursorstickOutput = 0b00010000;
     3e2:	80 e1       	ldi	r24, 0x10	; 16
     3e4:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>
     3e8:	80 e1       	ldi	r24, 0x10	; 16
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	d9 cf       	rjmp	.-78     	; 0x3a0 <DriverCursorstickGet+0x20>
	if (Opslag == Center) {
		CursorstickOutput = 0b00000001;
	} else if (Opslag == Right) {
		CursorstickOutput = 0b00000010;
	} else if (Opslag == Down) {
		CursorstickOutput = 0b00000100;
     3ee:	84 e0       	ldi	r24, 0x04	; 4
     3f0:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	d3 cf       	rjmp	.-90     	; 0x3a0 <DriverCursorstickGet+0x20>

000003fa <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     3fa:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     3fc:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     400:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     404:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     408:	90 81       	ld	r25, Z
     40a:	99 23       	and	r25, r25
     40c:	69 f0       	breq	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     40e:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     410:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     412:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     416:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     41a:	96 ff       	sbrs	r25, 6
     41c:	fc cf       	rjmp	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		USART.STATUS=0b01000000;
     41e:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     422:	91 91       	ld	r25, Z+
     424:	91 11       	cpse	r25, r1
     426:	f5 cf       	rjmp	.-22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     428:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     42c:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     430:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     434:	08 95       	ret

00000436 <DriverLedInit>:
#include "DriverLed.h"

void DriverLedInit(void)
{
	PORTB.DIRSET=0b00000111; // PB0-2 als uitgang zetten
     436:	e0 e2       	ldi	r30, 0x20	; 32
     438:	f6 e0       	ldi	r31, 0x06	; 6
     43a:	87 e0       	ldi	r24, 0x07	; 7
     43c:	81 83       	std	Z+1, r24	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTB.PIN0CTRL=0b01000000;
     43e:	80 e4       	ldi	r24, 0x40	; 64
     440:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL=0b01000000;
     442:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL=0b01000000;
     444:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTA.DIRSET=0b10000000; // PA7 als uitgang zetten
     446:	e0 e0       	ldi	r30, 0x00	; 0
     448:	f6 e0       	ldi	r31, 0x06	; 6
     44a:	90 e8       	ldi	r25, 0x80	; 128
     44c:	91 83       	std	Z+1, r25	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTA.PIN7CTRL=0b01000000;
     44e:	87 8b       	std	Z+23, r24	; 0x17
     450:	08 95       	ret

00000452 <DriverLedWrite>:
}

void DriverLedWrite(uint8_t LedData)
{
	PORTB.OUT = LedData & 0b00000111;	// Alleen de de waarden van PB0-2 overhouden
     452:	98 2f       	mov	r25, r24
     454:	97 70       	andi	r25, 0x07	; 7
     456:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	LedData = LedData<<4; // 4 nullen langs rechts inschuiven om de 4de bit op plaats 8 te krijgen voor PA7
	PORTA.OUT = LedData & 0b10000000; // Alleen waarde van PA7 overhouden
     45a:	82 95       	swap	r24
     45c:	80 78       	andi	r24, 0x80	; 128
     45e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
     462:	08 95       	ret

00000464 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     464:	8b ec       	ldi	r24, 0xCB	; 203
     466:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     46a:	88 e0       	ldi	r24, 0x08	; 8
     46c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     470:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     474:	83 ff       	sbrs	r24, 3
     476:	fc cf       	rjmp	.-8      	; 0x470 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     478:	82 ec       	ldi	r24, 0xC2	; 194
     47a:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     47e:	88 e1       	ldi	r24, 0x18	; 24
     480:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     484:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     488:	84 ff       	sbrs	r24, 4
     48a:	fc cf       	rjmp	.-8      	; 0x484 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     48c:	88 ed       	ldi	r24, 0xD8	; 216
     48e:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret

0000049a <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     49a:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <Twim_status>
     49e:	e0 e8       	ldi	r30, 0x80	; 128
     4a0:	f6 e0       	ldi	r31, 0x06	; 6
     4a2:	88 e1       	ldi	r24, 0x18	; 24
     4a4:	80 8b       	std	Z+16, r24	; 0x10
     4a6:	81 8b       	std	Z+17, r24	; 0x11
     4a8:	e0 ea       	ldi	r30, 0xA0	; 160
     4aa:	f4 e0       	ldi	r31, 0x04	; 4
     4ac:	88 e7       	ldi	r24, 0x78	; 120
     4ae:	81 83       	std	Z+1, r24	; 0x01
     4b0:	83 e2       	ldi	r24, 0x23	; 35
     4b2:	85 83       	std	Z+5, r24	; 0x05
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	84 83       	std	Z+4, r24	; 0x04
     4b8:	08 95       	ret

000004ba <TWIMWriteHandler>:
     4ba:	90 91 2d 21 	lds	r25, 0x212D	; 0x80212d <Twim_bytesToWrite>
     4be:	20 91 2c 21 	lds	r18, 0x212C	; 0x80212c <Twim_bytesToRead>
     4c2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     4c6:	84 fd       	sbrc	r24, 4
     4c8:	08 c0       	rjmp	.+16     	; 0x4da <TWIMWriteHandler+0x20>
     4ca:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <Twim_bytesWritten>
     4ce:	89 17       	cp	r24, r25
     4d0:	50 f0       	brcs	.+20     	; 0x4e6 <TWIMWriteHandler+0x2c>
     4d2:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <Twim_bytesRead>
     4d6:	82 17       	cp	r24, r18
     4d8:	b8 f0       	brcs	.+46     	; 0x508 <TWIMWriteHandler+0x4e>
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4e0:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <Twim_status>
     4e4:	08 95       	ret
     4e6:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <Twim_bytesWritten>
     4ea:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <Twim_writeData>
     4ee:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <Twim_writeData+0x1>
     4f2:	e8 0f       	add	r30, r24
     4f4:	f1 1d       	adc	r31, r1
     4f6:	80 81       	ld	r24, Z
     4f8:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     4fc:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <Twim_bytesWritten>
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 93 2b 21 	sts	0x212B, r24	; 0x80212b <Twim_bytesWritten>
     506:	08 95       	ret
     508:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <Twim_address>
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     512:	08 95       	ret

00000514 <TWIMReadHandler>:
     514:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <Twim_bytesRead>
     518:	80 32       	cpi	r24, 0x20	; 32
     51a:	e0 f4       	brcc	.+56     	; 0x554 <TWIMReadHandler+0x40>
     51c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     520:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <Twim_bytesRead>
     524:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <Twim_readData>
     528:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <Twim_readData+0x1>
     52c:	e9 0f       	add	r30, r25
     52e:	f1 1d       	adc	r31, r1
     530:	80 83       	st	Z, r24
     532:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <Twim_bytesRead>
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <Twim_bytesRead>
     53c:	90 91 2c 21 	lds	r25, 0x212C	; 0x80212c <Twim_bytesToRead>
     540:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <Twim_bytesRead>
     544:	89 17       	cp	r24, r25
     546:	88 f0       	brcs	.+34     	; 0x56a <TWIMReadHandler+0x56>
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     54e:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <Twim_status>
     552:	08 95       	ret
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     55a:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <Twim_status>
     55e:	90 91 2c 21 	lds	r25, 0x212C	; 0x80212c <Twim_bytesToRead>
     562:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <Twim_bytesRead>
     566:	89 17       	cp	r24, r25
     568:	78 f7       	brcc	.-34     	; 0x548 <TWIMReadHandler+0x34>
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     570:	08 95       	ret

00000572 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	0b b6       	in	r0, 0x3b	; 59
     57e:	0f 92       	push	r0
     580:	2f 93       	push	r18
     582:	3f 93       	push	r19
     584:	4f 93       	push	r20
     586:	5f 93       	push	r21
     588:	6f 93       	push	r22
     58a:	7f 93       	push	r23
     58c:	8f 93       	push	r24
     58e:	9f 93       	push	r25
     590:	af 93       	push	r26
     592:	bf 93       	push	r27
     594:	ef 93       	push	r30
     596:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     598:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     59c:	98 2f       	mov	r25, r24
     59e:	9c 70       	andi	r25, 0x0C	; 12
     5a0:	39 f4       	brne	.+14     	; 0x5b0 <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     5a2:	86 fd       	sbrc	r24, 6
     5a4:	21 c0       	rjmp	.+66     	; 0x5e8 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     5a6:	87 fd       	sbrc	r24, 7
     5a8:	22 c0       	rjmp	.+68     	; 0x5ee <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     5aa:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <Twim_status>
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     5b0:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     5b4:	88 60       	ori	r24, 0x08	; 8
     5b6:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     5ba:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     5be:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <Twim_status>
	{	
	}
}
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     5e8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <TWIMWriteHandler>
     5ec:	e8 cf       	rjmp	.-48     	; 0x5be <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     5ee:	0e 94 8a 02 	call	0x514	; 0x514 <TWIMReadHandler>
     5f2:	e5 cf       	rjmp	.-54     	; 0x5be <__vector_46+0x4c>

000005f4 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     5f4:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     5f8:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     5fc:	86 ff       	sbrs	r24, 6
     5fe:	fc cf       	rjmp	.-8      	; 0x5f8 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     600:	80 e4       	ldi	r24, 0x40	; 64
     602:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	08 95       	ret

0000060c <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     60c:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     610:	87 ff       	sbrs	r24, 7
     612:	fc cf       	rjmp	.-8      	; 0x60c <stdio_getchar>
	return USART.DATA;
     614:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	08 95       	ret

0000061c <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     61c:	e0 e8       	ldi	r30, 0x80	; 128
     61e:	f6 e0       	ldi	r31, 0x06	; 6
     620:	88 e0       	ldi	r24, 0x08	; 8
     622:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     628:	e0 ea       	ldi	r30, 0xA0	; 160
     62a:	fa e0       	ldi	r31, 0x0A	; 10
     62c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     62e:	88 e1       	ldi	r24, 0x18	; 24
     630:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     636:	85 ee       	ldi	r24, 0xE5	; 229
     638:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     63a:	8c eb       	ldi	r24, 0xBC	; 188
     63c:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     63e:	e1 eb       	ldi	r30, 0xB1	; 177
     640:	f3 e6       	ldi	r31, 0x63	; 99
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e2       	ldi	r25, 0x20	; 32
     646:	82 83       	std	Z+2, r24	; 0x02
     648:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     64a:	80 83       	st	Z, r24
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	08 95       	ret

00000650 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     65a:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     65e:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <xHeapHasBeenInitialised.4117>
     662:	81 11       	cpse	r24, r1
     664:	21 c0       	rjmp	.+66     	; 0x6a8 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     666:	8d e3       	ldi	r24, 0x3D	; 61
     668:	91 e2       	ldi	r25, 0x21	; 33
     66a:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <xStart>
     66e:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     672:	10 92 3a 21 	sts	0x213A, r1	; 0x80213a <xStart+0x2>
     676:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	9f e3       	ldi	r25, 0x3F	; 63
     67e:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <xEnd+0x2>
     682:	90 93 37 21 	sts	0x2137, r25	; 0x802137 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     686:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <xEnd>
     68a:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     68e:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <ucHeap+0x3>
     692:	90 93 40 21 	sts	0x2140, r25	; 0x802140 <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     696:	84 e3       	ldi	r24, 0x34	; 52
     698:	91 e2       	ldi	r25, 0x21	; 33
     69a:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <ucHeap+0x1>
     69e:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <xHeapHasBeenInitialised.4117>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     6a8:	20 97       	sbiw	r28, 0x00	; 0
     6aa:	09 f4       	brne	.+2      	; 0x6ae <pvPortMalloc+0x5e>
     6ac:	64 c0       	rjmp	.+200    	; 0x776 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     6ae:	ae 01       	movw	r20, r28
     6b0:	4c 5f       	subi	r20, 0xFC	; 252
     6b2:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     6b4:	23 96       	adiw	r28, 0x03	; 3
     6b6:	ce 3f       	cpi	r28, 0xFE	; 254
     6b8:	df 43       	sbci	r29, 0x3F	; 63
     6ba:	08 f0       	brcs	.+2      	; 0x6be <pvPortMalloc+0x6e>
     6bc:	5c c0       	rjmp	.+184    	; 0x776 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     6be:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <xStart>
     6c2:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     6c6:	a8 e3       	ldi	r26, 0x38	; 56
     6c8:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <pvPortMalloc+0x88>
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	39 f0       	breq	.+14     	; 0x6e2 <pvPortMalloc+0x92>
     6d4:	df 01       	movw	r26, r30
     6d6:	fc 01       	movw	r30, r24
     6d8:	22 81       	ldd	r18, Z+2	; 0x02
     6da:	33 81       	ldd	r19, Z+3	; 0x03
     6dc:	24 17       	cp	r18, r20
     6de:	35 07       	cpc	r19, r21
     6e0:	a8 f3       	brcs	.-22     	; 0x6cc <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     6e2:	c1 e2       	ldi	r28, 0x21	; 33
     6e4:	e4 33       	cpi	r30, 0x34	; 52
     6e6:	fc 07       	cpc	r31, r28
     6e8:	09 f4       	brne	.+2      	; 0x6ec <pvPortMalloc+0x9c>
     6ea:	45 c0       	rjmp	.+138    	; 0x776 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     6ec:	cd 91       	ld	r28, X+
     6ee:	dc 91       	ld	r29, X
     6f0:	11 97       	sbiw	r26, 0x01	; 1
     6f2:	8e 01       	movw	r16, r28
     6f4:	0c 5f       	subi	r16, 0xFC	; 252
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6f8:	80 81       	ld	r24, Z
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
     6fc:	8d 93       	st	X+, r24
     6fe:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     700:	c9 01       	movw	r24, r18
     702:	84 1b       	sub	r24, r20
     704:	95 0b       	sbc	r25, r21
     706:	89 30       	cpi	r24, 0x09	; 9
     708:	91 05       	cpc	r25, r1
     70a:	00 f1       	brcs	.+64     	; 0x74c <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     70c:	bf 01       	movw	r22, r30
     70e:	64 0f       	add	r22, r20
     710:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     712:	db 01       	movw	r26, r22
     714:	12 96       	adiw	r26, 0x02	; 2
     716:	8d 93       	st	X+, r24
     718:	9c 93       	st	X, r25
     71a:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     71c:	42 83       	std	Z+2, r20	; 0x02
     71e:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     720:	12 96       	adiw	r26, 0x02	; 2
     722:	2d 91       	ld	r18, X+
     724:	3c 91       	ld	r19, X
     726:	13 97       	sbiw	r26, 0x03	; 3
     728:	a8 e3       	ldi	r26, 0x38	; 56
     72a:	b1 e2       	ldi	r27, 0x21	; 33
     72c:	01 c0       	rjmp	.+2      	; 0x730 <pvPortMalloc+0xe0>
     72e:	df 01       	movw	r26, r30
     730:	ed 91       	ld	r30, X+
     732:	fc 91       	ld	r31, X
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	82 17       	cp	r24, r18
     73c:	93 07       	cpc	r25, r19
     73e:	b8 f3       	brcs	.-18     	; 0x72e <pvPortMalloc+0xde>
     740:	eb 01       	movw	r28, r22
     742:	e8 83       	st	Y, r30
     744:	f9 83       	std	Y+1, r31	; 0x01
     746:	6d 93       	st	X+, r22
     748:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     74a:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     74c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     750:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     754:	82 1b       	sub	r24, r18
     756:	93 0b       	sbc	r25, r19
     758:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     75c:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     760:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     764:	01 15       	cp	r16, r1
     766:	11 05       	cpc	r17, r1
     768:	41 f0       	breq	.+16     	; 0x77a <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     76a:	c8 01       	movw	r24, r16
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     776:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     77a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <vApplicationMallocFailedHook>
     77e:	00 e0       	ldi	r16, 0x00	; 0
     780:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     782:	c8 01       	movw	r24, r16
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     792:	00 97       	sbiw	r24, 0x00	; 0
     794:	21 f1       	breq	.+72     	; 0x7de <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     796:	ec 01       	movw	r28, r24
     798:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     79a:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     79e:	4a 81       	ldd	r20, Y+2	; 0x02
     7a0:	5b 81       	ldd	r21, Y+3	; 0x03
     7a2:	a8 e3       	ldi	r26, 0x38	; 56
     7a4:	b1 e2       	ldi	r27, 0x21	; 33
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <vPortFree+0x1c>
     7a8:	df 01       	movw	r26, r30
     7aa:	ed 91       	ld	r30, X+
     7ac:	fc 91       	ld	r31, X
     7ae:	11 97       	sbiw	r26, 0x01	; 1
     7b0:	22 81       	ldd	r18, Z+2	; 0x02
     7b2:	33 81       	ldd	r19, Z+3	; 0x03
     7b4:	24 17       	cp	r18, r20
     7b6:	35 07       	cpc	r19, r21
     7b8:	b8 f3       	brcs	.-18     	; 0x7a8 <vPortFree+0x1a>
     7ba:	e8 83       	st	Y, r30
     7bc:	f9 83       	std	Y+1, r31	; 0x01
     7be:	cd 93       	st	X+, r28
     7c0:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     7c2:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     7c6:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     7ca:	48 0f       	add	r20, r24
     7cc:	59 1f       	adc	r21, r25
     7ce:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     7d2:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     7da:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <xTaskResumeAll>
	}
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     7e4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7e6:	03 96       	adiw	r24, 0x03	; 3
     7e8:	81 83       	std	Z+1, r24	; 0x01
     7ea:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	3f ef       	ldi	r19, 0xFF	; 255
     7f0:	23 83       	std	Z+3, r18	; 0x03
     7f2:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7f4:	85 83       	std	Z+5, r24	; 0x05
     7f6:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7f8:	87 83       	std	Z+7, r24	; 0x07
     7fa:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     7fc:	10 82       	st	Z, r1
     7fe:	08 95       	ret

00000800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     800:	fc 01       	movw	r30, r24
     802:	10 86       	std	Z+8, r1	; 0x08
     804:	11 86       	std	Z+9, r1	; 0x09
     806:	08 95       	ret

00000808 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	9c 01       	movw	r18, r24
     80e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     810:	dc 01       	movw	r26, r24
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	cd 91       	ld	r28, X+
     816:	dc 91       	ld	r29, X
     818:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     81a:	c2 83       	std	Z+2, r28	; 0x02
     81c:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	9d 81       	ldd	r25, Y+5	; 0x05
     822:	84 83       	std	Z+4, r24	; 0x04
     824:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     826:	8c 81       	ldd	r24, Y+4	; 0x04
     828:	9d 81       	ldd	r25, Y+5	; 0x05
     82a:	dc 01       	movw	r26, r24
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	6d 93       	st	X+, r22
     830:	7c 93       	st	X, r23
     832:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     834:	6c 83       	std	Y+4, r22	; 0x04
     836:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     838:	20 87       	std	Z+8, r18	; 0x08
     83a:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     83c:	f9 01       	movw	r30, r18
     83e:	80 81       	ld	r24, Z
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	80 83       	st	Z, r24
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     850:	48 81       	ld	r20, Y
     852:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     854:	4f 3f       	cpi	r20, 0xFF	; 255
     856:	2f ef       	ldi	r18, 0xFF	; 255
     858:	52 07       	cpc	r21, r18
     85a:	01 f1       	breq	.+64     	; 0x89c <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     85c:	dc 01       	movw	r26, r24
     85e:	13 96       	adiw	r26, 0x03	; 3
     860:	01 c0       	rjmp	.+2      	; 0x864 <vListInsert+0x1a>
     862:	df 01       	movw	r26, r30
     864:	12 96       	adiw	r26, 0x02	; 2
     866:	ed 91       	ld	r30, X+
     868:	fc 91       	ld	r31, X
     86a:	13 97       	sbiw	r26, 0x03	; 3
     86c:	20 81       	ld	r18, Z
     86e:	31 81       	ldd	r19, Z+1	; 0x01
     870:	42 17       	cp	r20, r18
     872:	53 07       	cpc	r21, r19
     874:	b0 f7       	brcc	.-20     	; 0x862 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     876:	ea 83       	std	Y+2, r30	; 0x02
     878:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     87a:	c4 83       	std	Z+4, r28	; 0x04
     87c:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     87e:	ac 83       	std	Y+4, r26	; 0x04
     880:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     882:	12 96       	adiw	r26, 0x02	; 2
     884:	cd 93       	st	X+, r28
     886:	dc 93       	st	X, r29
     888:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     88a:	88 87       	std	Y+8, r24	; 0x08
     88c:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     88e:	fc 01       	movw	r30, r24
     890:	20 81       	ld	r18, Z
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	20 83       	st	Z, r18
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     89c:	fc 01       	movw	r30, r24
     89e:	a7 81       	ldd	r26, Z+7	; 0x07
     8a0:	b0 85       	ldd	r27, Z+8	; 0x08
     8a2:	12 96       	adiw	r26, 0x02	; 2
     8a4:	ed 91       	ld	r30, X+
     8a6:	fc 91       	ld	r31, X
     8a8:	13 97       	sbiw	r26, 0x03	; 3
     8aa:	e5 cf       	rjmp	.-54     	; 0x876 <vListInsert+0x2c>

000008ac <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     8b2:	a0 85       	ldd	r26, Z+8	; 0x08
     8b4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8b6:	22 81       	ldd	r18, Z+2	; 0x02
     8b8:	33 81       	ldd	r19, Z+3	; 0x03
     8ba:	84 81       	ldd	r24, Z+4	; 0x04
     8bc:	95 81       	ldd	r25, Z+5	; 0x05
     8be:	e9 01       	movw	r28, r18
     8c0:	8c 83       	std	Y+4, r24	; 0x04
     8c2:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8c4:	84 81       	ldd	r24, Z+4	; 0x04
     8c6:	95 81       	ldd	r25, Z+5	; 0x05
     8c8:	ec 01       	movw	r28, r24
     8ca:	2a 83       	std	Y+2, r18	; 0x02
     8cc:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	2d 91       	ld	r18, X+
     8d2:	3c 91       	ld	r19, X
     8d4:	12 97       	sbiw	r26, 0x02	; 2
     8d6:	e2 17       	cp	r30, r18
     8d8:	f3 07       	cpc	r31, r19
     8da:	49 f0       	breq	.+18     	; 0x8ee <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     8dc:	10 86       	std	Z+8, r1	; 0x08
     8de:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     8e0:	8c 91       	ld	r24, X
     8e2:	81 50       	subi	r24, 0x01	; 1
     8e4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     8e6:	8c 91       	ld	r24, X
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	8d 93       	st	X+, r24
     8f2:	9c 93       	st	X, r25
     8f4:	12 97       	sbiw	r26, 0x02	; 2
     8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <uxListRemove+0x30>

000008f8 <pxPortInitialiseStack>:
void vPortYieldISR( void )
{
	portSAVE_CONTEXT();
	vTaskSwitchContext();
	portRESTORE_CONTEXT();
	asm volatile ( "reti" );
     8f8:	31 e1       	ldi	r19, 0x11	; 17
     8fa:	fc 01       	movw	r30, r24
     8fc:	30 83       	st	Z, r19
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	22 e2       	ldi	r18, 0x22	; 34
     902:	20 83       	st	Z, r18
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	a3 e3       	ldi	r26, 0x33	; 51
     908:	a0 83       	st	Z, r26
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	60 83       	st	Z, r22
     90e:	31 97       	sbiw	r30, 0x01	; 1
     910:	70 83       	st	Z, r23
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	10 82       	st	Z, r1
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	10 82       	st	Z, r1
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	60 e8       	ldi	r22, 0x80	; 128
     91e:	60 83       	st	Z, r22
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	10 82       	st	Z, r1
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	62 e0       	ldi	r22, 0x02	; 2
     928:	60 83       	st	Z, r22
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	60 83       	st	Z, r22
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	64 e0       	ldi	r22, 0x04	; 4
     934:	60 83       	st	Z, r22
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	65 e0       	ldi	r22, 0x05	; 5
     93a:	60 83       	st	Z, r22
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	66 e0       	ldi	r22, 0x06	; 6
     940:	60 83       	st	Z, r22
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	60 83       	st	Z, r22
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	68 e0       	ldi	r22, 0x08	; 8
     94c:	60 83       	st	Z, r22
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	69 e0       	ldi	r22, 0x09	; 9
     952:	60 83       	st	Z, r22
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	60 e1       	ldi	r22, 0x10	; 16
     958:	60 83       	st	Z, r22
     95a:	31 97       	sbiw	r30, 0x01	; 1
     95c:	30 83       	st	Z, r19
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	32 e1       	ldi	r19, 0x12	; 18
     962:	30 83       	st	Z, r19
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	33 e1       	ldi	r19, 0x13	; 19
     968:	30 83       	st	Z, r19
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	34 e1       	ldi	r19, 0x14	; 20
     96e:	30 83       	st	Z, r19
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	35 e1       	ldi	r19, 0x15	; 21
     974:	30 83       	st	Z, r19
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	36 e1       	ldi	r19, 0x16	; 22
     97a:	30 83       	st	Z, r19
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	37 e1       	ldi	r19, 0x17	; 23
     980:	30 83       	st	Z, r19
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	38 e1       	ldi	r19, 0x18	; 24
     986:	30 83       	st	Z, r19
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	39 e1       	ldi	r19, 0x19	; 25
     98c:	30 83       	st	Z, r19
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	30 e2       	ldi	r19, 0x20	; 32
     992:	30 83       	st	Z, r19
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	31 e2       	ldi	r19, 0x21	; 33
     998:	30 83       	st	Z, r19
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	20 83       	st	Z, r18
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	23 e2       	ldi	r18, 0x23	; 35
     9a2:	20 83       	st	Z, r18
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	40 83       	st	Z, r20
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	50 83       	st	Z, r21
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	26 e2       	ldi	r18, 0x26	; 38
     9b0:	20 83       	st	Z, r18
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	27 e2       	ldi	r18, 0x27	; 39
     9b6:	20 83       	st	Z, r18
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	28 e2       	ldi	r18, 0x28	; 40
     9bc:	20 83       	st	Z, r18
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	29 e2       	ldi	r18, 0x29	; 41
     9c2:	20 83       	st	Z, r18
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	20 e3       	ldi	r18, 0x30	; 48
     9c8:	20 83       	st	Z, r18
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	21 e3       	ldi	r18, 0x31	; 49
     9ce:	20 83       	st	Z, r18
     9d0:	87 97       	sbiw	r24, 0x27	; 39
     9d2:	08 95       	ret

000009d4 <xPortStartScheduler>:
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f8 e0       	ldi	r31, 0x08	; 8
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 83       	st	Z, r24
     9dc:	86 83       	std	Z+6, r24	; 0x06
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	9d e7       	ldi	r25, 0x7D	; 125
     9e2:	86 a3       	std	Z+38, r24	; 0x26
     9e4:	97 a3       	std	Z+39, r25	; 0x27
     9e6:	a0 91 a4 61 	lds	r26, 0x61A4	; 0x8061a4 <pxCurrentTCB>
     9ea:	b0 91 a5 61 	lds	r27, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
     9ee:	cd 91       	ld	r28, X+
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	dd 91       	ld	r29, X+
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	bf 90       	pop	r11
     a20:	af 90       	pop	r10
     a22:	9f 90       	pop	r9
     a24:	8f 90       	pop	r8
     a26:	7f 90       	pop	r7
     a28:	6f 90       	pop	r6
     a2a:	5f 90       	pop	r5
     a2c:	4f 90       	pop	r4
     a2e:	3f 90       	pop	r3
     a30:	2f 90       	pop	r2
     a32:	1f 90       	pop	r1
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	08 95       	ret
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	08 95       	ret

00000a40 <vPortYield>:
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	0f 92       	push	r0
     a48:	1f 92       	push	r1
     a4a:	11 24       	eor	r1, r1
     a4c:	2f 92       	push	r2
     a4e:	3f 92       	push	r3
     a50:	4f 92       	push	r4
     a52:	5f 92       	push	r5
     a54:	6f 92       	push	r6
     a56:	7f 92       	push	r7
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
     a88:	a0 91 a4 61 	lds	r26, 0x61A4	; 0x8061a4 <pxCurrentTCB>
     a8c:	b0 91 a5 61 	lds	r27, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
     a90:	0d b6       	in	r0, 0x3d	; 61
     a92:	0d 92       	st	X+, r0
     a94:	0e b6       	in	r0, 0x3e	; 62
     a96:	0d 92       	st	X+, r0
     a98:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <vTaskSwitchContext>
     a9c:	a0 91 a4 61 	lds	r26, 0x61A4	; 0x8061a4 <pxCurrentTCB>
     aa0:	b0 91 a5 61 	lds	r27, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
     aa4:	cd 91       	ld	r28, X+
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	dd 91       	ld	r29, X+
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	bf 90       	pop	r11
     ad6:	af 90       	pop	r10
     ad8:	9f 90       	pop	r9
     ada:	8f 90       	pop	r8
     adc:	7f 90       	pop	r7
     ade:	6f 90       	pop	r6
     ae0:	5f 90       	pop	r5
     ae2:	4f 90       	pop	r4
     ae4:	3f 90       	pop	r3
     ae6:	2f 90       	pop	r2
     ae8:	1f 90       	pop	r1
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	08 95       	ret

00000af2 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	0f 92       	push	r0
     afa:	1f 92       	push	r1
     afc:	11 24       	eor	r1, r1
     afe:	2f 92       	push	r2
     b00:	3f 92       	push	r3
     b02:	4f 92       	push	r4
     b04:	5f 92       	push	r5
     b06:	6f 92       	push	r6
     b08:	7f 92       	push	r7
     b0a:	8f 92       	push	r8
     b0c:	9f 92       	push	r9
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
     b3a:	a0 91 a4 61 	lds	r26, 0x61A4	; 0x8061a4 <pxCurrentTCB>
     b3e:	b0 91 a5 61 	lds	r27, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
     b42:	0d b6       	in	r0, 0x3d	; 61
     b44:	0d 92       	st	X+, r0
     b46:	0e b6       	in	r0, 0x3e	; 62
     b48:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     b4a:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     b4e:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     b52:	80 91 a7 63 	lds	r24, 0x63A7	; 0x8063a7 <StatsTimer>
     b56:	90 91 a8 63 	lds	r25, 0x63A8	; 0x8063a8 <StatsTimer+0x1>
     b5a:	a0 91 a9 63 	lds	r26, 0x63A9	; 0x8063a9 <StatsTimer+0x2>
     b5e:	b0 91 aa 63 	lds	r27, 0x63AA	; 0x8063aa <StatsTimer+0x3>
     b62:	82 0f       	add	r24, r18
     b64:	93 1f       	adc	r25, r19
     b66:	a1 1d       	adc	r26, r1
     b68:	b1 1d       	adc	r27, r1
     b6a:	80 93 a7 63 	sts	0x63A7, r24	; 0x8063a7 <StatsTimer>
     b6e:	90 93 a8 63 	sts	0x63A8, r25	; 0x8063a8 <StatsTimer+0x1>
     b72:	a0 93 a9 63 	sts	0x63A9, r26	; 0x8063a9 <StatsTimer+0x2>
     b76:	b0 93 aa 63 	sts	0x63AA, r27	; 0x8063aa <StatsTimer+0x3>
		xTaskIncrementTick();
     b7a:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskIncrementTick>
		vTaskSwitchContext();
     b7e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     b82:	a0 91 a4 61 	lds	r26, 0x61A4	; 0x8061a4 <pxCurrentTCB>
     b86:	b0 91 a5 61 	lds	r27, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
     b8a:	cd 91       	ld	r28, X+
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	dd 91       	ld	r29, X+
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	7f 90       	pop	r7
     bc4:	6f 90       	pop	r6
     bc6:	5f 90       	pop	r5
     bc8:	4f 90       	pop	r4
     bca:	3f 90       	pop	r3
     bcc:	2f 90       	pop	r2
     bce:	1f 90       	pop	r1
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0

		asm volatile ( "reti" );
     bd6:	18 95       	reti

00000bd8 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     bd8:	08 95       	ret

00000bda <__vector_20>:
	//TCC1.CTRLA=0b0111; //DIV1024	
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC1_OVF_vect)
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
	//StatsTimer++;
}
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <prvCopyDataToQueue>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
     bf8:	04 2f       	mov	r16, r20
     bfa:	1a 8d       	ldd	r17, Y+26	; 0x1a
     bfc:	4c 8d       	ldd	r20, Y+28	; 0x1c
     bfe:	41 11       	cpse	r20, r1
     c00:	0d c0       	rjmp	.+26     	; 0xc1c <prvCopyDataToQueue+0x2e>
     c02:	88 81       	ld	r24, Y
     c04:	99 81       	ldd	r25, Y+1	; 0x01
     c06:	89 2b       	or	r24, r25
     c08:	09 f4       	brne	.+2      	; 0xc0c <prvCopyDataToQueue+0x1e>
     c0a:	43 c0       	rjmp	.+134    	; 0xc92 <prvCopyDataToQueue+0xa4>
     c0c:	1f 5f       	subi	r17, 0xFF	; 255
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	1a 8f       	std	Y+26, r17	; 0x1a
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	01 11       	cpse	r16, r1
     c20:	15 c0       	rjmp	.+42     	; 0xc4c <prvCopyDataToQueue+0x5e>
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	9b 81       	ldd	r25, Y+3	; 0x03
     c26:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <memcpy>
     c2a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	9b 81       	ldd	r25, Y+3	; 0x03
     c30:	82 0f       	add	r24, r18
     c32:	91 1d       	adc	r25, r1
     c34:	8a 83       	std	Y+2, r24	; 0x02
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
     c3a:	3d 81       	ldd	r19, Y+5	; 0x05
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	28 f3       	brcs	.-54     	; 0xc0c <prvCopyDataToQueue+0x1e>
     c42:	88 81       	ld	r24, Y
     c44:	99 81       	ldd	r25, Y+1	; 0x01
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	9b 83       	std	Y+3, r25	; 0x03
     c4a:	e0 cf       	rjmp	.-64     	; 0xc0c <prvCopyDataToQueue+0x1e>
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	9f 81       	ldd	r25, Y+7	; 0x07
     c50:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <memcpy>
     c54:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	91 95       	neg	r25
     c5a:	81 95       	neg	r24
     c5c:	91 09       	sbc	r25, r1
     c5e:	2e 81       	ldd	r18, Y+6	; 0x06
     c60:	3f 81       	ldd	r19, Y+7	; 0x07
     c62:	28 0f       	add	r18, r24
     c64:	39 1f       	adc	r19, r25
     c66:	2e 83       	std	Y+6, r18	; 0x06
     c68:	3f 83       	std	Y+7, r19	; 0x07
     c6a:	48 81       	ld	r20, Y
     c6c:	59 81       	ldd	r21, Y+1	; 0x01
     c6e:	24 17       	cp	r18, r20
     c70:	35 07       	cpc	r19, r21
     c72:	30 f4       	brcc	.+12     	; 0xc80 <prvCopyDataToQueue+0x92>
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	3d 81       	ldd	r19, Y+5	; 0x05
     c78:	82 0f       	add	r24, r18
     c7a:	93 1f       	adc	r25, r19
     c7c:	8e 83       	std	Y+6, r24	; 0x06
     c7e:	9f 83       	std	Y+7, r25	; 0x07
     c80:	02 30       	cpi	r16, 0x02	; 2
     c82:	21 f6       	brne	.-120    	; 0xc0c <prvCopyDataToQueue+0x1e>
     c84:	11 23       	and	r17, r17
     c86:	11 f0       	breq	.+4      	; 0xc8c <prvCopyDataToQueue+0x9e>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	c2 cf       	rjmp	.-124    	; 0xc10 <prvCopyDataToQueue+0x22>
     c8c:	11 e0       	ldi	r17, 0x01	; 1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	bf cf       	rjmp	.-130    	; 0xc10 <prvCopyDataToQueue+0x22>
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	0e 94 55 10 	call	0x20aa	; 0x20aa <xTaskPriorityDisinherit>
     c9a:	1c 82       	std	Y+4, r1	; 0x04
     c9c:	1d 82       	std	Y+5, r1	; 0x05
     c9e:	1f 5f       	subi	r17, 0xFF	; 255
     ca0:	b7 cf       	rjmp	.-146    	; 0xc10 <prvCopyDataToQueue+0x22>

00000ca2 <prvCopyDataFromQueue>:
     ca2:	fc 01       	movw	r30, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	44 8d       	ldd	r20, Z+28	; 0x1c
     ca8:	44 23       	and	r20, r20
     caa:	91 f0       	breq	.+36     	; 0xcd0 <prvCopyDataFromQueue+0x2e>
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	66 81       	ldd	r22, Z+6	; 0x06
     cb0:	77 81       	ldd	r23, Z+7	; 0x07
     cb2:	64 0f       	add	r22, r20
     cb4:	75 1f       	adc	r23, r21
     cb6:	66 83       	std	Z+6, r22	; 0x06
     cb8:	77 83       	std	Z+7, r23	; 0x07
     cba:	24 81       	ldd	r18, Z+4	; 0x04
     cbc:	35 81       	ldd	r19, Z+5	; 0x05
     cbe:	62 17       	cp	r22, r18
     cc0:	73 07       	cpc	r23, r19
     cc2:	20 f0       	brcs	.+8      	; 0xccc <prvCopyDataFromQueue+0x2a>
     cc4:	60 81       	ld	r22, Z
     cc6:	71 81       	ldd	r23, Z+1	; 0x01
     cc8:	66 83       	std	Z+6, r22	; 0x06
     cca:	77 83       	std	Z+7, r23	; 0x07
     ccc:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <memcpy>
     cd0:	08 95       	ret

00000cd2 <prvUnlockQueue>:
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	8c 01       	movw	r16, r24
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	0f 92       	push	r0
     ce4:	fc 01       	movw	r30, r24
     ce6:	c6 8d       	ldd	r28, Z+30	; 0x1e
     ce8:	1c 16       	cp	r1, r28
     cea:	c4 f4       	brge	.+48     	; 0xd1c <prvUnlockQueue+0x4a>
     cec:	fc 01       	movw	r30, r24
     cee:	81 89       	ldd	r24, Z+17	; 0x11
     cf0:	88 23       	and	r24, r24
     cf2:	a1 f0       	breq	.+40     	; 0xd1c <prvUnlockQueue+0x4a>
     cf4:	78 01       	movw	r14, r16
     cf6:	f1 e1       	ldi	r31, 0x11	; 17
     cf8:	ef 0e       	add	r14, r31
     cfa:	f1 1c       	adc	r15, r1
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <prvUnlockQueue+0x38>
     cfe:	c1 50       	subi	r28, 0x01	; 1
     d00:	69 f0       	breq	.+26     	; 0xd1c <prvUnlockQueue+0x4a>
     d02:	f8 01       	movw	r30, r16
     d04:	81 89       	ldd	r24, Z+17	; 0x11
     d06:	88 23       	and	r24, r24
     d08:	49 f0       	breq	.+18     	; 0xd1c <prvUnlockQueue+0x4a>
     d0a:	c7 01       	movw	r24, r14
     d0c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskRemoveFromEventList>
     d10:	88 23       	and	r24, r24
     d12:	a9 f3       	breq	.-22     	; 0xcfe <prvUnlockQueue+0x2c>
     d14:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <vTaskMissedYield>
     d18:	c1 50       	subi	r28, 0x01	; 1
     d1a:	99 f7       	brne	.-26     	; 0xd02 <prvUnlockQueue+0x30>
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	f8 01       	movw	r30, r16
     d20:	86 8f       	std	Z+30, r24	; 0x1e
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	0f 92       	push	r0
     d2c:	c5 8d       	ldd	r28, Z+29	; 0x1d
     d2e:	1c 16       	cp	r1, r28
     d30:	c4 f4       	brge	.+48     	; 0xd62 <prvUnlockQueue+0x90>
     d32:	f8 01       	movw	r30, r16
     d34:	80 85       	ldd	r24, Z+8	; 0x08
     d36:	88 23       	and	r24, r24
     d38:	a1 f0       	breq	.+40     	; 0xd62 <prvUnlockQueue+0x90>
     d3a:	78 01       	movw	r14, r16
     d3c:	f8 e0       	ldi	r31, 0x08	; 8
     d3e:	ef 0e       	add	r14, r31
     d40:	f1 1c       	adc	r15, r1
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <prvUnlockQueue+0x7e>
     d44:	c1 50       	subi	r28, 0x01	; 1
     d46:	69 f0       	breq	.+26     	; 0xd62 <prvUnlockQueue+0x90>
     d48:	f8 01       	movw	r30, r16
     d4a:	80 85       	ldd	r24, Z+8	; 0x08
     d4c:	88 23       	and	r24, r24
     d4e:	49 f0       	breq	.+18     	; 0xd62 <prvUnlockQueue+0x90>
     d50:	c7 01       	movw	r24, r14
     d52:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskRemoveFromEventList>
     d56:	88 23       	and	r24, r24
     d58:	a9 f3       	breq	.-22     	; 0xd44 <prvUnlockQueue+0x72>
     d5a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <vTaskMissedYield>
     d5e:	c1 50       	subi	r28, 0x01	; 1
     d60:	99 f7       	brne	.-26     	; 0xd48 <prvUnlockQueue+0x76>
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	f8 01       	movw	r30, r16
     d66:	85 8f       	std	Z+29, r24	; 0x1d
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	08 95       	ret

00000d78 <xQueueGenericReset>:
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
     d80:	16 2f       	mov	r17, r22
     d82:	89 2b       	or	r24, r25
     d84:	09 f4       	brne	.+2      	; 0xd88 <xQueueGenericReset+0x10>
     d86:	3e c0       	rjmp	.+124    	; 0xe04 <xQueueGenericReset+0x8c>
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	0f 92       	push	r0
     d8e:	48 81       	ld	r20, Y
     d90:	59 81       	ldd	r21, Y+1	; 0x01
     d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d94:	6c 8d       	ldd	r22, Y+28	; 0x1c
     d96:	9a 01       	movw	r18, r20
     d98:	86 9f       	mul	r24, r22
     d9a:	20 0d       	add	r18, r0
     d9c:	31 1d       	adc	r19, r1
     d9e:	11 24       	eor	r1, r1
     da0:	2c 83       	std	Y+4, r18	; 0x04
     da2:	3d 83       	std	Y+5, r19	; 0x05
     da4:	1a 8e       	std	Y+26, r1	; 0x1a
     da6:	4a 83       	std	Y+2, r20	; 0x02
     da8:	5b 83       	std	Y+3, r21	; 0x03
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	68 9f       	mul	r22, r24
     db0:	90 01       	movw	r18, r0
     db2:	69 9f       	mul	r22, r25
     db4:	30 0d       	add	r19, r0
     db6:	11 24       	eor	r1, r1
     db8:	ca 01       	movw	r24, r20
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	8e 83       	std	Y+6, r24	; 0x06
     dc0:	9f 83       	std	Y+7, r25	; 0x07
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	8d 8f       	std	Y+29, r24	; 0x1d
     dc6:	8e 8f       	std	Y+30, r24	; 0x1e
     dc8:	11 11       	cpse	r17, r1
     dca:	13 c0       	rjmp	.+38     	; 0xdf2 <xQueueGenericReset+0x7a>
     dcc:	88 85       	ldd	r24, Y+8	; 0x08
     dce:	81 11       	cpse	r24, r1
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <xQueueGenericReset+0x68>
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret
     de0:	ce 01       	movw	r24, r28
     de2:	08 96       	adiw	r24, 0x08	; 8
     de4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskRemoveFromEventList>
     de8:	88 23       	and	r24, r24
     dea:	99 f3       	breq	.-26     	; 0xdd2 <xQueueGenericReset+0x5a>
     dec:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
     df0:	f0 cf       	rjmp	.-32     	; 0xdd2 <xQueueGenericReset+0x5a>
     df2:	ce 01       	movw	r24, r28
     df4:	08 96       	adiw	r24, 0x08	; 8
     df6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
     dfa:	ce 01       	movw	r24, r28
     dfc:	41 96       	adiw	r24, 0x11	; 17
     dfe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
     e02:	e7 cf       	rjmp	.-50     	; 0xdd2 <xQueueGenericReset+0x5a>
     e04:	63 e0       	ldi	r22, 0x03	; 3
     e06:	71 e0       	ldi	r23, 0x01	; 1
     e08:	87 e2       	ldi	r24, 0x27	; 39
     e0a:	90 e2       	ldi	r25, 0x20	; 32
     e0c:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
     e10:	bb cf       	rjmp	.-138    	; 0xd88 <xQueueGenericReset+0x10>

00000e12 <xQueueGenericCreate>:
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	18 2f       	mov	r17, r24
     e1e:	06 2f       	mov	r16, r22
     e20:	f4 2e       	mov	r15, r20
     e22:	88 23       	and	r24, r24
     e24:	99 f1       	breq	.+102    	; 0xe8c <xQueueGenericCreate+0x7a>
     e26:	00 23       	and	r16, r16
     e28:	d1 f0       	breq	.+52     	; 0xe5e <xQueueGenericCreate+0x4c>
     e2a:	10 9f       	mul	r17, r16
     e2c:	c0 01       	movw	r24, r0
     e2e:	11 24       	eor	r1, r1
     e30:	81 96       	adiw	r24, 0x21	; 33
     e32:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
     e36:	ec 01       	movw	r28, r24
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	51 f0       	breq	.+20     	; 0xe50 <xQueueGenericCreate+0x3e>
     e3c:	81 96       	adiw	r24, 0x21	; 33
     e3e:	88 83       	st	Y, r24
     e40:	99 83       	std	Y+1, r25	; 0x01
     e42:	1b 8f       	std	Y+27, r17	; 0x1b
     e44:	0c 8f       	std	Y+28, r16	; 0x1c
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 bc 06 	call	0xd78	; 0xd78 <xQueueGenericReset>
     e4e:	f8 a2       	std	Y+32, r15	; 0x20
     e50:	ce 01       	movw	r24, r28
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	08 95       	ret
     e5e:	81 e2       	ldi	r24, 0x21	; 33
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
     e66:	ec 01       	movw	r28, r24
     e68:	89 2b       	or	r24, r25
     e6a:	91 f3       	breq	.-28     	; 0xe50 <xQueueGenericCreate+0x3e>
     e6c:	c8 83       	st	Y, r28
     e6e:	d9 83       	std	Y+1, r29	; 0x01
     e70:	1b 8f       	std	Y+27, r17	; 0x1b
     e72:	0c 8f       	std	Y+28, r16	; 0x1c
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	ce 01       	movw	r24, r28
     e78:	0e 94 bc 06 	call	0xd78	; 0xd78 <xQueueGenericReset>
     e7c:	f8 a2       	std	Y+32, r15	; 0x20
     e7e:	ce 01       	movw	r24, r28
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	08 95       	ret
     e8c:	66 e7       	ldi	r22, 0x76	; 118
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	87 e2       	ldi	r24, 0x27	; 39
     e92:	90 e2       	ldi	r25, 0x20	; 32
     e94:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
     e98:	c6 cf       	rjmp	.-116    	; 0xe26 <xQueueGenericCreate+0x14>

00000e9a <xQueueGenericSend>:
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	25 97       	sbiw	r28, 0x05	; 5
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	8c 01       	movw	r16, r24
     eb8:	6b 01       	movw	r12, r22
     eba:	4c 83       	std	Y+4, r20	; 0x04
     ebc:	5d 83       	std	Y+5, r21	; 0x05
     ebe:	b2 2e       	mov	r11, r18
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f4       	brne	.+2      	; 0xec6 <xQueueGenericSend+0x2c>
     ec4:	b2 c0       	rjmp	.+356    	; 0x102a <xQueueGenericSend+0x190>
     ec6:	c1 14       	cp	r12, r1
     ec8:	d1 04       	cpc	r13, r1
     eca:	09 f4       	brne	.+2      	; 0xece <xQueueGenericSend+0x34>
     ecc:	a2 c0       	rjmp	.+324    	; 0x1012 <xQueueGenericSend+0x178>
     ece:	f2 e0       	ldi	r31, 0x02	; 2
     ed0:	bf 16       	cp	r11, r31
     ed2:	09 f4       	brne	.+2      	; 0xed6 <xQueueGenericSend+0x3c>
     ed4:	7d c0       	rjmp	.+250    	; 0xfd0 <xQueueGenericSend+0x136>
     ed6:	f8 01       	movw	r30, r16
     ed8:	83 8d       	ldd	r24, Z+27	; 0x1b
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	78 01       	movw	r14, r16
     ede:	f8 e0       	ldi	r31, 0x08	; 8
     ee0:	ef 0e       	add	r14, r31
     ee2:	f1 1c       	adc	r15, r1
     ee4:	10 c0       	rjmp	.+32     	; 0xf06 <xQueueGenericSend+0x6c>
     ee6:	6c 81       	ldd	r22, Y+4	; 0x04
     ee8:	7d 81       	ldd	r23, Y+5	; 0x05
     eea:	c7 01       	movw	r24, r14
     eec:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <vTaskPlaceOnEventList>
     ef0:	c8 01       	movw	r24, r16
     ef2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <prvUnlockQueue>
     ef6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
     efa:	88 23       	and	r24, r24
     efc:	09 f4       	brne	.+2      	; 0xf00 <xQueueGenericSend+0x66>
     efe:	4a c0       	rjmp	.+148    	; 0xf94 <xQueueGenericSend+0xfa>
     f00:	f8 01       	movw	r30, r16
     f02:	83 8d       	ldd	r24, Z+27	; 0x1b
     f04:	21 e0       	ldi	r18, 0x01	; 1
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	0f 92       	push	r0
     f0c:	f8 01       	movw	r30, r16
     f0e:	92 8d       	ldd	r25, Z+26	; 0x1a
     f10:	98 17       	cp	r25, r24
     f12:	08 f4       	brcc	.+2      	; 0xf16 <xQueueGenericSend+0x7c>
     f14:	42 c0       	rjmp	.+132    	; 0xf9a <xQueueGenericSend+0x100>
     f16:	f2 e0       	ldi	r31, 0x02	; 2
     f18:	bf 16       	cp	r11, r31
     f1a:	09 f4       	brne	.+2      	; 0xf1e <xQueueGenericSend+0x84>
     f1c:	3e c0       	rjmp	.+124    	; 0xf9a <xQueueGenericSend+0x100>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	89 2b       	or	r24, r25
     f24:	09 f4       	brne	.+2      	; 0xf28 <xQueueGenericSend+0x8e>
     f26:	60 c0       	rjmp	.+192    	; 0xfe8 <xQueueGenericSend+0x14e>
     f28:	22 23       	and	r18, r18
     f2a:	59 f1       	breq	.+86     	; 0xf82 <xQueueGenericSend+0xe8>
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSuspendAll>
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	0f 92       	push	r0
     f3a:	f8 01       	movw	r30, r16
     f3c:	85 8d       	ldd	r24, Z+29	; 0x1d
     f3e:	8f 3f       	cpi	r24, 0xFF	; 255
     f40:	39 f1       	breq	.+78     	; 0xf90 <xQueueGenericSend+0xf6>
     f42:	f8 01       	movw	r30, r16
     f44:	86 8d       	ldd	r24, Z+30	; 0x1e
     f46:	8f 3f       	cpi	r24, 0xFF	; 255
     f48:	09 f1       	breq	.+66     	; 0xf8c <xQueueGenericSend+0xf2>
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	be 01       	movw	r22, r28
     f50:	6c 5f       	subi	r22, 0xFC	; 252
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <xTaskCheckForTimeOut>
     f5c:	81 11       	cpse	r24, r1
     f5e:	48 c0       	rjmp	.+144    	; 0xff0 <xQueueGenericSend+0x156>
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	0f 92       	push	r0
     f66:	f8 01       	movw	r30, r16
     f68:	92 8d       	ldd	r25, Z+26	; 0x1a
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	83 8d       	ldd	r24, Z+27	; 0x1b
     f70:	98 17       	cp	r25, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <xQueueGenericSend+0xdc>
     f74:	b8 cf       	rjmp	.-144    	; 0xee6 <xQueueGenericSend+0x4c>
     f76:	c8 01       	movw	r24, r16
     f78:	0e 94 69 06 	call	0xcd2	; 0xcd2 <prvUnlockQueue>
     f7c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
     f80:	bf cf       	rjmp	.-130    	; 0xf00 <xQueueGenericSend+0x66>
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vTaskInternalSetTimeOutState>
     f8a:	d0 cf       	rjmp	.-96     	; 0xf2c <xQueueGenericSend+0x92>
     f8c:	16 8e       	std	Z+30, r1	; 0x1e
     f8e:	dd cf       	rjmp	.-70     	; 0xf4a <xQueueGenericSend+0xb0>
     f90:	15 8e       	std	Z+29, r1	; 0x1d
     f92:	d7 cf       	rjmp	.-82     	; 0xf42 <xQueueGenericSend+0xa8>
     f94:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
     f98:	b3 cf       	rjmp	.-154    	; 0xf00 <xQueueGenericSend+0x66>
     f9a:	4b 2d       	mov	r20, r11
     f9c:	b6 01       	movw	r22, r12
     f9e:	c8 01       	movw	r24, r16
     fa0:	0e 94 f7 05 	call	0xbee	; 0xbee <prvCopyDataToQueue>
     fa4:	f8 01       	movw	r30, r16
     fa6:	91 89       	ldd	r25, Z+17	; 0x11
     fa8:	91 11       	cpse	r25, r1
     faa:	2c c0       	rjmp	.+88     	; 0x1004 <xQueueGenericSend+0x16a>
     fac:	81 11       	cpse	r24, r1
     fae:	27 c0       	rjmp	.+78     	; 0xffe <xQueueGenericSend+0x164>
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	25 96       	adiw	r28, 0x05	; 5
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	08 95       	ret
     fd0:	f8 01       	movw	r30, r16
     fd2:	83 8d       	ldd	r24, Z+27	; 0x1b
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f4       	brne	.+2      	; 0xfda <xQueueGenericSend+0x140>
     fd8:	80 cf       	rjmp	.-256    	; 0xeda <xQueueGenericSend+0x40>
     fda:	63 ef       	ldi	r22, 0xF3	; 243
     fdc:	72 e0       	ldi	r23, 0x02	; 2
     fde:	87 e2       	ldi	r24, 0x27	; 39
     fe0:	90 e2       	ldi	r25, 0x20	; 32
     fe2:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
     fe6:	77 cf       	rjmp	.-274    	; 0xed6 <xQueueGenericSend+0x3c>
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	e3 cf       	rjmp	.-58     	; 0xfb6 <xQueueGenericSend+0x11c>
     ff0:	c8 01       	movw	r24, r16
     ff2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <prvUnlockQueue>
     ff6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	dc cf       	rjmp	.-72     	; 0xfb6 <xQueueGenericSend+0x11c>
     ffe:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1002:	d6 cf       	rjmp	.-84     	; 0xfb0 <xQueueGenericSend+0x116>
    1004:	c8 01       	movw	r24, r16
    1006:	41 96       	adiw	r24, 0x11	; 17
    1008:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskRemoveFromEventList>
    100c:	88 23       	and	r24, r24
    100e:	81 f2       	breq	.-96     	; 0xfb0 <xQueueGenericSend+0x116>
    1010:	f6 cf       	rjmp	.-20     	; 0xffe <xQueueGenericSend+0x164>
    1012:	f8 01       	movw	r30, r16
    1014:	84 8d       	ldd	r24, Z+28	; 0x1c
    1016:	88 23       	and	r24, r24
    1018:	09 f4       	brne	.+2      	; 0x101c <xQueueGenericSend+0x182>
    101a:	59 cf       	rjmp	.-334    	; 0xece <xQueueGenericSend+0x34>
    101c:	62 ef       	ldi	r22, 0xF2	; 242
    101e:	72 e0       	ldi	r23, 0x02	; 2
    1020:	87 e2       	ldi	r24, 0x27	; 39
    1022:	90 e2       	ldi	r25, 0x20	; 32
    1024:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1028:	52 cf       	rjmp	.-348    	; 0xece <xQueueGenericSend+0x34>
    102a:	61 ef       	ldi	r22, 0xF1	; 241
    102c:	72 e0       	ldi	r23, 0x02	; 2
    102e:	87 e2       	ldi	r24, 0x27	; 39
    1030:	90 e2       	ldi	r25, 0x20	; 32
    1032:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1036:	47 cf       	rjmp	.-370    	; 0xec6 <xQueueGenericSend+0x2c>

00001038 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    1038:	af 92       	push	r10
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	25 97       	sbiw	r28, 0x05	; 5
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	8c 01       	movw	r16, r24
    1056:	5b 01       	movw	r10, r22
    1058:	4c 83       	std	Y+4, r20	; 0x04
    105a:	5d 83       	std	Y+5, r21	; 0x05
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    105c:	89 2b       	or	r24, r25
    105e:	09 f4       	brne	.+2      	; 0x1062 <xQueueReceive+0x2a>
    1060:	a1 c0       	rjmp	.+322    	; 0x11a4 <xQueueReceive+0x16c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1062:	a1 14       	cp	r10, r1
    1064:	b1 04       	cpc	r11, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <xQueueReceive+0x32>
    1068:	91 c0       	rjmp	.+290    	; 0x118c <xQueueReceive+0x154>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    106a:	20 e0       	ldi	r18, 0x00	; 0
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    106c:	68 01       	movw	r12, r16
    106e:	f1 e1       	ldi	r31, 0x11	; 17
    1070:	cf 0e       	add	r12, r31
    1072:	d1 1c       	adc	r13, r1
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    107a:	f8 01       	movw	r30, r16
    107c:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    107e:	f1 10       	cpse	r15, r1
    1080:	6a c0       	rjmp	.+212    	; 0x1156 <xQueueReceive+0x11e>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	89 2b       	or	r24, r25
    1088:	09 f4       	brne	.+2      	; 0x108c <xQueueReceive+0x54>
    108a:	73 c0       	rjmp	.+230    	; 0x1172 <xQueueReceive+0x13a>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    108c:	22 23       	and	r18, r18
    108e:	09 f4       	brne	.+2      	; 0x1092 <xQueueReceive+0x5a>
    1090:	59 c0       	rjmp	.+178    	; 0x1144 <xQueueReceive+0x10c>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1096:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	0f 92       	push	r0
    10a0:	f8 01       	movw	r30, r16
    10a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    10a4:	8f 3f       	cpi	r24, 0xFF	; 255
    10a6:	09 f4       	brne	.+2      	; 0x10aa <xQueueReceive+0x72>
    10a8:	54 c0       	rjmp	.+168    	; 0x1152 <xQueueReceive+0x11a>
    10aa:	f8 01       	movw	r30, r16
    10ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    10ae:	8f 3f       	cpi	r24, 0xFF	; 255
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <xQueueReceive+0x7c>
    10b2:	4d c0       	rjmp	.+154    	; 0x114e <xQueueReceive+0x116>
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    10b8:	be 01       	movw	r22, r28
    10ba:	6c 5f       	subi	r22, 0xFC	; 252
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <xTaskCheckForTimeOut>
    10c6:	81 11       	cpse	r24, r1
    10c8:	22 c0       	rjmp	.+68     	; 0x110e <xQueueReceive+0xd6>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    10d0:	f8 01       	movw	r30, r16
    10d2:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    10d8:	81 11       	cpse	r24, r1
    10da:	12 c0       	rjmp	.+36     	; 0x1100 <xQueueReceive+0xc8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    10dc:	6c 81       	ldd	r22, Y+4	; 0x04
    10de:	7d 81       	ldd	r23, Y+5	; 0x05
    10e0:	c6 01       	movw	r24, r12
    10e2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    10e6:	c8 01       	movw	r24, r16
    10e8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    10ec:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
    10f0:	88 23       	and	r24, r24
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <xQueueReceive+0xc0>
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	be cf       	rjmp	.-132    	; 0x1074 <xQueueReceive+0x3c>
				{
					portYIELD_WITHIN_API();
    10f8:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	ba cf       	rjmp	.-140    	; 0x1074 <xQueueReceive+0x3c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    1100:	c8 01       	movw	r24, r16
    1102:	0e 94 69 06 	call	0xcd2	; 0xcd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1106:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	b3 cf       	rjmp	.-154    	; 0x1074 <xQueueReceive+0x3c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    110e:	c8 01       	movw	r24, r16
    1110:	0e 94 69 06 	call	0xcd2	; 0xcd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1114:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    111e:	f8 01       	movw	r30, r16
    1120:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1126:	81 11       	cpse	r24, r1
    1128:	e5 cf       	rjmp	.-54     	; 0x10f4 <xQueueReceive+0xbc>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    112a:	25 96       	adiw	r28, 0x05	; 5
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	08 95       	ret
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vTaskInternalSetTimeOutState>
    114c:	a2 cf       	rjmp	.-188    	; 0x1092 <xQueueReceive+0x5a>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    114e:	16 8e       	std	Z+30, r1	; 0x1e
    1150:	b1 cf       	rjmp	.-158    	; 0x10b4 <xQueueReceive+0x7c>
    1152:	15 8e       	std	Z+29, r1	; 0x1d
    1154:	aa cf       	rjmp	.-172    	; 0x10aa <xQueueReceive+0x72>
			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1156:	b5 01       	movw	r22, r10
    1158:	c8 01       	movw	r24, r16
    115a:	0e 94 51 06 	call	0xca2	; 0xca2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    115e:	fa 94       	dec	r15
    1160:	f8 01       	movw	r30, r16
    1162:	f2 8e       	std	Z+26, r15	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1164:	80 85       	ldd	r24, Z+8	; 0x08
    1166:	81 11       	cpse	r24, r1
    1168:	08 c0       	rjmp	.+16     	; 0x117a <xQueueReceive+0x142>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	dc cf       	rjmp	.-72     	; 0x112a <xQueueReceive+0xf2>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	d8 cf       	rjmp	.-80     	; 0x112a <xQueueReceive+0xf2>
				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    117a:	c8 01       	movw	r24, r16
    117c:	08 96       	adiw	r24, 0x08	; 8
    117e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskRemoveFromEventList>
    1182:	88 23       	and	r24, r24
    1184:	91 f3       	breq	.-28     	; 0x116a <xQueueReceive+0x132>
					{
						queueYIELD_IF_USING_PREEMPTION();
    1186:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    118a:	ef cf       	rjmp	.-34     	; 0x116a <xQueueReceive+0x132>
	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    118c:	f8 01       	movw	r30, r16
    118e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <xQueueReceive+0x15e>
    1194:	6a cf       	rjmp	.-300    	; 0x106a <xQueueReceive+0x32>
    1196:	64 e0       	ldi	r22, 0x04	; 4
    1198:	75 e0       	ldi	r23, 0x05	; 5
    119a:	87 e2       	ldi	r24, 0x27	; 39
    119c:	90 e2       	ldi	r25, 0x20	; 32
    119e:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    11a2:	63 cf       	rjmp	.-314    	; 0x106a <xQueueReceive+0x32>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	75 e0       	ldi	r23, 0x05	; 5
    11a8:	87 e2       	ldi	r24, 0x27	; 39
    11aa:	90 e2       	ldi	r25, 0x20	; 32
    11ac:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    11b0:	58 cf       	rjmp	.-336    	; 0x1062 <xQueueReceive+0x2a>

000011b2 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    11b2:	20 c0       	rjmp	.+64     	; 0x11f4 <prvIdleTask+0x42>
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	0f 92       	push	r0
    11ba:	e0 91 5d 61 	lds	r30, 0x615D	; 0x80615d <xTasksWaitingTermination+0x5>
    11be:	f0 91 5e 61 	lds	r31, 0x615E	; 0x80615e <xTasksWaitingTermination+0x6>
    11c2:	c6 81       	ldd	r28, Z+6	; 0x06
    11c4:	d7 81       	ldd	r29, Z+7	; 0x07
    11c6:	ce 01       	movw	r24, r28
    11c8:	02 96       	adiw	r24, 0x02	; 2
    11ca:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    11ce:	80 91 4d 61 	lds	r24, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	80 93 4d 61 	sts	0x614D, r24	; 0x80614d <uxCurrentNumberOfTasks>
    11d8:	80 91 57 61 	lds	r24, 0x6157	; 0x806157 <uxDeletedTasksWaitingCleanUp>
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	80 93 57 61 	sts	0x6157, r24	; 0x806157 <uxDeletedTasksWaitingCleanUp>
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	8f 89       	ldd	r24, Y+23	; 0x17
    11e8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ea:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortFree>
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortFree>
    11f4:	80 91 57 61 	lds	r24, 0x6157	; 0x806157 <uxDeletedTasksWaitingCleanUp>
    11f8:	81 11       	cpse	r24, r1
    11fa:	dc cf       	rjmp	.-72     	; 0x11b4 <prvIdleTask+0x2>
    11fc:	80 91 80 61 	lds	r24, 0x6180	; 0x806180 <pxReadyTasksLists>
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	10 f0       	brcs	.+4      	; 0x1208 <prvIdleTask+0x56>
    1204:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1208:	0e 94 62 11 	call	0x22c4	; 0x22c4 <vApplicationIdleHook>
    120c:	f3 cf       	rjmp	.-26     	; 0x11f4 <prvIdleTask+0x42>

0000120e <prvWriteNameToBuffer>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <strcpy>
    1218:	fe 01       	movw	r30, r28
    121a:	01 90       	ld	r0, Z+
    121c:	00 20       	and	r0, r0
    121e:	e9 f7       	brne	.-6      	; 0x121a <prvWriteNameToBuffer+0xc>
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	ec 1b       	sub	r30, r28
    1224:	fd 0b       	sbc	r31, r29
    1226:	e7 30       	cpi	r30, 0x07	; 7
    1228:	f1 05       	cpc	r31, r1
    122a:	60 f4       	brcc	.+24     	; 0x1244 <prvWriteNameToBuffer+0x36>
    122c:	ec 0f       	add	r30, r28
    122e:	fd 1f       	adc	r31, r29
    1230:	9e 01       	movw	r18, r28
    1232:	29 5f       	subi	r18, 0xF9	; 249
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	80 e2       	ldi	r24, 0x20	; 32
    1238:	81 93       	st	Z+, r24
    123a:	e2 17       	cp	r30, r18
    123c:	f3 07       	cpc	r31, r19
    123e:	e1 f7       	brne	.-8      	; 0x1238 <prvWriteNameToBuffer+0x2a>
    1240:	e7 e0       	ldi	r30, 0x07	; 7
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	ce 01       	movw	r24, r28
    1246:	8e 0f       	add	r24, r30
    1248:	9f 1f       	adc	r25, r31
    124a:	fc 01       	movw	r30, r24
    124c:	10 82       	st	Z, r1
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <prvResetNextTaskUnblockTime.part.0>:
    1254:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    1258:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    125c:	05 80       	ldd	r0, Z+5	; 0x05
    125e:	f6 81       	ldd	r31, Z+6	; 0x06
    1260:	e0 2d       	mov	r30, r0
    1262:	06 80       	ldd	r0, Z+6	; 0x06
    1264:	f7 81       	ldd	r31, Z+7	; 0x07
    1266:	e0 2d       	mov	r30, r0
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	80 93 43 61 	sts	0x6143, r24	; 0x806143 <xNextTaskUnblockTime>
    1270:	90 93 44 61 	sts	0x6144, r25	; 0x806144 <xNextTaskUnblockTime+0x1>
    1274:	08 95       	ret

00001276 <prvAddCurrentTaskToDelayedList>:
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	f6 2e       	mov	r15, r22
    1284:	00 91 4b 61 	lds	r16, 0x614B	; 0x80614b <xTickCount>
    1288:	10 91 4c 61 	lds	r17, 0x614C	; 0x80614c <xTickCount+0x1>
    128c:	80 91 a4 61 	lds	r24, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1290:	90 91 a5 61 	lds	r25, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    129a:	cf 3f       	cpi	r28, 0xFF	; 255
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	d8 07       	cpc	r29, r24
    12a0:	a9 f1       	breq	.+106    	; 0x130c <prvAddCurrentTaskToDelayedList+0x96>
    12a2:	c0 0f       	add	r28, r16
    12a4:	d1 1f       	adc	r29, r17
    12a6:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    12aa:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    12ae:	c2 83       	std	Z+2, r28	; 0x02
    12b0:	d3 83       	std	Z+3, r29	; 0x03
    12b2:	60 91 a4 61 	lds	r22, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    12b6:	70 91 a5 61 	lds	r23, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    12ba:	c0 17       	cp	r28, r16
    12bc:	d1 07       	cpc	r29, r17
    12be:	c8 f0       	brcs	.+50     	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x7c>
    12c0:	80 91 6c 61 	lds	r24, 0x616C	; 0x80616c <pxDelayedTaskList>
    12c4:	90 91 6d 61 	lds	r25, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    12c8:	6e 5f       	subi	r22, 0xFE	; 254
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    12d0:	80 91 43 61 	lds	r24, 0x6143	; 0x806143 <xNextTaskUnblockTime>
    12d4:	90 91 44 61 	lds	r25, 0x6144	; 0x806144 <xNextTaskUnblockTime+0x1>
    12d8:	c8 17       	cp	r28, r24
    12da:	d9 07       	cpc	r29, r25
    12dc:	20 f4       	brcc	.+8      	; 0x12e6 <prvAddCurrentTaskToDelayedList+0x70>
    12de:	c0 93 43 61 	sts	0x6143, r28	; 0x806143 <xNextTaskUnblockTime>
    12e2:	d0 93 44 61 	sts	0x6144, r29	; 0x806144 <xNextTaskUnblockTime+0x1>
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	08 95       	ret
    12f2:	80 91 6a 61 	lds	r24, 0x616A	; 0x80616a <pxOverflowDelayedTaskList>
    12f6:	90 91 6b 61 	lds	r25, 0x616B	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    12fa:	6e 5f       	subi	r22, 0xFE	; 254
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	0c 94 25 04 	jmp	0x84a	; 0x84a <vListInsert>
    130c:	ff 20       	and	r15, r15
    130e:	49 f2       	breq	.-110    	; 0x12a2 <prvAddCurrentTaskToDelayedList+0x2c>
    1310:	60 91 a4 61 	lds	r22, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1314:	70 91 a5 61 	lds	r23, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1318:	6e 5f       	subi	r22, 0xFE	; 254
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	8e e4       	ldi	r24, 0x4E	; 78
    131e:	91 e6       	ldi	r25, 0x61	; 97
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	0c 94 04 04 	jmp	0x808	; 0x808 <vListInsertEnd>

0000132e <vTaskSwitchContext.part.5>:
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	10 92 47 61 	sts	0x6147, r1	; 0x806147 <xYieldPending>
    1338:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    133c:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1340:	80 91 a7 63 	lds	r24, 0x63A7	; 0x8063a7 <StatsTimer>
    1344:	90 91 a8 63 	lds	r25, 0x63A8	; 0x8063a8 <StatsTimer+0x1>
    1348:	a0 91 a9 63 	lds	r26, 0x63A9	; 0x8063a9 <StatsTimer+0x2>
    134c:	b0 91 aa 63 	lds	r27, 0x63AA	; 0x8063aa <StatsTimer+0x3>
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	a1 1d       	adc	r26, r1
    1356:	b1 1d       	adc	r27, r1
    1358:	00 91 3c 61 	lds	r16, 0x613C	; 0x80613c <ulTaskSwitchedInTime>
    135c:	10 91 3d 61 	lds	r17, 0x613D	; 0x80613d <ulTaskSwitchedInTime+0x1>
    1360:	20 91 3e 61 	lds	r18, 0x613E	; 0x80613e <ulTaskSwitchedInTime+0x2>
    1364:	30 91 3f 61 	lds	r19, 0x613F	; 0x80613f <ulTaskSwitchedInTime+0x3>
    1368:	08 17       	cp	r16, r24
    136a:	19 07       	cpc	r17, r25
    136c:	2a 07       	cpc	r18, r26
    136e:	3b 07       	cpc	r19, r27
    1370:	a0 f4       	brcc	.+40     	; 0x139a <vTaskSwitchContext.part.5+0x6c>
    1372:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1376:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    137a:	45 a1       	ldd	r20, Z+37	; 0x25
    137c:	56 a1       	ldd	r21, Z+38	; 0x26
    137e:	67 a1       	ldd	r22, Z+39	; 0x27
    1380:	70 a5       	ldd	r23, Z+40	; 0x28
    1382:	40 1b       	sub	r20, r16
    1384:	51 0b       	sbc	r21, r17
    1386:	62 0b       	sbc	r22, r18
    1388:	73 0b       	sbc	r23, r19
    138a:	48 0f       	add	r20, r24
    138c:	59 1f       	adc	r21, r25
    138e:	6a 1f       	adc	r22, r26
    1390:	7b 1f       	adc	r23, r27
    1392:	45 a3       	std	Z+37, r20	; 0x25
    1394:	56 a3       	std	Z+38, r21	; 0x26
    1396:	67 a3       	std	Z+39, r22	; 0x27
    1398:	70 a7       	std	Z+40, r23	; 0x28
    139a:	80 93 3c 61 	sts	0x613C, r24	; 0x80613c <ulTaskSwitchedInTime>
    139e:	90 93 3d 61 	sts	0x613D, r25	; 0x80613d <ulTaskSwitchedInTime+0x1>
    13a2:	a0 93 3e 61 	sts	0x613E, r26	; 0x80613e <ulTaskSwitchedInTime+0x2>
    13a6:	b0 93 3f 61 	sts	0x613F, r27	; 0x80613f <ulTaskSwitchedInTime+0x3>
    13aa:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    13ae:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    13b2:	07 88       	ldd	r0, Z+23	; 0x17
    13b4:	f0 8d       	ldd	r31, Z+24	; 0x18
    13b6:	e0 2d       	mov	r30, r0
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	a2 81       	ldd	r26, Z+2	; 0x02
    13be:	b3 81       	ldd	r27, Z+3	; 0x03
    13c0:	85 3a       	cpi	r24, 0xA5	; 165
    13c2:	95 4a       	sbci	r25, 0xA5	; 165
    13c4:	a5 4a       	sbci	r26, 0xA5	; 165
    13c6:	b5 4a       	sbci	r27, 0xA5	; 165
    13c8:	09 f4       	brne	.+2      	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    13ca:	4c c0       	rjmp	.+152    	; 0x1464 <vTaskSwitchContext.part.5+0x136>
    13cc:	60 91 a4 61 	lds	r22, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    13d0:	70 91 a5 61 	lds	r23, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    13d4:	80 91 a4 61 	lds	r24, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    13d8:	90 91 a5 61 	lds	r25, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    13dc:	67 5e       	subi	r22, 0xE7	; 231
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	0e 94 82 11 	call	0x2304	; 0x2304 <vApplicationStackOverflowHook>
    13e4:	c0 91 4a 61 	lds	r28, 0x614A	; 0x80614a <uxTopReadyPriority>
    13e8:	8c 2f       	mov	r24, r28
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 01       	movw	r18, r24
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	f9 01       	movw	r30, r18
    13fc:	e8 0f       	add	r30, r24
    13fe:	f9 1f       	adc	r31, r25
    1400:	e0 58       	subi	r30, 0x80	; 128
    1402:	fe 49       	sbci	r31, 0x9E	; 158
    1404:	40 81       	ld	r20, Z
    1406:	41 11       	cpse	r20, r1
    1408:	0c c0       	rjmp	.+24     	; 0x1422 <vTaskSwitchContext.part.5+0xf4>
    140a:	cc 23       	and	r28, r28
    140c:	11 f0       	breq	.+4      	; 0x1412 <vTaskSwitchContext.part.5+0xe4>
    140e:	c1 50       	subi	r28, 0x01	; 1
    1410:	eb cf       	rjmp	.-42     	; 0x13e8 <vTaskSwitchContext.part.5+0xba>
    1412:	6c e8       	ldi	r22, 0x8C	; 140
    1414:	7b e0       	ldi	r23, 0x0B	; 11
    1416:	8b e3       	ldi	r24, 0x3B	; 59
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    141e:	c1 50       	subi	r28, 0x01	; 1
    1420:	e3 cf       	rjmp	.-58     	; 0x13e8 <vTaskSwitchContext.part.5+0xba>
    1422:	82 0f       	add	r24, r18
    1424:	93 1f       	adc	r25, r19
    1426:	dc 01       	movw	r26, r24
    1428:	a0 58       	subi	r26, 0x80	; 128
    142a:	be 49       	sbci	r27, 0x9E	; 158
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	ed 91       	ld	r30, X+
    1430:	fc 91       	ld	r31, X
    1432:	12 97       	sbiw	r26, 0x02	; 2
    1434:	02 80       	ldd	r0, Z+2	; 0x02
    1436:	f3 81       	ldd	r31, Z+3	; 0x03
    1438:	e0 2d       	mov	r30, r0
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	ed 93       	st	X+, r30
    143e:	fc 93       	st	X, r31
    1440:	12 97       	sbiw	r26, 0x02	; 2
    1442:	8d 57       	subi	r24, 0x7D	; 125
    1444:	9e 49       	sbci	r25, 0x9E	; 158
    1446:	e8 17       	cp	r30, r24
    1448:	f9 07       	cpc	r31, r25
    144a:	59 f1       	breq	.+86     	; 0x14a2 <vTaskSwitchContext.part.5+0x174>
    144c:	86 81       	ldd	r24, Z+6	; 0x06
    144e:	97 81       	ldd	r25, Z+7	; 0x07
    1450:	80 93 a4 61 	sts	0x61A4, r24	; 0x8061a4 <pxCurrentTCB>
    1454:	90 93 a5 61 	sts	0x61A5, r25	; 0x8061a5 <pxCurrentTCB+0x1>
    1458:	c0 93 4a 61 	sts	0x614A, r28	; 0x80614a <uxTopReadyPriority>
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret
    1464:	84 81       	ldd	r24, Z+4	; 0x04
    1466:	95 81       	ldd	r25, Z+5	; 0x05
    1468:	a6 81       	ldd	r26, Z+6	; 0x06
    146a:	b7 81       	ldd	r27, Z+7	; 0x07
    146c:	85 3a       	cpi	r24, 0xA5	; 165
    146e:	95 4a       	sbci	r25, 0xA5	; 165
    1470:	a5 4a       	sbci	r26, 0xA5	; 165
    1472:	b5 4a       	sbci	r27, 0xA5	; 165
    1474:	09 f0       	breq	.+2      	; 0x1478 <vTaskSwitchContext.part.5+0x14a>
    1476:	aa cf       	rjmp	.-172    	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    1478:	80 85       	ldd	r24, Z+8	; 0x08
    147a:	91 85       	ldd	r25, Z+9	; 0x09
    147c:	a2 85       	ldd	r26, Z+10	; 0x0a
    147e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1480:	85 3a       	cpi	r24, 0xA5	; 165
    1482:	95 4a       	sbci	r25, 0xA5	; 165
    1484:	a5 4a       	sbci	r26, 0xA5	; 165
    1486:	b5 4a       	sbci	r27, 0xA5	; 165
    1488:	09 f0       	breq	.+2      	; 0x148c <vTaskSwitchContext.part.5+0x15e>
    148a:	a0 cf       	rjmp	.-192    	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    148c:	84 85       	ldd	r24, Z+12	; 0x0c
    148e:	95 85       	ldd	r25, Z+13	; 0x0d
    1490:	a6 85       	ldd	r26, Z+14	; 0x0e
    1492:	b7 85       	ldd	r27, Z+15	; 0x0f
    1494:	85 3a       	cpi	r24, 0xA5	; 165
    1496:	95 4a       	sbci	r25, 0xA5	; 165
    1498:	a5 4a       	sbci	r26, 0xA5	; 165
    149a:	b5 4a       	sbci	r27, 0xA5	; 165
    149c:	09 f0       	breq	.+2      	; 0x14a0 <vTaskSwitchContext.part.5+0x172>
    149e:	96 cf       	rjmp	.-212    	; 0x13cc <vTaskSwitchContext.part.5+0x9e>
    14a0:	a1 cf       	rjmp	.-190    	; 0x13e4 <vTaskSwitchContext.part.5+0xb6>
    14a2:	02 80       	ldd	r0, Z+2	; 0x02
    14a4:	f3 81       	ldd	r31, Z+3	; 0x03
    14a6:	e0 2d       	mov	r30, r0
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	ed 93       	st	X+, r30
    14ac:	fc 93       	st	X, r31
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	cd cf       	rjmp	.-102    	; 0x144c <vTaskSwitchContext.part.5+0x11e>

000014b2 <xTaskCreate>:
    14b2:	5f 92       	push	r5
    14b4:	6f 92       	push	r6
    14b6:	7f 92       	push	r7
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	4c 01       	movw	r8, r24
    14d2:	eb 01       	movw	r28, r22
    14d4:	5a 01       	movw	r10, r20
    14d6:	39 01       	movw	r6, r18
    14d8:	50 2e       	mov	r5, r16
    14da:	ca 01       	movw	r24, r20
    14dc:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
    14e0:	8c 01       	movw	r16, r24
    14e2:	89 2b       	or	r24, r25
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <xTaskCreate+0x36>
    14e6:	dc c0       	rjmp	.+440    	; 0x16a0 <xTaskCreate+0x1ee>
    14e8:	8e e2       	ldi	r24, 0x2E	; 46
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
    14f0:	6c 01       	movw	r12, r24
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <xTaskCreate+0x46>
    14f6:	d1 c0       	rjmp	.+418    	; 0x169a <xTaskCreate+0x1e8>
    14f8:	dc 01       	movw	r26, r24
    14fa:	57 96       	adiw	r26, 0x17	; 23
    14fc:	0d 93       	st	X+, r16
    14fe:	1c 93       	st	X, r17
    1500:	58 97       	sbiw	r26, 0x18	; 24
    1502:	20 97       	sbiw	r28, 0x00	; 0
    1504:	09 f4       	brne	.+2      	; 0x1508 <xTaskCreate+0x56>
    1506:	ce c0       	rjmp	.+412    	; 0x16a4 <xTaskCreate+0x1f2>
    1508:	c8 01       	movw	r24, r16
    150a:	a5 01       	movw	r20, r10
    150c:	65 ea       	ldi	r22, 0xA5	; 165
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <memset>
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	af 1a       	sub	r10, r31
    1518:	b1 08       	sbc	r11, r1
    151a:	d6 01       	movw	r26, r12
    151c:	57 96       	adiw	r26, 0x17	; 23
    151e:	8d 91       	ld	r24, X+
    1520:	9c 91       	ld	r25, X
    1522:	58 97       	sbiw	r26, 0x18	; 24
    1524:	a8 0e       	add	r10, r24
    1526:	b9 1e       	adc	r11, r25
    1528:	f6 01       	movw	r30, r12
    152a:	79 96       	adiw	r30, 0x19	; 25
    152c:	9e 01       	movw	r18, r28
    152e:	28 5f       	subi	r18, 0xF8	; 248
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	de 01       	movw	r26, r28
    1534:	89 91       	ld	r24, Y+
    1536:	81 93       	st	Z+, r24
    1538:	8c 91       	ld	r24, X
    153a:	88 23       	and	r24, r24
    153c:	19 f0       	breq	.+6      	; 0x1544 <xTaskCreate+0x92>
    153e:	c2 17       	cp	r28, r18
    1540:	d3 07       	cpc	r29, r19
    1542:	b9 f7       	brne	.-18     	; 0x1532 <xTaskCreate+0x80>
    1544:	f6 01       	movw	r30, r12
    1546:	10 a2       	std	Z+32, r1	; 0x20
    1548:	05 2d       	mov	r16, r5
    154a:	04 30       	cpi	r16, 0x04	; 4
    154c:	08 f0       	brcs	.+2      	; 0x1550 <xTaskCreate+0x9e>
    154e:	9f c0       	rjmp	.+318    	; 0x168e <xTaskCreate+0x1dc>
    1550:	d6 01       	movw	r26, r12
    1552:	56 96       	adiw	r26, 0x16	; 22
    1554:	0c 93       	st	X, r16
    1556:	56 97       	sbiw	r26, 0x16	; 22
    1558:	93 96       	adiw	r26, 0x23	; 35
    155a:	0c 93       	st	X, r16
    155c:	93 97       	sbiw	r26, 0x23	; 35
    155e:	94 96       	adiw	r26, 0x24	; 36
    1560:	1c 92       	st	X, r1
    1562:	e6 01       	movw	r28, r12
    1564:	22 96       	adiw	r28, 0x02	; 2
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 00 04 	call	0x800	; 0x800 <vListInitialiseItem>
    156c:	c6 01       	movw	r24, r12
    156e:	0c 96       	adiw	r24, 0x0c	; 12
    1570:	0e 94 00 04 	call	0x800	; 0x800 <vListInitialiseItem>
    1574:	f6 01       	movw	r30, r12
    1576:	c0 86       	std	Z+8, r12	; 0x08
    1578:	d1 86       	std	Z+9, r13	; 0x09
    157a:	84 e0       	ldi	r24, 0x04	; 4
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	80 1b       	sub	r24, r16
    1580:	91 09       	sbc	r25, r1
    1582:	84 87       	std	Z+12, r24	; 0x0c
    1584:	95 87       	std	Z+13, r25	; 0x0d
    1586:	c2 8a       	std	Z+18, r12	; 0x12
    1588:	d3 8a       	std	Z+19, r13	; 0x13
    158a:	15 a2       	std	Z+37, r1	; 0x25
    158c:	16 a2       	std	Z+38, r1	; 0x26
    158e:	17 a2       	std	Z+39, r1	; 0x27
    1590:	10 a6       	std	Z+40, r1	; 0x28
    1592:	11 a6       	std	Z+41, r1	; 0x29
    1594:	12 a6       	std	Z+42, r1	; 0x2a
    1596:	13 a6       	std	Z+43, r1	; 0x2b
    1598:	14 a6       	std	Z+44, r1	; 0x2c
    159a:	15 a6       	std	Z+45, r1	; 0x2d
    159c:	a3 01       	movw	r20, r6
    159e:	b4 01       	movw	r22, r8
    15a0:	c5 01       	movw	r24, r10
    15a2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <pxPortInitialiseStack>
    15a6:	d6 01       	movw	r26, r12
    15a8:	8d 93       	st	X+, r24
    15aa:	9c 93       	st	X, r25
    15ac:	e1 14       	cp	r14, r1
    15ae:	f1 04       	cpc	r15, r1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <xTaskCreate+0x106>
    15b2:	f7 01       	movw	r30, r14
    15b4:	c0 82       	st	Z, r12
    15b6:	d1 82       	std	Z+1, r13	; 0x01
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	0f 92       	push	r0
    15be:	80 91 4d 61 	lds	r24, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	80 93 4d 61 	sts	0x614D, r24	; 0x80614d <uxCurrentNumberOfTasks>
    15c8:	80 91 a4 61 	lds	r24, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    15cc:	90 91 a5 61 	lds	r25, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    15d0:	89 2b       	or	r24, r25
    15d2:	99 f0       	breq	.+38     	; 0x15fa <xTaskCreate+0x148>
    15d4:	80 91 49 61 	lds	r24, 0x6149	; 0x806149 <xSchedulerRunning>
    15d8:	81 11       	cpse	r24, r1
    15da:	18 c0       	rjmp	.+48     	; 0x160c <xTaskCreate+0x15a>
    15dc:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    15e0:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    15e4:	d6 01       	movw	r26, r12
    15e6:	56 96       	adiw	r26, 0x16	; 22
    15e8:	8c 91       	ld	r24, X
    15ea:	96 89       	ldd	r25, Z+22	; 0x16
    15ec:	89 17       	cp	r24, r25
    15ee:	88 f0       	brcs	.+34     	; 0x1612 <xTaskCreate+0x160>
    15f0:	c0 92 a4 61 	sts	0x61A4, r12	; 0x8061a4 <pxCurrentTCB>
    15f4:	d0 92 a5 61 	sts	0x61A5, r13	; 0x8061a5 <pxCurrentTCB+0x1>
    15f8:	0c c0       	rjmp	.+24     	; 0x1612 <xTaskCreate+0x160>
    15fa:	c0 92 a4 61 	sts	0x61A4, r12	; 0x8061a4 <pxCurrentTCB>
    15fe:	d0 92 a5 61 	sts	0x61A5, r13	; 0x8061a5 <pxCurrentTCB+0x1>
    1602:	80 91 4d 61 	lds	r24, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	09 f4       	brne	.+2      	; 0x160c <xTaskCreate+0x15a>
    160a:	56 c0       	rjmp	.+172    	; 0x16b8 <xTaskCreate+0x206>
    160c:	d6 01       	movw	r26, r12
    160e:	56 96       	adiw	r26, 0x16	; 22
    1610:	8c 91       	ld	r24, X
    1612:	90 91 45 61 	lds	r25, 0x6145	; 0x806145 <uxTaskNumber>
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	90 93 45 61 	sts	0x6145, r25	; 0x806145 <uxTaskNumber>
    161c:	f6 01       	movw	r30, r12
    161e:	91 a3       	std	Z+33, r25	; 0x21
    1620:	90 91 4a 61 	lds	r25, 0x614A	; 0x80614a <uxTopReadyPriority>
    1624:	98 17       	cp	r25, r24
    1626:	80 f1       	brcs	.+96     	; 0x1688 <xTaskCreate+0x1d6>
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9c 01       	movw	r18, r24
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	22 0f       	add	r18, r18
    1632:	33 1f       	adc	r19, r19
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	be 01       	movw	r22, r28
    163e:	80 58       	subi	r24, 0x80	; 128
    1640:	9e 49       	sbci	r25, 0x9E	; 158
    1642:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	80 91 49 61 	lds	r24, 0x6149	; 0x806149 <xSchedulerRunning>
    164e:	88 23       	and	r24, r24
    1650:	51 f0       	breq	.+20     	; 0x1666 <xTaskCreate+0x1b4>
    1652:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1656:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    165a:	96 89       	ldd	r25, Z+22	; 0x16
    165c:	d6 01       	movw	r26, r12
    165e:	56 96       	adiw	r26, 0x16	; 22
    1660:	8c 91       	ld	r24, X
    1662:	98 17       	cp	r25, r24
    1664:	b0 f0       	brcs	.+44     	; 0x1692 <xTaskCreate+0x1e0>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	08 95       	ret
    1688:	80 93 4a 61 	sts	0x614A, r24	; 0x80614a <uxTopReadyPriority>
    168c:	cd cf       	rjmp	.-102    	; 0x1628 <xTaskCreate+0x176>
    168e:	03 e0       	ldi	r16, 0x03	; 3
    1690:	5f cf       	rjmp	.-322    	; 0x1550 <xTaskCreate+0x9e>
    1692:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	e7 cf       	rjmp	.-50     	; 0x1668 <xTaskCreate+0x1b6>
    169a:	c8 01       	movw	r24, r16
    169c:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortFree>
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	e2 cf       	rjmp	.-60     	; 0x1668 <xTaskCreate+0x1b6>
    16a4:	60 e6       	ldi	r22, 0x60	; 96
    16a6:	73 e0       	ldi	r23, 0x03	; 3
    16a8:	8b e3       	ldi	r24, 0x3B	; 59
    16aa:	90 e2       	ldi	r25, 0x20	; 32
    16ac:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    16b0:	f6 01       	movw	r30, r12
    16b2:	87 89       	ldd	r24, Z+23	; 0x17
    16b4:	90 8d       	ldd	r25, Z+24	; 0x18
    16b6:	29 cf       	rjmp	.-430    	; 0x150a <xTaskCreate+0x58>
    16b8:	80 e8       	ldi	r24, 0x80	; 128
    16ba:	91 e6       	ldi	r25, 0x61	; 97
    16bc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16c0:	89 e8       	ldi	r24, 0x89	; 137
    16c2:	91 e6       	ldi	r25, 0x61	; 97
    16c4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16c8:	82 e9       	ldi	r24, 0x92	; 146
    16ca:	91 e6       	ldi	r25, 0x61	; 97
    16cc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16d0:	8b e9       	ldi	r24, 0x9B	; 155
    16d2:	91 e6       	ldi	r25, 0x61	; 97
    16d4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16d8:	87 e7       	ldi	r24, 0x77	; 119
    16da:	91 e6       	ldi	r25, 0x61	; 97
    16dc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16e0:	8e e6       	ldi	r24, 0x6E	; 110
    16e2:	91 e6       	ldi	r25, 0x61	; 97
    16e4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16e8:	81 e6       	ldi	r24, 0x61	; 97
    16ea:	91 e6       	ldi	r25, 0x61	; 97
    16ec:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16f0:	88 e5       	ldi	r24, 0x58	; 88
    16f2:	91 e6       	ldi	r25, 0x61	; 97
    16f4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    16f8:	8e e4       	ldi	r24, 0x4E	; 78
    16fa:	91 e6       	ldi	r25, 0x61	; 97
    16fc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vListInitialise>
    1700:	87 e7       	ldi	r24, 0x77	; 119
    1702:	91 e6       	ldi	r25, 0x61	; 97
    1704:	80 93 6c 61 	sts	0x616C, r24	; 0x80616c <pxDelayedTaskList>
    1708:	90 93 6d 61 	sts	0x616D, r25	; 0x80616d <pxDelayedTaskList+0x1>
    170c:	8e e6       	ldi	r24, 0x6E	; 110
    170e:	91 e6       	ldi	r25, 0x61	; 97
    1710:	80 93 6a 61 	sts	0x616A, r24	; 0x80616a <pxOverflowDelayedTaskList>
    1714:	90 93 6b 61 	sts	0x616B, r25	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    1718:	f6 01       	movw	r30, r12
    171a:	86 89       	ldd	r24, Z+22	; 0x16
    171c:	7a cf       	rjmp	.-268    	; 0x1612 <xTaskCreate+0x160>

0000171e <eTaskGetState>:
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
    1724:	89 2b       	or	r24, r25
    1726:	09 f4       	brne	.+2      	; 0x172a <eTaskGetState+0xc>
    1728:	3a c0       	rjmp	.+116    	; 0x179e <eTaskGetState+0x80>
    172a:	80 91 a4 61 	lds	r24, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    172e:	90 91 a5 61 	lds	r25, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1732:	c8 17       	cp	r28, r24
    1734:	d9 07       	cpc	r29, r25
    1736:	79 f1       	breq	.+94     	; 0x1796 <eTaskGetState+0x78>
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	0f 92       	push	r0
    173e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1740:	9b 85       	ldd	r25, Y+11	; 0x0b
    1742:	20 91 6c 61 	lds	r18, 0x616C	; 0x80616c <pxDelayedTaskList>
    1746:	30 91 6d 61 	lds	r19, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    174a:	40 91 6a 61 	lds	r20, 0x616A	; 0x80616a <pxOverflowDelayedTaskList>
    174e:	50 91 6b 61 	lds	r21, 0x616B	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	82 17       	cp	r24, r18
    1758:	93 07       	cpc	r25, r19
    175a:	a9 f0       	breq	.+42     	; 0x1786 <eTaskGetState+0x68>
    175c:	84 17       	cp	r24, r20
    175e:	95 07       	cpc	r25, r21
    1760:	91 f0       	breq	.+36     	; 0x1786 <eTaskGetState+0x68>
    1762:	21 e6       	ldi	r18, 0x61	; 97
    1764:	8e 34       	cpi	r24, 0x4E	; 78
    1766:	92 07       	cpc	r25, r18
    1768:	51 f0       	breq	.+20     	; 0x177e <eTaskGetState+0x60>
    176a:	21 e6       	ldi	r18, 0x61	; 97
    176c:	88 35       	cpi	r24, 0x58	; 88
    176e:	92 07       	cpc	r25, r18
    1770:	71 f0       	breq	.+28     	; 0x178e <eTaskGetState+0x70>
    1772:	89 2b       	or	r24, r25
    1774:	61 f0       	breq	.+24     	; 0x178e <eTaskGetState+0x70>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret
    177e:	8c 89       	ldd	r24, Y+20	; 0x14
    1780:	9d 89       	ldd	r25, Y+21	; 0x15
    1782:	89 2b       	or	r24, r25
    1784:	99 f0       	breq	.+38     	; 0x17ac <eTaskGetState+0x8e>
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	08 95       	ret
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret
    179e:	6c e4       	ldi	r22, 0x4C	; 76
    17a0:	75 e0       	ldi	r23, 0x05	; 5
    17a2:	8b e3       	ldi	r24, 0x3B	; 59
    17a4:	90 e2       	ldi	r25, 0x20	; 32
    17a6:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    17aa:	bf cf       	rjmp	.-130    	; 0x172a <eTaskGetState+0xc>
    17ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	51 f3       	breq	.-44     	; 0x1786 <eTaskGetState+0x68>
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	e1 cf       	rjmp	.-62     	; 0x1778 <eTaskGetState+0x5a>

000017b6 <vTaskStartScheduler>:
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	81 e4       	ldi	r24, 0x41	; 65
    17be:	e8 2e       	mov	r14, r24
    17c0:	81 e6       	ldi	r24, 0x61	; 97
    17c2:	f8 2e       	mov	r15, r24
    17c4:	00 e0       	ldi	r16, 0x00	; 0
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	51 e0       	ldi	r21, 0x01	; 1
    17ce:	6f e4       	ldi	r22, 0x4F	; 79
    17d0:	70 e2       	ldi	r23, 0x20	; 32
    17d2:	89 ed       	ldi	r24, 0xD9	; 217
    17d4:	98 e0       	ldi	r25, 0x08	; 8
    17d6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	79 f0       	breq	.+30     	; 0x17fc <vTaskStartScheduler+0x46>
    17de:	8f 3f       	cpi	r24, 0xFF	; 255
    17e0:	21 f0       	breq	.+8      	; 0x17ea <vTaskStartScheduler+0x34>
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	08 95       	ret
    17ea:	67 e0       	ldi	r22, 0x07	; 7
    17ec:	78 e0       	ldi	r23, 0x08	; 8
    17ee:	8b e3       	ldi	r24, 0x3B	; 59
    17f0:	90 e2       	ldi	r25, 0x20	; 32
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <vAssertCalled>
    17fc:	f8 94       	cli
    17fe:	2f ef       	ldi	r18, 0xFF	; 255
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	20 93 43 61 	sts	0x6143, r18	; 0x806143 <xNextTaskUnblockTime>
    1806:	30 93 44 61 	sts	0x6144, r19	; 0x806144 <xNextTaskUnblockTime+0x1>
    180a:	80 93 49 61 	sts	0x6149, r24	; 0x806149 <xSchedulerRunning>
    180e:	10 92 4b 61 	sts	0x614B, r1	; 0x80614b <xTickCount>
    1812:	10 92 4c 61 	sts	0x614C, r1	; 0x80614c <xTickCount+0x1>
    1816:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vConfigureTimerForRunTimeStats>
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <xPortStartScheduler>

00001824 <vTaskSuspendAll>:
    1824:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <uxSchedulerSuspended>
    182e:	08 95       	ret

00001830 <xTaskIncrementTick>:
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1842:	81 11       	cpse	r24, r1
    1844:	b9 c0       	rjmp	.+370    	; 0x19b8 <xTaskIncrementTick+0x188>
    1846:	e0 90 4b 61 	lds	r14, 0x614B	; 0x80614b <xTickCount>
    184a:	f0 90 4c 61 	lds	r15, 0x614C	; 0x80614c <xTickCount+0x1>
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	e8 1a       	sub	r14, r24
    1852:	f8 0a       	sbc	r15, r24
    1854:	e0 92 4b 61 	sts	0x614B, r14	; 0x80614b <xTickCount>
    1858:	f0 92 4c 61 	sts	0x614C, r15	; 0x80614c <xTickCount+0x1>
    185c:	e1 14       	cp	r14, r1
    185e:	f1 04       	cpc	r15, r1
    1860:	49 f5       	brne	.+82     	; 0x18b4 <xTaskIncrementTick+0x84>
    1862:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    1866:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    186a:	80 81       	ld	r24, Z
    186c:	81 11       	cpse	r24, r1
    186e:	ab c0       	rjmp	.+342    	; 0x19c6 <xTaskIncrementTick+0x196>
    1870:	80 91 6c 61 	lds	r24, 0x616C	; 0x80616c <pxDelayedTaskList>
    1874:	90 91 6d 61 	lds	r25, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    1878:	20 91 6a 61 	lds	r18, 0x616A	; 0x80616a <pxOverflowDelayedTaskList>
    187c:	30 91 6b 61 	lds	r19, 0x616B	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    1880:	20 93 6c 61 	sts	0x616C, r18	; 0x80616c <pxDelayedTaskList>
    1884:	30 93 6d 61 	sts	0x616D, r19	; 0x80616d <pxDelayedTaskList+0x1>
    1888:	80 93 6a 61 	sts	0x616A, r24	; 0x80616a <pxOverflowDelayedTaskList>
    188c:	90 93 6b 61 	sts	0x616B, r25	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    1890:	80 91 46 61 	lds	r24, 0x6146	; 0x806146 <xNumOfOverflows>
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	80 93 46 61 	sts	0x6146, r24	; 0x806146 <xNumOfOverflows>
    189a:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    189e:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    18a2:	80 81       	ld	r24, Z
    18a4:	81 11       	cpse	r24, r1
    18a6:	96 c0       	rjmp	.+300    	; 0x19d4 <xTaskIncrementTick+0x1a4>
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	9f ef       	ldi	r25, 0xFF	; 255
    18ac:	80 93 43 61 	sts	0x6143, r24	; 0x806143 <xNextTaskUnblockTime>
    18b0:	90 93 44 61 	sts	0x6144, r25	; 0x806144 <xNextTaskUnblockTime+0x1>
    18b4:	80 91 43 61 	lds	r24, 0x6143	; 0x806143 <xNextTaskUnblockTime>
    18b8:	90 91 44 61 	lds	r25, 0x6144	; 0x806144 <xNextTaskUnblockTime+0x1>
    18bc:	d1 2c       	mov	r13, r1
    18be:	e8 16       	cp	r14, r24
    18c0:	f9 06       	cpc	r15, r25
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <xTaskIncrementTick+0x96>
    18c4:	53 c0       	rjmp	.+166    	; 0x196c <xTaskIncrementTick+0x13c>
    18c6:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    18ca:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    18ce:	80 81       	ld	r24, Z
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <xTaskIncrementTick+0xa6>
    18d4:	45 c0       	rjmp	.+138    	; 0x1960 <xTaskIncrementTick+0x130>
    18d6:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    18da:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    18de:	05 80       	ldd	r0, Z+5	; 0x05
    18e0:	f6 81       	ldd	r31, Z+6	; 0x06
    18e2:	e0 2d       	mov	r30, r0
    18e4:	c6 81       	ldd	r28, Z+6	; 0x06
    18e6:	d7 81       	ldd	r29, Z+7	; 0x07
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	9b 81       	ldd	r25, Y+3	; 0x03
    18ec:	e8 16       	cp	r14, r24
    18ee:	f9 06       	cpc	r15, r25
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <xTaskIncrementTick+0xc4>
    18f2:	73 c0       	rjmp	.+230    	; 0x19da <xTaskIncrementTick+0x1aa>
    18f4:	8e 01       	movw	r16, r28
    18f6:	0e 5f       	subi	r16, 0xFE	; 254
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	c8 01       	movw	r24, r16
    18fc:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    1900:	8c 89       	ldd	r24, Y+20	; 0x14
    1902:	9d 89       	ldd	r25, Y+21	; 0x15
    1904:	89 2b       	or	r24, r25
    1906:	21 f0       	breq	.+8      	; 0x1910 <xTaskIncrementTick+0xe0>
    1908:	ce 01       	movw	r24, r28
    190a:	0c 96       	adiw	r24, 0x0c	; 12
    190c:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    1910:	8e 89       	ldd	r24, Y+22	; 0x16
    1912:	90 91 4a 61 	lds	r25, 0x614A	; 0x80614a <uxTopReadyPriority>
    1916:	98 17       	cp	r25, r24
    1918:	10 f4       	brcc	.+4      	; 0x191e <xTaskIncrementTick+0xee>
    191a:	80 93 4a 61 	sts	0x614A, r24	; 0x80614a <uxTopReadyPriority>
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	b8 01       	movw	r22, r16
    1934:	80 58       	subi	r24, 0x80	; 128
    1936:	9e 49       	sbci	r25, 0x9E	; 158
    1938:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    193c:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1940:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1944:	9e 89       	ldd	r25, Y+22	; 0x16
    1946:	86 89       	ldd	r24, Z+22	; 0x16
    1948:	98 17       	cp	r25, r24
    194a:	08 f4       	brcc	.+2      	; 0x194e <xTaskIncrementTick+0x11e>
    194c:	bc cf       	rjmp	.-136    	; 0x18c6 <xTaskIncrementTick+0x96>
    194e:	dd 24       	eor	r13, r13
    1950:	d3 94       	inc	r13
    1952:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    1956:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    195a:	80 81       	ld	r24, Z
    195c:	81 11       	cpse	r24, r1
    195e:	bb cf       	rjmp	.-138    	; 0x18d6 <xTaskIncrementTick+0xa6>
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	80 93 43 61 	sts	0x6143, r24	; 0x806143 <xNextTaskUnblockTime>
    1968:	90 93 44 61 	sts	0x6144, r25	; 0x806144 <xNextTaskUnblockTime+0x1>
    196c:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1970:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1974:	86 89       	ldd	r24, Z+22	; 0x16
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	fc 01       	movw	r30, r24
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	8e 0f       	add	r24, r30
    1988:	9f 1f       	adc	r25, r31
    198a:	fc 01       	movw	r30, r24
    198c:	e0 58       	subi	r30, 0x80	; 128
    198e:	fe 49       	sbci	r31, 0x9E	; 158
    1990:	80 81       	ld	r24, Z
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	10 f0       	brcs	.+4      	; 0x199a <xTaskIncrementTick+0x16a>
    1996:	dd 24       	eor	r13, r13
    1998:	d3 94       	inc	r13
    199a:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <xYieldPending>
    199e:	88 23       	and	r24, r24
    19a0:	11 f0       	breq	.+4      	; 0x19a6 <xTaskIncrementTick+0x176>
    19a2:	dd 24       	eor	r13, r13
    19a4:	d3 94       	inc	r13
    19a6:	8d 2d       	mov	r24, r13
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	08 95       	ret
    19b8:	80 91 48 61 	lds	r24, 0x6148	; 0x806148 <uxPendedTicks>
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	80 93 48 61 	sts	0x6148, r24	; 0x806148 <uxPendedTicks>
    19c2:	d1 2c       	mov	r13, r1
    19c4:	ea cf       	rjmp	.-44     	; 0x199a <xTaskIncrementTick+0x16a>
    19c6:	66 e6       	ldi	r22, 0x66	; 102
    19c8:	7a e0       	ldi	r23, 0x0A	; 10
    19ca:	8b e3       	ldi	r24, 0x3B	; 59
    19cc:	90 e2       	ldi	r25, 0x20	; 32
    19ce:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    19d2:	4e cf       	rjmp	.-356    	; 0x1870 <xTaskIncrementTick+0x40>
    19d4:	0e 94 2a 09 	call	0x1254	; 0x1254 <prvResetNextTaskUnblockTime.part.0>
    19d8:	6d cf       	rjmp	.-294    	; 0x18b4 <xTaskIncrementTick+0x84>
    19da:	80 93 43 61 	sts	0x6143, r24	; 0x806143 <xNextTaskUnblockTime>
    19de:	90 93 44 61 	sts	0x6144, r25	; 0x806144 <xNextTaskUnblockTime+0x1>
    19e2:	c4 cf       	rjmp	.-120    	; 0x196c <xTaskIncrementTick+0x13c>

000019e4 <xTaskResumeAll>:
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    19f2:	88 23       	and	r24, r24
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <xTaskResumeAll+0x14>
    19f6:	77 c0       	rjmp	.+238    	; 0x1ae6 <xTaskResumeAll+0x102>
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	0f 92       	push	r0
    19fe:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1a02:	81 50       	subi	r24, 0x01	; 1
    1a04:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <uxSchedulerSuspended>
    1a08:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	62 c0       	rjmp	.+196    	; 0x1ad4 <xTaskResumeAll+0xf0>
    1a10:	80 91 4d 61 	lds	r24, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <xTaskResumeAll+0x36>
    1a18:	5d c0       	rjmp	.+186    	; 0x1ad4 <xTaskResumeAll+0xf0>
    1a1a:	c0 e0       	ldi	r28, 0x00	; 0
    1a1c:	d0 e0       	ldi	r29, 0x00	; 0
    1a1e:	ff 24       	eor	r15, r15
    1a20:	f3 94       	inc	r15
    1a22:	80 91 61 61 	lds	r24, 0x6161	; 0x806161 <xPendingReadyList>
    1a26:	88 23       	and	r24, r24
    1a28:	a1 f1       	breq	.+104    	; 0x1a92 <xTaskResumeAll+0xae>
    1a2a:	e0 91 66 61 	lds	r30, 0x6166	; 0x806166 <xPendingReadyList+0x5>
    1a2e:	f0 91 67 61 	lds	r31, 0x6167	; 0x806167 <xPendingReadyList+0x6>
    1a32:	c6 81       	ldd	r28, Z+6	; 0x06
    1a34:	d7 81       	ldd	r29, Z+7	; 0x07
    1a36:	ce 01       	movw	r24, r28
    1a38:	0c 96       	adiw	r24, 0x0c	; 12
    1a3a:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    1a3e:	8e 01       	movw	r16, r28
    1a40:	0e 5f       	subi	r16, 0xFE	; 254
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	c8 01       	movw	r24, r16
    1a46:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    1a4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a4c:	90 91 4a 61 	lds	r25, 0x614A	; 0x80614a <uxTopReadyPriority>
    1a50:	98 17       	cp	r25, r24
    1a52:	10 f4       	brcc	.+4      	; 0x1a58 <xTaskResumeAll+0x74>
    1a54:	80 93 4a 61 	sts	0x614A, r24	; 0x80614a <uxTopReadyPriority>
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	22 0f       	add	r18, r18
    1a5e:	33 1f       	adc	r19, r19
    1a60:	22 0f       	add	r18, r18
    1a62:	33 1f       	adc	r19, r19
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	b8 01       	movw	r22, r16
    1a6e:	80 58       	subi	r24, 0x80	; 128
    1a70:	9e 49       	sbci	r25, 0x9E	; 158
    1a72:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1a76:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1a7a:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1a7e:	9e 89       	ldd	r25, Y+22	; 0x16
    1a80:	86 89       	ldd	r24, Z+22	; 0x16
    1a82:	98 17       	cp	r25, r24
    1a84:	70 f2       	brcs	.-100    	; 0x1a22 <xTaskResumeAll+0x3e>
    1a86:	f0 92 47 61 	sts	0x6147, r15	; 0x806147 <xYieldPending>
    1a8a:	80 91 61 61 	lds	r24, 0x6161	; 0x806161 <xPendingReadyList>
    1a8e:	81 11       	cpse	r24, r1
    1a90:	cc cf       	rjmp	.-104    	; 0x1a2a <xTaskResumeAll+0x46>
    1a92:	cd 2b       	or	r28, r29
    1a94:	69 f0       	breq	.+26     	; 0x1ab0 <xTaskResumeAll+0xcc>
    1a96:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    1a9a:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    1a9e:	80 81       	ld	r24, Z
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	2c c0       	rjmp	.+88     	; 0x1afc <xTaskResumeAll+0x118>
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
    1aa8:	80 93 43 61 	sts	0x6143, r24	; 0x806143 <xNextTaskUnblockTime>
    1aac:	90 93 44 61 	sts	0x6144, r25	; 0x806144 <xNextTaskUnblockTime+0x1>
    1ab0:	c0 91 48 61 	lds	r28, 0x6148	; 0x806148 <uxPendedTicks>
    1ab4:	cc 23       	and	r28, r28
    1ab6:	51 f0       	breq	.+20     	; 0x1acc <xTaskResumeAll+0xe8>
    1ab8:	d1 e0       	ldi	r29, 0x01	; 1
    1aba:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskIncrementTick>
    1abe:	81 11       	cpse	r24, r1
    1ac0:	d0 93 47 61 	sts	0x6147, r29	; 0x806147 <xYieldPending>
    1ac4:	c1 50       	subi	r28, 0x01	; 1
    1ac6:	c9 f7       	brne	.-14     	; 0x1aba <xTaskResumeAll+0xd6>
    1ac8:	10 92 48 61 	sts	0x6148, r1	; 0x806148 <uxPendedTicks>
    1acc:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <xYieldPending>
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <xTaskResumeAll+0x110>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	08 95       	ret
    1ae6:	6c e6       	ldi	r22, 0x6C	; 108
    1ae8:	78 e0       	ldi	r23, 0x08	; 8
    1aea:	8b e3       	ldi	r24, 0x3B	; 59
    1aec:	90 e2       	ldi	r25, 0x20	; 32
    1aee:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1af2:	82 cf       	rjmp	.-252    	; 0x19f8 <xTaskResumeAll+0x14>
    1af4:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	ed cf       	rjmp	.-38     	; 0x1ad6 <xTaskResumeAll+0xf2>
    1afc:	0e 94 2a 09 	call	0x1254	; 0x1254 <prvResetNextTaskUnblockTime.part.0>
    1b00:	d7 cf       	rjmp	.-82     	; 0x1ab0 <xTaskResumeAll+0xcc>

00001b02 <vTaskDelayUntil>:
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	8c 01       	movw	r16, r24
    1b0c:	eb 01       	movw	r28, r22
    1b0e:	89 2b       	or	r24, r25
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <vTaskDelayUntil+0x12>
    1b12:	46 c0       	rjmp	.+140    	; 0x1ba0 <vTaskDelayUntil+0x9e>
    1b14:	20 97       	sbiw	r28, 0x00	; 0
    1b16:	e9 f1       	breq	.+122    	; 0x1b92 <vTaskDelayUntil+0x90>
    1b18:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	32 c0       	rjmp	.+100    	; 0x1b84 <vTaskDelayUntil+0x82>
    1b20:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <uxSchedulerSuspended>
    1b2a:	40 91 4b 61 	lds	r20, 0x614B	; 0x80614b <xTickCount>
    1b2e:	50 91 4c 61 	lds	r21, 0x614C	; 0x80614c <xTickCount+0x1>
    1b32:	f8 01       	movw	r30, r16
    1b34:	20 81       	ld	r18, Z
    1b36:	31 81       	ldd	r19, Z+1	; 0x01
    1b38:	ce 01       	movw	r24, r28
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	42 17       	cp	r20, r18
    1b40:	53 07       	cpc	r21, r19
    1b42:	88 f4       	brcc	.+34     	; 0x1b66 <vTaskDelayUntil+0x64>
    1b44:	82 17       	cp	r24, r18
    1b46:	93 07       	cpc	r25, r19
    1b48:	88 f0       	brcs	.+34     	; 0x1b6c <vTaskDelayUntil+0x6a>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
    1b54:	81 11       	cpse	r24, r1
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vTaskDelayUntil+0x5a>
    1b58:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret
    1b66:	82 17       	cp	r24, r18
    1b68:	93 07       	cpc	r25, r19
    1b6a:	18 f0       	brcs	.+6      	; 0x1b72 <vTaskDelayUntil+0x70>
    1b6c:	48 17       	cp	r20, r24
    1b6e:	59 07       	cpc	r21, r25
    1b70:	60 f7       	brcc	.-40     	; 0x1b4a <vTaskDelayUntil+0x48>
    1b72:	f8 01       	movw	r30, r16
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	84 1b       	sub	r24, r20
    1b7c:	95 0b       	sbc	r25, r21
    1b7e:	0e 94 3b 09 	call	0x1276	; 0x1276 <prvAddCurrentTaskToDelayedList>
    1b82:	e6 cf       	rjmp	.-52     	; 0x1b50 <vTaskDelayUntil+0x4e>
    1b84:	6c ec       	ldi	r22, 0xCC	; 204
    1b86:	74 e0       	ldi	r23, 0x04	; 4
    1b88:	8b e3       	ldi	r24, 0x3B	; 59
    1b8a:	90 e2       	ldi	r25, 0x20	; 32
    1b8c:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1b90:	c7 cf       	rjmp	.-114    	; 0x1b20 <vTaskDelayUntil+0x1e>
    1b92:	6b ec       	ldi	r22, 0xCB	; 203
    1b94:	74 e0       	ldi	r23, 0x04	; 4
    1b96:	8b e3       	ldi	r24, 0x3B	; 59
    1b98:	90 e2       	ldi	r25, 0x20	; 32
    1b9a:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1b9e:	bc cf       	rjmp	.-136    	; 0x1b18 <vTaskDelayUntil+0x16>
    1ba0:	6a ec       	ldi	r22, 0xCA	; 202
    1ba2:	74 e0       	ldi	r23, 0x04	; 4
    1ba4:	8b e3       	ldi	r24, 0x3B	; 59
    1ba6:	90 e2       	ldi	r25, 0x20	; 32
    1ba8:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1bac:	b3 cf       	rjmp	.-154    	; 0x1b14 <vTaskDelayUntil+0x12>

00001bae <vTaskSwitchContext>:
    1bae:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <vTaskSwitchContext+0xc>
    1bb6:	0c 94 97 09 	jmp	0x132e	; 0x132e <vTaskSwitchContext.part.5>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <xYieldPending>
    1bc0:	08 95       	ret

00001bc2 <vTaskPlaceOnEventList>:
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	ec 01       	movw	r28, r24
    1bcc:	8b 01       	movw	r16, r22
    1bce:	89 2b       	or	r24, r25
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <vTaskPlaceOnEventList+0x32>
    1bd2:	60 91 a4 61 	lds	r22, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1bd6:	70 91 a5 61 	lds	r23, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1bda:	64 5f       	subi	r22, 0xF4	; 244
    1bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bde:	ce 01       	movw	r24, r28
    1be0:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	c8 01       	movw	r24, r16
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <prvAddCurrentTaskToDelayedList>
    1bf4:	63 ea       	ldi	r22, 0xA3	; 163
    1bf6:	7b e0       	ldi	r23, 0x0B	; 11
    1bf8:	8b e3       	ldi	r24, 0x3B	; 59
    1bfa:	90 e2       	ldi	r25, 0x20	; 32
    1bfc:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1c00:	e8 cf       	rjmp	.-48     	; 0x1bd2 <vTaskPlaceOnEventList+0x10>

00001c02 <xTaskRemoveFromEventList>:
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	15 96       	adiw	r26, 0x05	; 5
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	16 97       	sbiw	r26, 0x06	; 6
    1c14:	c6 81       	ldd	r28, Z+6	; 0x06
    1c16:	d7 81       	ldd	r29, Z+7	; 0x07
    1c18:	20 97       	sbiw	r28, 0x00	; 0
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <xTaskRemoveFromEventList+0x1c>
    1c1c:	42 c0       	rjmp	.+132    	; 0x1ca2 <xTaskRemoveFromEventList+0xa0>
    1c1e:	8e 01       	movw	r16, r28
    1c20:	04 5f       	subi	r16, 0xF4	; 244
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	c8 01       	movw	r24, r16
    1c26:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    1c2a:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1c2e:	81 11       	cpse	r24, r1
    1c30:	29 c0       	rjmp	.+82     	; 0x1c84 <xTaskRemoveFromEventList+0x82>
    1c32:	0a 50       	subi	r16, 0x0A	; 10
    1c34:	11 09       	sbc	r17, r1
    1c36:	c8 01       	movw	r24, r16
    1c38:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    1c3c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c3e:	90 91 4a 61 	lds	r25, 0x614A	; 0x80614a <uxTopReadyPriority>
    1c42:	98 17       	cp	r25, r24
    1c44:	28 f1       	brcs	.+74     	; 0x1c90 <xTaskRemoveFromEventList+0x8e>
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 01       	movw	r18, r24
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	b8 01       	movw	r22, r16
    1c5c:	80 58       	subi	r24, 0x80	; 128
    1c5e:	9e 49       	sbci	r25, 0x9E	; 158
    1c60:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1c64:	e0 91 a4 61 	lds	r30, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1c68:	f0 91 a5 61 	lds	r31, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1c6c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c6e:	86 89       	ldd	r24, Z+22	; 0x16
    1c70:	89 17       	cp	r24, r25
    1c72:	88 f4       	brcc	.+34     	; 0x1c96 <xTaskRemoveFromEventList+0x94>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <xYieldPending>
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret
    1c84:	b8 01       	movw	r22, r16
    1c86:	81 e6       	ldi	r24, 0x61	; 97
    1c88:	91 e6       	ldi	r25, 0x61	; 97
    1c8a:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1c8e:	ea cf       	rjmp	.-44     	; 0x1c64 <xTaskRemoveFromEventList+0x62>
    1c90:	80 93 4a 61 	sts	0x614A, r24	; 0x80614a <uxTopReadyPriority>
    1c94:	d8 cf       	rjmp	.-80     	; 0x1c46 <xTaskRemoveFromEventList+0x44>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret
    1ca2:	6e ef       	ldi	r22, 0xFE	; 254
    1ca4:	7b e0       	ldi	r23, 0x0B	; 11
    1ca6:	8b e3       	ldi	r24, 0x3B	; 59
    1ca8:	90 e2       	ldi	r25, 0x20	; 32
    1caa:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1cae:	b7 cf       	rjmp	.-146    	; 0x1c1e <xTaskRemoveFromEventList+0x1c>

00001cb0 <vTaskInternalSetTimeOutState>:
    1cb0:	20 91 46 61 	lds	r18, 0x6146	; 0x806146 <xNumOfOverflows>
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	20 83       	st	Z, r18
    1cb8:	20 91 4b 61 	lds	r18, 0x614B	; 0x80614b <xTickCount>
    1cbc:	30 91 4c 61 	lds	r19, 0x614C	; 0x80614c <xTickCount+0x1>
    1cc0:	21 83       	std	Z+1, r18	; 0x01
    1cc2:	32 83       	std	Z+2, r19	; 0x02
    1cc4:	08 95       	ret

00001cc6 <xTaskCheckForTimeOut>:
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	ec 01       	movw	r28, r24
    1cd0:	8b 01       	movw	r16, r22
    1cd2:	89 2b       	or	r24, r25
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <xTaskCheckForTimeOut+0x12>
    1cd6:	40 c0       	rjmp	.+128    	; 0x1d58 <xTaskCheckForTimeOut+0x92>
    1cd8:	01 15       	cp	r16, r1
    1cda:	11 05       	cpc	r17, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <xTaskCheckForTimeOut+0x1a>
    1cde:	43 c0       	rjmp	.+134    	; 0x1d66 <xTaskCheckForTimeOut+0xa0>
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	0f 92       	push	r0
    1ce6:	80 91 4b 61 	lds	r24, 0x614B	; 0x80614b <xTickCount>
    1cea:	90 91 4c 61 	lds	r25, 0x614C	; 0x80614c <xTickCount+0x1>
    1cee:	f8 01       	movw	r30, r16
    1cf0:	20 81       	ld	r18, Z
    1cf2:	31 81       	ldd	r19, Z+1	; 0x01
    1cf4:	2f 3f       	cpi	r18, 0xFF	; 255
    1cf6:	ff ef       	ldi	r31, 0xFF	; 255
    1cf8:	3f 07       	cpc	r19, r31
    1cfa:	61 f1       	breq	.+88     	; 0x1d54 <xTaskCheckForTimeOut+0x8e>
    1cfc:	49 81       	ldd	r20, Y+1	; 0x01
    1cfe:	5a 81       	ldd	r21, Y+2	; 0x02
    1d00:	60 91 46 61 	lds	r22, 0x6146	; 0x806146 <xNumOfOverflows>
    1d04:	78 81       	ld	r23, Y
    1d06:	76 17       	cp	r23, r22
    1d08:	19 f0       	breq	.+6      	; 0x1d10 <xTaskCheckForTimeOut+0x4a>
    1d0a:	84 17       	cp	r24, r20
    1d0c:	95 07       	cpc	r25, r21
    1d0e:	80 f4       	brcc	.+32     	; 0x1d30 <xTaskCheckForTimeOut+0x6a>
    1d10:	84 1b       	sub	r24, r20
    1d12:	95 0b       	sbc	r25, r21
    1d14:	82 17       	cp	r24, r18
    1d16:	93 07       	cpc	r25, r19
    1d18:	68 f0       	brcs	.+26     	; 0x1d34 <xTaskCheckForTimeOut+0x6e>
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	10 82       	st	Z, r1
    1d1e:	11 82       	std	Z+1, r1	; 0x01
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	f7 cf       	rjmp	.-18     	; 0x1d22 <xTaskCheckForTimeOut+0x5c>
    1d34:	28 1b       	sub	r18, r24
    1d36:	39 0b       	sbc	r19, r25
    1d38:	f8 01       	movw	r30, r16
    1d3a:	20 83       	st	Z, r18
    1d3c:	31 83       	std	Z+1, r19	; 0x01
    1d3e:	80 91 46 61 	lds	r24, 0x6146	; 0x806146 <xNumOfOverflows>
    1d42:	88 83       	st	Y, r24
    1d44:	80 91 4b 61 	lds	r24, 0x614B	; 0x80614b <xTickCount>
    1d48:	90 91 4c 61 	lds	r25, 0x614C	; 0x80614c <xTickCount+0x1>
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	e7 cf       	rjmp	.-50     	; 0x1d22 <xTaskCheckForTimeOut+0x5c>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	e5 cf       	rjmp	.-54     	; 0x1d22 <xTaskCheckForTimeOut+0x5c>
    1d58:	69 e6       	ldi	r22, 0x69	; 105
    1d5a:	7c e0       	ldi	r23, 0x0C	; 12
    1d5c:	8b e3       	ldi	r24, 0x3B	; 59
    1d5e:	90 e2       	ldi	r25, 0x20	; 32
    1d60:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1d64:	b9 cf       	rjmp	.-142    	; 0x1cd8 <xTaskCheckForTimeOut+0x12>
    1d66:	6a e6       	ldi	r22, 0x6A	; 106
    1d68:	7c e0       	ldi	r23, 0x0C	; 12
    1d6a:	8b e3       	ldi	r24, 0x3B	; 59
    1d6c:	90 e2       	ldi	r25, 0x20	; 32
    1d6e:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    1d72:	b6 cf       	rjmp	.-148    	; 0x1ce0 <xTaskCheckForTimeOut+0x1a>

00001d74 <vTaskMissedYield>:
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <xYieldPending>
    1d7a:	08 95       	ret

00001d7c <vTaskGetInfo>:
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	8c 01       	movw	r16, r24
    1d88:	eb 01       	movw	r28, r22
    1d8a:	f4 2e       	mov	r15, r20
    1d8c:	89 2b       	or	r24, r25
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <vTaskGetInfo+0x16>
    1d90:	64 c0       	rjmp	.+200    	; 0x1e5a <vTaskGetInfo+0xde>
    1d92:	08 83       	st	Y, r16
    1d94:	19 83       	std	Y+1, r17	; 0x01
    1d96:	c8 01       	movw	r24, r16
    1d98:	49 96       	adiw	r24, 0x19	; 25
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
    1d9c:	9b 83       	std	Y+3, r25	; 0x03
    1d9e:	d8 01       	movw	r26, r16
    1da0:	56 96       	adiw	r26, 0x16	; 22
    1da2:	8c 91       	ld	r24, X
    1da4:	56 97       	sbiw	r26, 0x16	; 22
    1da6:	8e 83       	std	Y+6, r24	; 0x06
    1da8:	57 96       	adiw	r26, 0x17	; 23
    1daa:	8d 91       	ld	r24, X+
    1dac:	9c 91       	ld	r25, X
    1dae:	58 97       	sbiw	r26, 0x18	; 24
    1db0:	8c 87       	std	Y+12, r24	; 0x0c
    1db2:	9d 87       	std	Y+13, r25	; 0x0d
    1db4:	91 96       	adiw	r26, 0x21	; 33
    1db6:	8c 91       	ld	r24, X
    1db8:	91 97       	sbiw	r26, 0x21	; 33
    1dba:	8c 83       	std	Y+4, r24	; 0x04
    1dbc:	93 96       	adiw	r26, 0x23	; 35
    1dbe:	8c 91       	ld	r24, X
    1dc0:	93 97       	sbiw	r26, 0x23	; 35
    1dc2:	8f 83       	std	Y+7, r24	; 0x07
    1dc4:	95 96       	adiw	r26, 0x25	; 37
    1dc6:	8d 91       	ld	r24, X+
    1dc8:	9d 91       	ld	r25, X+
    1dca:	0d 90       	ld	r0, X+
    1dcc:	bc 91       	ld	r27, X
    1dce:	a0 2d       	mov	r26, r0
    1dd0:	88 87       	std	Y+8, r24	; 0x08
    1dd2:	99 87       	std	Y+9, r25	; 0x09
    1dd4:	aa 87       	std	Y+10, r26	; 0x0a
    1dd6:	bb 87       	std	Y+11, r27	; 0x0b
    1dd8:	25 30       	cpi	r18, 0x05	; 5
    1dda:	09 f4       	brne	.+2      	; 0x1dde <vTaskGetInfo+0x62>
    1ddc:	43 c0       	rjmp	.+134    	; 0x1e64 <vTaskGetInfo+0xe8>
    1dde:	80 91 a4 61 	lds	r24, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1de2:	90 91 a5 61 	lds	r25, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1de6:	08 17       	cp	r16, r24
    1de8:	19 07       	cpc	r17, r25
    1dea:	09 f4       	brne	.+2      	; 0x1dee <vTaskGetInfo+0x72>
    1dec:	40 c0       	rjmp	.+128    	; 0x1e6e <vTaskGetInfo+0xf2>
    1dee:	2d 83       	std	Y+5, r18	; 0x05
    1df0:	23 30       	cpi	r18, 0x03	; 3
    1df2:	21 f1       	breq	.+72     	; 0x1e3c <vTaskGetInfo+0xc0>
    1df4:	ff 20       	and	r15, r15
    1df6:	d1 f0       	breq	.+52     	; 0x1e2c <vTaskGetInfo+0xb0>
    1df8:	d8 01       	movw	r26, r16
    1dfa:	57 96       	adiw	r26, 0x17	; 23
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	fc 91       	ld	r31, X
    1e00:	58 97       	sbiw	r26, 0x18	; 24
    1e02:	80 81       	ld	r24, Z
    1e04:	85 3a       	cpi	r24, 0xA5	; 165
    1e06:	a9 f5       	brne	.+106    	; 0x1e72 <vTaskGetInfo+0xf6>
    1e08:	31 96       	adiw	r30, 0x01	; 1
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	dc 01       	movw	r26, r24
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	a1 1d       	adc	r26, r1
    1e14:	b1 1d       	adc	r27, r1
    1e16:	21 91       	ld	r18, Z+
    1e18:	25 3a       	cpi	r18, 0xA5	; 165
    1e1a:	d1 f3       	breq	.-12     	; 0x1e10 <vTaskGetInfo+0x94>
    1e1c:	8e 87       	std	Y+14, r24	; 0x0e
    1e1e:	9f 87       	std	Y+15, r25	; 0x0f
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	08 95       	ret
    1e2c:	1e 86       	std	Y+14, r1	; 0x0e
    1e2e:	1f 86       	std	Y+15, r1	; 0x0f
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	08 95       	ret
    1e3c:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <uxSchedulerSuspended>
    1e46:	f8 01       	movw	r30, r16
    1e48:	84 89       	ldd	r24, Z+20	; 0x14
    1e4a:	95 89       	ldd	r25, Z+21	; 0x15
    1e4c:	89 2b       	or	r24, r25
    1e4e:	11 f0       	breq	.+4      	; 0x1e54 <vTaskGetInfo+0xd8>
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
    1e58:	cd cf       	rjmp	.-102    	; 0x1df4 <vTaskGetInfo+0x78>
    1e5a:	00 91 a4 61 	lds	r16, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    1e5e:	10 91 a5 61 	lds	r17, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    1e62:	97 cf       	rjmp	.-210    	; 0x1d92 <vTaskGetInfo+0x16>
    1e64:	c8 01       	movw	r24, r16
    1e66:	0e 94 8f 0b 	call	0x171e	; 0x171e <eTaskGetState>
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	c3 cf       	rjmp	.-122    	; 0x1df4 <vTaskGetInfo+0x78>
    1e6e:	1d 82       	std	Y+5, r1	; 0x05
    1e70:	c1 cf       	rjmp	.-126    	; 0x1df4 <vTaskGetInfo+0x78>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	d2 cf       	rjmp	.-92     	; 0x1e1c <vTaskGetInfo+0xa0>

00001e78 <prvListTasksWithinSingleList.part.6>:
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	5c 01       	movw	r10, r24
    1e92:	8b 01       	movw	r16, r22
    1e94:	d4 2f       	mov	r29, r20
    1e96:	db 01       	movw	r26, r22
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	ed 91       	ld	r30, X+
    1e9c:	fc 91       	ld	r31, X
    1e9e:	12 97       	sbiw	r26, 0x02	; 2
    1ea0:	02 80       	ldd	r0, Z+2	; 0x02
    1ea2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	11 96       	adiw	r26, 0x01	; 1
    1ea8:	ed 93       	st	X+, r30
    1eaa:	fc 93       	st	X, r31
    1eac:	12 97       	sbiw	r26, 0x02	; 2
    1eae:	7b 01       	movw	r14, r22
    1eb0:	b3 e0       	ldi	r27, 0x03	; 3
    1eb2:	eb 0e       	add	r14, r27
    1eb4:	f1 1c       	adc	r15, r1
    1eb6:	ee 15       	cp	r30, r14
    1eb8:	ff 05       	cpc	r31, r15
    1eba:	e1 f1       	breq	.+120    	; 0x1f34 <prvListTasksWithinSingleList.part.6+0xbc>
    1ebc:	c6 80       	ldd	r12, Z+6	; 0x06
    1ebe:	d7 80       	ldd	r13, Z+7	; 0x07
    1ec0:	c0 e0       	ldi	r28, 0x00	; 0
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <prvListTasksWithinSingleList.part.6+0x78>
    1ec4:	86 80       	ldd	r8, Z+6	; 0x06
    1ec6:	97 80       	ldd	r9, Z+7	; 0x07
    1ec8:	b5 01       	movw	r22, r10
    1eca:	b0 e1       	ldi	r27, 0x10	; 16
    1ecc:	cb 9f       	mul	r28, r27
    1ece:	60 0d       	add	r22, r0
    1ed0:	71 1d       	adc	r23, r1
    1ed2:	11 24       	eor	r1, r1
    1ed4:	2d 2f       	mov	r18, r29
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	c4 01       	movw	r24, r8
    1eda:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <vTaskGetInfo>
    1ede:	cf 5f       	subi	r28, 0xFF	; 255
    1ee0:	c8 14       	cp	r12, r8
    1ee2:	d9 04       	cpc	r13, r9
    1ee4:	c9 f0       	breq	.+50     	; 0x1f18 <prvListTasksWithinSingleList.part.6+0xa0>
    1ee6:	d8 01       	movw	r26, r16
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	ed 91       	ld	r30, X+
    1eec:	fc 91       	ld	r31, X
    1eee:	12 97       	sbiw	r26, 0x02	; 2
    1ef0:	02 80       	ldd	r0, Z+2	; 0x02
    1ef2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	d8 01       	movw	r26, r16
    1ef8:	11 96       	adiw	r26, 0x01	; 1
    1efa:	ed 93       	st	X+, r30
    1efc:	fc 93       	st	X, r31
    1efe:	12 97       	sbiw	r26, 0x02	; 2
    1f00:	ee 16       	cp	r14, r30
    1f02:	ff 06       	cpc	r15, r31
    1f04:	f9 f6       	brne	.-66     	; 0x1ec4 <prvListTasksWithinSingleList.part.6+0x4c>
    1f06:	15 96       	adiw	r26, 0x05	; 5
    1f08:	ed 91       	ld	r30, X+
    1f0a:	fc 91       	ld	r31, X
    1f0c:	16 97       	sbiw	r26, 0x06	; 6
    1f0e:	11 96       	adiw	r26, 0x01	; 1
    1f10:	ed 93       	st	X+, r30
    1f12:	fc 93       	st	X, r31
    1f14:	12 97       	sbiw	r26, 0x02	; 2
    1f16:	d6 cf       	rjmp	.-84     	; 0x1ec4 <prvListTasksWithinSingleList.part.6+0x4c>
    1f18:	8c 2f       	mov	r24, r28
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	bf 90       	pop	r11
    1f2c:	af 90       	pop	r10
    1f2e:	9f 90       	pop	r9
    1f30:	8f 90       	pop	r8
    1f32:	08 95       	ret
    1f34:	02 80       	ldd	r0, Z+2	; 0x02
    1f36:	f3 81       	ldd	r31, Z+3	; 0x03
    1f38:	e0 2d       	mov	r30, r0
    1f3a:	c0 cf       	rjmp	.-128    	; 0x1ebc <prvListTasksWithinSingleList.part.6+0x44>

00001f3c <uxTaskGetSystemState>:
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	8c 01       	movw	r16, r24
    1f4a:	7a 01       	movw	r14, r20
    1f4c:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxSchedulerSuspended>
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <uxSchedulerSuspended>
    1f56:	80 91 4d 61 	lds	r24, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>
    1f5a:	68 17       	cp	r22, r24
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <uxTaskGetSystemState+0x24>
    1f5e:	63 c0       	rjmp	.+198    	; 0x2026 <uxTaskGetSystemState+0xea>
    1f60:	c4 e0       	ldi	r28, 0x04	; 4
    1f62:	d0 e0       	ldi	r29, 0x00	; 0
    1f64:	c1 50       	subi	r28, 0x01	; 1
    1f66:	6c 2f       	mov	r22, r28
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	68 0f       	add	r22, r24
    1f7a:	79 1f       	adc	r23, r25
    1f7c:	fb 01       	movw	r30, r22
    1f7e:	e0 58       	subi	r30, 0x80	; 128
    1f80:	fe 49       	sbci	r31, 0x9E	; 158
    1f82:	80 81       	ld	r24, Z
    1f84:	81 11       	cpse	r24, r1
    1f86:	44 c0       	rjmp	.+136    	; 0x2010 <uxTaskGetSystemState+0xd4>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	d8 0f       	add	r29, r24
    1f8c:	c1 11       	cpse	r28, r1
    1f8e:	ea cf       	rjmp	.-44     	; 0x1f64 <uxTaskGetSystemState+0x28>
    1f90:	e0 91 6c 61 	lds	r30, 0x616C	; 0x80616c <pxDelayedTaskList>
    1f94:	f0 91 6d 61 	lds	r31, 0x616D	; 0x80616d <pxDelayedTaskList+0x1>
    1f98:	80 81       	ld	r24, Z
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	46 c0       	rjmp	.+140    	; 0x202a <uxTaskGetSystemState+0xee>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	d8 0f       	add	r29, r24
    1fa2:	e0 91 6a 61 	lds	r30, 0x616A	; 0x80616a <pxOverflowDelayedTaskList>
    1fa6:	f0 91 6b 61 	lds	r31, 0x616B	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    1faa:	80 81       	ld	r24, Z
    1fac:	81 11       	cpse	r24, r1
    1fae:	50 c0       	rjmp	.+160    	; 0x2050 <uxTaskGetSystemState+0x114>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	d8 0f       	add	r29, r24
    1fb4:	80 91 58 61 	lds	r24, 0x6158	; 0x806158 <xTasksWaitingTermination>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	5a c0       	rjmp	.+180    	; 0x2070 <uxTaskGetSystemState+0x134>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	d8 0f       	add	r29, r24
    1fc0:	80 91 4e 61 	lds	r24, 0x614E	; 0x80614e <xSuspendedTaskList>
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	65 c0       	rjmp	.+202    	; 0x2092 <uxTaskGetSystemState+0x156>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	d8 0f       	add	r29, r24
    1fcc:	e1 14       	cp	r14, r1
    1fce:	f1 04       	cpc	r15, r1
    1fd0:	a9 f0       	breq	.+42     	; 0x1ffc <uxTaskGetSystemState+0xc0>
    1fd2:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1fd6:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1fda:	80 91 a7 63 	lds	r24, 0x63A7	; 0x8063a7 <StatsTimer>
    1fde:	90 91 a8 63 	lds	r25, 0x63A8	; 0x8063a8 <StatsTimer+0x1>
    1fe2:	a0 91 a9 63 	lds	r26, 0x63A9	; 0x8063a9 <StatsTimer+0x2>
    1fe6:	b0 91 aa 63 	lds	r27, 0x63AA	; 0x8063aa <StatsTimer+0x3>
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	b1 1d       	adc	r27, r1
    1ff2:	f7 01       	movw	r30, r14
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
    1ffc:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskResumeAll>
    2000:	8d 2f       	mov	r24, r29
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	08 95       	ret
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	bf 01       	movw	r22, r30
    2014:	c8 01       	movw	r24, r16
    2016:	20 e1       	ldi	r18, 0x10	; 16
    2018:	d2 9f       	mul	r29, r18
    201a:	80 0d       	add	r24, r0
    201c:	91 1d       	adc	r25, r1
    201e:	11 24       	eor	r1, r1
    2020:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <prvListTasksWithinSingleList.part.6>
    2024:	b2 cf       	rjmp	.-156    	; 0x1f8a <uxTaskGetSystemState+0x4e>
    2026:	d0 e0       	ldi	r29, 0x00	; 0
    2028:	e9 cf       	rjmp	.-46     	; 0x1ffc <uxTaskGetSystemState+0xc0>
    202a:	42 e0       	ldi	r20, 0x02	; 2
    202c:	bf 01       	movw	r22, r30
    202e:	c8 01       	movw	r24, r16
    2030:	e0 e1       	ldi	r30, 0x10	; 16
    2032:	de 9f       	mul	r29, r30
    2034:	80 0d       	add	r24, r0
    2036:	91 1d       	adc	r25, r1
    2038:	11 24       	eor	r1, r1
    203a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <prvListTasksWithinSingleList.part.6>
    203e:	d8 0f       	add	r29, r24
    2040:	e0 91 6a 61 	lds	r30, 0x616A	; 0x80616a <pxOverflowDelayedTaskList>
    2044:	f0 91 6b 61 	lds	r31, 0x616B	; 0x80616b <pxOverflowDelayedTaskList+0x1>
    2048:	80 81       	ld	r24, Z
    204a:	88 23       	and	r24, r24
    204c:	09 f4       	brne	.+2      	; 0x2050 <uxTaskGetSystemState+0x114>
    204e:	b0 cf       	rjmp	.-160    	; 0x1fb0 <uxTaskGetSystemState+0x74>
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	bf 01       	movw	r22, r30
    2054:	c8 01       	movw	r24, r16
    2056:	f0 e1       	ldi	r31, 0x10	; 16
    2058:	df 9f       	mul	r29, r31
    205a:	80 0d       	add	r24, r0
    205c:	91 1d       	adc	r25, r1
    205e:	11 24       	eor	r1, r1
    2060:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <prvListTasksWithinSingleList.part.6>
    2064:	d8 0f       	add	r29, r24
    2066:	80 91 58 61 	lds	r24, 0x6158	; 0x806158 <xTasksWaitingTermination>
    206a:	88 23       	and	r24, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <uxTaskGetSystemState+0x134>
    206e:	a6 cf       	rjmp	.-180    	; 0x1fbc <uxTaskGetSystemState+0x80>
    2070:	44 e0       	ldi	r20, 0x04	; 4
    2072:	68 e5       	ldi	r22, 0x58	; 88
    2074:	71 e6       	ldi	r23, 0x61	; 97
    2076:	c8 01       	movw	r24, r16
    2078:	20 e1       	ldi	r18, 0x10	; 16
    207a:	d2 9f       	mul	r29, r18
    207c:	80 0d       	add	r24, r0
    207e:	91 1d       	adc	r25, r1
    2080:	11 24       	eor	r1, r1
    2082:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <prvListTasksWithinSingleList.part.6>
    2086:	d8 0f       	add	r29, r24
    2088:	80 91 4e 61 	lds	r24, 0x614E	; 0x80614e <xSuspendedTaskList>
    208c:	88 23       	and	r24, r24
    208e:	09 f4       	brne	.+2      	; 0x2092 <uxTaskGetSystemState+0x156>
    2090:	9b cf       	rjmp	.-202    	; 0x1fc8 <uxTaskGetSystemState+0x8c>
    2092:	43 e0       	ldi	r20, 0x03	; 3
    2094:	6e e4       	ldi	r22, 0x4E	; 78
    2096:	71 e6       	ldi	r23, 0x61	; 97
    2098:	c8 01       	movw	r24, r16
    209a:	e0 e1       	ldi	r30, 0x10	; 16
    209c:	de 9f       	mul	r29, r30
    209e:	80 0d       	add	r24, r0
    20a0:	91 1d       	adc	r25, r1
    20a2:	11 24       	eor	r1, r1
    20a4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <prvListTasksWithinSingleList.part.6>
    20a8:	90 cf       	rjmp	.-224    	; 0x1fca <uxTaskGetSystemState+0x8e>

000020aa <xTaskPriorityDisinherit>:
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	c9 f0       	breq	.+50     	; 0x20e8 <xTaskPriorityDisinherit+0x3e>
    20b6:	ec 01       	movw	r28, r24
    20b8:	80 91 a4 61 	lds	r24, 0x61A4	; 0x8061a4 <pxCurrentTCB>
    20bc:	90 91 a5 61 	lds	r25, 0x61A5	; 0x8061a5 <pxCurrentTCB+0x1>
    20c0:	c8 17       	cp	r28, r24
    20c2:	d9 07       	cpc	r29, r25
    20c4:	31 f0       	breq	.+12     	; 0x20d2 <xTaskPriorityDisinherit+0x28>
    20c6:	6e e7       	ldi	r22, 0x7E	; 126
    20c8:	7f e0       	ldi	r23, 0x0F	; 15
    20ca:	8b e3       	ldi	r24, 0x3B	; 59
    20cc:	90 e2       	ldi	r25, 0x20	; 32
    20ce:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    20d2:	8c a1       	ldd	r24, Y+36	; 0x24
    20d4:	88 23       	and	r24, r24
    20d6:	c1 f1       	breq	.+112    	; 0x2148 <xTaskPriorityDisinherit+0x9e>
    20d8:	81 50       	subi	r24, 0x01	; 1
    20da:	8c a3       	std	Y+36, r24	; 0x24
    20dc:	2e 89       	ldd	r18, Y+22	; 0x16
    20de:	9b a1       	ldd	r25, Y+35	; 0x23
    20e0:	29 17       	cp	r18, r25
    20e2:	11 f0       	breq	.+4      	; 0x20e8 <xTaskPriorityDisinherit+0x3e>
    20e4:	88 23       	and	r24, r24
    20e6:	31 f0       	breq	.+12     	; 0x20f4 <xTaskPriorityDisinherit+0x4a>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret
    20f4:	8e 01       	movw	r16, r28
    20f6:	0e 5f       	subi	r16, 0xFE	; 254
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	c8 01       	movw	r24, r16
    20fc:	0e 94 56 04 	call	0x8ac	; 0x8ac <uxListRemove>
    2100:	2b a1       	ldd	r18, Y+35	; 0x23
    2102:	2e 8b       	std	Y+22, r18	; 0x16
    2104:	82 2f       	mov	r24, r18
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	44 e0       	ldi	r20, 0x04	; 4
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	48 1b       	sub	r20, r24
    210e:	59 0b       	sbc	r21, r25
    2110:	4c 87       	std	Y+12, r20	; 0x0c
    2112:	5d 87       	std	Y+13, r21	; 0x0d
    2114:	30 91 4a 61 	lds	r19, 0x614A	; 0x80614a <uxTopReadyPriority>
    2118:	32 17       	cp	r19, r18
    211a:	10 f4       	brcc	.+4      	; 0x2120 <xTaskPriorityDisinherit+0x76>
    211c:	20 93 4a 61 	sts	0x614A, r18	; 0x80614a <uxTopReadyPriority>
    2120:	9c 01       	movw	r18, r24
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	b8 01       	movw	r22, r16
    2134:	80 58       	subi	r24, 0x80	; 128
    2136:	9e 49       	sbci	r25, 0x9E	; 158
    2138:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	08 95       	ret
    2148:	6f e7       	ldi	r22, 0x7F	; 127
    214a:	7f e0       	ldi	r23, 0x0F	; 15
    214c:	8b e3       	ldi	r24, 0x3B	; 59
    214e:	90 e2       	ldi	r25, 0x20	; 32
    2150:	0e 94 ba 11 	call	0x2374	; 0x2374 <vAssertCalled>
    2154:	8c a1       	ldd	r24, Y+36	; 0x24
    2156:	c0 cf       	rjmp	.-128    	; 0x20d8 <xTaskPriorityDisinherit+0x2e>

00002158 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
    2158:	2f 92       	push	r2
    215a:	3f 92       	push	r3
    215c:	4f 92       	push	r4
    215e:	5f 92       	push	r5
    2160:	6f 92       	push	r6
    2162:	7f 92       	push	r7
    2164:	8f 92       	push	r8
    2166:	9f 92       	push	r9
    2168:	af 92       	push	r10
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	00 d0       	rcall	.+0      	; 0x217e <vTaskGetRunTimeStats+0x26>
    217e:	1f 92       	push	r1
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	8c 01       	movw	r16, r24
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
    2186:	fc 01       	movw	r30, r24
    2188:	10 82       	st	Z, r1

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
    218a:	f0 90 4d 61 	lds	r15, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
    218e:	80 91 4d 61 	lds	r24, 0x614D	; 0x80614d <uxCurrentNumberOfTasks>
    2192:	f0 e1       	ldi	r31, 0x10	; 16
    2194:	8f 9f       	mul	r24, r31
    2196:	c0 01       	movw	r24, r0
    2198:	11 24       	eor	r1, r1
    219a:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
    219e:	5c 01       	movw	r10, r24

		if( pxTaskStatusArray != NULL )
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <vTaskGetRunTimeStats+0x4e>
    21a4:	79 c0       	rjmp	.+242    	; 0x2298 <vTaskGetRunTimeStats+0x140>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
    21a6:	ae 01       	movw	r20, r28
    21a8:	4f 5f       	subi	r20, 0xFF	; 255
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
    21ac:	6f 2d       	mov	r22, r15
    21ae:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <uxTaskGetSystemState>
    21b2:	88 2e       	mov	r8, r24

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
    21b4:	69 81       	ldd	r22, Y+1	; 0x01
    21b6:	7a 81       	ldd	r23, Y+2	; 0x02
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	24 e6       	ldi	r18, 0x64	; 100
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__udivmodsi4>
    21c8:	29 83       	std	Y+1, r18	; 0x01
    21ca:	3a 83       	std	Y+2, r19	; 0x02
    21cc:	4b 83       	std	Y+3, r20	; 0x03
    21ce:	5c 83       	std	Y+4, r21	; 0x04

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
    21d0:	21 15       	cp	r18, r1
    21d2:	31 05       	cpc	r19, r1
    21d4:	41 05       	cpc	r20, r1
    21d6:	51 05       	cpc	r21, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <vTaskGetRunTimeStats+0x84>
    21da:	5b c0       	rjmp	.+182    	; 0x2292 <vTaskGetRunTimeStats+0x13a>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    21dc:	88 20       	and	r8, r8
    21de:	09 f4       	brne	.+2      	; 0x21e2 <vTaskGetRunTimeStats+0x8a>
    21e0:	58 c0       	rjmp	.+176    	; 0x2292 <vTaskGetRunTimeStats+0x13a>
    21e2:	75 01       	movw	r14, r10
    21e4:	91 2c       	mov	r9, r1
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    21e6:	81 e7       	ldi	r24, 0x71	; 113
    21e8:	c8 2e       	mov	r12, r24
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	d8 2e       	mov	r13, r24

					if( ulStatsAsPercentage > 0UL )
					{
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
    21ee:	93 e6       	ldi	r25, 0x63	; 99
    21f0:	29 2e       	mov	r2, r25
    21f2:	90 e2       	ldi	r25, 0x20	; 32
    21f4:	39 2e       	mov	r3, r25
    21f6:	26 c0       	rjmp	.+76     	; 0x2244 <vTaskGetRunTimeStats+0xec>
    21f8:	7f 92       	push	r7
    21fa:	6f 92       	push	r6
    21fc:	5f 92       	push	r5
    21fe:	4f 92       	push	r4
    2200:	f7 01       	movw	r30, r14
    2202:	83 85       	ldd	r24, Z+11	; 0x0b
    2204:	8f 93       	push	r24
    2206:	82 85       	ldd	r24, Z+10	; 0x0a
    2208:	8f 93       	push	r24
    220a:	81 85       	ldd	r24, Z+9	; 0x09
    220c:	8f 93       	push	r24
    220e:	80 85       	ldd	r24, Z+8	; 0x08
    2210:	8f 93       	push	r24
    2212:	3f 92       	push	r3
    2214:	2f 92       	push	r2
    2216:	1f 93       	push	r17
    2218:	0f 93       	push	r16
    221a:	0e 94 8f 18 	call	0x311e	; 0x311e <sprintf>
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	de bf       	out	0x3e, r29	; 62
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
    2222:	f8 01       	movw	r30, r16
    2224:	01 90       	ld	r0, Z+
    2226:	00 20       	and	r0, r0
    2228:	e9 f7       	brne	.-6      	; 0x2224 <vTaskGetRunTimeStats+0xcc>
    222a:	8f 01       	movw	r16, r30
    222c:	01 50       	subi	r16, 0x01	; 1
    222e:	11 09       	sbc	r17, r1

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    2230:	93 94       	inc	r9
    2232:	90 e1       	ldi	r25, 0x10	; 16
    2234:	e9 0e       	add	r14, r25
    2236:	f1 1c       	adc	r15, r1
    2238:	89 14       	cp	r8, r9
    223a:	59 f1       	breq	.+86     	; 0x2292 <vTaskGetRunTimeStats+0x13a>
    223c:	29 81       	ldd	r18, Y+1	; 0x01
    223e:	3a 81       	ldd	r19, Y+2	; 0x02
    2240:	4b 81       	ldd	r20, Y+3	; 0x03
    2242:	5c 81       	ldd	r21, Y+4	; 0x04
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
    2244:	f7 01       	movw	r30, r14
    2246:	60 85       	ldd	r22, Z+8	; 0x08
    2248:	71 85       	ldd	r23, Z+9	; 0x09
    224a:	82 85       	ldd	r24, Z+10	; 0x0a
    224c:	93 85       	ldd	r25, Z+11	; 0x0b
    224e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__udivmodsi4>
    2252:	29 01       	movw	r4, r18
    2254:	3a 01       	movw	r6, r20

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
    2256:	f7 01       	movw	r30, r14
    2258:	62 81       	ldd	r22, Z+2	; 0x02
    225a:	73 81       	ldd	r23, Z+3	; 0x03
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 07 09 	call	0x120e	; 0x120e <prvWriteNameToBuffer>
    2262:	8c 01       	movw	r16, r24

					if( ulStatsAsPercentage > 0UL )
    2264:	41 14       	cp	r4, r1
    2266:	51 04       	cpc	r5, r1
    2268:	61 04       	cpc	r6, r1
    226a:	71 04       	cpc	r7, r1
    226c:	29 f6       	brne	.-118    	; 0x21f8 <vTaskGetRunTimeStats+0xa0>
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    226e:	f7 01       	movw	r30, r14
    2270:	83 85       	ldd	r24, Z+11	; 0x0b
    2272:	8f 93       	push	r24
    2274:	82 85       	ldd	r24, Z+10	; 0x0a
    2276:	8f 93       	push	r24
    2278:	81 85       	ldd	r24, Z+9	; 0x09
    227a:	8f 93       	push	r24
    227c:	80 85       	ldd	r24, Z+8	; 0x08
    227e:	8f 93       	push	r24
    2280:	df 92       	push	r13
    2282:	cf 92       	push	r12
    2284:	1f 93       	push	r17
    2286:	0f 93       	push	r16
    2288:	0e 94 8f 18 	call	0x311e	; 0x311e <sprintf>
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	c8 cf       	rjmp	.-112    	; 0x2222 <vTaskGetRunTimeStats+0xca>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
    2292:	c5 01       	movw	r24, r10
    2294:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2298:	24 96       	adiw	r28, 0x04	; 4
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	cf 90       	pop	r12
    22ae:	bf 90       	pop	r11
    22b0:	af 90       	pop	r10
    22b2:	9f 90       	pop	r9
    22b4:	8f 90       	pop	r8
    22b6:	7f 90       	pop	r7
    22b8:	6f 90       	pop	r6
    22ba:	5f 90       	pop	r5
    22bc:	4f 90       	pop	r4
    22be:	3f 90       	pop	r3
    22c0:	2f 90       	pop	r2
    22c2:	08 95       	ret

000022c4 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    22c4:	08 95       	ret

000022c6 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    22c6:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    22c8:	8e e7       	ldi	r24, 0x7E	; 126
    22ca:	90 e2       	ldi	r25, 0x20	; 32
    22cc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DbgPrint>
	CFG_ERR_LED();
    22d0:	80 e8       	ldi	r24, 0x80	; 128
    22d2:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    22d6:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22da:	2f ef       	ldi	r18, 0xFF	; 255
    22dc:	33 ec       	ldi	r19, 0xC3	; 195
    22de:	99 e0       	ldi	r25, 0x09	; 9
    22e0:	21 50       	subi	r18, 0x01	; 1
    22e2:	30 40       	sbci	r19, 0x00	; 0
    22e4:	90 40       	sbci	r25, 0x00	; 0
    22e6:	e1 f7       	brne	.-8      	; 0x22e0 <vApplicationMallocFailedHook+0x1a>
    22e8:	00 c0       	rjmp	.+0      	; 0x22ea <vApplicationMallocFailedHook+0x24>
    22ea:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    22ec:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    22f0:	2f ef       	ldi	r18, 0xFF	; 255
    22f2:	33 ec       	ldi	r19, 0xC3	; 195
    22f4:	99 e0       	ldi	r25, 0x09	; 9
    22f6:	21 50       	subi	r18, 0x01	; 1
    22f8:	30 40       	sbci	r19, 0x00	; 0
    22fa:	90 40       	sbci	r25, 0x00	; 0
    22fc:	e1 f7       	brne	.-8      	; 0x22f6 <vApplicationMallocFailedHook+0x30>
    22fe:	00 c0       	rjmp	.+0      	; 0x2300 <vApplicationMallocFailedHook+0x3a>
    2300:	00 00       	nop
    2302:	e9 cf       	rjmp	.-46     	; 0x22d6 <vApplicationMallocFailedHook+0x10>

00002304 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	c0 58       	subi	r28, 0x80	; 128
    230e:	d1 09       	sbc	r29, r1
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    2314:	f8 94       	cli
	CFG_ERR_LED();
    2316:	80 e8       	ldi	r24, 0x80	; 128
    2318:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    231c:	7f 93       	push	r23
    231e:	6f 93       	push	r22
    2320:	20 ea       	ldi	r18, 0xA0	; 160
    2322:	30 e2       	ldi	r19, 0x20	; 32
    2324:	3f 93       	push	r19
    2326:	2f 93       	push	r18
    2328:	1f 92       	push	r1
    232a:	8f 93       	push	r24
    232c:	8e 01       	movw	r16, r28
    232e:	0f 5f       	subi	r16, 0xFF	; 255
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	1f 93       	push	r17
    2334:	0f 93       	push	r16
    2336:	0e 94 58 18 	call	0x30b0	; 0x30b0 <snprintf>
	DbgPrint(Dbg);
    233a:	c8 01       	movw	r24, r16
    233c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DbgPrint>
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    2344:	80 e8       	ldi	r24, 0x80	; 128
    2346:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	93 ed       	ldi	r25, 0xD3	; 211
    234e:	20 e3       	ldi	r18, 0x30	; 48
    2350:	31 50       	subi	r19, 0x01	; 1
    2352:	90 40       	sbci	r25, 0x00	; 0
    2354:	20 40       	sbci	r18, 0x00	; 0
    2356:	e1 f7       	brne	.-8      	; 0x2350 <vApplicationStackOverflowHook+0x4c>
    2358:	00 c0       	rjmp	.+0      	; 0x235a <vApplicationStackOverflowHook+0x56>
    235a:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    235c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	93 ed       	ldi	r25, 0xD3	; 211
    2364:	20 e3       	ldi	r18, 0x30	; 48
    2366:	31 50       	subi	r19, 0x01	; 1
    2368:	90 40       	sbci	r25, 0x00	; 0
    236a:	20 40       	sbci	r18, 0x00	; 0
    236c:	e1 f7       	brne	.-8      	; 0x2366 <vApplicationStackOverflowHook+0x62>
    236e:	00 c0       	rjmp	.+0      	; 0x2370 <vApplicationStackOverflowHook+0x6c>
    2370:	00 00       	nop
    2372:	e9 cf       	rjmp	.-46     	; 0x2346 <vApplicationStackOverflowHook+0x42>

00002374 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	c0 58       	subi	r28, 0x80	; 128
    237e:	d1 09       	sbc	r29, r1
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    2384:	f8 94       	cli
	CFG_ERR_LED();
    2386:	20 e8       	ldi	r18, 0x80	; 128
    2388:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    238c:	7f 93       	push	r23
    238e:	6f 93       	push	r22
    2390:	9f 93       	push	r25
    2392:	8f 93       	push	r24
    2394:	8c eb       	ldi	r24, 0xBC	; 188
    2396:	90 e2       	ldi	r25, 0x20	; 32
    2398:	9f 93       	push	r25
    239a:	8f 93       	push	r24
    239c:	1f 92       	push	r1
    239e:	2f 93       	push	r18
    23a0:	8e 01       	movw	r16, r28
    23a2:	0f 5f       	subi	r16, 0xFF	; 255
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	1f 93       	push	r17
    23a8:	0f 93       	push	r16
    23aa:	0e 94 58 18 	call	0x30b0	; 0x30b0 <snprintf>
	DbgPrint(Dbg);
    23ae:	c8 01       	movw	r24, r16
    23b0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DbgPrint>
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    23b8:	80 e8       	ldi	r24, 0x80	; 128
    23ba:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	93 ec       	ldi	r25, 0xC3	; 195
    23c2:	29 e0       	ldi	r18, 0x09	; 9
    23c4:	31 50       	subi	r19, 0x01	; 1
    23c6:	90 40       	sbci	r25, 0x00	; 0
    23c8:	20 40       	sbci	r18, 0x00	; 0
    23ca:	e1 f7       	brne	.-8      	; 0x23c4 <vAssertCalled+0x50>
    23cc:	00 c0       	rjmp	.+0      	; 0x23ce <vAssertCalled+0x5a>
    23ce:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    23d0:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	93 ed       	ldi	r25, 0xD3	; 211
    23d8:	20 e3       	ldi	r18, 0x30	; 48
    23da:	31 50       	subi	r19, 0x01	; 1
    23dc:	90 40       	sbci	r25, 0x00	; 0
    23de:	20 40       	sbci	r18, 0x00	; 0
    23e0:	e1 f7       	brne	.-8      	; 0x23da <vAssertCalled+0x66>
    23e2:	00 c0       	rjmp	.+0      	; 0x23e4 <vAssertCalled+0x70>
    23e4:	00 00       	nop
    23e6:	e9 cf       	rjmp	.-46     	; 0x23ba <vAssertCalled+0x46>

000023e8 <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    23e8:	0e 94 32 02 	call	0x464	; 0x464 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    23ec:	0e 94 0e 03 	call	0x61c	; 0x61c <DriverUSARTInit>
	DriverTWIMInit();		//Initialize TWI in master mode
    23f0:	0e 94 4d 02 	call	0x49a	; 0x49a <DriverTWIMInit>
	DriverCursorstickInit();//Initialize cursor stick
    23f4:	0e 94 b5 01 	call	0x36a	; 0x36a <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    23f8:	0e 94 1b 02 	call	0x436	; 0x436 <DriverLedInit>
	DriverPowerInit();		//Initialize aux power driver
    23fc:	0e 94 16 13 	call	0x262c	; 0x262c <DriverPowerInit>
	DriverAdcInit();		//Initialize ADC driver
    2400:	0e 94 b4 01 	call	0x368	; 0x368 <DriverAdcInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	0e 94 1a 13 	call	0x2634	; 0x2634 <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    240a:	87 e0       	ldi	r24, 0x07	; 7
    240c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    2410:	78 94       	sei
    2412:	2f ef       	ldi	r18, 0xFF	; 255
    2414:	89 ef       	ldi	r24, 0xF9	; 249
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	21 50       	subi	r18, 0x01	; 1
    241a:	80 40       	sbci	r24, 0x00	; 0
    241c:	90 40       	sbci	r25, 0x00	; 0
    241e:	e1 f7       	brne	.-8      	; 0x2418 <main+0x30>
    2420:	00 c0       	rjmp	.+0      	; 0x2422 <main+0x3a>
    2422:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitLooplichtTask(); // Looplicht task oproepen
    2424:	0e 94 9b 12 	call	0x2536	; 0x2536 <InitLooplichtTask>
	InitTerminalTask(); // Terminal task oproepen
    2428:	0e 94 02 13 	call	0x2604	; 0x2604 <InitTerminalTask>
	InitFifoTask(); // Fifo task oproepen
    242c:	0e 94 3d 12 	call	0x247a	; 0x247a <InitFifoTask>
	vTaskStartScheduler();	//Start scheduler loop
    2430:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <vTaskStartScheduler>

	return 0;
}
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	08 95       	ret

0000243a <WorkerFifo>:

static void WorkerFifo(void *pvParameters)
{
	while (1)
	{
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement2); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
    243a:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <xTimeIncrement2>
    243e:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <xTimeIncrement2+0x1>
    2442:	8f ea       	ldi	r24, 0xAF	; 175
    2444:	93 e6       	ldi	r25, 0x63	; 99
    2446:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <vTaskDelayUntil>
		IngelezenWaarde = DriverCursorstickGet(); // Cursorstickwaarde inlezen
    244a:	0e 94 c0 01 	call	0x380	; 0x380 <DriverCursorstickGet>
    244e:	80 93 ac 63 	sts	0x63AC, r24	; 0x8063ac <IngelezenWaarde>
		if (VorigeWaarde != IngelezenWaarde) { // Actie detecteren door te zien of de waarde verandert
    2452:	90 91 a6 61 	lds	r25, 0x61A6	; 0x8061a6 <VorigeWaarde>
    2456:	89 17       	cp	r24, r25
    2458:	69 f0       	breq	.+26     	; 0x2474 <WorkerFifo+0x3a>
			xQueueSend(FifoTaskQueue, &IngelezenWaarde, portMAX_DELAY); // Actie wegschrijven naar de FIFO queue
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	4f ef       	ldi	r20, 0xFF	; 255
    245e:	5f ef       	ldi	r21, 0xFF	; 255
    2460:	6c ea       	ldi	r22, 0xAC	; 172
    2462:	73 e6       	ldi	r23, 0x63	; 99
    2464:	80 91 ad 63 	lds	r24, 0x63AD	; 0x8063ad <FifoTaskQueue>
    2468:	90 91 ae 63 	lds	r25, 0x63AE	; 0x8063ae <FifoTaskQueue+0x1>
    246c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <xQueueGenericSend>
    2470:	90 91 ac 63 	lds	r25, 0x63AC	; 0x8063ac <IngelezenWaarde>
		}
		VorigeWaarde = IngelezenWaarde;
    2474:	90 93 a6 61 	sts	0x61A6, r25	; 0x8061a6 <VorigeWaarde>
	}
    2478:	e0 cf       	rjmp	.-64     	; 0x243a <WorkerFifo>

0000247a <InitFifoTask>:
//Private function prototypes
static void WorkerFifo(void *pvParameters);

//Function definitions
void InitFifoTask()
{
    247a:	ef 92       	push	r14
    247c:	ff 92       	push	r15
    247e:	0f 93       	push	r16
	xTaskCreate( WorkerFifo, "fifo", 256, NULL, tskIDLE_PRIORITY+1, NULL );
    2480:	e1 2c       	mov	r14, r1
    2482:	f1 2c       	mov	r15, r1
    2484:	01 e0       	ldi	r16, 0x01	; 1
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	51 e0       	ldi	r21, 0x01	; 1
    248e:	6c ed       	ldi	r22, 0xDC	; 220
    2490:	70 e2       	ldi	r23, 0x20	; 32
    2492:	8d e1       	ldi	r24, 0x1D	; 29
    2494:	92 e1       	ldi	r25, 0x12	; 18
    2496:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
	FifoTaskQueue = xQueueCreate(5, sizeof(uint8_t)); // Creer FIFO met lengte 5
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	85 e0       	ldi	r24, 0x05	; 5
    24a0:	0e 94 09 07 	call	0xe12	; 0xe12 <xQueueGenericCreate>
    24a4:	80 93 ad 63 	sts	0x63AD, r24	; 0x8063ad <FifoTaskQueue>
    24a8:	90 93 ae 63 	sts	0x63AE, r25	; 0x8063ae <FifoTaskQueue+0x1>
}
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	08 95       	ret

000024b4 <getter>:
		VorigeWaarde = IngelezenWaarde;
	}
}

uint8_t getter() {
	if (xQueueReceive(FifoTaskQueue, &GetterWaarde, 0) == pdPASS) { // Waarde van FIFO queue inlezen en zien of er effectief data is uitgelezen
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	6b ea       	ldi	r22, 0xAB	; 171
    24ba:	73 e6       	ldi	r23, 0x63	; 99
    24bc:	80 91 ad 63 	lds	r24, 0x63AD	; 0x8063ad <FifoTaskQueue>
    24c0:	90 91 ae 63 	lds	r25, 0x63AE	; 0x8063ae <FifoTaskQueue+0x1>
    24c4:	0e 94 1c 08 	call	0x1038	; 0x1038 <xQueueReceive>
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	09 f0       	breq	.+2      	; 0x24ce <getter+0x1a>
		return GetterWaarde;
	}
}
    24cc:	08 95       	ret
	}
}

uint8_t getter() {
	if (xQueueReceive(FifoTaskQueue, &GetterWaarde, 0) == pdPASS) { // Waarde van FIFO queue inlezen en zien of er effectief data is uitgelezen
		return GetterWaarde;
    24ce:	80 91 ab 63 	lds	r24, 0x63AB	; 0x8063ab <GetterWaarde>
    24d2:	08 95       	ret

000024d4 <WorkerLooplicht>:
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    24d4:	cf e0       	ldi	r28, 0x0F	; 15
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    24d6:	18 e0       	ldi	r17, 0x08	; 8
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    24d8:	d1 e0       	ldi	r29, 0x01	; 1
static void WorkerLooplicht(void *pvParameters)
{
	while (1)
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
    24da:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <xTimeIncrement>
    24de:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <xTimeIncrement+0x1>
    24e2:	8f ea       	ldi	r24, 0xAF	; 175
    24e4:	93 e6       	ldi	r25, 0x63	; 99
    24e6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <vTaskDelayUntil>
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
    24ea:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <LedData>
    24ee:	0e 94 29 02 	call	0x452	; 0x452 <DriverLedWrite>
		if (RichtingInt == 1) {
    24f2:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <RichtingInt>
    24f6:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <RichtingInt+0x1>
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	29 f0       	breq	.+10     	; 0x250a <WorkerLooplicht+0x36>
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
    2500:	02 97       	sbiw	r24, 0x02	; 2
    2502:	59 f0       	breq	.+22     	; 0x251a <WorkerLooplicht+0x46>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    2504:	c0 93 14 20 	sts	0x2014, r28	; 0x802014 <LedData>
    2508:	e8 cf       	rjmp	.-48     	; 0x24da <WorkerLooplicht+0x6>
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
    250a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <LedData>
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	61 f0       	breq	.+24     	; 0x252a <WorkerLooplicht+0x56>
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
    2512:	88 0f       	add	r24, r24
    2514:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <LedData>
    2518:	e0 cf       	rjmp	.-64     	; 0x24da <WorkerLooplicht+0x6>
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
    251a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <LedData>
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	39 f0       	breq	.+14     	; 0x2530 <WorkerLooplicht+0x5c>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
    2522:	86 95       	lsr	r24
    2524:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <LedData>
    2528:	d8 cf       	rjmp	.-80     	; 0x24da <WorkerLooplicht+0x6>
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    252a:	d0 93 14 20 	sts	0x2014, r29	; 0x802014 <LedData>
    252e:	d5 cf       	rjmp	.-86     	; 0x24da <WorkerLooplicht+0x6>
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    2530:	10 93 14 20 	sts	0x2014, r17	; 0x802014 <LedData>
    2534:	d2 cf       	rjmp	.-92     	; 0x24da <WorkerLooplicht+0x6>

00002536 <InitLooplichtTask>:
//Private function prototypes
static void WorkerLooplicht(void *pvParameters);

//Function definitions
void InitLooplichtTask()
{
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
	xTaskCreate( WorkerLooplicht, "looplicht", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );	
    253c:	e1 2c       	mov	r14, r1
    253e:	f1 2c       	mov	r15, r1
    2540:	01 e0       	ldi	r16, 0x01	; 1
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	51 e0       	ldi	r21, 0x01	; 1
    254a:	61 ee       	ldi	r22, 0xE1	; 225
    254c:	70 e2       	ldi	r23, 0x20	; 32
    254e:	8a e6       	ldi	r24, 0x6A	; 106
    2550:	92 e1       	ldi	r25, 0x12	; 18
    2552:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
}
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	08 95       	ret

0000255e <WorkerTerminal>:

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{	
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    255e:	07 e1       	ldi	r16, 0x17	; 23
    2560:	10 e2       	ldi	r17, 0x20	; 32
    2562:	cb ee       	ldi	r28, 0xEB	; 235
    2564:	d0 e2       	ldi	r29, 0x20	; 32
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else if (strcmp(RichtingString, "fifo") == 0) {
			printf("FIFO queue: %p\r", getter()); // FIFO queue afprinten
		} else {
			RichtingInt = 3;
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	a8 2e       	mov	r10, r24
    256a:	b1 2c       	mov	r11, r1
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else if (strcmp(RichtingString, "fifo") == 0) {
			printf("FIFO queue: %p\r", getter()); // FIFO queue afprinten
    256c:	9f e0       	ldi	r25, 0x0F	; 15
    256e:	89 2e       	mov	r8, r25
    2570:	91 e2       	ldi	r25, 0x21	; 33
    2572:	99 2e       	mov	r9, r25
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
    2574:	22 e0       	ldi	r18, 0x02	; 2
    2576:	c2 2e       	mov	r12, r18
    2578:	d1 2c       	mov	r13, r1
	while (1)
	{	
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
    257a:	ee 24       	eor	r14, r14
    257c:	e3 94       	inc	r14
    257e:	f1 2c       	mov	r15, r1

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{	
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    2580:	1f 93       	push	r17
    2582:	0f 93       	push	r16
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	0e 94 44 18 	call	0x3088	; 0x3088 <scanf>
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
    258c:	87 ea       	ldi	r24, 0xA7	; 167
    258e:	91 e6       	ldi	r25, 0x61	; 97
    2590:	0e 94 ac 10 	call	0x2158	; 0x2158 <vTaskGetRunTimeStats>
		if (strcmp(RichtingString, "looplicht_links") == 0) {
    2594:	6e ee       	ldi	r22, 0xEE	; 238
    2596:	70 e2       	ldi	r23, 0x20	; 32
    2598:	87 e1       	ldi	r24, 0x17	; 23
    259a:	90 e2       	ldi	r25, 0x20	; 32
    259c:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <strcmp>
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	89 2b       	or	r24, r25
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <WorkerTerminal+0x58>
			RichtingInt = 1;
    25ac:	e0 92 15 20 	sts	0x2015, r14	; 0x802015 <RichtingInt>
    25b0:	f0 92 16 20 	sts	0x2016, r15	; 0x802016 <RichtingInt+0x1>
    25b4:	e5 cf       	rjmp	.-54     	; 0x2580 <WorkerTerminal+0x22>
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
    25b6:	6e ef       	ldi	r22, 0xFE	; 254
    25b8:	70 e2       	ldi	r23, 0x20	; 32
    25ba:	87 e1       	ldi	r24, 0x17	; 23
    25bc:	90 e2       	ldi	r25, 0x20	; 32
    25be:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <strcmp>
    25c2:	89 2b       	or	r24, r25
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <WorkerTerminal+0x72>
			RichtingInt = 2;
    25c6:	c0 92 15 20 	sts	0x2015, r12	; 0x802015 <RichtingInt>
    25ca:	d0 92 16 20 	sts	0x2016, r13	; 0x802016 <RichtingInt+0x1>
    25ce:	d8 cf       	rjmp	.-80     	; 0x2580 <WorkerTerminal+0x22>
		} else if (strcmp(RichtingString, "fifo") == 0) {
    25d0:	6c ed       	ldi	r22, 0xDC	; 220
    25d2:	70 e2       	ldi	r23, 0x20	; 32
    25d4:	87 e1       	ldi	r24, 0x17	; 23
    25d6:	90 e2       	ldi	r25, 0x20	; 32
    25d8:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <strcmp>
    25dc:	89 2b       	or	r24, r25
    25de:	29 f0       	breq	.+10     	; 0x25ea <WorkerTerminal+0x8c>
			printf("FIFO queue: %p\r", getter()); // FIFO queue afprinten
		} else {
			RichtingInt = 3;
    25e0:	a0 92 15 20 	sts	0x2015, r10	; 0x802015 <RichtingInt>
    25e4:	b0 92 16 20 	sts	0x2016, r11	; 0x802016 <RichtingInt+0x1>
    25e8:	cb cf       	rjmp	.-106    	; 0x2580 <WorkerTerminal+0x22>
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else if (strcmp(RichtingString, "fifo") == 0) {
			printf("FIFO queue: %p\r", getter()); // FIFO queue afprinten
    25ea:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <getter>
    25ee:	1f 92       	push	r1
    25f0:	8f 93       	push	r24
    25f2:	9f 92       	push	r9
    25f4:	8f 92       	push	r8
    25f6:	0e 94 30 18 	call	0x3060	; 0x3060 <printf>
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	be cf       	rjmp	.-132    	; 0x2580 <WorkerTerminal+0x22>

00002604 <InitTerminalTask>:
//Private function prototypes
static void WorkerTerminal(void *pvParameters);

//Function definitions
void InitTerminalTask()
{
    2604:	ef 92       	push	r14
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
	xTaskCreate( WorkerTerminal, "terminal", configMINIMAL_STACK_SIZE+512 , NULL, tskIDLE_PRIORITY+1, NULL );	
    260a:	e1 2c       	mov	r14, r1
    260c:	f1 2c       	mov	r15, r1
    260e:	01 e0       	ldi	r16, 0x01	; 1
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	53 e0       	ldi	r21, 0x03	; 3
    2618:	6f e1       	ldi	r22, 0x1F	; 31
    261a:	71 e2       	ldi	r23, 0x21	; 33
    261c:	8f ea       	ldi	r24, 0xAF	; 175
    261e:	92 e1       	ldi	r25, 0x12	; 18
    2620:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <xTaskCreate>
}
    2624:	0f 91       	pop	r16
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	08 95       	ret

0000262c <DriverPowerInit>:
    262c:	80 e2       	ldi	r24, 0x20	; 32
    262e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    2632:	08 95       	ret

00002634 <DriverPowerVccAuxSet>:
    2634:	81 11       	cpse	r24, r1
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <DriverPowerVccAuxSet+0xc>
    2638:	80 e2       	ldi	r24, 0x20	; 32
    263a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    263e:	08 95       	ret
    2640:	80 e2       	ldi	r24, 0x20	; 32
    2642:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    2646:	08 95       	ret

00002648 <vfprintf>:
    2648:	2f 92       	push	r2
    264a:	3f 92       	push	r3
    264c:	4f 92       	push	r4
    264e:	5f 92       	push	r5
    2650:	6f 92       	push	r6
    2652:	7f 92       	push	r7
    2654:	8f 92       	push	r8
    2656:	9f 92       	push	r9
    2658:	af 92       	push	r10
    265a:	bf 92       	push	r11
    265c:	cf 92       	push	r12
    265e:	df 92       	push	r13
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	60 97       	sbiw	r28, 0x10	; 16
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	7c 01       	movw	r14, r24
    2678:	1b 01       	movw	r2, r22
    267a:	6a 01       	movw	r12, r20
    267c:	fc 01       	movw	r30, r24
    267e:	16 82       	std	Z+6, r1	; 0x06
    2680:	17 82       	std	Z+7, r1	; 0x07
    2682:	83 81       	ldd	r24, Z+3	; 0x03
    2684:	81 ff       	sbrs	r24, 1
    2686:	44 c3       	rjmp	.+1672   	; 0x2d10 <vfprintf+0x6c8>
    2688:	9e 01       	movw	r18, r28
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	39 01       	movw	r6, r18
    2690:	f7 01       	movw	r30, r14
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	f1 01       	movw	r30, r2
    2696:	93 fd       	sbrc	r25, 3
    2698:	85 91       	lpm	r24, Z+
    269a:	93 ff       	sbrs	r25, 3
    269c:	81 91       	ld	r24, Z+
    269e:	1f 01       	movw	r2, r30
    26a0:	88 23       	and	r24, r24
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <vfprintf+0x5e>
    26a4:	31 c3       	rjmp	.+1634   	; 0x2d08 <vfprintf+0x6c0>
    26a6:	85 32       	cpi	r24, 0x25	; 37
    26a8:	39 f4       	brne	.+14     	; 0x26b8 <vfprintf+0x70>
    26aa:	93 fd       	sbrc	r25, 3
    26ac:	85 91       	lpm	r24, Z+
    26ae:	93 ff       	sbrs	r25, 3
    26b0:	81 91       	ld	r24, Z+
    26b2:	1f 01       	movw	r2, r30
    26b4:	85 32       	cpi	r24, 0x25	; 37
    26b6:	39 f4       	brne	.+14     	; 0x26c6 <vfprintf+0x7e>
    26b8:	b7 01       	movw	r22, r14
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    26c0:	56 01       	movw	r10, r12
    26c2:	65 01       	movw	r12, r10
    26c4:	e5 cf       	rjmp	.-54     	; 0x2690 <vfprintf+0x48>
    26c6:	10 e0       	ldi	r17, 0x00	; 0
    26c8:	51 2c       	mov	r5, r1
    26ca:	91 2c       	mov	r9, r1
    26cc:	ff e1       	ldi	r31, 0x1F	; 31
    26ce:	f9 15       	cp	r31, r9
    26d0:	d8 f0       	brcs	.+54     	; 0x2708 <vfprintf+0xc0>
    26d2:	8b 32       	cpi	r24, 0x2B	; 43
    26d4:	79 f0       	breq	.+30     	; 0x26f4 <vfprintf+0xac>
    26d6:	38 f4       	brcc	.+14     	; 0x26e6 <vfprintf+0x9e>
    26d8:	80 32       	cpi	r24, 0x20	; 32
    26da:	79 f0       	breq	.+30     	; 0x26fa <vfprintf+0xb2>
    26dc:	83 32       	cpi	r24, 0x23	; 35
    26de:	a1 f4       	brne	.+40     	; 0x2708 <vfprintf+0xc0>
    26e0:	f9 2d       	mov	r31, r9
    26e2:	f0 61       	ori	r31, 0x10	; 16
    26e4:	2e c0       	rjmp	.+92     	; 0x2742 <vfprintf+0xfa>
    26e6:	8d 32       	cpi	r24, 0x2D	; 45
    26e8:	61 f0       	breq	.+24     	; 0x2702 <vfprintf+0xba>
    26ea:	80 33       	cpi	r24, 0x30	; 48
    26ec:	69 f4       	brne	.+26     	; 0x2708 <vfprintf+0xc0>
    26ee:	29 2d       	mov	r18, r9
    26f0:	21 60       	ori	r18, 0x01	; 1
    26f2:	2d c0       	rjmp	.+90     	; 0x274e <vfprintf+0x106>
    26f4:	39 2d       	mov	r19, r9
    26f6:	32 60       	ori	r19, 0x02	; 2
    26f8:	93 2e       	mov	r9, r19
    26fa:	89 2d       	mov	r24, r9
    26fc:	84 60       	ori	r24, 0x04	; 4
    26fe:	98 2e       	mov	r9, r24
    2700:	2a c0       	rjmp	.+84     	; 0x2756 <vfprintf+0x10e>
    2702:	e9 2d       	mov	r30, r9
    2704:	e8 60       	ori	r30, 0x08	; 8
    2706:	15 c0       	rjmp	.+42     	; 0x2732 <vfprintf+0xea>
    2708:	97 fc       	sbrc	r9, 7
    270a:	2d c0       	rjmp	.+90     	; 0x2766 <vfprintf+0x11e>
    270c:	20 ed       	ldi	r18, 0xD0	; 208
    270e:	28 0f       	add	r18, r24
    2710:	2a 30       	cpi	r18, 0x0A	; 10
    2712:	88 f4       	brcc	.+34     	; 0x2736 <vfprintf+0xee>
    2714:	96 fe       	sbrs	r9, 6
    2716:	06 c0       	rjmp	.+12     	; 0x2724 <vfprintf+0xdc>
    2718:	3a e0       	ldi	r19, 0x0A	; 10
    271a:	13 9f       	mul	r17, r19
    271c:	20 0d       	add	r18, r0
    271e:	11 24       	eor	r1, r1
    2720:	12 2f       	mov	r17, r18
    2722:	19 c0       	rjmp	.+50     	; 0x2756 <vfprintf+0x10e>
    2724:	8a e0       	ldi	r24, 0x0A	; 10
    2726:	58 9e       	mul	r5, r24
    2728:	20 0d       	add	r18, r0
    272a:	11 24       	eor	r1, r1
    272c:	52 2e       	mov	r5, r18
    272e:	e9 2d       	mov	r30, r9
    2730:	e0 62       	ori	r30, 0x20	; 32
    2732:	9e 2e       	mov	r9, r30
    2734:	10 c0       	rjmp	.+32     	; 0x2756 <vfprintf+0x10e>
    2736:	8e 32       	cpi	r24, 0x2E	; 46
    2738:	31 f4       	brne	.+12     	; 0x2746 <vfprintf+0xfe>
    273a:	96 fc       	sbrc	r9, 6
    273c:	e5 c2       	rjmp	.+1482   	; 0x2d08 <vfprintf+0x6c0>
    273e:	f9 2d       	mov	r31, r9
    2740:	f0 64       	ori	r31, 0x40	; 64
    2742:	9f 2e       	mov	r9, r31
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <vfprintf+0x10e>
    2746:	8c 36       	cpi	r24, 0x6C	; 108
    2748:	21 f4       	brne	.+8      	; 0x2752 <vfprintf+0x10a>
    274a:	29 2d       	mov	r18, r9
    274c:	20 68       	ori	r18, 0x80	; 128
    274e:	92 2e       	mov	r9, r18
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <vfprintf+0x10e>
    2752:	88 36       	cpi	r24, 0x68	; 104
    2754:	41 f4       	brne	.+16     	; 0x2766 <vfprintf+0x11e>
    2756:	f1 01       	movw	r30, r2
    2758:	93 fd       	sbrc	r25, 3
    275a:	85 91       	lpm	r24, Z+
    275c:	93 ff       	sbrs	r25, 3
    275e:	81 91       	ld	r24, Z+
    2760:	1f 01       	movw	r2, r30
    2762:	81 11       	cpse	r24, r1
    2764:	b3 cf       	rjmp	.-154    	; 0x26cc <vfprintf+0x84>
    2766:	9b eb       	ldi	r25, 0xBB	; 187
    2768:	98 0f       	add	r25, r24
    276a:	93 30       	cpi	r25, 0x03	; 3
    276c:	20 f4       	brcc	.+8      	; 0x2776 <vfprintf+0x12e>
    276e:	99 2d       	mov	r25, r9
    2770:	90 61       	ori	r25, 0x10	; 16
    2772:	80 5e       	subi	r24, 0xE0	; 224
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <vfprintf+0x13c>
    2776:	9b e9       	ldi	r25, 0x9B	; 155
    2778:	98 0f       	add	r25, r24
    277a:	93 30       	cpi	r25, 0x03	; 3
    277c:	08 f0       	brcs	.+2      	; 0x2780 <vfprintf+0x138>
    277e:	66 c1       	rjmp	.+716    	; 0x2a4c <vfprintf+0x404>
    2780:	99 2d       	mov	r25, r9
    2782:	9f 7e       	andi	r25, 0xEF	; 239
    2784:	96 ff       	sbrs	r25, 6
    2786:	16 e0       	ldi	r17, 0x06	; 6
    2788:	9f 73       	andi	r25, 0x3F	; 63
    278a:	99 2e       	mov	r9, r25
    278c:	85 36       	cpi	r24, 0x65	; 101
    278e:	19 f4       	brne	.+6      	; 0x2796 <vfprintf+0x14e>
    2790:	90 64       	ori	r25, 0x40	; 64
    2792:	99 2e       	mov	r9, r25
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <vfprintf+0x15e>
    2796:	86 36       	cpi	r24, 0x66	; 102
    2798:	21 f4       	brne	.+8      	; 0x27a2 <vfprintf+0x15a>
    279a:	39 2f       	mov	r19, r25
    279c:	30 68       	ori	r19, 0x80	; 128
    279e:	93 2e       	mov	r9, r19
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <vfprintf+0x15e>
    27a2:	11 11       	cpse	r17, r1
    27a4:	11 50       	subi	r17, 0x01	; 1
    27a6:	97 fe       	sbrs	r9, 7
    27a8:	07 c0       	rjmp	.+14     	; 0x27b8 <vfprintf+0x170>
    27aa:	1c 33       	cpi	r17, 0x3C	; 60
    27ac:	50 f4       	brcc	.+20     	; 0x27c2 <vfprintf+0x17a>
    27ae:	44 24       	eor	r4, r4
    27b0:	43 94       	inc	r4
    27b2:	41 0e       	add	r4, r17
    27b4:	27 e0       	ldi	r18, 0x07	; 7
    27b6:	0b c0       	rjmp	.+22     	; 0x27ce <vfprintf+0x186>
    27b8:	18 30       	cpi	r17, 0x08	; 8
    27ba:	38 f0       	brcs	.+14     	; 0x27ca <vfprintf+0x182>
    27bc:	27 e0       	ldi	r18, 0x07	; 7
    27be:	17 e0       	ldi	r17, 0x07	; 7
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <vfprintf+0x184>
    27c2:	27 e0       	ldi	r18, 0x07	; 7
    27c4:	9c e3       	ldi	r25, 0x3C	; 60
    27c6:	49 2e       	mov	r4, r25
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x186>
    27ca:	21 2f       	mov	r18, r17
    27cc:	41 2c       	mov	r4, r1
    27ce:	56 01       	movw	r10, r12
    27d0:	84 e0       	ldi	r24, 0x04	; 4
    27d2:	a8 0e       	add	r10, r24
    27d4:	b1 1c       	adc	r11, r1
    27d6:	f6 01       	movw	r30, r12
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	04 2d       	mov	r16, r4
    27e2:	a3 01       	movw	r20, r6
    27e4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__ftoa_engine>
    27e8:	6c 01       	movw	r12, r24
    27ea:	f9 81       	ldd	r31, Y+1	; 0x01
    27ec:	fc 87       	std	Y+12, r31	; 0x0c
    27ee:	f0 ff       	sbrs	r31, 0
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <vfprintf+0x1ae>
    27f2:	f3 ff       	sbrs	r31, 3
    27f4:	06 c0       	rjmp	.+12     	; 0x2802 <vfprintf+0x1ba>
    27f6:	91 fc       	sbrc	r9, 1
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <vfprintf+0x1be>
    27fa:	92 fe       	sbrs	r9, 2
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <vfprintf+0x1c2>
    27fe:	00 e2       	ldi	r16, 0x20	; 32
    2800:	05 c0       	rjmp	.+10     	; 0x280c <vfprintf+0x1c4>
    2802:	0d e2       	ldi	r16, 0x2D	; 45
    2804:	03 c0       	rjmp	.+6      	; 0x280c <vfprintf+0x1c4>
    2806:	0b e2       	ldi	r16, 0x2B	; 43
    2808:	01 c0       	rjmp	.+2      	; 0x280c <vfprintf+0x1c4>
    280a:	00 e0       	ldi	r16, 0x00	; 0
    280c:	8c 85       	ldd	r24, Y+12	; 0x0c
    280e:	8c 70       	andi	r24, 0x0C	; 12
    2810:	19 f0       	breq	.+6      	; 0x2818 <vfprintf+0x1d0>
    2812:	01 11       	cpse	r16, r1
    2814:	5a c2       	rjmp	.+1204   	; 0x2cca <vfprintf+0x682>
    2816:	9b c2       	rjmp	.+1334   	; 0x2d4e <vfprintf+0x706>
    2818:	97 fe       	sbrs	r9, 7
    281a:	10 c0       	rjmp	.+32     	; 0x283c <vfprintf+0x1f4>
    281c:	4c 0c       	add	r4, r12
    281e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2820:	f4 ff       	sbrs	r31, 4
    2822:	04 c0       	rjmp	.+8      	; 0x282c <vfprintf+0x1e4>
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	81 33       	cpi	r24, 0x31	; 49
    2828:	09 f4       	brne	.+2      	; 0x282c <vfprintf+0x1e4>
    282a:	4a 94       	dec	r4
    282c:	14 14       	cp	r1, r4
    282e:	74 f5       	brge	.+92     	; 0x288c <vfprintf+0x244>
    2830:	28 e0       	ldi	r18, 0x08	; 8
    2832:	24 15       	cp	r18, r4
    2834:	78 f5       	brcc	.+94     	; 0x2894 <vfprintf+0x24c>
    2836:	88 e0       	ldi	r24, 0x08	; 8
    2838:	48 2e       	mov	r4, r24
    283a:	2c c0       	rjmp	.+88     	; 0x2894 <vfprintf+0x24c>
    283c:	96 fc       	sbrc	r9, 6
    283e:	2a c0       	rjmp	.+84     	; 0x2894 <vfprintf+0x24c>
    2840:	81 2f       	mov	r24, r17
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	8c 15       	cp	r24, r12
    2846:	9d 05       	cpc	r25, r13
    2848:	9c f0       	brlt	.+38     	; 0x2870 <vfprintf+0x228>
    284a:	3c ef       	ldi	r19, 0xFC	; 252
    284c:	c3 16       	cp	r12, r19
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	d3 06       	cpc	r13, r19
    2852:	74 f0       	brlt	.+28     	; 0x2870 <vfprintf+0x228>
    2854:	89 2d       	mov	r24, r9
    2856:	80 68       	ori	r24, 0x80	; 128
    2858:	98 2e       	mov	r9, r24
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <vfprintf+0x228>
    285c:	e2 e0       	ldi	r30, 0x02	; 2
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	ec 0f       	add	r30, r28
    2862:	fd 1f       	adc	r31, r29
    2864:	e1 0f       	add	r30, r17
    2866:	f1 1d       	adc	r31, r1
    2868:	80 81       	ld	r24, Z
    286a:	80 33       	cpi	r24, 0x30	; 48
    286c:	19 f4       	brne	.+6      	; 0x2874 <vfprintf+0x22c>
    286e:	11 50       	subi	r17, 0x01	; 1
    2870:	11 11       	cpse	r17, r1
    2872:	f4 cf       	rjmp	.-24     	; 0x285c <vfprintf+0x214>
    2874:	97 fe       	sbrs	r9, 7
    2876:	0e c0       	rjmp	.+28     	; 0x2894 <vfprintf+0x24c>
    2878:	44 24       	eor	r4, r4
    287a:	43 94       	inc	r4
    287c:	41 0e       	add	r4, r17
    287e:	81 2f       	mov	r24, r17
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	c8 16       	cp	r12, r24
    2884:	d9 06       	cpc	r13, r25
    2886:	2c f4       	brge	.+10     	; 0x2892 <vfprintf+0x24a>
    2888:	1c 19       	sub	r17, r12
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <vfprintf+0x24c>
    288c:	44 24       	eor	r4, r4
    288e:	43 94       	inc	r4
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <vfprintf+0x24c>
    2892:	10 e0       	ldi	r17, 0x00	; 0
    2894:	97 fe       	sbrs	r9, 7
    2896:	06 c0       	rjmp	.+12     	; 0x28a4 <vfprintf+0x25c>
    2898:	1c 14       	cp	r1, r12
    289a:	1d 04       	cpc	r1, r13
    289c:	34 f4       	brge	.+12     	; 0x28aa <vfprintf+0x262>
    289e:	c6 01       	movw	r24, r12
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	05 c0       	rjmp	.+10     	; 0x28ae <vfprintf+0x266>
    28a4:	85 e0       	ldi	r24, 0x05	; 5
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x266>
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	01 11       	cpse	r16, r1
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	11 23       	and	r17, r17
    28b4:	31 f0       	breq	.+12     	; 0x28c2 <vfprintf+0x27a>
    28b6:	21 2f       	mov	r18, r17
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	2f 5f       	subi	r18, 0xFF	; 255
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	82 0f       	add	r24, r18
    28c0:	93 1f       	adc	r25, r19
    28c2:	25 2d       	mov	r18, r5
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	82 17       	cp	r24, r18
    28c8:	93 07       	cpc	r25, r19
    28ca:	14 f4       	brge	.+4      	; 0x28d0 <vfprintf+0x288>
    28cc:	58 1a       	sub	r5, r24
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <vfprintf+0x28a>
    28d0:	51 2c       	mov	r5, r1
    28d2:	89 2d       	mov	r24, r9
    28d4:	89 70       	andi	r24, 0x09	; 9
    28d6:	49 f4       	brne	.+18     	; 0x28ea <vfprintf+0x2a2>
    28d8:	55 20       	and	r5, r5
    28da:	39 f0       	breq	.+14     	; 0x28ea <vfprintf+0x2a2>
    28dc:	b7 01       	movw	r22, r14
    28de:	80 e2       	ldi	r24, 0x20	; 32
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    28e6:	5a 94       	dec	r5
    28e8:	f7 cf       	rjmp	.-18     	; 0x28d8 <vfprintf+0x290>
    28ea:	00 23       	and	r16, r16
    28ec:	29 f0       	breq	.+10     	; 0x28f8 <vfprintf+0x2b0>
    28ee:	b7 01       	movw	r22, r14
    28f0:	80 2f       	mov	r24, r16
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    28f8:	93 fc       	sbrc	r9, 3
    28fa:	09 c0       	rjmp	.+18     	; 0x290e <vfprintf+0x2c6>
    28fc:	55 20       	and	r5, r5
    28fe:	39 f0       	breq	.+14     	; 0x290e <vfprintf+0x2c6>
    2900:	b7 01       	movw	r22, r14
    2902:	80 e3       	ldi	r24, 0x30	; 48
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    290a:	5a 94       	dec	r5
    290c:	f7 cf       	rjmp	.-18     	; 0x28fc <vfprintf+0x2b4>
    290e:	97 fe       	sbrs	r9, 7
    2910:	4c c0       	rjmp	.+152    	; 0x29aa <vfprintf+0x362>
    2912:	46 01       	movw	r8, r12
    2914:	d7 fe       	sbrs	r13, 7
    2916:	02 c0       	rjmp	.+4      	; 0x291c <vfprintf+0x2d4>
    2918:	81 2c       	mov	r8, r1
    291a:	91 2c       	mov	r9, r1
    291c:	c6 01       	movw	r24, r12
    291e:	88 19       	sub	r24, r8
    2920:	99 09       	sbc	r25, r9
    2922:	f3 01       	movw	r30, r6
    2924:	e8 0f       	add	r30, r24
    2926:	f9 1f       	adc	r31, r25
    2928:	ed 87       	std	Y+13, r30	; 0x0d
    292a:	fe 87       	std	Y+14, r31	; 0x0e
    292c:	96 01       	movw	r18, r12
    292e:	24 19       	sub	r18, r4
    2930:	31 09       	sbc	r19, r1
    2932:	2f 87       	std	Y+15, r18	; 0x0f
    2934:	38 8b       	std	Y+16, r19	; 0x10
    2936:	01 2f       	mov	r16, r17
    2938:	10 e0       	ldi	r17, 0x00	; 0
    293a:	11 95       	neg	r17
    293c:	01 95       	neg	r16
    293e:	11 09       	sbc	r17, r1
    2940:	3f ef       	ldi	r19, 0xFF	; 255
    2942:	83 16       	cp	r8, r19
    2944:	93 06       	cpc	r9, r19
    2946:	29 f4       	brne	.+10     	; 0x2952 <vfprintf+0x30a>
    2948:	b7 01       	movw	r22, r14
    294a:	8e e2       	ldi	r24, 0x2E	; 46
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2952:	c8 14       	cp	r12, r8
    2954:	d9 04       	cpc	r13, r9
    2956:	4c f0       	brlt	.+18     	; 0x296a <vfprintf+0x322>
    2958:	8f 85       	ldd	r24, Y+15	; 0x0f
    295a:	98 89       	ldd	r25, Y+16	; 0x10
    295c:	88 15       	cp	r24, r8
    295e:	99 05       	cpc	r25, r9
    2960:	24 f4       	brge	.+8      	; 0x296a <vfprintf+0x322>
    2962:	ed 85       	ldd	r30, Y+13	; 0x0d
    2964:	fe 85       	ldd	r31, Y+14	; 0x0e
    2966:	81 81       	ldd	r24, Z+1	; 0x01
    2968:	01 c0       	rjmp	.+2      	; 0x296c <vfprintf+0x324>
    296a:	80 e3       	ldi	r24, 0x30	; 48
    296c:	f1 e0       	ldi	r31, 0x01	; 1
    296e:	8f 1a       	sub	r8, r31
    2970:	91 08       	sbc	r9, r1
    2972:	2d 85       	ldd	r18, Y+13	; 0x0d
    2974:	3e 85       	ldd	r19, Y+14	; 0x0e
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	2d 87       	std	Y+13, r18	; 0x0d
    297c:	3e 87       	std	Y+14, r19	; 0x0e
    297e:	80 16       	cp	r8, r16
    2980:	91 06       	cpc	r9, r17
    2982:	2c f0       	brlt	.+10     	; 0x298e <vfprintf+0x346>
    2984:	b7 01       	movw	r22, r14
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    298c:	d9 cf       	rjmp	.-78     	; 0x2940 <vfprintf+0x2f8>
    298e:	c8 14       	cp	r12, r8
    2990:	d9 04       	cpc	r13, r9
    2992:	41 f4       	brne	.+16     	; 0x29a4 <vfprintf+0x35c>
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	96 33       	cpi	r25, 0x36	; 54
    2998:	20 f4       	brcc	.+8      	; 0x29a2 <vfprintf+0x35a>
    299a:	95 33       	cpi	r25, 0x35	; 53
    299c:	19 f4       	brne	.+6      	; 0x29a4 <vfprintf+0x35c>
    299e:	3c 85       	ldd	r19, Y+12	; 0x0c
    29a0:	34 ff       	sbrs	r19, 4
    29a2:	81 e3       	ldi	r24, 0x31	; 49
    29a4:	b7 01       	movw	r22, r14
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	4e c0       	rjmp	.+156    	; 0x2a46 <vfprintf+0x3fe>
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	81 33       	cpi	r24, 0x31	; 49
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <vfprintf+0x36e>
    29b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29b2:	9f 7e       	andi	r25, 0xEF	; 239
    29b4:	9c 87       	std	Y+12, r25	; 0x0c
    29b6:	b7 01       	movw	r22, r14
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    29be:	11 11       	cpse	r17, r1
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <vfprintf+0x384>
    29c2:	94 fc       	sbrc	r9, 4
    29c4:	18 c0       	rjmp	.+48     	; 0x29f6 <vfprintf+0x3ae>
    29c6:	85 e6       	ldi	r24, 0x65	; 101
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	17 c0       	rjmp	.+46     	; 0x29fa <vfprintf+0x3b2>
    29cc:	b7 01       	movw	r22, r14
    29ce:	8e e2       	ldi	r24, 0x2E	; 46
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    29d6:	1e 5f       	subi	r17, 0xFE	; 254
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	01 e0       	ldi	r16, 0x01	; 1
    29dc:	08 0f       	add	r16, r24
    29de:	f3 01       	movw	r30, r6
    29e0:	e8 0f       	add	r30, r24
    29e2:	f1 1d       	adc	r31, r1
    29e4:	80 81       	ld	r24, Z
    29e6:	b7 01       	movw	r22, r14
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    29ee:	80 2f       	mov	r24, r16
    29f0:	01 13       	cpse	r16, r17
    29f2:	f3 cf       	rjmp	.-26     	; 0x29da <vfprintf+0x392>
    29f4:	e6 cf       	rjmp	.-52     	; 0x29c2 <vfprintf+0x37a>
    29f6:	85 e4       	ldi	r24, 0x45	; 69
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	b7 01       	movw	r22, r14
    29fc:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2a00:	d7 fc       	sbrc	r13, 7
    2a02:	06 c0       	rjmp	.+12     	; 0x2a10 <vfprintf+0x3c8>
    2a04:	c1 14       	cp	r12, r1
    2a06:	d1 04       	cpc	r13, r1
    2a08:	41 f4       	brne	.+16     	; 0x2a1a <vfprintf+0x3d2>
    2a0a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a0c:	e4 ff       	sbrs	r30, 4
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <vfprintf+0x3d2>
    2a10:	d1 94       	neg	r13
    2a12:	c1 94       	neg	r12
    2a14:	d1 08       	sbc	r13, r1
    2a16:	8d e2       	ldi	r24, 0x2D	; 45
    2a18:	01 c0       	rjmp	.+2      	; 0x2a1c <vfprintf+0x3d4>
    2a1a:	8b e2       	ldi	r24, 0x2B	; 43
    2a1c:	b7 01       	movw	r22, r14
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2a24:	80 e3       	ldi	r24, 0x30	; 48
    2a26:	2a e0       	ldi	r18, 0x0A	; 10
    2a28:	c2 16       	cp	r12, r18
    2a2a:	d1 04       	cpc	r13, r1
    2a2c:	2c f0       	brlt	.+10     	; 0x2a38 <vfprintf+0x3f0>
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	fa e0       	ldi	r31, 0x0A	; 10
    2a32:	cf 1a       	sub	r12, r31
    2a34:	d1 08       	sbc	r13, r1
    2a36:	f7 cf       	rjmp	.-18     	; 0x2a26 <vfprintf+0x3de>
    2a38:	b7 01       	movw	r22, r14
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2a40:	b7 01       	movw	r22, r14
    2a42:	c6 01       	movw	r24, r12
    2a44:	c0 96       	adiw	r24, 0x30	; 48
    2a46:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2a4a:	54 c1       	rjmp	.+680    	; 0x2cf4 <vfprintf+0x6ac>
    2a4c:	83 36       	cpi	r24, 0x63	; 99
    2a4e:	31 f0       	breq	.+12     	; 0x2a5c <vfprintf+0x414>
    2a50:	83 37       	cpi	r24, 0x73	; 115
    2a52:	79 f0       	breq	.+30     	; 0x2a72 <vfprintf+0x42a>
    2a54:	83 35       	cpi	r24, 0x53	; 83
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <vfprintf+0x412>
    2a58:	56 c0       	rjmp	.+172    	; 0x2b06 <vfprintf+0x4be>
    2a5a:	20 c0       	rjmp	.+64     	; 0x2a9c <vfprintf+0x454>
    2a5c:	56 01       	movw	r10, r12
    2a5e:	32 e0       	ldi	r19, 0x02	; 2
    2a60:	a3 0e       	add	r10, r19
    2a62:	b1 1c       	adc	r11, r1
    2a64:	f6 01       	movw	r30, r12
    2a66:	80 81       	ld	r24, Z
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	01 e0       	ldi	r16, 0x01	; 1
    2a6c:	10 e0       	ldi	r17, 0x00	; 0
    2a6e:	63 01       	movw	r12, r6
    2a70:	12 c0       	rjmp	.+36     	; 0x2a96 <vfprintf+0x44e>
    2a72:	56 01       	movw	r10, r12
    2a74:	f2 e0       	ldi	r31, 0x02	; 2
    2a76:	af 0e       	add	r10, r31
    2a78:	b1 1c       	adc	r11, r1
    2a7a:	f6 01       	movw	r30, r12
    2a7c:	c0 80       	ld	r12, Z
    2a7e:	d1 80       	ldd	r13, Z+1	; 0x01
    2a80:	96 fe       	sbrs	r9, 6
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <vfprintf+0x442>
    2a84:	61 2f       	mov	r22, r17
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <vfprintf+0x446>
    2a8a:	6f ef       	ldi	r22, 0xFF	; 255
    2a8c:	7f ef       	ldi	r23, 0xFF	; 255
    2a8e:	c6 01       	movw	r24, r12
    2a90:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strnlen>
    2a94:	8c 01       	movw	r16, r24
    2a96:	f9 2d       	mov	r31, r9
    2a98:	ff 77       	andi	r31, 0x7F	; 127
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <vfprintf+0x47c>
    2a9c:	56 01       	movw	r10, r12
    2a9e:	22 e0       	ldi	r18, 0x02	; 2
    2aa0:	a2 0e       	add	r10, r18
    2aa2:	b1 1c       	adc	r11, r1
    2aa4:	f6 01       	movw	r30, r12
    2aa6:	c0 80       	ld	r12, Z
    2aa8:	d1 80       	ldd	r13, Z+1	; 0x01
    2aaa:	96 fe       	sbrs	r9, 6
    2aac:	03 c0       	rjmp	.+6      	; 0x2ab4 <vfprintf+0x46c>
    2aae:	61 2f       	mov	r22, r17
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <vfprintf+0x470>
    2ab4:	6f ef       	ldi	r22, 0xFF	; 255
    2ab6:	7f ef       	ldi	r23, 0xFF	; 255
    2ab8:	c6 01       	movw	r24, r12
    2aba:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <strnlen_P>
    2abe:	8c 01       	movw	r16, r24
    2ac0:	f9 2d       	mov	r31, r9
    2ac2:	f0 68       	ori	r31, 0x80	; 128
    2ac4:	9f 2e       	mov	r9, r31
    2ac6:	f3 fd       	sbrc	r31, 3
    2ac8:	1a c0       	rjmp	.+52     	; 0x2afe <vfprintf+0x4b6>
    2aca:	85 2d       	mov	r24, r5
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	08 17       	cp	r16, r24
    2ad0:	19 07       	cpc	r17, r25
    2ad2:	a8 f4       	brcc	.+42     	; 0x2afe <vfprintf+0x4b6>
    2ad4:	b7 01       	movw	r22, r14
    2ad6:	80 e2       	ldi	r24, 0x20	; 32
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2ade:	5a 94       	dec	r5
    2ae0:	f4 cf       	rjmp	.-24     	; 0x2aca <vfprintf+0x482>
    2ae2:	f6 01       	movw	r30, r12
    2ae4:	97 fc       	sbrc	r9, 7
    2ae6:	85 91       	lpm	r24, Z+
    2ae8:	97 fe       	sbrs	r9, 7
    2aea:	81 91       	ld	r24, Z+
    2aec:	6f 01       	movw	r12, r30
    2aee:	b7 01       	movw	r22, r14
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2af6:	51 10       	cpse	r5, r1
    2af8:	5a 94       	dec	r5
    2afa:	01 50       	subi	r16, 0x01	; 1
    2afc:	11 09       	sbc	r17, r1
    2afe:	01 15       	cp	r16, r1
    2b00:	11 05       	cpc	r17, r1
    2b02:	79 f7       	brne	.-34     	; 0x2ae2 <vfprintf+0x49a>
    2b04:	f7 c0       	rjmp	.+494    	; 0x2cf4 <vfprintf+0x6ac>
    2b06:	84 36       	cpi	r24, 0x64	; 100
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <vfprintf+0x4c6>
    2b0a:	89 36       	cpi	r24, 0x69	; 105
    2b0c:	61 f5       	brne	.+88     	; 0x2b66 <vfprintf+0x51e>
    2b0e:	56 01       	movw	r10, r12
    2b10:	97 fe       	sbrs	r9, 7
    2b12:	09 c0       	rjmp	.+18     	; 0x2b26 <vfprintf+0x4de>
    2b14:	24 e0       	ldi	r18, 0x04	; 4
    2b16:	a2 0e       	add	r10, r18
    2b18:	b1 1c       	adc	r11, r1
    2b1a:	f6 01       	movw	r30, r12
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	0a c0       	rjmp	.+20     	; 0x2b3a <vfprintf+0x4f2>
    2b26:	f2 e0       	ldi	r31, 0x02	; 2
    2b28:	af 0e       	add	r10, r31
    2b2a:	b1 1c       	adc	r11, r1
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	07 2e       	mov	r0, r23
    2b34:	00 0c       	add	r0, r0
    2b36:	88 0b       	sbc	r24, r24
    2b38:	99 0b       	sbc	r25, r25
    2b3a:	f9 2d       	mov	r31, r9
    2b3c:	ff 76       	andi	r31, 0x6F	; 111
    2b3e:	9f 2e       	mov	r9, r31
    2b40:	97 ff       	sbrs	r25, 7
    2b42:	09 c0       	rjmp	.+18     	; 0x2b56 <vfprintf+0x50e>
    2b44:	90 95       	com	r25
    2b46:	80 95       	com	r24
    2b48:	70 95       	com	r23
    2b4a:	61 95       	neg	r22
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	f0 68       	ori	r31, 0x80	; 128
    2b54:	9f 2e       	mov	r9, r31
    2b56:	2a e0       	ldi	r18, 0x0A	; 10
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	a3 01       	movw	r20, r6
    2b5c:	0e 94 b8 18 	call	0x3170	; 0x3170 <__ultoa_invert>
    2b60:	c8 2e       	mov	r12, r24
    2b62:	c6 18       	sub	r12, r6
    2b64:	3f c0       	rjmp	.+126    	; 0x2be4 <vfprintf+0x59c>
    2b66:	09 2d       	mov	r16, r9
    2b68:	85 37       	cpi	r24, 0x75	; 117
    2b6a:	21 f4       	brne	.+8      	; 0x2b74 <vfprintf+0x52c>
    2b6c:	0f 7e       	andi	r16, 0xEF	; 239
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	1d c0       	rjmp	.+58     	; 0x2bae <vfprintf+0x566>
    2b74:	09 7f       	andi	r16, 0xF9	; 249
    2b76:	8f 36       	cpi	r24, 0x6F	; 111
    2b78:	91 f0       	breq	.+36     	; 0x2b9e <vfprintf+0x556>
    2b7a:	18 f4       	brcc	.+6      	; 0x2b82 <vfprintf+0x53a>
    2b7c:	88 35       	cpi	r24, 0x58	; 88
    2b7e:	59 f0       	breq	.+22     	; 0x2b96 <vfprintf+0x54e>
    2b80:	c3 c0       	rjmp	.+390    	; 0x2d08 <vfprintf+0x6c0>
    2b82:	80 37       	cpi	r24, 0x70	; 112
    2b84:	19 f0       	breq	.+6      	; 0x2b8c <vfprintf+0x544>
    2b86:	88 37       	cpi	r24, 0x78	; 120
    2b88:	11 f0       	breq	.+4      	; 0x2b8e <vfprintf+0x546>
    2b8a:	be c0       	rjmp	.+380    	; 0x2d08 <vfprintf+0x6c0>
    2b8c:	00 61       	ori	r16, 0x10	; 16
    2b8e:	04 ff       	sbrs	r16, 4
    2b90:	09 c0       	rjmp	.+18     	; 0x2ba4 <vfprintf+0x55c>
    2b92:	04 60       	ori	r16, 0x04	; 4
    2b94:	07 c0       	rjmp	.+14     	; 0x2ba4 <vfprintf+0x55c>
    2b96:	94 fe       	sbrs	r9, 4
    2b98:	08 c0       	rjmp	.+16     	; 0x2baa <vfprintf+0x562>
    2b9a:	06 60       	ori	r16, 0x06	; 6
    2b9c:	06 c0       	rjmp	.+12     	; 0x2baa <vfprintf+0x562>
    2b9e:	28 e0       	ldi	r18, 0x08	; 8
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <vfprintf+0x566>
    2ba4:	20 e1       	ldi	r18, 0x10	; 16
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <vfprintf+0x566>
    2baa:	20 e1       	ldi	r18, 0x10	; 16
    2bac:	32 e0       	ldi	r19, 0x02	; 2
    2bae:	56 01       	movw	r10, r12
    2bb0:	07 ff       	sbrs	r16, 7
    2bb2:	09 c0       	rjmp	.+18     	; 0x2bc6 <vfprintf+0x57e>
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	a8 0e       	add	r10, r24
    2bb8:	b1 1c       	adc	r11, r1
    2bba:	f6 01       	movw	r30, r12
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	08 c0       	rjmp	.+16     	; 0x2bd6 <vfprintf+0x58e>
    2bc6:	f2 e0       	ldi	r31, 0x02	; 2
    2bc8:	af 0e       	add	r10, r31
    2bca:	b1 1c       	adc	r11, r1
    2bcc:	f6 01       	movw	r30, r12
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a3 01       	movw	r20, r6
    2bd8:	0e 94 b8 18 	call	0x3170	; 0x3170 <__ultoa_invert>
    2bdc:	c8 2e       	mov	r12, r24
    2bde:	c6 18       	sub	r12, r6
    2be0:	0f 77       	andi	r16, 0x7F	; 127
    2be2:	90 2e       	mov	r9, r16
    2be4:	96 fe       	sbrs	r9, 6
    2be6:	0b c0       	rjmp	.+22     	; 0x2bfe <vfprintf+0x5b6>
    2be8:	09 2d       	mov	r16, r9
    2bea:	0e 7f       	andi	r16, 0xFE	; 254
    2bec:	c1 16       	cp	r12, r17
    2bee:	50 f4       	brcc	.+20     	; 0x2c04 <vfprintf+0x5bc>
    2bf0:	94 fe       	sbrs	r9, 4
    2bf2:	0a c0       	rjmp	.+20     	; 0x2c08 <vfprintf+0x5c0>
    2bf4:	92 fc       	sbrc	r9, 2
    2bf6:	08 c0       	rjmp	.+16     	; 0x2c08 <vfprintf+0x5c0>
    2bf8:	09 2d       	mov	r16, r9
    2bfa:	0e 7e       	andi	r16, 0xEE	; 238
    2bfc:	05 c0       	rjmp	.+10     	; 0x2c08 <vfprintf+0x5c0>
    2bfe:	dc 2c       	mov	r13, r12
    2c00:	09 2d       	mov	r16, r9
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <vfprintf+0x5c2>
    2c04:	dc 2c       	mov	r13, r12
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <vfprintf+0x5c2>
    2c08:	d1 2e       	mov	r13, r17
    2c0a:	04 ff       	sbrs	r16, 4
    2c0c:	0d c0       	rjmp	.+26     	; 0x2c28 <vfprintf+0x5e0>
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ec 0d       	add	r30, r12
    2c12:	f1 1d       	adc	r31, r1
    2c14:	80 81       	ld	r24, Z
    2c16:	80 33       	cpi	r24, 0x30	; 48
    2c18:	11 f4       	brne	.+4      	; 0x2c1e <vfprintf+0x5d6>
    2c1a:	09 7e       	andi	r16, 0xE9	; 233
    2c1c:	09 c0       	rjmp	.+18     	; 0x2c30 <vfprintf+0x5e8>
    2c1e:	02 ff       	sbrs	r16, 2
    2c20:	06 c0       	rjmp	.+12     	; 0x2c2e <vfprintf+0x5e6>
    2c22:	d3 94       	inc	r13
    2c24:	d3 94       	inc	r13
    2c26:	04 c0       	rjmp	.+8      	; 0x2c30 <vfprintf+0x5e8>
    2c28:	80 2f       	mov	r24, r16
    2c2a:	86 78       	andi	r24, 0x86	; 134
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <vfprintf+0x5e8>
    2c2e:	d3 94       	inc	r13
    2c30:	03 fd       	sbrc	r16, 3
    2c32:	11 c0       	rjmp	.+34     	; 0x2c56 <vfprintf+0x60e>
    2c34:	00 ff       	sbrs	r16, 0
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <vfprintf+0x5fc>
    2c38:	1c 2d       	mov	r17, r12
    2c3a:	d5 14       	cp	r13, r5
    2c3c:	80 f4       	brcc	.+32     	; 0x2c5e <vfprintf+0x616>
    2c3e:	15 0d       	add	r17, r5
    2c40:	1d 19       	sub	r17, r13
    2c42:	0d c0       	rjmp	.+26     	; 0x2c5e <vfprintf+0x616>
    2c44:	d5 14       	cp	r13, r5
    2c46:	58 f4       	brcc	.+22     	; 0x2c5e <vfprintf+0x616>
    2c48:	b7 01       	movw	r22, r14
    2c4a:	80 e2       	ldi	r24, 0x20	; 32
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2c52:	d3 94       	inc	r13
    2c54:	f7 cf       	rjmp	.-18     	; 0x2c44 <vfprintf+0x5fc>
    2c56:	d5 14       	cp	r13, r5
    2c58:	10 f4       	brcc	.+4      	; 0x2c5e <vfprintf+0x616>
    2c5a:	5d 18       	sub	r5, r13
    2c5c:	01 c0       	rjmp	.+2      	; 0x2c60 <vfprintf+0x618>
    2c5e:	51 2c       	mov	r5, r1
    2c60:	04 ff       	sbrs	r16, 4
    2c62:	10 c0       	rjmp	.+32     	; 0x2c84 <vfprintf+0x63c>
    2c64:	b7 01       	movw	r22, r14
    2c66:	80 e3       	ldi	r24, 0x30	; 48
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2c6e:	02 ff       	sbrs	r16, 2
    2c70:	17 c0       	rjmp	.+46     	; 0x2ca0 <vfprintf+0x658>
    2c72:	01 fd       	sbrc	r16, 1
    2c74:	03 c0       	rjmp	.+6      	; 0x2c7c <vfprintf+0x634>
    2c76:	88 e7       	ldi	r24, 0x78	; 120
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <vfprintf+0x638>
    2c7c:	88 e5       	ldi	r24, 0x58	; 88
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	b7 01       	movw	r22, r14
    2c82:	0c c0       	rjmp	.+24     	; 0x2c9c <vfprintf+0x654>
    2c84:	80 2f       	mov	r24, r16
    2c86:	86 78       	andi	r24, 0x86	; 134
    2c88:	59 f0       	breq	.+22     	; 0x2ca0 <vfprintf+0x658>
    2c8a:	01 ff       	sbrs	r16, 1
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <vfprintf+0x64a>
    2c8e:	8b e2       	ldi	r24, 0x2B	; 43
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <vfprintf+0x64c>
    2c92:	80 e2       	ldi	r24, 0x20	; 32
    2c94:	07 fd       	sbrc	r16, 7
    2c96:	8d e2       	ldi	r24, 0x2D	; 45
    2c98:	b7 01       	movw	r22, r14
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2ca0:	c1 16       	cp	r12, r17
    2ca2:	38 f4       	brcc	.+14     	; 0x2cb2 <vfprintf+0x66a>
    2ca4:	b7 01       	movw	r22, r14
    2ca6:	80 e3       	ldi	r24, 0x30	; 48
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2cae:	11 50       	subi	r17, 0x01	; 1
    2cb0:	f7 cf       	rjmp	.-18     	; 0x2ca0 <vfprintf+0x658>
    2cb2:	ca 94       	dec	r12
    2cb4:	f3 01       	movw	r30, r6
    2cb6:	ec 0d       	add	r30, r12
    2cb8:	f1 1d       	adc	r31, r1
    2cba:	80 81       	ld	r24, Z
    2cbc:	b7 01       	movw	r22, r14
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2cc4:	c1 10       	cpse	r12, r1
    2cc6:	f5 cf       	rjmp	.-22     	; 0x2cb2 <vfprintf+0x66a>
    2cc8:	15 c0       	rjmp	.+42     	; 0x2cf4 <vfprintf+0x6ac>
    2cca:	f4 e0       	ldi	r31, 0x04	; 4
    2ccc:	f5 15       	cp	r31, r5
    2cce:	60 f5       	brcc	.+88     	; 0x2d28 <vfprintf+0x6e0>
    2cd0:	84 e0       	ldi	r24, 0x04	; 4
    2cd2:	58 1a       	sub	r5, r24
    2cd4:	93 fe       	sbrs	r9, 3
    2cd6:	1f c0       	rjmp	.+62     	; 0x2d16 <vfprintf+0x6ce>
    2cd8:	01 11       	cpse	r16, r1
    2cda:	27 c0       	rjmp	.+78     	; 0x2d2a <vfprintf+0x6e2>
    2cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cde:	23 ff       	sbrs	r18, 3
    2ce0:	2a c0       	rjmp	.+84     	; 0x2d36 <vfprintf+0x6ee>
    2ce2:	04 e1       	ldi	r16, 0x14	; 20
    2ce4:	12 e0       	ldi	r17, 0x02	; 2
    2ce6:	39 2d       	mov	r19, r9
    2ce8:	30 71       	andi	r19, 0x10	; 16
    2cea:	93 2e       	mov	r9, r19
    2cec:	f8 01       	movw	r30, r16
    2cee:	84 91       	lpm	r24, Z
    2cf0:	81 11       	cpse	r24, r1
    2cf2:	24 c0       	rjmp	.+72     	; 0x2d3c <vfprintf+0x6f4>
    2cf4:	55 20       	and	r5, r5
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <vfprintf+0x6b2>
    2cf8:	e4 cc       	rjmp	.-1592   	; 0x26c2 <vfprintf+0x7a>
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	80 e2       	ldi	r24, 0x20	; 32
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2d04:	5a 94       	dec	r5
    2d06:	f6 cf       	rjmp	.-20     	; 0x2cf4 <vfprintf+0x6ac>
    2d08:	f7 01       	movw	r30, r14
    2d0a:	86 81       	ldd	r24, Z+6	; 0x06
    2d0c:	97 81       	ldd	r25, Z+7	; 0x07
    2d0e:	26 c0       	rjmp	.+76     	; 0x2d5c <vfprintf+0x714>
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	9f ef       	ldi	r25, 0xFF	; 255
    2d14:	23 c0       	rjmp	.+70     	; 0x2d5c <vfprintf+0x714>
    2d16:	b7 01       	movw	r22, r14
    2d18:	80 e2       	ldi	r24, 0x20	; 32
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2d20:	5a 94       	dec	r5
    2d22:	51 10       	cpse	r5, r1
    2d24:	f8 cf       	rjmp	.-16     	; 0x2d16 <vfprintf+0x6ce>
    2d26:	d8 cf       	rjmp	.-80     	; 0x2cd8 <vfprintf+0x690>
    2d28:	51 2c       	mov	r5, r1
    2d2a:	b7 01       	movw	r22, r14
    2d2c:	80 2f       	mov	r24, r16
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2d34:	d3 cf       	rjmp	.-90     	; 0x2cdc <vfprintf+0x694>
    2d36:	08 e1       	ldi	r16, 0x18	; 24
    2d38:	12 e0       	ldi	r17, 0x02	; 2
    2d3a:	d5 cf       	rjmp	.-86     	; 0x2ce6 <vfprintf+0x69e>
    2d3c:	91 10       	cpse	r9, r1
    2d3e:	80 52       	subi	r24, 0x20	; 32
    2d40:	b7 01       	movw	r22, r14
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <fputc>
    2d48:	0f 5f       	subi	r16, 0xFF	; 255
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	cf cf       	rjmp	.-98     	; 0x2cec <vfprintf+0x6a4>
    2d4e:	23 e0       	ldi	r18, 0x03	; 3
    2d50:	25 15       	cp	r18, r5
    2d52:	10 f4       	brcc	.+4      	; 0x2d58 <vfprintf+0x710>
    2d54:	83 e0       	ldi	r24, 0x03	; 3
    2d56:	bd cf       	rjmp	.-134    	; 0x2cd2 <vfprintf+0x68a>
    2d58:	51 2c       	mov	r5, r1
    2d5a:	c0 cf       	rjmp	.-128    	; 0x2cdc <vfprintf+0x694>
    2d5c:	60 96       	adiw	r28, 0x10	; 16
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	9f 90       	pop	r9
    2d78:	8f 90       	pop	r8
    2d7a:	7f 90       	pop	r7
    2d7c:	6f 90       	pop	r6
    2d7e:	5f 90       	pop	r5
    2d80:	4f 90       	pop	r4
    2d82:	3f 90       	pop	r3
    2d84:	2f 90       	pop	r2
    2d86:	08 95       	ret

00002d88 <__udivmodsi4>:
    2d88:	a1 e2       	ldi	r26, 0x21	; 33
    2d8a:	1a 2e       	mov	r1, r26
    2d8c:	aa 1b       	sub	r26, r26
    2d8e:	bb 1b       	sub	r27, r27
    2d90:	fd 01       	movw	r30, r26
    2d92:	0d c0       	rjmp	.+26     	; 0x2dae <__udivmodsi4_ep>

00002d94 <__udivmodsi4_loop>:
    2d94:	aa 1f       	adc	r26, r26
    2d96:	bb 1f       	adc	r27, r27
    2d98:	ee 1f       	adc	r30, r30
    2d9a:	ff 1f       	adc	r31, r31
    2d9c:	a2 17       	cp	r26, r18
    2d9e:	b3 07       	cpc	r27, r19
    2da0:	e4 07       	cpc	r30, r20
    2da2:	f5 07       	cpc	r31, r21
    2da4:	20 f0       	brcs	.+8      	; 0x2dae <__udivmodsi4_ep>
    2da6:	a2 1b       	sub	r26, r18
    2da8:	b3 0b       	sbc	r27, r19
    2daa:	e4 0b       	sbc	r30, r20
    2dac:	f5 0b       	sbc	r31, r21

00002dae <__udivmodsi4_ep>:
    2dae:	66 1f       	adc	r22, r22
    2db0:	77 1f       	adc	r23, r23
    2db2:	88 1f       	adc	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	1a 94       	dec	r1
    2db8:	69 f7       	brne	.-38     	; 0x2d94 <__udivmodsi4_loop>
    2dba:	60 95       	com	r22
    2dbc:	70 95       	com	r23
    2dbe:	80 95       	com	r24
    2dc0:	90 95       	com	r25
    2dc2:	9b 01       	movw	r18, r22
    2dc4:	ac 01       	movw	r20, r24
    2dc6:	bd 01       	movw	r22, r26
    2dc8:	cf 01       	movw	r24, r30
    2dca:	08 95       	ret

00002dcc <__ftoa_engine>:
    2dcc:	28 30       	cpi	r18, 0x08	; 8
    2dce:	08 f0       	brcs	.+2      	; 0x2dd2 <__ftoa_engine+0x6>
    2dd0:	27 e0       	ldi	r18, 0x07	; 7
    2dd2:	33 27       	eor	r19, r19
    2dd4:	da 01       	movw	r26, r20
    2dd6:	99 0f       	add	r25, r25
    2dd8:	31 1d       	adc	r19, r1
    2dda:	87 fd       	sbrc	r24, 7
    2ddc:	91 60       	ori	r25, 0x01	; 1
    2dde:	00 96       	adiw	r24, 0x00	; 0
    2de0:	61 05       	cpc	r22, r1
    2de2:	71 05       	cpc	r23, r1
    2de4:	39 f4       	brne	.+14     	; 0x2df4 <__ftoa_engine+0x28>
    2de6:	32 60       	ori	r19, 0x02	; 2
    2de8:	2e 5f       	subi	r18, 0xFE	; 254
    2dea:	3d 93       	st	X+, r19
    2dec:	30 e3       	ldi	r19, 0x30	; 48
    2dee:	2a 95       	dec	r18
    2df0:	e1 f7       	brne	.-8      	; 0x2dea <__ftoa_engine+0x1e>
    2df2:	08 95       	ret
    2df4:	9f 3f       	cpi	r25, 0xFF	; 255
    2df6:	30 f0       	brcs	.+12     	; 0x2e04 <__ftoa_engine+0x38>
    2df8:	80 38       	cpi	r24, 0x80	; 128
    2dfa:	71 05       	cpc	r23, r1
    2dfc:	61 05       	cpc	r22, r1
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <__ftoa_engine+0x36>
    2e00:	3c 5f       	subi	r19, 0xFC	; 252
    2e02:	3c 5f       	subi	r19, 0xFC	; 252
    2e04:	3d 93       	st	X+, r19
    2e06:	91 30       	cpi	r25, 0x01	; 1
    2e08:	08 f0       	brcs	.+2      	; 0x2e0c <__ftoa_engine+0x40>
    2e0a:	80 68       	ori	r24, 0x80	; 128
    2e0c:	91 1d       	adc	r25, r1
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	1f 93       	push	r17
    2e14:	0f 93       	push	r16
    2e16:	ff 92       	push	r15
    2e18:	ef 92       	push	r14
    2e1a:	19 2f       	mov	r17, r25
    2e1c:	98 7f       	andi	r25, 0xF8	; 248
    2e1e:	96 95       	lsr	r25
    2e20:	e9 2f       	mov	r30, r25
    2e22:	96 95       	lsr	r25
    2e24:	96 95       	lsr	r25
    2e26:	e9 0f       	add	r30, r25
    2e28:	ff 27       	eor	r31, r31
    2e2a:	ea 58       	subi	r30, 0x8A	; 138
    2e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e2e:	99 27       	eor	r25, r25
    2e30:	33 27       	eor	r19, r19
    2e32:	ee 24       	eor	r14, r14
    2e34:	ff 24       	eor	r15, r15
    2e36:	a7 01       	movw	r20, r14
    2e38:	e7 01       	movw	r28, r14
    2e3a:	05 90       	lpm	r0, Z+
    2e3c:	08 94       	sec
    2e3e:	07 94       	ror	r0
    2e40:	28 f4       	brcc	.+10     	; 0x2e4c <__ftoa_engine+0x80>
    2e42:	36 0f       	add	r19, r22
    2e44:	e7 1e       	adc	r14, r23
    2e46:	f8 1e       	adc	r15, r24
    2e48:	49 1f       	adc	r20, r25
    2e4a:	51 1d       	adc	r21, r1
    2e4c:	66 0f       	add	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	88 1f       	adc	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	06 94       	lsr	r0
    2e56:	a1 f7       	brne	.-24     	; 0x2e40 <__ftoa_engine+0x74>
    2e58:	05 90       	lpm	r0, Z+
    2e5a:	07 94       	ror	r0
    2e5c:	28 f4       	brcc	.+10     	; 0x2e68 <__ftoa_engine+0x9c>
    2e5e:	e7 0e       	add	r14, r23
    2e60:	f8 1e       	adc	r15, r24
    2e62:	49 1f       	adc	r20, r25
    2e64:	56 1f       	adc	r21, r22
    2e66:	c1 1d       	adc	r28, r1
    2e68:	77 0f       	add	r23, r23
    2e6a:	88 1f       	adc	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	66 1f       	adc	r22, r22
    2e70:	06 94       	lsr	r0
    2e72:	a1 f7       	brne	.-24     	; 0x2e5c <__ftoa_engine+0x90>
    2e74:	05 90       	lpm	r0, Z+
    2e76:	07 94       	ror	r0
    2e78:	28 f4       	brcc	.+10     	; 0x2e84 <__ftoa_engine+0xb8>
    2e7a:	f8 0e       	add	r15, r24
    2e7c:	49 1f       	adc	r20, r25
    2e7e:	56 1f       	adc	r21, r22
    2e80:	c7 1f       	adc	r28, r23
    2e82:	d1 1d       	adc	r29, r1
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	66 1f       	adc	r22, r22
    2e8a:	77 1f       	adc	r23, r23
    2e8c:	06 94       	lsr	r0
    2e8e:	a1 f7       	brne	.-24     	; 0x2e78 <__ftoa_engine+0xac>
    2e90:	05 90       	lpm	r0, Z+
    2e92:	07 94       	ror	r0
    2e94:	20 f4       	brcc	.+8      	; 0x2e9e <__ftoa_engine+0xd2>
    2e96:	49 0f       	add	r20, r25
    2e98:	56 1f       	adc	r21, r22
    2e9a:	c7 1f       	adc	r28, r23
    2e9c:	d8 1f       	adc	r29, r24
    2e9e:	99 0f       	add	r25, r25
    2ea0:	66 1f       	adc	r22, r22
    2ea2:	77 1f       	adc	r23, r23
    2ea4:	88 1f       	adc	r24, r24
    2ea6:	06 94       	lsr	r0
    2ea8:	a9 f7       	brne	.-22     	; 0x2e94 <__ftoa_engine+0xc8>
    2eaa:	84 91       	lpm	r24, Z
    2eac:	10 95       	com	r17
    2eae:	17 70       	andi	r17, 0x07	; 7
    2eb0:	41 f0       	breq	.+16     	; 0x2ec2 <__ftoa_engine+0xf6>
    2eb2:	d6 95       	lsr	r29
    2eb4:	c7 95       	ror	r28
    2eb6:	57 95       	ror	r21
    2eb8:	47 95       	ror	r20
    2eba:	f7 94       	ror	r15
    2ebc:	e7 94       	ror	r14
    2ebe:	1a 95       	dec	r17
    2ec0:	c1 f7       	brne	.-16     	; 0x2eb2 <__ftoa_engine+0xe6>
    2ec2:	ec e1       	ldi	r30, 0x1C	; 28
    2ec4:	f2 e0       	ldi	r31, 0x02	; 2
    2ec6:	68 94       	set
    2ec8:	15 90       	lpm	r1, Z+
    2eca:	15 91       	lpm	r17, Z+
    2ecc:	35 91       	lpm	r19, Z+
    2ece:	65 91       	lpm	r22, Z+
    2ed0:	95 91       	lpm	r25, Z+
    2ed2:	05 90       	lpm	r0, Z+
    2ed4:	7f e2       	ldi	r23, 0x2F	; 47
    2ed6:	73 95       	inc	r23
    2ed8:	e1 18       	sub	r14, r1
    2eda:	f1 0a       	sbc	r15, r17
    2edc:	43 0b       	sbc	r20, r19
    2ede:	56 0b       	sbc	r21, r22
    2ee0:	c9 0b       	sbc	r28, r25
    2ee2:	d0 09       	sbc	r29, r0
    2ee4:	c0 f7       	brcc	.-16     	; 0x2ed6 <__ftoa_engine+0x10a>
    2ee6:	e1 0c       	add	r14, r1
    2ee8:	f1 1e       	adc	r15, r17
    2eea:	43 1f       	adc	r20, r19
    2eec:	56 1f       	adc	r21, r22
    2eee:	c9 1f       	adc	r28, r25
    2ef0:	d0 1d       	adc	r29, r0
    2ef2:	7e f4       	brtc	.+30     	; 0x2f12 <__ftoa_engine+0x146>
    2ef4:	70 33       	cpi	r23, 0x30	; 48
    2ef6:	11 f4       	brne	.+4      	; 0x2efc <__ftoa_engine+0x130>
    2ef8:	8a 95       	dec	r24
    2efa:	e6 cf       	rjmp	.-52     	; 0x2ec8 <__ftoa_engine+0xfc>
    2efc:	e8 94       	clt
    2efe:	01 50       	subi	r16, 0x01	; 1
    2f00:	30 f0       	brcs	.+12     	; 0x2f0e <__ftoa_engine+0x142>
    2f02:	08 0f       	add	r16, r24
    2f04:	0a f4       	brpl	.+2      	; 0x2f08 <__ftoa_engine+0x13c>
    2f06:	00 27       	eor	r16, r16
    2f08:	02 17       	cp	r16, r18
    2f0a:	08 f4       	brcc	.+2      	; 0x2f0e <__ftoa_engine+0x142>
    2f0c:	20 2f       	mov	r18, r16
    2f0e:	23 95       	inc	r18
    2f10:	02 2f       	mov	r16, r18
    2f12:	7a 33       	cpi	r23, 0x3A	; 58
    2f14:	28 f0       	brcs	.+10     	; 0x2f20 <__ftoa_engine+0x154>
    2f16:	79 e3       	ldi	r23, 0x39	; 57
    2f18:	7d 93       	st	X+, r23
    2f1a:	2a 95       	dec	r18
    2f1c:	e9 f7       	brne	.-6      	; 0x2f18 <__ftoa_engine+0x14c>
    2f1e:	10 c0       	rjmp	.+32     	; 0x2f40 <__ftoa_engine+0x174>
    2f20:	7d 93       	st	X+, r23
    2f22:	2a 95       	dec	r18
    2f24:	89 f6       	brne	.-94     	; 0x2ec8 <__ftoa_engine+0xfc>
    2f26:	06 94       	lsr	r0
    2f28:	97 95       	ror	r25
    2f2a:	67 95       	ror	r22
    2f2c:	37 95       	ror	r19
    2f2e:	17 95       	ror	r17
    2f30:	17 94       	ror	r1
    2f32:	e1 18       	sub	r14, r1
    2f34:	f1 0a       	sbc	r15, r17
    2f36:	43 0b       	sbc	r20, r19
    2f38:	56 0b       	sbc	r21, r22
    2f3a:	c9 0b       	sbc	r28, r25
    2f3c:	d0 09       	sbc	r29, r0
    2f3e:	98 f0       	brcs	.+38     	; 0x2f66 <__ftoa_engine+0x19a>
    2f40:	23 95       	inc	r18
    2f42:	7e 91       	ld	r23, -X
    2f44:	73 95       	inc	r23
    2f46:	7a 33       	cpi	r23, 0x3A	; 58
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <__ftoa_engine+0x180>
    2f4a:	70 e3       	ldi	r23, 0x30	; 48
    2f4c:	7c 93       	st	X, r23
    2f4e:	20 13       	cpse	r18, r16
    2f50:	b8 f7       	brcc	.-18     	; 0x2f40 <__ftoa_engine+0x174>
    2f52:	7e 91       	ld	r23, -X
    2f54:	70 61       	ori	r23, 0x10	; 16
    2f56:	7d 93       	st	X+, r23
    2f58:	30 f0       	brcs	.+12     	; 0x2f66 <__ftoa_engine+0x19a>
    2f5a:	83 95       	inc	r24
    2f5c:	71 e3       	ldi	r23, 0x31	; 49
    2f5e:	7d 93       	st	X+, r23
    2f60:	70 e3       	ldi	r23, 0x30	; 48
    2f62:	2a 95       	dec	r18
    2f64:	e1 f7       	brne	.-8      	; 0x2f5e <__ftoa_engine+0x192>
    2f66:	11 24       	eor	r1, r1
    2f68:	ef 90       	pop	r14
    2f6a:	ff 90       	pop	r15
    2f6c:	0f 91       	pop	r16
    2f6e:	1f 91       	pop	r17
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	99 27       	eor	r25, r25
    2f76:	87 fd       	sbrc	r24, 7
    2f78:	90 95       	com	r25
    2f7a:	08 95       	ret

00002f7c <strnlen_P>:
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	05 90       	lpm	r0, Z+
    2f80:	61 50       	subi	r22, 0x01	; 1
    2f82:	70 40       	sbci	r23, 0x00	; 0
    2f84:	01 10       	cpse	r0, r1
    2f86:	d8 f7       	brcc	.-10     	; 0x2f7e <strnlen_P+0x2>
    2f88:	80 95       	com	r24
    2f8a:	90 95       	com	r25
    2f8c:	8e 0f       	add	r24, r30
    2f8e:	9f 1f       	adc	r25, r31
    2f90:	08 95       	ret

00002f92 <memcpy>:
    2f92:	fb 01       	movw	r30, r22
    2f94:	dc 01       	movw	r26, r24
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <memcpy+0xa>
    2f98:	01 90       	ld	r0, Z+
    2f9a:	0d 92       	st	X+, r0
    2f9c:	41 50       	subi	r20, 0x01	; 1
    2f9e:	50 40       	sbci	r21, 0x00	; 0
    2fa0:	d8 f7       	brcc	.-10     	; 0x2f98 <memcpy+0x6>
    2fa2:	08 95       	ret

00002fa4 <memset>:
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <memset+0x6>
    2fa8:	6d 93       	st	X+, r22
    2faa:	41 50       	subi	r20, 0x01	; 1
    2fac:	50 40       	sbci	r21, 0x00	; 0
    2fae:	e0 f7       	brcc	.-8      	; 0x2fa8 <memset+0x4>
    2fb0:	08 95       	ret

00002fb2 <strcmp>:
    2fb2:	fb 01       	movw	r30, r22
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	8d 91       	ld	r24, X+
    2fb8:	01 90       	ld	r0, Z+
    2fba:	80 19       	sub	r24, r0
    2fbc:	01 10       	cpse	r0, r1
    2fbe:	d9 f3       	breq	.-10     	; 0x2fb6 <strcmp+0x4>
    2fc0:	99 0b       	sbc	r25, r25
    2fc2:	08 95       	ret

00002fc4 <strcpy>:
    2fc4:	fb 01       	movw	r30, r22
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	01 90       	ld	r0, Z+
    2fca:	0d 92       	st	X+, r0
    2fcc:	00 20       	and	r0, r0
    2fce:	e1 f7       	brne	.-8      	; 0x2fc8 <strcpy+0x4>
    2fd0:	08 95       	ret

00002fd2 <strnlen>:
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	61 50       	subi	r22, 0x01	; 1
    2fd6:	70 40       	sbci	r23, 0x00	; 0
    2fd8:	01 90       	ld	r0, Z+
    2fda:	01 10       	cpse	r0, r1
    2fdc:	d8 f7       	brcc	.-10     	; 0x2fd4 <strnlen+0x2>
    2fde:	80 95       	com	r24
    2fe0:	90 95       	com	r25
    2fe2:	8e 0f       	add	r24, r30
    2fe4:	9f 1f       	adc	r25, r31
    2fe6:	08 95       	ret

00002fe8 <fputc>:
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	fb 01       	movw	r30, r22
    2ff2:	23 81       	ldd	r18, Z+3	; 0x03
    2ff4:	21 fd       	sbrc	r18, 1
    2ff6:	03 c0       	rjmp	.+6      	; 0x2ffe <fputc+0x16>
    2ff8:	8f ef       	ldi	r24, 0xFF	; 255
    2ffa:	9f ef       	ldi	r25, 0xFF	; 255
    2ffc:	2c c0       	rjmp	.+88     	; 0x3056 <fputc+0x6e>
    2ffe:	22 ff       	sbrs	r18, 2
    3000:	16 c0       	rjmp	.+44     	; 0x302e <fputc+0x46>
    3002:	46 81       	ldd	r20, Z+6	; 0x06
    3004:	57 81       	ldd	r21, Z+7	; 0x07
    3006:	24 81       	ldd	r18, Z+4	; 0x04
    3008:	35 81       	ldd	r19, Z+5	; 0x05
    300a:	42 17       	cp	r20, r18
    300c:	53 07       	cpc	r21, r19
    300e:	44 f4       	brge	.+16     	; 0x3020 <fputc+0x38>
    3010:	a0 81       	ld	r26, Z
    3012:	b1 81       	ldd	r27, Z+1	; 0x01
    3014:	9d 01       	movw	r18, r26
    3016:	2f 5f       	subi	r18, 0xFF	; 255
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	20 83       	st	Z, r18
    301c:	31 83       	std	Z+1, r19	; 0x01
    301e:	8c 93       	st	X, r24
    3020:	26 81       	ldd	r18, Z+6	; 0x06
    3022:	37 81       	ldd	r19, Z+7	; 0x07
    3024:	2f 5f       	subi	r18, 0xFF	; 255
    3026:	3f 4f       	sbci	r19, 0xFF	; 255
    3028:	26 83       	std	Z+6, r18	; 0x06
    302a:	37 83       	std	Z+7, r19	; 0x07
    302c:	14 c0       	rjmp	.+40     	; 0x3056 <fputc+0x6e>
    302e:	8b 01       	movw	r16, r22
    3030:	ec 01       	movw	r28, r24
    3032:	fb 01       	movw	r30, r22
    3034:	00 84       	ldd	r0, Z+8	; 0x08
    3036:	f1 85       	ldd	r31, Z+9	; 0x09
    3038:	e0 2d       	mov	r30, r0
    303a:	19 95       	eicall
    303c:	89 2b       	or	r24, r25
    303e:	e1 f6       	brne	.-72     	; 0x2ff8 <fputc+0x10>
    3040:	d8 01       	movw	r26, r16
    3042:	16 96       	adiw	r26, 0x06	; 6
    3044:	8d 91       	ld	r24, X+
    3046:	9c 91       	ld	r25, X
    3048:	17 97       	sbiw	r26, 0x07	; 7
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	16 96       	adiw	r26, 0x06	; 6
    304e:	8d 93       	st	X+, r24
    3050:	9c 93       	st	X, r25
    3052:	17 97       	sbiw	r26, 0x07	; 7
    3054:	ce 01       	movw	r24, r28
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	08 95       	ret

00003060 <printf>:
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	ae 01       	movw	r20, r28
    306a:	4a 5f       	subi	r20, 0xFA	; 250
    306c:	5f 4f       	sbci	r21, 0xFF	; 255
    306e:	fa 01       	movw	r30, r20
    3070:	61 91       	ld	r22, Z+
    3072:	71 91       	ld	r23, Z+
    3074:	af 01       	movw	r20, r30
    3076:	80 91 b3 63 	lds	r24, 0x63B3	; 0x8063b3 <__iob+0x2>
    307a:	90 91 b4 63 	lds	r25, 0x63B4	; 0x8063b4 <__iob+0x3>
    307e:	0e 94 24 13 	call	0x2648	; 0x2648 <vfprintf>
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	08 95       	ret

00003088 <scanf>:
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	ae 01       	movw	r20, r28
    3092:	4a 5f       	subi	r20, 0xFA	; 250
    3094:	5f 4f       	sbci	r21, 0xFF	; 255
    3096:	fa 01       	movw	r30, r20
    3098:	61 91       	ld	r22, Z+
    309a:	71 91       	ld	r23, Z+
    309c:	af 01       	movw	r20, r30
    309e:	80 91 b1 63 	lds	r24, 0x63B1	; 0x8063b1 <__iob>
    30a2:	90 91 b2 63 	lds	r25, 0x63B2	; 0x8063b2 <__iob+0x1>
    30a6:	0e 94 cf 1a 	call	0x359e	; 0x359e <vfscanf>
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	08 95       	ret

000030b0 <snprintf>:
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	2e 97       	sbiw	r28, 0x0e	; 14
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0e 89       	ldd	r16, Y+22	; 0x16
    30c4:	1f 89       	ldd	r17, Y+23	; 0x17
    30c6:	88 8d       	ldd	r24, Y+24	; 0x18
    30c8:	99 8d       	ldd	r25, Y+25	; 0x19
    30ca:	26 e0       	ldi	r18, 0x06	; 6
    30cc:	2c 83       	std	Y+4, r18	; 0x04
    30ce:	09 83       	std	Y+1, r16	; 0x01
    30d0:	1a 83       	std	Y+2, r17	; 0x02
    30d2:	97 ff       	sbrs	r25, 7
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <snprintf+0x2a>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e8       	ldi	r25, 0x80	; 128
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	9e 83       	std	Y+6, r25	; 0x06
    30e0:	ae 01       	movw	r20, r28
    30e2:	44 5e       	subi	r20, 0xE4	; 228
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	0e 94 24 13 	call	0x2648	; 0x2648 <vfprintf>
    30f2:	4d 81       	ldd	r20, Y+5	; 0x05
    30f4:	5e 81       	ldd	r21, Y+6	; 0x06
    30f6:	57 fd       	sbrc	r21, 7
    30f8:	0a c0       	rjmp	.+20     	; 0x310e <snprintf+0x5e>
    30fa:	2f 81       	ldd	r18, Y+7	; 0x07
    30fc:	38 85       	ldd	r19, Y+8	; 0x08
    30fe:	42 17       	cp	r20, r18
    3100:	53 07       	cpc	r21, r19
    3102:	0c f4       	brge	.+2      	; 0x3106 <snprintf+0x56>
    3104:	9a 01       	movw	r18, r20
    3106:	f8 01       	movw	r30, r16
    3108:	e2 0f       	add	r30, r18
    310a:	f3 1f       	adc	r31, r19
    310c:	10 82       	st	Z, r1
    310e:	2e 96       	adiw	r28, 0x0e	; 14
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	08 95       	ret

0000311e <sprintf>:
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	2e 97       	sbiw	r28, 0x0e	; 14
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0e 89       	ldd	r16, Y+22	; 0x16
    3132:	1f 89       	ldd	r17, Y+23	; 0x17
    3134:	86 e0       	ldi	r24, 0x06	; 6
    3136:	8c 83       	std	Y+4, r24	; 0x04
    3138:	09 83       	std	Y+1, r16	; 0x01
    313a:	1a 83       	std	Y+2, r17	; 0x02
    313c:	8f ef       	ldi	r24, 0xFF	; 255
    313e:	9f e7       	ldi	r25, 0x7F	; 127
    3140:	8d 83       	std	Y+5, r24	; 0x05
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	ae 01       	movw	r20, r28
    3146:	46 5e       	subi	r20, 0xE6	; 230
    3148:	5f 4f       	sbci	r21, 0xFF	; 255
    314a:	68 8d       	ldd	r22, Y+24	; 0x18
    314c:	79 8d       	ldd	r23, Y+25	; 0x19
    314e:	ce 01       	movw	r24, r28
    3150:	01 96       	adiw	r24, 0x01	; 1
    3152:	0e 94 24 13 	call	0x2648	; 0x2648 <vfprintf>
    3156:	ef 81       	ldd	r30, Y+7	; 0x07
    3158:	f8 85       	ldd	r31, Y+8	; 0x08
    315a:	e0 0f       	add	r30, r16
    315c:	f1 1f       	adc	r31, r17
    315e:	10 82       	st	Z, r1
    3160:	2e 96       	adiw	r28, 0x0e	; 14
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	0f 91       	pop	r16
    316e:	08 95       	ret

00003170 <__ultoa_invert>:
    3170:	fa 01       	movw	r30, r20
    3172:	aa 27       	eor	r26, r26
    3174:	28 30       	cpi	r18, 0x08	; 8
    3176:	51 f1       	breq	.+84     	; 0x31cc <__ultoa_invert+0x5c>
    3178:	20 31       	cpi	r18, 0x10	; 16
    317a:	81 f1       	breq	.+96     	; 0x31dc <__ultoa_invert+0x6c>
    317c:	e8 94       	clt
    317e:	6f 93       	push	r22
    3180:	6e 7f       	andi	r22, 0xFE	; 254
    3182:	6e 5f       	subi	r22, 0xFE	; 254
    3184:	7f 4f       	sbci	r23, 0xFF	; 255
    3186:	8f 4f       	sbci	r24, 0xFF	; 255
    3188:	9f 4f       	sbci	r25, 0xFF	; 255
    318a:	af 4f       	sbci	r26, 0xFF	; 255
    318c:	b1 e0       	ldi	r27, 0x01	; 1
    318e:	3e d0       	rcall	.+124    	; 0x320c <__ultoa_invert+0x9c>
    3190:	b4 e0       	ldi	r27, 0x04	; 4
    3192:	3c d0       	rcall	.+120    	; 0x320c <__ultoa_invert+0x9c>
    3194:	67 0f       	add	r22, r23
    3196:	78 1f       	adc	r23, r24
    3198:	89 1f       	adc	r24, r25
    319a:	9a 1f       	adc	r25, r26
    319c:	a1 1d       	adc	r26, r1
    319e:	68 0f       	add	r22, r24
    31a0:	79 1f       	adc	r23, r25
    31a2:	8a 1f       	adc	r24, r26
    31a4:	91 1d       	adc	r25, r1
    31a6:	a1 1d       	adc	r26, r1
    31a8:	6a 0f       	add	r22, r26
    31aa:	71 1d       	adc	r23, r1
    31ac:	81 1d       	adc	r24, r1
    31ae:	91 1d       	adc	r25, r1
    31b0:	a1 1d       	adc	r26, r1
    31b2:	20 d0       	rcall	.+64     	; 0x31f4 <__ultoa_invert+0x84>
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <__ultoa_invert+0x48>
    31b6:	68 94       	set
    31b8:	3f 91       	pop	r19
    31ba:	2a e0       	ldi	r18, 0x0A	; 10
    31bc:	26 9f       	mul	r18, r22
    31be:	11 24       	eor	r1, r1
    31c0:	30 19       	sub	r19, r0
    31c2:	30 5d       	subi	r19, 0xD0	; 208
    31c4:	31 93       	st	Z+, r19
    31c6:	de f6       	brtc	.-74     	; 0x317e <__ultoa_invert+0xe>
    31c8:	cf 01       	movw	r24, r30
    31ca:	08 95       	ret
    31cc:	46 2f       	mov	r20, r22
    31ce:	47 70       	andi	r20, 0x07	; 7
    31d0:	40 5d       	subi	r20, 0xD0	; 208
    31d2:	41 93       	st	Z+, r20
    31d4:	b3 e0       	ldi	r27, 0x03	; 3
    31d6:	0f d0       	rcall	.+30     	; 0x31f6 <__ultoa_invert+0x86>
    31d8:	c9 f7       	brne	.-14     	; 0x31cc <__ultoa_invert+0x5c>
    31da:	f6 cf       	rjmp	.-20     	; 0x31c8 <__ultoa_invert+0x58>
    31dc:	46 2f       	mov	r20, r22
    31de:	4f 70       	andi	r20, 0x0F	; 15
    31e0:	40 5d       	subi	r20, 0xD0	; 208
    31e2:	4a 33       	cpi	r20, 0x3A	; 58
    31e4:	18 f0       	brcs	.+6      	; 0x31ec <__ultoa_invert+0x7c>
    31e6:	49 5d       	subi	r20, 0xD9	; 217
    31e8:	31 fd       	sbrc	r19, 1
    31ea:	40 52       	subi	r20, 0x20	; 32
    31ec:	41 93       	st	Z+, r20
    31ee:	02 d0       	rcall	.+4      	; 0x31f4 <__ultoa_invert+0x84>
    31f0:	a9 f7       	brne	.-22     	; 0x31dc <__ultoa_invert+0x6c>
    31f2:	ea cf       	rjmp	.-44     	; 0x31c8 <__ultoa_invert+0x58>
    31f4:	b4 e0       	ldi	r27, 0x04	; 4
    31f6:	a6 95       	lsr	r26
    31f8:	97 95       	ror	r25
    31fa:	87 95       	ror	r24
    31fc:	77 95       	ror	r23
    31fe:	67 95       	ror	r22
    3200:	ba 95       	dec	r27
    3202:	c9 f7       	brne	.-14     	; 0x31f6 <__ultoa_invert+0x86>
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	61 05       	cpc	r22, r1
    3208:	71 05       	cpc	r23, r1
    320a:	08 95       	ret
    320c:	9b 01       	movw	r18, r22
    320e:	ac 01       	movw	r20, r24
    3210:	0a 2e       	mov	r0, r26
    3212:	06 94       	lsr	r0
    3214:	57 95       	ror	r21
    3216:	47 95       	ror	r20
    3218:	37 95       	ror	r19
    321a:	27 95       	ror	r18
    321c:	ba 95       	dec	r27
    321e:	c9 f7       	brne	.-14     	; 0x3212 <__ultoa_invert+0xa2>
    3220:	62 0f       	add	r22, r18
    3222:	73 1f       	adc	r23, r19
    3224:	84 1f       	adc	r24, r20
    3226:	95 1f       	adc	r25, r21
    3228:	a0 1d       	adc	r26, r0
    322a:	08 95       	ret

0000322c <putval>:
    322c:	20 fd       	sbrc	r18, 0
    322e:	09 c0       	rjmp	.+18     	; 0x3242 <putval+0x16>
    3230:	fc 01       	movw	r30, r24
    3232:	23 fd       	sbrc	r18, 3
    3234:	05 c0       	rjmp	.+10     	; 0x3240 <putval+0x14>
    3236:	22 ff       	sbrs	r18, 2
    3238:	02 c0       	rjmp	.+4      	; 0x323e <putval+0x12>
    323a:	73 83       	std	Z+3, r23	; 0x03
    323c:	62 83       	std	Z+2, r22	; 0x02
    323e:	51 83       	std	Z+1, r21	; 0x01
    3240:	40 83       	st	Z, r20
    3242:	08 95       	ret

00003244 <mulacc>:
    3244:	44 fd       	sbrc	r20, 4
    3246:	17 c0       	rjmp	.+46     	; 0x3276 <mulacc+0x32>
    3248:	46 fd       	sbrc	r20, 6
    324a:	17 c0       	rjmp	.+46     	; 0x327a <mulacc+0x36>
    324c:	ab 01       	movw	r20, r22
    324e:	bc 01       	movw	r22, r24
    3250:	da 01       	movw	r26, r20
    3252:	fb 01       	movw	r30, r22
    3254:	aa 0f       	add	r26, r26
    3256:	bb 1f       	adc	r27, r27
    3258:	ee 1f       	adc	r30, r30
    325a:	ff 1f       	adc	r31, r31
    325c:	10 94       	com	r1
    325e:	d1 f7       	brne	.-12     	; 0x3254 <mulacc+0x10>
    3260:	4a 0f       	add	r20, r26
    3262:	5b 1f       	adc	r21, r27
    3264:	6e 1f       	adc	r22, r30
    3266:	7f 1f       	adc	r23, r31
    3268:	cb 01       	movw	r24, r22
    326a:	ba 01       	movw	r22, r20
    326c:	66 0f       	add	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	09 c0       	rjmp	.+18     	; 0x3288 <mulacc+0x44>
    3276:	33 e0       	ldi	r19, 0x03	; 3
    3278:	01 c0       	rjmp	.+2      	; 0x327c <mulacc+0x38>
    327a:	34 e0       	ldi	r19, 0x04	; 4
    327c:	66 0f       	add	r22, r22
    327e:	77 1f       	adc	r23, r23
    3280:	88 1f       	adc	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	31 50       	subi	r19, 0x01	; 1
    3286:	d1 f7       	brne	.-12     	; 0x327c <mulacc+0x38>
    3288:	62 0f       	add	r22, r18
    328a:	71 1d       	adc	r23, r1
    328c:	81 1d       	adc	r24, r1
    328e:	91 1d       	adc	r25, r1
    3290:	08 95       	ret

00003292 <skip_spaces>:
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	8c 01       	movw	r16, r24
    329c:	c8 01       	movw	r24, r16
    329e:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    32a2:	ec 01       	movw	r28, r24
    32a4:	97 fd       	sbrc	r25, 7
    32a6:	08 c0       	rjmp	.+16     	; 0x32b8 <skip_spaces+0x26>
    32a8:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <isspace>
    32ac:	89 2b       	or	r24, r25
    32ae:	b1 f7       	brne	.-20     	; 0x329c <skip_spaces+0xa>
    32b0:	b8 01       	movw	r22, r16
    32b2:	ce 01       	movw	r24, r28
    32b4:	0e 94 46 1c 	call	0x388c	; 0x388c <ungetc>
    32b8:	ce 01       	movw	r24, r28
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	08 95       	ret

000032c4 <conv_int>:
    32c4:	8f 92       	push	r8
    32c6:	9f 92       	push	r9
    32c8:	af 92       	push	r10
    32ca:	bf 92       	push	r11
    32cc:	ef 92       	push	r14
    32ce:	ff 92       	push	r15
    32d0:	0f 93       	push	r16
    32d2:	1f 93       	push	r17
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	8c 01       	movw	r16, r24
    32da:	d6 2f       	mov	r29, r22
    32dc:	7a 01       	movw	r14, r20
    32de:	b2 2e       	mov	r11, r18
    32e0:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    32e4:	9c 01       	movw	r18, r24
    32e6:	33 27       	eor	r19, r19
    32e8:	2b 32       	cpi	r18, 0x2B	; 43
    32ea:	31 05       	cpc	r19, r1
    32ec:	31 f0       	breq	.+12     	; 0x32fa <conv_int+0x36>
    32ee:	2d 32       	cpi	r18, 0x2D	; 45
    32f0:	31 05       	cpc	r19, r1
    32f2:	61 f4       	brne	.+24     	; 0x330c <conv_int+0x48>
    32f4:	8b 2d       	mov	r24, r11
    32f6:	80 68       	ori	r24, 0x80	; 128
    32f8:	b8 2e       	mov	r11, r24
    32fa:	d1 50       	subi	r29, 0x01	; 1
    32fc:	11 f4       	brne	.+4      	; 0x3302 <conv_int+0x3e>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	68 c0       	rjmp	.+208    	; 0x33d2 <conv_int+0x10e>
    3302:	c8 01       	movw	r24, r16
    3304:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    3308:	97 fd       	sbrc	r25, 7
    330a:	f9 cf       	rjmp	.-14     	; 0x32fe <conv_int+0x3a>
    330c:	cb 2d       	mov	r28, r11
    330e:	cd 7f       	andi	r28, 0xFD	; 253
    3310:	2b 2d       	mov	r18, r11
    3312:	20 73       	andi	r18, 0x30	; 48
    3314:	09 f5       	brne	.+66     	; 0x3358 <conv_int+0x94>
    3316:	80 33       	cpi	r24, 0x30	; 48
    3318:	f9 f4       	brne	.+62     	; 0x3358 <conv_int+0x94>
    331a:	aa 24       	eor	r10, r10
    331c:	aa 94       	dec	r10
    331e:	ad 0e       	add	r10, r29
    3320:	09 f4       	brne	.+2      	; 0x3324 <conv_int+0x60>
    3322:	43 c0       	rjmp	.+134    	; 0x33aa <conv_int+0xe6>
    3324:	c8 01       	movw	r24, r16
    3326:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    332a:	97 fd       	sbrc	r25, 7
    332c:	3e c0       	rjmp	.+124    	; 0x33aa <conv_int+0xe6>
    332e:	9c 01       	movw	r18, r24
    3330:	2f 7d       	andi	r18, 0xDF	; 223
    3332:	33 27       	eor	r19, r19
    3334:	28 35       	cpi	r18, 0x58	; 88
    3336:	31 05       	cpc	r19, r1
    3338:	49 f4       	brne	.+18     	; 0x334c <conv_int+0x88>
    333a:	c2 64       	ori	r28, 0x42	; 66
    333c:	d2 50       	subi	r29, 0x02	; 2
    333e:	a9 f1       	breq	.+106    	; 0x33aa <conv_int+0xe6>
    3340:	c8 01       	movw	r24, r16
    3342:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    3346:	97 ff       	sbrs	r25, 7
    3348:	07 c0       	rjmp	.+14     	; 0x3358 <conv_int+0x94>
    334a:	2f c0       	rjmp	.+94     	; 0x33aa <conv_int+0xe6>
    334c:	b6 fe       	sbrs	r11, 6
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <conv_int+0x90>
    3350:	c2 60       	ori	r28, 0x02	; 2
    3352:	01 c0       	rjmp	.+2      	; 0x3356 <conv_int+0x92>
    3354:	c2 61       	ori	r28, 0x12	; 18
    3356:	da 2d       	mov	r29, r10
    3358:	81 2c       	mov	r8, r1
    335a:	91 2c       	mov	r9, r1
    335c:	54 01       	movw	r10, r8
    335e:	20 ed       	ldi	r18, 0xD0	; 208
    3360:	28 0f       	add	r18, r24
    3362:	28 30       	cpi	r18, 0x08	; 8
    3364:	80 f0       	brcs	.+32     	; 0x3386 <conv_int+0xc2>
    3366:	c4 ff       	sbrs	r28, 4
    3368:	04 c0       	rjmp	.+8      	; 0x3372 <conv_int+0xae>
    336a:	b8 01       	movw	r22, r16
    336c:	0e 94 46 1c 	call	0x388c	; 0x388c <ungetc>
    3370:	19 c0       	rjmp	.+50     	; 0x33a4 <conv_int+0xe0>
    3372:	2a 30       	cpi	r18, 0x0A	; 10
    3374:	40 f0       	brcs	.+16     	; 0x3386 <conv_int+0xc2>
    3376:	c6 ff       	sbrs	r28, 6
    3378:	f8 cf       	rjmp	.-16     	; 0x336a <conv_int+0xa6>
    337a:	2f 7d       	andi	r18, 0xDF	; 223
    337c:	3f ee       	ldi	r19, 0xEF	; 239
    337e:	32 0f       	add	r19, r18
    3380:	36 30       	cpi	r19, 0x06	; 6
    3382:	98 f7       	brcc	.-26     	; 0x336a <conv_int+0xa6>
    3384:	27 50       	subi	r18, 0x07	; 7
    3386:	4c 2f       	mov	r20, r28
    3388:	c5 01       	movw	r24, r10
    338a:	b4 01       	movw	r22, r8
    338c:	0e 94 22 19 	call	0x3244	; 0x3244 <mulacc>
    3390:	4b 01       	movw	r8, r22
    3392:	5c 01       	movw	r10, r24
    3394:	c2 60       	ori	r28, 0x02	; 2
    3396:	d1 50       	subi	r29, 0x01	; 1
    3398:	59 f0       	breq	.+22     	; 0x33b0 <conv_int+0xec>
    339a:	c8 01       	movw	r24, r16
    339c:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    33a0:	97 ff       	sbrs	r25, 7
    33a2:	dd cf       	rjmp	.-70     	; 0x335e <conv_int+0x9a>
    33a4:	c1 fd       	sbrc	r28, 1
    33a6:	04 c0       	rjmp	.+8      	; 0x33b0 <conv_int+0xec>
    33a8:	aa cf       	rjmp	.-172    	; 0x32fe <conv_int+0x3a>
    33aa:	81 2c       	mov	r8, r1
    33ac:	91 2c       	mov	r9, r1
    33ae:	54 01       	movw	r10, r8
    33b0:	c7 ff       	sbrs	r28, 7
    33b2:	08 c0       	rjmp	.+16     	; 0x33c4 <conv_int+0x100>
    33b4:	b0 94       	com	r11
    33b6:	a0 94       	com	r10
    33b8:	90 94       	com	r9
    33ba:	80 94       	com	r8
    33bc:	81 1c       	adc	r8, r1
    33be:	91 1c       	adc	r9, r1
    33c0:	a1 1c       	adc	r10, r1
    33c2:	b1 1c       	adc	r11, r1
    33c4:	2c 2f       	mov	r18, r28
    33c6:	b5 01       	movw	r22, r10
    33c8:	a4 01       	movw	r20, r8
    33ca:	c7 01       	movw	r24, r14
    33cc:	0e 94 16 19 	call	0x322c	; 0x322c <putval>
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	bf 90       	pop	r11
    33e0:	af 90       	pop	r10
    33e2:	9f 90       	pop	r9
    33e4:	8f 90       	pop	r8
    33e6:	08 95       	ret

000033e8 <conv_brk>:
    33e8:	5f 92       	push	r5
    33ea:	6f 92       	push	r6
    33ec:	7f 92       	push	r7
    33ee:	8f 92       	push	r8
    33f0:	9f 92       	push	r9
    33f2:	af 92       	push	r10
    33f4:	bf 92       	push	r11
    33f6:	cf 92       	push	r12
    33f8:	df 92       	push	r13
    33fa:	ef 92       	push	r14
    33fc:	ff 92       	push	r15
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	a0 97       	sbiw	r28, 0x20	; 32
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	5c 01       	movw	r10, r24
    3412:	96 2e       	mov	r9, r22
    3414:	7a 01       	movw	r14, r20
    3416:	f9 01       	movw	r30, r18
    3418:	8e 01       	movw	r16, r28
    341a:	0f 5f       	subi	r16, 0xFF	; 255
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	68 01       	movw	r12, r16
    3420:	80 e2       	ldi	r24, 0x20	; 32
    3422:	d8 01       	movw	r26, r16
    3424:	1d 92       	st	X+, r1
    3426:	8a 95       	dec	r24
    3428:	e9 f7       	brne	.-6      	; 0x3424 <conv_brk+0x3c>
    342a:	d5 01       	movw	r26, r10
    342c:	13 96       	adiw	r26, 0x03	; 3
    342e:	8c 90       	ld	r8, X
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	61 2c       	mov	r6, r1
    3436:	71 2c       	mov	r7, r1
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	61 e0       	ldi	r22, 0x01	; 1
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	83 fc       	sbrc	r8, 3
    3440:	25 91       	lpm	r18, Z+
    3442:	83 fe       	sbrs	r8, 3
    3444:	21 91       	ld	r18, Z+
    3446:	8f 01       	movw	r16, r30
    3448:	52 2e       	mov	r5, r18
    344a:	21 11       	cpse	r18, r1
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <conv_brk+0x6c>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	92 c0       	rjmp	.+292    	; 0x3578 <conv_brk+0x190>
    3454:	2e 35       	cpi	r18, 0x5E	; 94
    3456:	11 f4       	brne	.+4      	; 0x345c <conv_brk+0x74>
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	51 f1       	breq	.+84     	; 0x34b0 <conv_brk+0xc8>
    345c:	43 2f       	mov	r20, r19
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	48 17       	cp	r20, r24
    3462:	59 07       	cpc	r21, r25
    3464:	3c f4       	brge	.+14     	; 0x3474 <conv_brk+0x8c>
    3466:	2d 35       	cpi	r18, 0x5D	; 93
    3468:	59 f1       	breq	.+86     	; 0x34c0 <conv_brk+0xd8>
    346a:	2d 32       	cpi	r18, 0x2D	; 45
    346c:	19 f4       	brne	.+6      	; 0x3474 <conv_brk+0x8c>
    346e:	77 20       	and	r7, r7
    3470:	09 f1       	breq	.+66     	; 0x34b4 <conv_brk+0xcc>
    3472:	03 c0       	rjmp	.+6      	; 0x347a <conv_brk+0x92>
    3474:	77 20       	and	r7, r7
    3476:	09 f4       	brne	.+2      	; 0x347a <conv_brk+0x92>
    3478:	6a c0       	rjmp	.+212    	; 0x354e <conv_brk+0x166>
    347a:	45 2d       	mov	r20, r5
    347c:	46 95       	lsr	r20
    347e:	46 95       	lsr	r20
    3480:	46 95       	lsr	r20
    3482:	d6 01       	movw	r26, r12
    3484:	a4 0f       	add	r26, r20
    3486:	b1 1d       	adc	r27, r1
    3488:	45 2d       	mov	r20, r5
    348a:	47 70       	andi	r20, 0x07	; 7
    348c:	8b 01       	movw	r16, r22
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <conv_brk+0xac>
    3490:	00 0f       	add	r16, r16
    3492:	11 1f       	adc	r17, r17
    3494:	4a 95       	dec	r20
    3496:	e2 f7       	brpl	.-8      	; 0x3490 <conv_brk+0xa8>
    3498:	a8 01       	movw	r20, r16
    349a:	5c 91       	ld	r21, X
    349c:	45 2b       	or	r20, r21
    349e:	4c 93       	st	X, r20
    34a0:	65 14       	cp	r6, r5
    34a2:	59 f0       	breq	.+22     	; 0x34ba <conv_brk+0xd2>
    34a4:	56 14       	cp	r5, r6
    34a6:	10 f4       	brcc	.+4      	; 0x34ac <conv_brk+0xc4>
    34a8:	53 94       	inc	r5
    34aa:	e7 cf       	rjmp	.-50     	; 0x347a <conv_brk+0x92>
    34ac:	5a 94       	dec	r5
    34ae:	e5 cf       	rjmp	.-54     	; 0x347a <conv_brk+0x92>
    34b0:	31 e0       	ldi	r19, 0x01	; 1
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <conv_brk+0xd4>
    34b4:	77 24       	eor	r7, r7
    34b6:	73 94       	inc	r7
    34b8:	01 c0       	rjmp	.+2      	; 0x34bc <conv_brk+0xd4>
    34ba:	71 2c       	mov	r7, r1
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	bf cf       	rjmp	.-130    	; 0x343e <conv_brk+0x56>
    34c0:	77 20       	and	r7, r7
    34c2:	19 f0       	breq	.+6      	; 0x34ca <conv_brk+0xe2>
    34c4:	8e 81       	ldd	r24, Y+6	; 0x06
    34c6:	80 62       	ori	r24, 0x20	; 32
    34c8:	8e 83       	std	Y+6, r24	; 0x06
    34ca:	31 11       	cpse	r19, r1
    34cc:	03 c0       	rjmp	.+6      	; 0x34d4 <conv_brk+0xec>
    34ce:	88 24       	eor	r8, r8
    34d0:	83 94       	inc	r8
    34d2:	17 c0       	rjmp	.+46     	; 0x3502 <conv_brk+0x11a>
    34d4:	f6 01       	movw	r30, r12
    34d6:	9e 01       	movw	r18, r28
    34d8:	2f 5d       	subi	r18, 0xDF	; 223
    34da:	3f 4f       	sbci	r19, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	80 95       	com	r24
    34e0:	81 93       	st	Z+, r24
    34e2:	2e 17       	cp	r18, r30
    34e4:	3f 07       	cpc	r19, r31
    34e6:	d1 f7       	brne	.-12     	; 0x34dc <conv_brk+0xf4>
    34e8:	f2 cf       	rjmp	.-28     	; 0x34ce <conv_brk+0xe6>
    34ea:	e1 14       	cp	r14, r1
    34ec:	f1 04       	cpc	r15, r1
    34ee:	29 f0       	breq	.+10     	; 0x34fa <conv_brk+0x112>
    34f0:	d7 01       	movw	r26, r14
    34f2:	8c 93       	st	X, r24
    34f4:	f7 01       	movw	r30, r14
    34f6:	31 96       	adiw	r30, 0x01	; 1
    34f8:	7f 01       	movw	r14, r30
    34fa:	9a 94       	dec	r9
    34fc:	81 2c       	mov	r8, r1
    34fe:	99 20       	and	r9, r9
    3500:	f9 f0       	breq	.+62     	; 0x3540 <conv_brk+0x158>
    3502:	c5 01       	movw	r24, r10
    3504:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    3508:	97 fd       	sbrc	r25, 7
    350a:	18 c0       	rjmp	.+48     	; 0x353c <conv_brk+0x154>
    350c:	fc 01       	movw	r30, r24
    350e:	ff 27       	eor	r31, r31
    3510:	23 e0       	ldi	r18, 0x03	; 3
    3512:	f5 95       	asr	r31
    3514:	e7 95       	ror	r30
    3516:	2a 95       	dec	r18
    3518:	e1 f7       	brne	.-8      	; 0x3512 <conv_brk+0x12a>
    351a:	ec 0d       	add	r30, r12
    351c:	fd 1d       	adc	r31, r13
    351e:	20 81       	ld	r18, Z
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	ac 01       	movw	r20, r24
    3524:	47 70       	andi	r20, 0x07	; 7
    3526:	55 27       	eor	r21, r21
    3528:	02 c0       	rjmp	.+4      	; 0x352e <conv_brk+0x146>
    352a:	35 95       	asr	r19
    352c:	27 95       	ror	r18
    352e:	4a 95       	dec	r20
    3530:	e2 f7       	brpl	.-8      	; 0x352a <conv_brk+0x142>
    3532:	20 fd       	sbrc	r18, 0
    3534:	da cf       	rjmp	.-76     	; 0x34ea <conv_brk+0x102>
    3536:	b5 01       	movw	r22, r10
    3538:	0e 94 46 1c 	call	0x388c	; 0x388c <ungetc>
    353c:	81 10       	cpse	r8, r1
    353e:	87 cf       	rjmp	.-242    	; 0x344e <conv_brk+0x66>
    3540:	e1 14       	cp	r14, r1
    3542:	f1 04       	cpc	r15, r1
    3544:	11 f0       	breq	.+4      	; 0x354a <conv_brk+0x162>
    3546:	d7 01       	movw	r26, r14
    3548:	1c 92       	st	X, r1
    354a:	c8 01       	movw	r24, r16
    354c:	15 c0       	rjmp	.+42     	; 0x3578 <conv_brk+0x190>
    354e:	42 2f       	mov	r20, r18
    3550:	46 95       	lsr	r20
    3552:	46 95       	lsr	r20
    3554:	46 95       	lsr	r20
    3556:	d6 01       	movw	r26, r12
    3558:	a4 0f       	add	r26, r20
    355a:	b1 1d       	adc	r27, r1
    355c:	42 2f       	mov	r20, r18
    355e:	47 70       	andi	r20, 0x07	; 7
    3560:	8b 01       	movw	r16, r22
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <conv_brk+0x180>
    3564:	00 0f       	add	r16, r16
    3566:	11 1f       	adc	r17, r17
    3568:	4a 95       	dec	r20
    356a:	e2 f7       	brpl	.-8      	; 0x3564 <conv_brk+0x17c>
    356c:	a8 01       	movw	r20, r16
    356e:	5c 91       	ld	r21, X
    3570:	45 2b       	or	r20, r21
    3572:	4c 93       	st	X, r20
    3574:	62 2e       	mov	r6, r18
    3576:	a2 cf       	rjmp	.-188    	; 0x34bc <conv_brk+0xd4>
    3578:	a0 96       	adiw	r28, 0x20	; 32
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	df 91       	pop	r29
    3580:	cf 91       	pop	r28
    3582:	1f 91       	pop	r17
    3584:	0f 91       	pop	r16
    3586:	ff 90       	pop	r15
    3588:	ef 90       	pop	r14
    358a:	df 90       	pop	r13
    358c:	cf 90       	pop	r12
    358e:	bf 90       	pop	r11
    3590:	af 90       	pop	r10
    3592:	9f 90       	pop	r9
    3594:	8f 90       	pop	r8
    3596:	7f 90       	pop	r7
    3598:	6f 90       	pop	r6
    359a:	5f 90       	pop	r5
    359c:	08 95       	ret

0000359e <vfscanf>:
    359e:	5f 92       	push	r5
    35a0:	6f 92       	push	r6
    35a2:	7f 92       	push	r7
    35a4:	8f 92       	push	r8
    35a6:	9f 92       	push	r9
    35a8:	af 92       	push	r10
    35aa:	bf 92       	push	r11
    35ac:	cf 92       	push	r12
    35ae:	df 92       	push	r13
    35b0:	ef 92       	push	r14
    35b2:	ff 92       	push	r15
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	6c 01       	movw	r12, r24
    35be:	eb 01       	movw	r28, r22
    35c0:	5a 01       	movw	r10, r20
    35c2:	fc 01       	movw	r30, r24
    35c4:	16 82       	std	Z+6, r1	; 0x06
    35c6:	17 82       	std	Z+7, r1	; 0x07
    35c8:	51 2c       	mov	r5, r1
    35ca:	f6 01       	movw	r30, r12
    35cc:	e3 80       	ldd	r14, Z+3	; 0x03
    35ce:	fe 01       	movw	r30, r28
    35d0:	e3 fc       	sbrc	r14, 3
    35d2:	85 91       	lpm	r24, Z+
    35d4:	e3 fe       	sbrs	r14, 3
    35d6:	81 91       	ld	r24, Z+
    35d8:	18 2f       	mov	r17, r24
    35da:	ef 01       	movw	r28, r30
    35dc:	88 23       	and	r24, r24
    35de:	09 f4       	brne	.+2      	; 0x35e2 <vfscanf+0x44>
    35e0:	ee c0       	rjmp	.+476    	; 0x37be <vfscanf+0x220>
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <isspace>
    35e8:	89 2b       	or	r24, r25
    35ea:	21 f0       	breq	.+8      	; 0x35f4 <vfscanf+0x56>
    35ec:	c6 01       	movw	r24, r12
    35ee:	0e 94 49 19 	call	0x3292	; 0x3292 <skip_spaces>
    35f2:	eb cf       	rjmp	.-42     	; 0x35ca <vfscanf+0x2c>
    35f4:	15 32       	cpi	r17, 0x25	; 37
    35f6:	41 f4       	brne	.+16     	; 0x3608 <vfscanf+0x6a>
    35f8:	fe 01       	movw	r30, r28
    35fa:	e3 fc       	sbrc	r14, 3
    35fc:	15 91       	lpm	r17, Z+
    35fe:	e3 fe       	sbrs	r14, 3
    3600:	11 91       	ld	r17, Z+
    3602:	ef 01       	movw	r28, r30
    3604:	15 32       	cpi	r17, 0x25	; 37
    3606:	81 f4       	brne	.+32     	; 0x3628 <vfscanf+0x8a>
    3608:	c6 01       	movw	r24, r12
    360a:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    360e:	97 fd       	sbrc	r25, 7
    3610:	d4 c0       	rjmp	.+424    	; 0x37ba <vfscanf+0x21c>
    3612:	41 2f       	mov	r20, r17
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	9c 01       	movw	r18, r24
    3618:	33 27       	eor	r19, r19
    361a:	24 17       	cp	r18, r20
    361c:	35 07       	cpc	r19, r21
    361e:	a9 f2       	breq	.-86     	; 0x35ca <vfscanf+0x2c>
    3620:	b6 01       	movw	r22, r12
    3622:	0e 94 46 1c 	call	0x388c	; 0x388c <ungetc>
    3626:	cb c0       	rjmp	.+406    	; 0x37be <vfscanf+0x220>
    3628:	1a 32       	cpi	r17, 0x2A	; 42
    362a:	39 f4       	brne	.+14     	; 0x363a <vfscanf+0x9c>
    362c:	e3 fc       	sbrc	r14, 3
    362e:	15 91       	lpm	r17, Z+
    3630:	e3 fe       	sbrs	r14, 3
    3632:	11 91       	ld	r17, Z+
    3634:	ef 01       	movw	r28, r30
    3636:	01 e0       	ldi	r16, 0x01	; 1
    3638:	01 c0       	rjmp	.+2      	; 0x363c <vfscanf+0x9e>
    363a:	00 e0       	ldi	r16, 0x00	; 0
    363c:	f1 2c       	mov	r15, r1
    363e:	20 ed       	ldi	r18, 0xD0	; 208
    3640:	21 0f       	add	r18, r17
    3642:	2a 30       	cpi	r18, 0x0A	; 10
    3644:	80 f4       	brcc	.+32     	; 0x3666 <vfscanf+0xc8>
    3646:	02 60       	ori	r16, 0x02	; 2
    3648:	6f 2d       	mov	r22, r15
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	40 e2       	ldi	r20, 0x20	; 32
    3652:	0e 94 22 19 	call	0x3244	; 0x3244 <mulacc>
    3656:	f6 2e       	mov	r15, r22
    3658:	fe 01       	movw	r30, r28
    365a:	e3 fc       	sbrc	r14, 3
    365c:	15 91       	lpm	r17, Z+
    365e:	e3 fe       	sbrs	r14, 3
    3660:	11 91       	ld	r17, Z+
    3662:	ef 01       	movw	r28, r30
    3664:	ec cf       	rjmp	.-40     	; 0x363e <vfscanf+0xa0>
    3666:	01 ff       	sbrs	r16, 1
    3668:	03 c0       	rjmp	.+6      	; 0x3670 <vfscanf+0xd2>
    366a:	f1 10       	cpse	r15, r1
    366c:	03 c0       	rjmp	.+6      	; 0x3674 <vfscanf+0xd6>
    366e:	a7 c0       	rjmp	.+334    	; 0x37be <vfscanf+0x220>
    3670:	ff 24       	eor	r15, r15
    3672:	fa 94       	dec	r15
    3674:	18 36       	cpi	r17, 0x68	; 104
    3676:	19 f0       	breq	.+6      	; 0x367e <vfscanf+0xe0>
    3678:	1c 36       	cpi	r17, 0x6C	; 108
    367a:	51 f0       	breq	.+20     	; 0x3690 <vfscanf+0xf2>
    367c:	10 c0       	rjmp	.+32     	; 0x369e <vfscanf+0x100>
    367e:	fe 01       	movw	r30, r28
    3680:	e3 fc       	sbrc	r14, 3
    3682:	15 91       	lpm	r17, Z+
    3684:	e3 fe       	sbrs	r14, 3
    3686:	11 91       	ld	r17, Z+
    3688:	ef 01       	movw	r28, r30
    368a:	18 36       	cpi	r17, 0x68	; 104
    368c:	41 f4       	brne	.+16     	; 0x369e <vfscanf+0x100>
    368e:	08 60       	ori	r16, 0x08	; 8
    3690:	04 60       	ori	r16, 0x04	; 4
    3692:	fe 01       	movw	r30, r28
    3694:	e3 fc       	sbrc	r14, 3
    3696:	15 91       	lpm	r17, Z+
    3698:	e3 fe       	sbrs	r14, 3
    369a:	11 91       	ld	r17, Z+
    369c:	ef 01       	movw	r28, r30
    369e:	11 23       	and	r17, r17
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <vfscanf+0x106>
    36a2:	8d c0       	rjmp	.+282    	; 0x37be <vfscanf+0x220>
    36a4:	61 2f       	mov	r22, r17
    36a6:	70 e0       	ldi	r23, 0x00	; 0
    36a8:	86 e1       	ldi	r24, 0x16	; 22
    36aa:	93 e0       	ldi	r25, 0x03	; 3
    36ac:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <strchr_P>
    36b0:	89 2b       	or	r24, r25
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <vfscanf+0x118>
    36b4:	84 c0       	rjmp	.+264    	; 0x37be <vfscanf+0x220>
    36b6:	00 fd       	sbrc	r16, 0
    36b8:	07 c0       	rjmp	.+14     	; 0x36c8 <vfscanf+0x12a>
    36ba:	f5 01       	movw	r30, r10
    36bc:	80 80       	ld	r8, Z
    36be:	91 80       	ldd	r9, Z+1	; 0x01
    36c0:	c5 01       	movw	r24, r10
    36c2:	02 96       	adiw	r24, 0x02	; 2
    36c4:	5c 01       	movw	r10, r24
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <vfscanf+0x12e>
    36c8:	81 2c       	mov	r8, r1
    36ca:	91 2c       	mov	r9, r1
    36cc:	1e 36       	cpi	r17, 0x6E	; 110
    36ce:	51 f4       	brne	.+20     	; 0x36e4 <vfscanf+0x146>
    36d0:	f6 01       	movw	r30, r12
    36d2:	46 81       	ldd	r20, Z+6	; 0x06
    36d4:	57 81       	ldd	r21, Z+7	; 0x07
    36d6:	60 e0       	ldi	r22, 0x00	; 0
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	20 2f       	mov	r18, r16
    36dc:	c4 01       	movw	r24, r8
    36de:	0e 94 16 19 	call	0x322c	; 0x322c <putval>
    36e2:	73 cf       	rjmp	.-282    	; 0x35ca <vfscanf+0x2c>
    36e4:	13 36       	cpi	r17, 0x63	; 99
    36e6:	a9 f4       	brne	.+42     	; 0x3712 <vfscanf+0x174>
    36e8:	01 fd       	sbrc	r16, 1
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <vfscanf+0x152>
    36ec:	ff 24       	eor	r15, r15
    36ee:	f3 94       	inc	r15
    36f0:	c6 01       	movw	r24, r12
    36f2:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    36f6:	97 fd       	sbrc	r25, 7
    36f8:	60 c0       	rjmp	.+192    	; 0x37ba <vfscanf+0x21c>
    36fa:	81 14       	cp	r8, r1
    36fc:	91 04       	cpc	r9, r1
    36fe:	29 f0       	breq	.+10     	; 0x370a <vfscanf+0x16c>
    3700:	f4 01       	movw	r30, r8
    3702:	80 83       	st	Z, r24
    3704:	c4 01       	movw	r24, r8
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	4c 01       	movw	r8, r24
    370a:	fa 94       	dec	r15
    370c:	f1 10       	cpse	r15, r1
    370e:	f0 cf       	rjmp	.-32     	; 0x36f0 <vfscanf+0x152>
    3710:	50 c0       	rjmp	.+160    	; 0x37b2 <vfscanf+0x214>
    3712:	1b 35       	cpi	r17, 0x5B	; 91
    3714:	59 f4       	brne	.+22     	; 0x372c <vfscanf+0x18e>
    3716:	9e 01       	movw	r18, r28
    3718:	a4 01       	movw	r20, r8
    371a:	6f 2d       	mov	r22, r15
    371c:	c6 01       	movw	r24, r12
    371e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <conv_brk>
    3722:	ec 01       	movw	r28, r24
    3724:	89 2b       	or	r24, r25
    3726:	09 f0       	breq	.+2      	; 0x372a <vfscanf+0x18c>
    3728:	44 c0       	rjmp	.+136    	; 0x37b2 <vfscanf+0x214>
    372a:	3e c0       	rjmp	.+124    	; 0x37a8 <vfscanf+0x20a>
    372c:	c6 01       	movw	r24, r12
    372e:	0e 94 49 19 	call	0x3292	; 0x3292 <skip_spaces>
    3732:	97 fd       	sbrc	r25, 7
    3734:	42 c0       	rjmp	.+132    	; 0x37ba <vfscanf+0x21c>
    3736:	1f 36       	cpi	r17, 0x6F	; 111
    3738:	61 f1       	breq	.+88     	; 0x3792 <vfscanf+0x1f4>
    373a:	28 f4       	brcc	.+10     	; 0x3746 <vfscanf+0x1a8>
    373c:	14 36       	cpi	r17, 0x64	; 100
    373e:	39 f1       	breq	.+78     	; 0x378e <vfscanf+0x1f0>
    3740:	19 36       	cpi	r17, 0x69	; 105
    3742:	51 f1       	breq	.+84     	; 0x3798 <vfscanf+0x1fa>
    3744:	28 c0       	rjmp	.+80     	; 0x3796 <vfscanf+0x1f8>
    3746:	13 37       	cpi	r17, 0x73	; 115
    3748:	71 f0       	breq	.+28     	; 0x3766 <vfscanf+0x1c8>
    374a:	15 37       	cpi	r17, 0x75	; 117
    374c:	01 f1       	breq	.+64     	; 0x378e <vfscanf+0x1f0>
    374e:	23 c0       	rjmp	.+70     	; 0x3796 <vfscanf+0x1f8>
    3750:	81 14       	cp	r8, r1
    3752:	91 04       	cpc	r9, r1
    3754:	29 f0       	breq	.+10     	; 0x3760 <vfscanf+0x1c2>
    3756:	f4 01       	movw	r30, r8
    3758:	60 82       	st	Z, r6
    375a:	c4 01       	movw	r24, r8
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	4c 01       	movw	r8, r24
    3760:	fa 94       	dec	r15
    3762:	ff 20       	and	r15, r15
    3764:	71 f0       	breq	.+28     	; 0x3782 <vfscanf+0x1e4>
    3766:	c6 01       	movw	r24, r12
    3768:	0e 94 08 1c 	call	0x3810	; 0x3810 <fgetc>
    376c:	3c 01       	movw	r6, r24
    376e:	97 fd       	sbrc	r25, 7
    3770:	08 c0       	rjmp	.+16     	; 0x3782 <vfscanf+0x1e4>
    3772:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <isspace>
    3776:	89 2b       	or	r24, r25
    3778:	59 f3       	breq	.-42     	; 0x3750 <vfscanf+0x1b2>
    377a:	b6 01       	movw	r22, r12
    377c:	c3 01       	movw	r24, r6
    377e:	0e 94 46 1c 	call	0x388c	; 0x388c <ungetc>
    3782:	81 14       	cp	r8, r1
    3784:	91 04       	cpc	r9, r1
    3786:	a9 f0       	breq	.+42     	; 0x37b2 <vfscanf+0x214>
    3788:	f4 01       	movw	r30, r8
    378a:	10 82       	st	Z, r1
    378c:	12 c0       	rjmp	.+36     	; 0x37b2 <vfscanf+0x214>
    378e:	00 62       	ori	r16, 0x20	; 32
    3790:	03 c0       	rjmp	.+6      	; 0x3798 <vfscanf+0x1fa>
    3792:	00 61       	ori	r16, 0x10	; 16
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <vfscanf+0x1fa>
    3796:	00 64       	ori	r16, 0x40	; 64
    3798:	20 2f       	mov	r18, r16
    379a:	a4 01       	movw	r20, r8
    379c:	6f 2d       	mov	r22, r15
    379e:	c6 01       	movw	r24, r12
    37a0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <conv_int>
    37a4:	81 11       	cpse	r24, r1
    37a6:	05 c0       	rjmp	.+10     	; 0x37b2 <vfscanf+0x214>
    37a8:	f6 01       	movw	r30, r12
    37aa:	83 81       	ldd	r24, Z+3	; 0x03
    37ac:	80 73       	andi	r24, 0x30	; 48
    37ae:	29 f4       	brne	.+10     	; 0x37ba <vfscanf+0x21c>
    37b0:	06 c0       	rjmp	.+12     	; 0x37be <vfscanf+0x220>
    37b2:	00 fd       	sbrc	r16, 0
    37b4:	0a cf       	rjmp	.-492    	; 0x35ca <vfscanf+0x2c>
    37b6:	53 94       	inc	r5
    37b8:	08 cf       	rjmp	.-496    	; 0x35ca <vfscanf+0x2c>
    37ba:	55 20       	and	r5, r5
    37bc:	19 f0       	breq	.+6      	; 0x37c4 <vfscanf+0x226>
    37be:	85 2d       	mov	r24, r5
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <vfscanf+0x22a>
    37c4:	8f ef       	ldi	r24, 0xFF	; 255
    37c6:	9f ef       	ldi	r25, 0xFF	; 255
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	ff 90       	pop	r15
    37d2:	ef 90       	pop	r14
    37d4:	df 90       	pop	r13
    37d6:	cf 90       	pop	r12
    37d8:	bf 90       	pop	r11
    37da:	af 90       	pop	r10
    37dc:	9f 90       	pop	r9
    37de:	8f 90       	pop	r8
    37e0:	7f 90       	pop	r7
    37e2:	6f 90       	pop	r6
    37e4:	5f 90       	pop	r5
    37e6:	08 95       	ret

000037e8 <isspace>:
    37e8:	91 11       	cpse	r25, r1
    37ea:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__ctype_isfalse>
    37ee:	80 32       	cpi	r24, 0x20	; 32
    37f0:	19 f0       	breq	.+6      	; 0x37f8 <isspace+0x10>
    37f2:	89 50       	subi	r24, 0x09	; 9
    37f4:	85 50       	subi	r24, 0x05	; 5
    37f6:	c8 f7       	brcc	.-14     	; 0x37ea <isspace+0x2>
    37f8:	08 95       	ret

000037fa <strchr_P>:
    37fa:	fc 01       	movw	r30, r24
    37fc:	05 90       	lpm	r0, Z+
    37fe:	06 16       	cp	r0, r22
    3800:	21 f0       	breq	.+8      	; 0x380a <strchr_P+0x10>
    3802:	00 20       	and	r0, r0
    3804:	d9 f7       	brne	.-10     	; 0x37fc <strchr_P+0x2>
    3806:	c0 01       	movw	r24, r0
    3808:	08 95       	ret
    380a:	31 97       	sbiw	r30, 0x01	; 1
    380c:	cf 01       	movw	r24, r30
    380e:	08 95       	ret

00003810 <fgetc>:
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	ec 01       	movw	r28, r24
    3816:	2b 81       	ldd	r18, Y+3	; 0x03
    3818:	20 ff       	sbrs	r18, 0
    381a:	33 c0       	rjmp	.+102    	; 0x3882 <fgetc+0x72>
    381c:	26 ff       	sbrs	r18, 6
    381e:	0a c0       	rjmp	.+20     	; 0x3834 <fgetc+0x24>
    3820:	2f 7b       	andi	r18, 0xBF	; 191
    3822:	2b 83       	std	Y+3, r18	; 0x03
    3824:	8e 81       	ldd	r24, Y+6	; 0x06
    3826:	9f 81       	ldd	r25, Y+7	; 0x07
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	8e 83       	std	Y+6, r24	; 0x06
    382c:	9f 83       	std	Y+7, r25	; 0x07
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	29 c0       	rjmp	.+82     	; 0x3886 <fgetc+0x76>
    3834:	22 ff       	sbrs	r18, 2
    3836:	0f c0       	rjmp	.+30     	; 0x3856 <fgetc+0x46>
    3838:	e8 81       	ld	r30, Y
    383a:	f9 81       	ldd	r31, Y+1	; 0x01
    383c:	80 81       	ld	r24, Z
    383e:	08 2e       	mov	r0, r24
    3840:	00 0c       	add	r0, r0
    3842:	99 0b       	sbc	r25, r25
    3844:	00 97       	sbiw	r24, 0x00	; 0
    3846:	19 f4       	brne	.+6      	; 0x384e <fgetc+0x3e>
    3848:	20 62       	ori	r18, 0x20	; 32
    384a:	2b 83       	std	Y+3, r18	; 0x03
    384c:	1a c0       	rjmp	.+52     	; 0x3882 <fgetc+0x72>
    384e:	31 96       	adiw	r30, 0x01	; 1
    3850:	e8 83       	st	Y, r30
    3852:	f9 83       	std	Y+1, r31	; 0x01
    3854:	0e c0       	rjmp	.+28     	; 0x3872 <fgetc+0x62>
    3856:	ea 85       	ldd	r30, Y+10	; 0x0a
    3858:	fb 85       	ldd	r31, Y+11	; 0x0b
    385a:	19 95       	eicall
    385c:	97 ff       	sbrs	r25, 7
    385e:	09 c0       	rjmp	.+18     	; 0x3872 <fgetc+0x62>
    3860:	2b 81       	ldd	r18, Y+3	; 0x03
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	11 f0       	breq	.+4      	; 0x386a <fgetc+0x5a>
    3866:	80 e2       	ldi	r24, 0x20	; 32
    3868:	01 c0       	rjmp	.+2      	; 0x386c <fgetc+0x5c>
    386a:	80 e1       	ldi	r24, 0x10	; 16
    386c:	82 2b       	or	r24, r18
    386e:	8b 83       	std	Y+3, r24	; 0x03
    3870:	08 c0       	rjmp	.+16     	; 0x3882 <fgetc+0x72>
    3872:	2e 81       	ldd	r18, Y+6	; 0x06
    3874:	3f 81       	ldd	r19, Y+7	; 0x07
    3876:	2f 5f       	subi	r18, 0xFF	; 255
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	2e 83       	std	Y+6, r18	; 0x06
    387c:	3f 83       	std	Y+7, r19	; 0x07
    387e:	99 27       	eor	r25, r25
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <fgetc+0x76>
    3882:	8f ef       	ldi	r24, 0xFF	; 255
    3884:	9f ef       	ldi	r25, 0xFF	; 255
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	08 95       	ret

0000388c <ungetc>:
    388c:	fb 01       	movw	r30, r22
    388e:	23 81       	ldd	r18, Z+3	; 0x03
    3890:	20 ff       	sbrs	r18, 0
    3892:	12 c0       	rjmp	.+36     	; 0x38b8 <ungetc+0x2c>
    3894:	26 fd       	sbrc	r18, 6
    3896:	10 c0       	rjmp	.+32     	; 0x38b8 <ungetc+0x2c>
    3898:	8f 3f       	cpi	r24, 0xFF	; 255
    389a:	3f ef       	ldi	r19, 0xFF	; 255
    389c:	93 07       	cpc	r25, r19
    389e:	61 f0       	breq	.+24     	; 0x38b8 <ungetc+0x2c>
    38a0:	82 83       	std	Z+2, r24	; 0x02
    38a2:	2f 7d       	andi	r18, 0xDF	; 223
    38a4:	20 64       	ori	r18, 0x40	; 64
    38a6:	23 83       	std	Z+3, r18	; 0x03
    38a8:	26 81       	ldd	r18, Z+6	; 0x06
    38aa:	37 81       	ldd	r19, Z+7	; 0x07
    38ac:	21 50       	subi	r18, 0x01	; 1
    38ae:	31 09       	sbc	r19, r1
    38b0:	26 83       	std	Z+6, r18	; 0x06
    38b2:	37 83       	std	Z+7, r19	; 0x07
    38b4:	99 27       	eor	r25, r25
    38b6:	08 95       	ret
    38b8:	8f ef       	ldi	r24, 0xFF	; 255
    38ba:	9f ef       	ldi	r25, 0xFF	; 255
    38bc:	08 95       	ret

000038be <__ctype_isfalse>:
    38be:	99 27       	eor	r25, r25
    38c0:	88 27       	eor	r24, r24

000038c2 <__ctype_istrue>:
    38c2:	08 95       	ret

000038c4 <_exit>:
    38c4:	f8 94       	cli

000038c6 <__stop_program>:
    38c6:	ff cf       	rjmp	.-2      	; 0x38c6 <__stop_program>
