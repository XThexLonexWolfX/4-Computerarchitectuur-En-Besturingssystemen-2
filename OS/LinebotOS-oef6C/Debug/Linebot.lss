
Linebot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004095  00802104  00802104  00002c7c  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000afbe  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e70  00000000  00000000  0000e1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004312  00000000  00000000  00012066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff8  00000000  00000000  00016378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e94  00000000  00000000  00017370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000768b  00000000  00000000  0001b204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000798  00000000  00000000  0002288f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 01 	jmp	0x312	; 0x312 <__ctors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      34:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      38:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_14>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_16>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      78:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      7c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      80:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_46>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      fc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     100:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     104:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     108:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     10c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     110:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     114:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     118:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     11c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     120:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     124:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     128:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     12c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     130:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     134:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     138:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     13c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     140:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     144:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     148:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     14c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     150:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     154:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     158:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     15c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     160:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     164:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     168:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     16c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     170:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     174:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     178:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     17c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     180:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     184:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     188:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     18c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     190:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     194:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     198:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     19c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 82 02 	jmp	0x504	; 0x504 <stdio_putchar>
     200:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <WorkerReceiveTask>
     204:	0c 94 bd 08 	jmp	0x117a	; 0x117a <prvIdleTask>
     208:	0c 94 8e 02 	jmp	0x51c	; 0x51c <stdio_getchar>
     20c:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <WorkerSendTask>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df e9       	ldi	r29, 0x9F	; 159
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60

00000322 <__do_copy_data>:
     322:	11 e2       	ldi	r17, 0x21	; 33
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b0 e2       	ldi	r27, 0x20	; 32
     328:	e4 ee       	ldi	r30, 0xE4	; 228
     32a:	fa e2       	ldi	r31, 0x2A	; 42
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	a4 30       	cpi	r26, 0x04	; 4
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	21 e6       	ldi	r18, 0x61	; 97
     33e:	a4 e0       	ldi	r26, 0x04	; 4
     340:	b1 e2       	ldi	r27, 0x21	; 33
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a9 39       	cpi	r26, 0x99	; 153
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <main>
     350:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     358:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     35a:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     35e:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     362:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     366:	90 81       	ld	r25, Z
     368:	99 23       	and	r25, r25
     36a:	69 f0       	breq	.+26     	; 0x386 <DbgPrint+0x2e>
     36c:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     36e:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     370:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     374:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     378:	96 ff       	sbrs	r25, 6
     37a:	fc cf       	rjmp	.-8      	; 0x374 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     37c:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     380:	91 91       	ld	r25, Z+
     382:	91 11       	cpse	r25, r1
     384:	f5 cf       	rjmp	.-22     	; 0x370 <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     386:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     38a:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     38e:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     392:	08 95       	ret

00000394 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     394:	8b ec       	ldi	r24, 0xCB	; 203
     396:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     3a0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3a4:	83 ff       	sbrs	r24, 3
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3a8:	82 ec       	ldi	r24, 0xC2	; 194
     3aa:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3ae:	88 e1       	ldi	r24, 0x18	; 24
     3b0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3b4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3b8:	84 ff       	sbrs	r24, 4
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3bc:	88 ed       	ldi	r24, 0xD8	; 216
     3be:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	08 95       	ret

000003ca <TWIMWriteHandler>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     3ca:	90 91 08 21 	lds	r25, 0x2108	; 0x802108 <Twim_bytesToWrite>
     3ce:	20 91 07 21 	lds	r18, 0x2107	; 0x802107 <Twim_bytesToRead>
     3d2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     3d6:	84 fd       	sbrc	r24, 4
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <TWIMWriteHandler+0x20>
     3da:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <Twim_bytesWritten>
     3de:	89 17       	cp	r24, r25
     3e0:	50 f0       	brcs	.+20     	; 0x3f6 <TWIMWriteHandler+0x2c>
     3e2:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     3e6:	82 17       	cp	r24, r18
     3e8:	b8 f0       	brcs	.+46     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     3f0:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     3f4:	08 95       	ret
     3f6:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <Twim_bytesWritten>
     3fa:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <Twim_writeData>
     3fe:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <Twim_writeData+0x1>
     402:	e8 0f       	add	r30, r24
     404:	f1 1d       	adc	r31, r1
     406:	80 81       	ld	r24, Z
     408:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     40c:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <Twim_bytesWritten>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <Twim_bytesWritten>
     416:	08 95       	ret
     418:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <Twim_address>
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     422:	08 95       	ret

00000424 <TWIMReadHandler>:
     424:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     428:	80 32       	cpi	r24, 0x20	; 32
     42a:	e0 f4       	brcc	.+56     	; 0x464 <TWIMReadHandler+0x40>
     42c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     430:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <Twim_bytesRead>
     434:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <Twim_readData>
     438:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <Twim_readData+0x1>
     43c:	e9 0f       	add	r30, r25
     43e:	f1 1d       	adc	r31, r1
     440:	80 83       	st	Z, r24
     442:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <Twim_bytesRead>
     44c:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <Twim_bytesToRead>
     450:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     454:	89 17       	cp	r24, r25
     456:	88 f0       	brcs	.+34     	; 0x47a <TWIMReadHandler+0x56>
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     45e:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     462:	08 95       	ret
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     46a:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     46e:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <Twim_bytesToRead>
     472:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <Twim_bytesRead>
     476:	89 17       	cp	r24, r25
     478:	78 f7       	brcc	.-34     	; 0x458 <TWIMReadHandler+0x34>
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     480:	08 95       	ret

00000482 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	0b b6       	in	r0, 0x3b	; 59
     48e:	0f 92       	push	r0
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4a8:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     4ac:	98 2f       	mov	r25, r24
     4ae:	9c 70       	andi	r25, 0x0C	; 12
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     4b2:	86 fd       	sbrc	r24, 6
     4b4:	21 c0       	rjmp	.+66     	; 0x4f8 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     4b6:	87 fd       	sbrc	r24, 7
     4b8:	22 c0       	rjmp	.+68     	; 0x4fe <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     4ba:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     4c0:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     4ca:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     4ce:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <__data_end>
	{	
	}
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	0b be       	out	0x3b, r0	; 59
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     4f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TWIMWriteHandler>
     4fc:	e8 cf       	rjmp	.-48     	; 0x4ce <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     4fe:	0e 94 12 02 	call	0x424	; 0x424 <TWIMReadHandler>
     502:	e5 cf       	rjmp	.-54     	; 0x4ce <__vector_46+0x4c>

00000504 <stdio_putchar>:
}


static int stdio_putchar(char c, FILE * stream)
{
	USART.DATA = c;
     504:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	while (!(USART.STATUS & 0b01000000));
     508:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     50c:	86 ff       	sbrs	r24, 6
     50e:	fc cf       	rjmp	.-8      	; 0x508 <stdio_putchar+0x4>
	USART.STATUS=0b01000000;
     510:	80 e4       	ldi	r24, 0x40	; 64
     512:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	return 0;
}
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	08 95       	ret

0000051c <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
	while (!(USART.STATUS & 0b10000000));
     51c:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     520:	87 ff       	sbrs	r24, 7
     522:	fc cf       	rjmp	.-8      	; 0x51c <stdio_getchar>
	return USART.DATA;
     524:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	08 95       	ret

0000052c <DriverUSARTInit>:
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     52c:	e0 e8       	ldi	r30, 0x80	; 128
     52e:	f6 e0       	ldi	r31, 0x06	; 6
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00000000;
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000;
     53e:	88 e1       	ldi	r24, 0x18	; 24
     540:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     546:	85 ee       	ldi	r24, 0xE5	; 229
     548:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     54a:	8c eb       	ldi	r24, 0xBC	; 188
     54c:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     54e:	e3 e9       	ldi	r30, 0x93	; 147
     550:	f1 e6       	ldi	r31, 0x61	; 97
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e2       	ldi	r25, 0x20	; 32
     556:	82 83       	std	Z+2, r24	; 0x02
     558:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	08 95       	ret

00000560 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     56a:	0e 94 87 0b 	call	0x170e	; 0x170e <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     56e:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <xHeapHasBeenInitialised.4119>
     572:	81 11       	cpse	r24, r1
     574:	21 c0       	rjmp	.+66     	; 0x5b8 <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     576:	88 e1       	ldi	r24, 0x18	; 24
     578:	91 e2       	ldi	r25, 0x21	; 33
     57a:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <xStart>
     57e:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     582:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <xStart+0x2>
     586:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9f e3       	ldi	r25, 0x3F	; 63
     58e:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <xEnd+0x2>
     592:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     596:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <xEnd>
     59a:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     59e:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <ucHeap+0x3>
     5a2:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     5a6:	8f e0       	ldi	r24, 0x0F	; 15
     5a8:	91 e2       	ldi	r25, 0x21	; 33
     5aa:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <ucHeap+0x1>
     5ae:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <xHeapHasBeenInitialised.4119>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     5b8:	20 97       	sbiw	r28, 0x00	; 0
     5ba:	09 f4       	brne	.+2      	; 0x5be <pvPortMalloc+0x5e>
     5bc:	64 c0       	rjmp	.+200    	; 0x686 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     5be:	ae 01       	movw	r20, r28
     5c0:	4c 5f       	subi	r20, 0xFC	; 252
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     5c4:	23 96       	adiw	r28, 0x03	; 3
     5c6:	ce 3f       	cpi	r28, 0xFE	; 254
     5c8:	df 43       	sbci	r29, 0x3F	; 63
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <pvPortMalloc+0x6e>
     5cc:	5c c0       	rjmp	.+184    	; 0x686 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     5ce:	e0 91 13 21 	lds	r30, 0x2113	; 0x802113 <xStart>
     5d2:	f0 91 14 21 	lds	r31, 0x2114	; 0x802114 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     5d6:	a3 e1       	ldi	r26, 0x13	; 19
     5d8:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <pvPortMalloc+0x88>
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <pvPortMalloc+0x92>
     5e4:	df 01       	movw	r26, r30
     5e6:	fc 01       	movw	r30, r24
     5e8:	22 81       	ldd	r18, Z+2	; 0x02
     5ea:	33 81       	ldd	r19, Z+3	; 0x03
     5ec:	24 17       	cp	r18, r20
     5ee:	35 07       	cpc	r19, r21
     5f0:	a8 f3       	brcs	.-22     	; 0x5dc <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5f2:	c1 e2       	ldi	r28, 0x21	; 33
     5f4:	ef 30       	cpi	r30, 0x0F	; 15
     5f6:	fc 07       	cpc	r31, r28
     5f8:	09 f4       	brne	.+2      	; 0x5fc <pvPortMalloc+0x9c>
     5fa:	45 c0       	rjmp	.+138    	; 0x686 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5fc:	cd 91       	ld	r28, X+
     5fe:	dc 91       	ld	r29, X
     600:	11 97       	sbiw	r26, 0x01	; 1
     602:	8e 01       	movw	r16, r28
     604:	0c 5f       	subi	r16, 0xFC	; 252
     606:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	8d 93       	st	X+, r24
     60e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     610:	c9 01       	movw	r24, r18
     612:	84 1b       	sub	r24, r20
     614:	95 0b       	sbc	r25, r21
     616:	89 30       	cpi	r24, 0x09	; 9
     618:	91 05       	cpc	r25, r1
     61a:	00 f1       	brcs	.+64     	; 0x65c <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     61c:	bf 01       	movw	r22, r30
     61e:	64 0f       	add	r22, r20
     620:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     622:	db 01       	movw	r26, r22
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	8d 93       	st	X+, r24
     628:	9c 93       	st	X, r25
     62a:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     62c:	42 83       	std	Z+2, r20	; 0x02
     62e:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     630:	12 96       	adiw	r26, 0x02	; 2
     632:	2d 91       	ld	r18, X+
     634:	3c 91       	ld	r19, X
     636:	13 97       	sbiw	r26, 0x03	; 3
     638:	a3 e1       	ldi	r26, 0x13	; 19
     63a:	b1 e2       	ldi	r27, 0x21	; 33
     63c:	01 c0       	rjmp	.+2      	; 0x640 <pvPortMalloc+0xe0>
     63e:	df 01       	movw	r26, r30
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	82 81       	ldd	r24, Z+2	; 0x02
     648:	93 81       	ldd	r25, Z+3	; 0x03
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	b8 f3       	brcs	.-18     	; 0x63e <pvPortMalloc+0xde>
     650:	eb 01       	movw	r28, r22
     652:	e8 83       	st	Y, r30
     654:	f9 83       	std	Y+1, r31	; 0x01
     656:	6d 93       	st	X+, r22
     658:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     65a:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     65c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     660:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     664:	82 1b       	sub	r24, r18
     666:	93 0b       	sbc	r25, r19
     668:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     66c:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     670:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     674:	01 15       	cp	r16, r1
     676:	11 05       	cpc	r17, r1
     678:	41 f0       	breq	.+16     	; 0x68a <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     67a:	c8 01       	movw	r24, r16
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     686:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     68a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <vApplicationMallocFailedHook>
     68e:	00 e0       	ldi	r16, 0x00	; 0
     690:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     692:	c8 01       	movw	r24, r16
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	21 f1       	breq	.+72     	; 0x6ee <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     6a6:	ec 01       	movw	r28, r24
     6a8:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     6aa:	0e 94 87 0b 	call	0x170e	; 0x170e <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6ae:	4a 81       	ldd	r20, Y+2	; 0x02
     6b0:	5b 81       	ldd	r21, Y+3	; 0x03
     6b2:	a3 e1       	ldi	r26, 0x13	; 19
     6b4:	b1 e2       	ldi	r27, 0x21	; 33
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <vPortFree+0x1c>
     6b8:	df 01       	movw	r26, r30
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	11 97       	sbiw	r26, 0x01	; 1
     6c0:	22 81       	ldd	r18, Z+2	; 0x02
     6c2:	33 81       	ldd	r19, Z+3	; 0x03
     6c4:	24 17       	cp	r18, r20
     6c6:	35 07       	cpc	r19, r21
     6c8:	b8 f3       	brcs	.-18     	; 0x6b8 <vPortFree+0x1a>
     6ca:	e8 83       	st	Y, r30
     6cc:	f9 83       	std	Y+1, r31	; 0x01
     6ce:	cd 93       	st	X+, r28
     6d0:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     6d2:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     6d6:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     6da:	48 0f       	add	r20, r24
     6dc:	59 1f       	adc	r21, r25
     6de:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     6e2:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6ea:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <xTaskResumeAll>
	}
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6f4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f6:	03 96       	adiw	r24, 0x03	; 3
     6f8:	81 83       	std	Z+1, r24	; 0x01
     6fa:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	3f ef       	ldi	r19, 0xFF	; 255
     700:	23 83       	std	Z+3, r18	; 0x03
     702:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     704:	85 83       	std	Z+5, r24	; 0x05
     706:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     708:	87 83       	std	Z+7, r24	; 0x07
     70a:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     70c:	10 82       	st	Z, r1
     70e:	08 95       	ret

00000710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     710:	fc 01       	movw	r30, r24
     712:	10 86       	std	Z+8, r1	; 0x08
     714:	11 86       	std	Z+9, r1	; 0x09
     716:	08 95       	ret

00000718 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	9c 01       	movw	r18, r24
     71e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     720:	dc 01       	movw	r26, r24
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	cd 91       	ld	r28, X+
     726:	dc 91       	ld	r29, X
     728:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     72a:	c2 83       	std	Z+2, r28	; 0x02
     72c:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     72e:	8c 81       	ldd	r24, Y+4	; 0x04
     730:	9d 81       	ldd	r25, Y+5	; 0x05
     732:	84 83       	std	Z+4, r24	; 0x04
     734:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     736:	8c 81       	ldd	r24, Y+4	; 0x04
     738:	9d 81       	ldd	r25, Y+5	; 0x05
     73a:	dc 01       	movw	r26, r24
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	6d 93       	st	X+, r22
     740:	7c 93       	st	X, r23
     742:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     744:	6c 83       	std	Y+4, r22	; 0x04
     746:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     748:	20 87       	std	Z+8, r18	; 0x08
     74a:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     74c:	f9 01       	movw	r30, r18
     74e:	80 81       	ld	r24, Z
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	80 83       	st	Z, r24
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     760:	48 81       	ld	r20, Y
     762:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     764:	4f 3f       	cpi	r20, 0xFF	; 255
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	52 07       	cpc	r21, r18
     76a:	01 f1       	breq	.+64     	; 0x7ac <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     76c:	dc 01       	movw	r26, r24
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	01 c0       	rjmp	.+2      	; 0x774 <vListInsert+0x1a>
     772:	df 01       	movw	r26, r30
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	13 97       	sbiw	r26, 0x03	; 3
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	42 17       	cp	r20, r18
     782:	53 07       	cpc	r21, r19
     784:	b0 f7       	brcc	.-20     	; 0x772 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     786:	ea 83       	std	Y+2, r30	; 0x02
     788:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     78a:	c4 83       	std	Z+4, r28	; 0x04
     78c:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     78e:	ac 83       	std	Y+4, r26	; 0x04
     790:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	cd 93       	st	X+, r28
     796:	dc 93       	st	X, r29
     798:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     79a:	88 87       	std	Y+8, r24	; 0x08
     79c:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     79e:	fc 01       	movw	r30, r24
     7a0:	20 81       	ld	r18, Z
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	20 83       	st	Z, r18
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     7ac:	fc 01       	movw	r30, r24
     7ae:	a7 81       	ldd	r26, Z+7	; 0x07
     7b0:	b0 85       	ldd	r27, Z+8	; 0x08
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	e5 cf       	rjmp	.-54     	; 0x786 <vListInsert+0x2c>

000007bc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     7c2:	a0 85       	ldd	r26, Z+8	; 0x08
     7c4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7c6:	22 81       	ldd	r18, Z+2	; 0x02
     7c8:	33 81       	ldd	r19, Z+3	; 0x03
     7ca:	84 81       	ldd	r24, Z+4	; 0x04
     7cc:	95 81       	ldd	r25, Z+5	; 0x05
     7ce:	e9 01       	movw	r28, r18
     7d0:	8c 83       	std	Y+4, r24	; 0x04
     7d2:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	95 81       	ldd	r25, Z+5	; 0x05
     7d8:	ec 01       	movw	r28, r24
     7da:	2a 83       	std	Y+2, r18	; 0x02
     7dc:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	2d 91       	ld	r18, X+
     7e2:	3c 91       	ld	r19, X
     7e4:	12 97       	sbiw	r26, 0x02	; 2
     7e6:	e2 17       	cp	r30, r18
     7e8:	f3 07       	cpc	r31, r19
     7ea:	49 f0       	breq	.+18     	; 0x7fe <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     7ec:	10 86       	std	Z+8, r1	; 0x08
     7ee:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     7f0:	8c 91       	ld	r24, X
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     7f6:	8c 91       	ld	r24, X
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7fe:	11 96       	adiw	r26, 0x01	; 1
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	12 97       	sbiw	r26, 0x02	; 2
     806:	f2 cf       	rjmp	.-28     	; 0x7ec <uxListRemove+0x30>

00000808 <pxPortInitialiseStack>:
//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
	asm volatile ( "ret" );
     808:	31 e1       	ldi	r19, 0x11	; 17
     80a:	fc 01       	movw	r30, r24
     80c:	30 83       	st	Z, r19
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	22 e2       	ldi	r18, 0x22	; 34
     812:	20 83       	st	Z, r18
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	a3 e3       	ldi	r26, 0x33	; 51
     818:	a0 83       	st	Z, r26
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	60 83       	st	Z, r22
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	70 83       	st	Z, r23
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	10 82       	st	Z, r1
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	10 82       	st	Z, r1
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	60 e8       	ldi	r22, 0x80	; 128
     82e:	60 83       	st	Z, r22
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	10 82       	st	Z, r1
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	60 83       	st	Z, r22
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	63 e0       	ldi	r22, 0x03	; 3
     83e:	60 83       	st	Z, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	64 e0       	ldi	r22, 0x04	; 4
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	65 e0       	ldi	r22, 0x05	; 5
     84a:	60 83       	st	Z, r22
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	60 83       	st	Z, r22
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	67 e0       	ldi	r22, 0x07	; 7
     856:	60 83       	st	Z, r22
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	68 e0       	ldi	r22, 0x08	; 8
     85c:	60 83       	st	Z, r22
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	69 e0       	ldi	r22, 0x09	; 9
     862:	60 83       	st	Z, r22
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	60 e1       	ldi	r22, 0x10	; 16
     868:	60 83       	st	Z, r22
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	30 83       	st	Z, r19
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	32 e1       	ldi	r19, 0x12	; 18
     872:	30 83       	st	Z, r19
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	33 e1       	ldi	r19, 0x13	; 19
     878:	30 83       	st	Z, r19
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	34 e1       	ldi	r19, 0x14	; 20
     87e:	30 83       	st	Z, r19
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	35 e1       	ldi	r19, 0x15	; 21
     884:	30 83       	st	Z, r19
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	36 e1       	ldi	r19, 0x16	; 22
     88a:	30 83       	st	Z, r19
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	37 e1       	ldi	r19, 0x17	; 23
     890:	30 83       	st	Z, r19
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	38 e1       	ldi	r19, 0x18	; 24
     896:	30 83       	st	Z, r19
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	39 e1       	ldi	r19, 0x19	; 25
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	30 e2       	ldi	r19, 0x20	; 32
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	31 e2       	ldi	r19, 0x21	; 33
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	20 83       	st	Z, r18
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	23 e2       	ldi	r18, 0x23	; 35
     8b2:	20 83       	st	Z, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	40 83       	st	Z, r20
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	50 83       	st	Z, r21
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	26 e2       	ldi	r18, 0x26	; 38
     8c0:	20 83       	st	Z, r18
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	27 e2       	ldi	r18, 0x27	; 39
     8c6:	20 83       	st	Z, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	28 e2       	ldi	r18, 0x28	; 40
     8cc:	20 83       	st	Z, r18
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	29 e2       	ldi	r18, 0x29	; 41
     8d2:	20 83       	st	Z, r18
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	20 e3       	ldi	r18, 0x30	; 48
     8d8:	20 83       	st	Z, r18
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	21 e3       	ldi	r18, 0x31	; 49
     8de:	20 83       	st	Z, r18
     8e0:	87 97       	sbiw	r24, 0x27	; 39
     8e2:	08 95       	ret

000008e4 <xPortStartScheduler>:
     8e4:	e0 e0       	ldi	r30, 0x00	; 0
     8e6:	f8 e0       	ldi	r31, 0x08	; 8
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	80 a7       	std	Z+40, r24	; 0x28
     8ee:	91 a7       	std	Z+41, r25	; 0x29
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 83       	st	Z, r24
     8f4:	90 e4       	ldi	r25, 0x40	; 64
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	86 83       	std	Z+6, r24	; 0x06
     8fa:	87 83       	std	Z+7, r24	; 0x07
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	9d e7       	ldi	r25, 0x7D	; 125
     900:	86 a3       	std	Z+38, r24	; 0x26
     902:	97 a3       	std	Z+39, r25	; 0x27
     904:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     908:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     90c:	cd 91       	ld	r28, X+
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	dd 91       	ld	r29, X+
     912:	de bf       	out	0x3e, r29	; 62
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	3f 90       	pop	r3
     94e:	2f 90       	pop	r2
     950:	1f 90       	pop	r1
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	08 95       	ret
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	08 95       	ret

0000095e <vPortYield>:
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	0f 92       	push	r0
     966:	1f 92       	push	r1
     968:	11 24       	eor	r1, r1
     96a:	2f 92       	push	r2
     96c:	3f 92       	push	r3
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
     9a6:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     9aa:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     9ae:	0d b6       	in	r0, 0x3d	; 61
     9b0:	0d 92       	st	X+, r0
     9b2:	0e b6       	in	r0, 0x3e	; 62
     9b4:	0d 92       	st	X+, r0
     9b6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskSwitchContext>
     9ba:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     9be:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     9c2:	cd 91       	ld	r28, X+
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	dd 91       	ld	r29, X+
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	1f 90       	pop	r1
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	08 95       	ret

00000a10 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	0f 92       	push	r0
     a18:	1f 92       	push	r1
     a1a:	11 24       	eor	r1, r1
     a1c:	2f 92       	push	r2
     a1e:	3f 92       	push	r3
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
     a58:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     a5c:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     a60:	0d b6       	in	r0, 0x3d	; 61
     a62:	0d 92       	st	X+, r0
     a64:	0e b6       	in	r0, 0x3e	; 62
     a66:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     a68:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a6c:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a70:	80 91 89 61 	lds	r24, 0x6189	; 0x806189 <StatsTimer>
     a74:	90 91 8a 61 	lds	r25, 0x618A	; 0x80618a <StatsTimer+0x1>
     a78:	a0 91 8b 61 	lds	r26, 0x618B	; 0x80618b <StatsTimer+0x2>
     a7c:	b0 91 8c 61 	lds	r27, 0x618C	; 0x80618c <StatsTimer+0x3>
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 89 61 	sts	0x6189, r24	; 0x806189 <StatsTimer>
     a8c:	90 93 8a 61 	sts	0x618A, r25	; 0x80618a <StatsTimer+0x1>
     a90:	a0 93 8b 61 	sts	0x618B, r26	; 0x80618b <StatsTimer+0x2>
     a94:	b0 93 8c 61 	sts	0x618C, r27	; 0x80618c <StatsTimer+0x3>
		xTaskIncrementTick();
     a98:	0e 94 8d 0b 	call	0x171a	; 0x171a <xTaskIncrementTick>
		vTaskSwitchContext();
     a9c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     aa0:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     aa4:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     aa8:	cd 91       	ld	r28, X+
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	dd 91       	ld	r29, X+
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
     ae0:	7f 90       	pop	r7
     ae2:	6f 90       	pop	r6
     ae4:	5f 90       	pop	r5
     ae6:	4f 90       	pop	r4
     ae8:	3f 90       	pop	r3
     aea:	2f 90       	pop	r2
     aec:	1f 90       	pop	r1
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0

		asm volatile ( "reti" );
     af4:	18 95       	reti

00000af6 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     af6:	08 95       	ret

00000af8 <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	0f 92       	push	r0
     b00:	1f 92       	push	r1
     b02:	11 24       	eor	r1, r1
     b04:	2f 92       	push	r2
     b06:	3f 92       	push	r3
     b08:	4f 92       	push	r4
     b0a:	5f 92       	push	r5
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     b44:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     b48:	0d b6       	in	r0, 0x3d	; 61
     b4a:	0d 92       	st	X+, r0
     b4c:	0e b6       	in	r0, 0x3e	; 62
     b4e:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	9f ef       	ldi	r25, 0xFF	; 255
     b54:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     b58:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
     b5c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b60:	a0 91 7f 61 	lds	r26, 0x617F	; 0x80617f <pxCurrentTCB>
     b64:	b0 91 80 61 	lds	r27, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
     b68:	cd 91       	ld	r28, X+
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	dd 91       	ld	r29, X+
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	9f 90       	pop	r9
     b9e:	8f 90       	pop	r8
     ba0:	7f 90       	pop	r7
     ba2:	6f 90       	pop	r6
     ba4:	5f 90       	pop	r5
     ba6:	4f 90       	pop	r4
     ba8:	3f 90       	pop	r3
     baa:	2f 90       	pop	r2
     bac:	1f 90       	pop	r1
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
	asm volatile ( "reti" );
     bb4:	18 95       	reti

00000bb6 <prvCopyDataToQueue>:
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	04 2f       	mov	r16, r20
     bc2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     bc4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     bc6:	41 11       	cpse	r20, r1
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <prvCopyDataToQueue+0x2e>
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <prvCopyDataToQueue+0x1e>
     bd2:	43 c0       	rjmp	.+134    	; 0xc5a <prvCopyDataToQueue+0xa4>
     bd4:	1f 5f       	subi	r17, 0xFF	; 255
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	1a 8f       	std	Y+26, r17	; 0x1a
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	01 11       	cpse	r16, r1
     be8:	15 c0       	rjmp	.+42     	; 0xc14 <prvCopyDataToQueue+0x5e>
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	9b 81       	ldd	r25, Y+3	; 0x03
     bee:	0e 94 70 14 	call	0x28e0	; 0x28e0 <memcpy>
     bf2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	82 0f       	add	r24, r18
     bfa:	91 1d       	adc	r25, r1
     bfc:	8a 83       	std	Y+2, r24	; 0x02
     bfe:	9b 83       	std	Y+3, r25	; 0x03
     c00:	2c 81       	ldd	r18, Y+4	; 0x04
     c02:	3d 81       	ldd	r19, Y+5	; 0x05
     c04:	82 17       	cp	r24, r18
     c06:	93 07       	cpc	r25, r19
     c08:	28 f3       	brcs	.-54     	; 0xbd4 <prvCopyDataToQueue+0x1e>
     c0a:	88 81       	ld	r24, Y
     c0c:	99 81       	ldd	r25, Y+1	; 0x01
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	9b 83       	std	Y+3, r25	; 0x03
     c12:	e0 cf       	rjmp	.-64     	; 0xbd4 <prvCopyDataToQueue+0x1e>
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	9f 81       	ldd	r25, Y+7	; 0x07
     c18:	0e 94 70 14 	call	0x28e0	; 0x28e0 <memcpy>
     c1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	91 95       	neg	r25
     c22:	81 95       	neg	r24
     c24:	91 09       	sbc	r25, r1
     c26:	2e 81       	ldd	r18, Y+6	; 0x06
     c28:	3f 81       	ldd	r19, Y+7	; 0x07
     c2a:	28 0f       	add	r18, r24
     c2c:	39 1f       	adc	r19, r25
     c2e:	2e 83       	std	Y+6, r18	; 0x06
     c30:	3f 83       	std	Y+7, r19	; 0x07
     c32:	48 81       	ld	r20, Y
     c34:	59 81       	ldd	r21, Y+1	; 0x01
     c36:	24 17       	cp	r18, r20
     c38:	35 07       	cpc	r19, r21
     c3a:	30 f4       	brcc	.+12     	; 0xc48 <prvCopyDataToQueue+0x92>
     c3c:	2c 81       	ldd	r18, Y+4	; 0x04
     c3e:	3d 81       	ldd	r19, Y+5	; 0x05
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	8e 83       	std	Y+6, r24	; 0x06
     c46:	9f 83       	std	Y+7, r25	; 0x07
     c48:	02 30       	cpi	r16, 0x02	; 2
     c4a:	21 f6       	brne	.-120    	; 0xbd4 <prvCopyDataToQueue+0x1e>
     c4c:	11 23       	and	r17, r17
     c4e:	11 f0       	breq	.+4      	; 0xc54 <prvCopyDataToQueue+0x9e>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	c2 cf       	rjmp	.-124    	; 0xbd8 <prvCopyDataToQueue+0x22>
     c54:	11 e0       	ldi	r17, 0x01	; 1
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	bf cf       	rjmp	.-130    	; 0xbd8 <prvCopyDataToQueue+0x22>
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	9d 81       	ldd	r25, Y+5	; 0x05
     c5e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskPriorityDisinherit>
     c62:	1c 82       	std	Y+4, r1	; 0x04
     c64:	1d 82       	std	Y+5, r1	; 0x05
     c66:	1f 5f       	subi	r17, 0xFF	; 255
     c68:	b7 cf       	rjmp	.-146    	; 0xbd8 <prvCopyDataToQueue+0x22>

00000c6a <prvCopyDataFromQueue>:
     c6a:	fc 01       	movw	r30, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	44 8d       	ldd	r20, Z+28	; 0x1c
     c70:	44 23       	and	r20, r20
     c72:	91 f0       	breq	.+36     	; 0xc98 <prvCopyDataFromQueue+0x2e>
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	66 81       	ldd	r22, Z+6	; 0x06
     c78:	77 81       	ldd	r23, Z+7	; 0x07
     c7a:	64 0f       	add	r22, r20
     c7c:	75 1f       	adc	r23, r21
     c7e:	66 83       	std	Z+6, r22	; 0x06
     c80:	77 83       	std	Z+7, r23	; 0x07
     c82:	24 81       	ldd	r18, Z+4	; 0x04
     c84:	35 81       	ldd	r19, Z+5	; 0x05
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	20 f0       	brcs	.+8      	; 0xc94 <prvCopyDataFromQueue+0x2a>
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	66 83       	std	Z+6, r22	; 0x06
     c92:	77 83       	std	Z+7, r23	; 0x07
     c94:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <memcpy>
     c98:	08 95       	ret

00000c9a <prvUnlockQueue>:
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	8c 01       	movw	r16, r24
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	0f 92       	push	r0
     cac:	fc 01       	movw	r30, r24
     cae:	c6 8d       	ldd	r28, Z+30	; 0x1e
     cb0:	1c 16       	cp	r1, r28
     cb2:	c4 f4       	brge	.+48     	; 0xce4 <prvUnlockQueue+0x4a>
     cb4:	fc 01       	movw	r30, r24
     cb6:	81 89       	ldd	r24, Z+17	; 0x11
     cb8:	88 23       	and	r24, r24
     cba:	a1 f0       	breq	.+40     	; 0xce4 <prvUnlockQueue+0x4a>
     cbc:	78 01       	movw	r14, r16
     cbe:	f1 e1       	ldi	r31, 0x11	; 17
     cc0:	ef 0e       	add	r14, r31
     cc2:	f1 1c       	adc	r15, r1
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <prvUnlockQueue+0x38>
     cc6:	c1 50       	subi	r28, 0x01	; 1
     cc8:	69 f0       	breq	.+26     	; 0xce4 <prvUnlockQueue+0x4a>
     cca:	f8 01       	movw	r30, r16
     ccc:	81 89       	ldd	r24, Z+17	; 0x11
     cce:	88 23       	and	r24, r24
     cd0:	49 f0       	breq	.+18     	; 0xce4 <prvUnlockQueue+0x4a>
     cd2:	c7 01       	movw	r24, r14
     cd4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <xTaskRemoveFromEventList>
     cd8:	88 23       	and	r24, r24
     cda:	a9 f3       	breq	.-22     	; 0xcc6 <prvUnlockQueue+0x2c>
     cdc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <vTaskMissedYield>
     ce0:	c1 50       	subi	r28, 0x01	; 1
     ce2:	99 f7       	brne	.-26     	; 0xcca <prvUnlockQueue+0x30>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	f8 01       	movw	r30, r16
     ce8:	86 8f       	std	Z+30, r24	; 0x1e
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	0f 92       	push	r0
     cf4:	c5 8d       	ldd	r28, Z+29	; 0x1d
     cf6:	1c 16       	cp	r1, r28
     cf8:	c4 f4       	brge	.+48     	; 0xd2a <prvUnlockQueue+0x90>
     cfa:	f8 01       	movw	r30, r16
     cfc:	80 85       	ldd	r24, Z+8	; 0x08
     cfe:	88 23       	and	r24, r24
     d00:	a1 f0       	breq	.+40     	; 0xd2a <prvUnlockQueue+0x90>
     d02:	78 01       	movw	r14, r16
     d04:	f8 e0       	ldi	r31, 0x08	; 8
     d06:	ef 0e       	add	r14, r31
     d08:	f1 1c       	adc	r15, r1
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <prvUnlockQueue+0x7e>
     d0c:	c1 50       	subi	r28, 0x01	; 1
     d0e:	69 f0       	breq	.+26     	; 0xd2a <prvUnlockQueue+0x90>
     d10:	f8 01       	movw	r30, r16
     d12:	80 85       	ldd	r24, Z+8	; 0x08
     d14:	88 23       	and	r24, r24
     d16:	49 f0       	breq	.+18     	; 0xd2a <prvUnlockQueue+0x90>
     d18:	c7 01       	movw	r24, r14
     d1a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <xTaskRemoveFromEventList>
     d1e:	88 23       	and	r24, r24
     d20:	a9 f3       	breq	.-22     	; 0xd0c <prvUnlockQueue+0x72>
     d22:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <vTaskMissedYield>
     d26:	c1 50       	subi	r28, 0x01	; 1
     d28:	99 f7       	brne	.-26     	; 0xd10 <prvUnlockQueue+0x76>
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	f8 01       	movw	r30, r16
     d2e:	85 8f       	std	Z+29, r24	; 0x1d
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <xQueueGenericReset>:
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
     d48:	16 2f       	mov	r17, r22
     d4a:	89 2b       	or	r24, r25
     d4c:	09 f4       	brne	.+2      	; 0xd50 <xQueueGenericReset+0x10>
     d4e:	3e c0       	rjmp	.+124    	; 0xdcc <xQueueGenericReset+0x8c>
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	0f 92       	push	r0
     d56:	48 81       	ld	r20, Y
     d58:	59 81       	ldd	r21, Y+1	; 0x01
     d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d5c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     d5e:	9a 01       	movw	r18, r20
     d60:	86 9f       	mul	r24, r22
     d62:	20 0d       	add	r18, r0
     d64:	31 1d       	adc	r19, r1
     d66:	11 24       	eor	r1, r1
     d68:	2c 83       	std	Y+4, r18	; 0x04
     d6a:	3d 83       	std	Y+5, r19	; 0x05
     d6c:	1a 8e       	std	Y+26, r1	; 0x1a
     d6e:	4a 83       	std	Y+2, r20	; 0x02
     d70:	5b 83       	std	Y+3, r21	; 0x03
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	68 9f       	mul	r22, r24
     d78:	90 01       	movw	r18, r0
     d7a:	69 9f       	mul	r22, r25
     d7c:	30 0d       	add	r19, r0
     d7e:	11 24       	eor	r1, r1
     d80:	ca 01       	movw	r24, r20
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	8e 83       	std	Y+6, r24	; 0x06
     d88:	9f 83       	std	Y+7, r25	; 0x07
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	8d 8f       	std	Y+29, r24	; 0x1d
     d8e:	8e 8f       	std	Y+30, r24	; 0x1e
     d90:	11 11       	cpse	r17, r1
     d92:	13 c0       	rjmp	.+38     	; 0xdba <xQueueGenericReset+0x7a>
     d94:	88 85       	ldd	r24, Y+8	; 0x08
     d96:	81 11       	cpse	r24, r1
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <xQueueGenericReset+0x68>
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	08 95       	ret
     da8:	ce 01       	movw	r24, r28
     daa:	08 96       	adiw	r24, 0x08	; 8
     dac:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <xTaskRemoveFromEventList>
     db0:	88 23       	and	r24, r24
     db2:	99 f3       	breq	.-26     	; 0xd9a <xQueueGenericReset+0x5a>
     db4:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     db8:	f0 cf       	rjmp	.-32     	; 0xd9a <xQueueGenericReset+0x5a>
     dba:	ce 01       	movw	r24, r28
     dbc:	08 96       	adiw	r24, 0x08	; 8
     dbe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
     dc2:	ce 01       	movw	r24, r28
     dc4:	41 96       	adiw	r24, 0x11	; 17
     dc6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
     dca:	e7 cf       	rjmp	.-50     	; 0xd9a <xQueueGenericReset+0x5a>
     dcc:	63 e0       	ldi	r22, 0x03	; 3
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	80 e1       	ldi	r24, 0x10	; 16
     dd2:	90 e2       	ldi	r25, 0x20	; 32
     dd4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
     dd8:	bb cf       	rjmp	.-138    	; 0xd50 <xQueueGenericReset+0x10>

00000dda <xQueueGenericCreate>:
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	18 2f       	mov	r17, r24
     de6:	06 2f       	mov	r16, r22
     de8:	f4 2e       	mov	r15, r20
     dea:	88 23       	and	r24, r24
     dec:	99 f1       	breq	.+102    	; 0xe54 <xQueueGenericCreate+0x7a>
     dee:	00 23       	and	r16, r16
     df0:	d1 f0       	breq	.+52     	; 0xe26 <xQueueGenericCreate+0x4c>
     df2:	10 9f       	mul	r17, r16
     df4:	c0 01       	movw	r24, r0
     df6:	11 24       	eor	r1, r1
     df8:	81 96       	adiw	r24, 0x21	; 33
     dfa:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
     dfe:	ec 01       	movw	r28, r24
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	51 f0       	breq	.+20     	; 0xe18 <xQueueGenericCreate+0x3e>
     e04:	81 96       	adiw	r24, 0x21	; 33
     e06:	88 83       	st	Y, r24
     e08:	99 83       	std	Y+1, r25	; 0x01
     e0a:	1b 8f       	std	Y+27, r17	; 0x1b
     e0c:	0c 8f       	std	Y+28, r16	; 0x1c
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	ce 01       	movw	r24, r28
     e12:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericReset>
     e16:	f8 a2       	std	Y+32, r15	; 0x20
     e18:	ce 01       	movw	r24, r28
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	08 95       	ret
     e26:	81 e2       	ldi	r24, 0x21	; 33
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
     e2e:	ec 01       	movw	r28, r24
     e30:	89 2b       	or	r24, r25
     e32:	91 f3       	breq	.-28     	; 0xe18 <xQueueGenericCreate+0x3e>
     e34:	c8 83       	st	Y, r28
     e36:	d9 83       	std	Y+1, r29	; 0x01
     e38:	1b 8f       	std	Y+27, r17	; 0x1b
     e3a:	0c 8f       	std	Y+28, r16	; 0x1c
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	ce 01       	movw	r24, r28
     e40:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericReset>
     e44:	f8 a2       	std	Y+32, r15	; 0x20
     e46:	ce 01       	movw	r24, r28
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	08 95       	ret
     e54:	66 e7       	ldi	r22, 0x76	; 118
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	80 e1       	ldi	r24, 0x10	; 16
     e5a:	90 e2       	ldi	r25, 0x20	; 32
     e5c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
     e60:	c6 cf       	rjmp	.-116    	; 0xdee <xQueueGenericCreate+0x14>

00000e62 <xQueueGenericSend>:
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	25 97       	sbiw	r28, 0x05	; 5
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	8c 01       	movw	r16, r24
     e80:	6b 01       	movw	r12, r22
     e82:	4c 83       	std	Y+4, r20	; 0x04
     e84:	5d 83       	std	Y+5, r21	; 0x05
     e86:	b2 2e       	mov	r11, r18
     e88:	89 2b       	or	r24, r25
     e8a:	09 f4       	brne	.+2      	; 0xe8e <xQueueGenericSend+0x2c>
     e8c:	b2 c0       	rjmp	.+356    	; 0xff2 <xQueueGenericSend+0x190>
     e8e:	c1 14       	cp	r12, r1
     e90:	d1 04       	cpc	r13, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <xQueueGenericSend+0x34>
     e94:	a2 c0       	rjmp	.+324    	; 0xfda <xQueueGenericSend+0x178>
     e96:	f2 e0       	ldi	r31, 0x02	; 2
     e98:	bf 16       	cp	r11, r31
     e9a:	09 f4       	brne	.+2      	; 0xe9e <xQueueGenericSend+0x3c>
     e9c:	7d c0       	rjmp	.+250    	; 0xf98 <xQueueGenericSend+0x136>
     e9e:	f8 01       	movw	r30, r16
     ea0:	83 8d       	ldd	r24, Z+27	; 0x1b
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	78 01       	movw	r14, r16
     ea6:	f8 e0       	ldi	r31, 0x08	; 8
     ea8:	ef 0e       	add	r14, r31
     eaa:	f1 1c       	adc	r15, r1
     eac:	10 c0       	rjmp	.+32     	; 0xece <xQueueGenericSend+0x6c>
     eae:	6c 81       	ldd	r22, Y+4	; 0x04
     eb0:	7d 81       	ldd	r23, Y+5	; 0x05
     eb2:	c7 01       	movw	r24, r14
     eb4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <vTaskPlaceOnEventList>
     eb8:	c8 01       	movw	r24, r16
     eba:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvUnlockQueue>
     ebe:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
     ec2:	88 23       	and	r24, r24
     ec4:	09 f4       	brne	.+2      	; 0xec8 <xQueueGenericSend+0x66>
     ec6:	4a c0       	rjmp	.+148    	; 0xf5c <xQueueGenericSend+0xfa>
     ec8:	f8 01       	movw	r30, r16
     eca:	83 8d       	ldd	r24, Z+27	; 0x1b
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	0f 92       	push	r0
     ed4:	f8 01       	movw	r30, r16
     ed6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ed8:	98 17       	cp	r25, r24
     eda:	08 f4       	brcc	.+2      	; 0xede <xQueueGenericSend+0x7c>
     edc:	42 c0       	rjmp	.+132    	; 0xf62 <xQueueGenericSend+0x100>
     ede:	f2 e0       	ldi	r31, 0x02	; 2
     ee0:	bf 16       	cp	r11, r31
     ee2:	09 f4       	brne	.+2      	; 0xee6 <xQueueGenericSend+0x84>
     ee4:	3e c0       	rjmp	.+124    	; 0xf62 <xQueueGenericSend+0x100>
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	9d 81       	ldd	r25, Y+5	; 0x05
     eea:	89 2b       	or	r24, r25
     eec:	09 f4       	brne	.+2      	; 0xef0 <xQueueGenericSend+0x8e>
     eee:	60 c0       	rjmp	.+192    	; 0xfb0 <xQueueGenericSend+0x14e>
     ef0:	22 23       	and	r18, r18
     ef2:	59 f1       	breq	.+86     	; 0xf4a <xQueueGenericSend+0xe8>
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0e 94 87 0b 	call	0x170e	; 0x170e <vTaskSuspendAll>
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	0f 92       	push	r0
     f02:	f8 01       	movw	r30, r16
     f04:	85 8d       	ldd	r24, Z+29	; 0x1d
     f06:	8f 3f       	cpi	r24, 0xFF	; 255
     f08:	39 f1       	breq	.+78     	; 0xf58 <xQueueGenericSend+0xf6>
     f0a:	f8 01       	movw	r30, r16
     f0c:	86 8d       	ldd	r24, Z+30	; 0x1e
     f0e:	8f 3f       	cpi	r24, 0xFF	; 255
     f10:	09 f1       	breq	.+66     	; 0xf54 <xQueueGenericSend+0xf2>
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	be 01       	movw	r22, r28
     f18:	6c 5f       	subi	r22, 0xFC	; 252
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	ce 01       	movw	r24, r28
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xTaskCheckForTimeOut>
     f24:	81 11       	cpse	r24, r1
     f26:	48 c0       	rjmp	.+144    	; 0xfb8 <xQueueGenericSend+0x156>
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	0f 92       	push	r0
     f2e:	f8 01       	movw	r30, r16
     f30:	92 8d       	ldd	r25, Z+26	; 0x1a
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	83 8d       	ldd	r24, Z+27	; 0x1b
     f38:	98 17       	cp	r25, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <xQueueGenericSend+0xdc>
     f3c:	b8 cf       	rjmp	.-144    	; 0xeae <xQueueGenericSend+0x4c>
     f3e:	c8 01       	movw	r24, r16
     f40:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvUnlockQueue>
     f44:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
     f48:	bf cf       	rjmp	.-130    	; 0xec8 <xQueueGenericSend+0x66>
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <vTaskInternalSetTimeOutState>
     f52:	d0 cf       	rjmp	.-96     	; 0xef4 <xQueueGenericSend+0x92>
     f54:	16 8e       	std	Z+30, r1	; 0x1e
     f56:	dd cf       	rjmp	.-70     	; 0xf12 <xQueueGenericSend+0xb0>
     f58:	15 8e       	std	Z+29, r1	; 0x1d
     f5a:	d7 cf       	rjmp	.-82     	; 0xf0a <xQueueGenericSend+0xa8>
     f5c:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     f60:	b3 cf       	rjmp	.-154    	; 0xec8 <xQueueGenericSend+0x66>
     f62:	4b 2d       	mov	r20, r11
     f64:	b6 01       	movw	r22, r12
     f66:	c8 01       	movw	r24, r16
     f68:	0e 94 db 05 	call	0xbb6	; 0xbb6 <prvCopyDataToQueue>
     f6c:	f8 01       	movw	r30, r16
     f6e:	91 89       	ldd	r25, Z+17	; 0x11
     f70:	91 11       	cpse	r25, r1
     f72:	2c c0       	rjmp	.+88     	; 0xfcc <xQueueGenericSend+0x16a>
     f74:	81 11       	cpse	r24, r1
     f76:	27 c0       	rjmp	.+78     	; 0xfc6 <xQueueGenericSend+0x164>
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	25 96       	adiw	r28, 0x05	; 5
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	bf 90       	pop	r11
     f96:	08 95       	ret
     f98:	f8 01       	movw	r30, r16
     f9a:	83 8d       	ldd	r24, Z+27	; 0x1b
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <xQueueGenericSend+0x140>
     fa0:	80 cf       	rjmp	.-256    	; 0xea2 <xQueueGenericSend+0x40>
     fa2:	63 ef       	ldi	r22, 0xF3	; 243
     fa4:	72 e0       	ldi	r23, 0x02	; 2
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	90 e2       	ldi	r25, 0x20	; 32
     faa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
     fae:	77 cf       	rjmp	.-274    	; 0xe9e <xQueueGenericSend+0x3c>
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	e3 cf       	rjmp	.-58     	; 0xf7e <xQueueGenericSend+0x11c>
     fb8:	c8 01       	movw	r24, r16
     fba:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvUnlockQueue>
     fbe:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	dc cf       	rjmp	.-72     	; 0xf7e <xQueueGenericSend+0x11c>
     fc6:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
     fca:	d6 cf       	rjmp	.-84     	; 0xf78 <xQueueGenericSend+0x116>
     fcc:	c8 01       	movw	r24, r16
     fce:	41 96       	adiw	r24, 0x11	; 17
     fd0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <xTaskRemoveFromEventList>
     fd4:	88 23       	and	r24, r24
     fd6:	81 f2       	breq	.-96     	; 0xf78 <xQueueGenericSend+0x116>
     fd8:	f6 cf       	rjmp	.-20     	; 0xfc6 <xQueueGenericSend+0x164>
     fda:	f8 01       	movw	r30, r16
     fdc:	84 8d       	ldd	r24, Z+28	; 0x1c
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <xQueueGenericSend+0x182>
     fe2:	59 cf       	rjmp	.-334    	; 0xe96 <xQueueGenericSend+0x34>
     fe4:	62 ef       	ldi	r22, 0xF2	; 242
     fe6:	72 e0       	ldi	r23, 0x02	; 2
     fe8:	80 e1       	ldi	r24, 0x10	; 16
     fea:	90 e2       	ldi	r25, 0x20	; 32
     fec:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
     ff0:	52 cf       	rjmp	.-348    	; 0xe96 <xQueueGenericSend+0x34>
     ff2:	61 ef       	ldi	r22, 0xF1	; 241
     ff4:	72 e0       	ldi	r23, 0x02	; 2
     ff6:	80 e1       	ldi	r24, 0x10	; 16
     ff8:	90 e2       	ldi	r25, 0x20	; 32
     ffa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
     ffe:	47 cf       	rjmp	.-370    	; 0xe8e <xQueueGenericSend+0x2c>

00001000 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	25 97       	sbiw	r28, 0x05	; 5
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	8c 01       	movw	r16, r24
    101c:	6b 01       	movw	r12, r22
    101e:	4c 83       	std	Y+4, r20	; 0x04
    1020:	5d 83       	std	Y+5, r21	; 0x05
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    1022:	89 2b       	or	r24, r25
    1024:	09 f4       	brne	.+2      	; 0x1028 <xQueuePeek+0x28>
    1026:	a2 c0       	rjmp	.+324    	; 0x116c <xQueuePeek+0x16c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1028:	c1 14       	cp	r12, r1
    102a:	d1 04       	cpc	r13, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <xQueuePeek+0x30>
    102e:	92 c0       	rjmp	.+292    	; 0x1154 <xQueuePeek+0x154>
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    1030:	20 e0       	ldi	r18, 0x00	; 0
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1032:	78 01       	movw	r14, r16
    1034:	f1 e1       	ldi	r31, 0x11	; 17
    1036:	ef 0e       	add	r14, r31
    1038:	f1 1c       	adc	r15, r1
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1040:	f8 01       	movw	r30, r16
    1042:	82 8d       	ldd	r24, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1044:	81 11       	cpse	r24, r1
    1046:	69 c0       	rjmp	.+210    	; 0x111a <xQueuePeek+0x11a>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	89 2b       	or	r24, r25
    104e:	09 f4       	brne	.+2      	; 0x1052 <xQueuePeek+0x52>
    1050:	74 c0       	rjmp	.+232    	; 0x113a <xQueuePeek+0x13a>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1052:	22 23       	and	r18, r18
    1054:	09 f4       	brne	.+2      	; 0x1058 <xQueuePeek+0x58>
    1056:	58 c0       	rjmp	.+176    	; 0x1108 <xQueuePeek+0x108>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    105c:	0e 94 87 0b 	call	0x170e	; 0x170e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	0f 92       	push	r0
    1066:	f8 01       	movw	r30, r16
    1068:	85 8d       	ldd	r24, Z+29	; 0x1d
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	09 f4       	brne	.+2      	; 0x1070 <xQueuePeek+0x70>
    106e:	53 c0       	rjmp	.+166    	; 0x1116 <xQueuePeek+0x116>
    1070:	f8 01       	movw	r30, r16
    1072:	86 8d       	ldd	r24, Z+30	; 0x1e
    1074:	8f 3f       	cpi	r24, 0xFF	; 255
    1076:	09 f4       	brne	.+2      	; 0x107a <xQueuePeek+0x7a>
    1078:	4c c0       	rjmp	.+152    	; 0x1112 <xQueuePeek+0x112>
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    107e:	be 01       	movw	r22, r28
    1080:	6c 5f       	subi	r22, 0xFC	; 252
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	ce 01       	movw	r24, r28
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xTaskCheckForTimeOut>
    108c:	81 11       	cpse	r24, r1
    108e:	22 c0       	rjmp	.+68     	; 0x10d4 <xQueuePeek+0xd4>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1096:	f8 01       	movw	r30, r16
    1098:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    109e:	81 11       	cpse	r24, r1
    10a0:	12 c0       	rjmp	.+36     	; 0x10c6 <xQueuePeek+0xc6>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    10a2:	6c 81       	ldd	r22, Y+4	; 0x04
    10a4:	7d 81       	ldd	r23, Y+5	; 0x05
    10a6:	c7 01       	movw	r24, r14
    10a8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    10b2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
    10b6:	88 23       	and	r24, r24
    10b8:	11 f0       	breq	.+4      	; 0x10be <xQueuePeek+0xbe>
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	be cf       	rjmp	.-132    	; 0x103a <xQueuePeek+0x3a>
				{
					portYIELD_WITHIN_API();
    10be:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	ba cf       	rjmp	.-140    	; 0x103a <xQueuePeek+0x3a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    10c6:	c8 01       	movw	r24, r16
    10c8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    10cc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	b3 cf       	rjmp	.-154    	; 0x103a <xQueuePeek+0x3a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    10d4:	c8 01       	movw	r24, r16
    10d6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    10da:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    10e4:	f8 01       	movw	r30, r16
    10e6:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    10ec:	81 11       	cpse	r24, r1
    10ee:	e5 cf       	rjmp	.-54     	; 0x10ba <xQueuePeek+0xba>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    10f0:	25 96       	adiw	r28, 0x05	; 5
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	08 95       	ret
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1108:	ce 01       	movw	r24, r28
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <vTaskInternalSetTimeOutState>
    1110:	a3 cf       	rjmp	.-186    	; 0x1058 <xQueuePeek+0x58>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    1112:	16 8e       	std	Z+30, r1	; 0x1e
    1114:	b2 cf       	rjmp	.-156    	; 0x107a <xQueuePeek+0x7a>
    1116:	15 8e       	std	Z+29, r1	; 0x1d
    1118:	ab cf       	rjmp	.-170    	; 0x1070 <xQueuePeek+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    111a:	e6 80       	ldd	r14, Z+6	; 0x06
    111c:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    111e:	b6 01       	movw	r22, r12
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 35 06 	call	0xc6a	; 0xc6a <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    1126:	f8 01       	movw	r30, r16
    1128:	e6 82       	std	Z+6, r14	; 0x06
    112a:	f7 82       	std	Z+7, r15	; 0x07

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    112c:	81 89       	ldd	r24, Z+17	; 0x11
    112e:	81 11       	cpse	r24, r1
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <xQueuePeek+0x142>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	db cf       	rjmp	.-74     	; 0x10f0 <xQueuePeek+0xf0>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	d7 cf       	rjmp	.-82     	; 0x10f0 <xQueuePeek+0xf0>

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1142:	c8 01       	movw	r24, r16
    1144:	41 96       	adiw	r24, 0x11	; 17
    1146:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <xTaskRemoveFromEventList>
    114a:	88 23       	and	r24, r24
    114c:	91 f3       	breq	.-28     	; 0x1132 <xQueuePeek+0x132>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    114e:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    1152:	ef cf       	rjmp	.-34     	; 0x1132 <xQueuePeek+0x132>
	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1154:	f8 01       	movw	r30, r16
    1156:	84 8d       	ldd	r24, Z+28	; 0x1c
    1158:	88 23       	and	r24, r24
    115a:	09 f4       	brne	.+2      	; 0x115e <xQueuePeek+0x15e>
    115c:	69 cf       	rjmp	.-302    	; 0x1030 <xQueuePeek+0x30>
    115e:	6c e6       	ldi	r22, 0x6C	; 108
    1160:	76 e0       	ldi	r23, 0x06	; 6
    1162:	80 e1       	ldi	r24, 0x10	; 16
    1164:	90 e2       	ldi	r25, 0x20	; 32
    1166:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    116a:	62 cf       	rjmp	.-316    	; 0x1030 <xQueuePeek+0x30>
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    116c:	68 e6       	ldi	r22, 0x68	; 104
    116e:	76 e0       	ldi	r23, 0x06	; 6
    1170:	80 e1       	ldi	r24, 0x10	; 16
    1172:	90 e2       	ldi	r25, 0x20	; 32
    1174:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1178:	57 cf       	rjmp	.-338    	; 0x1028 <xQueuePeek+0x28>

0000117a <prvIdleTask>:
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    117a:	20 c0       	rjmp	.+64     	; 0x11bc <prvIdleTask+0x42>
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	0f 92       	push	r0
    1182:	e0 91 38 61 	lds	r30, 0x6138	; 0x806138 <xTasksWaitingTermination+0x5>
    1186:	f0 91 39 61 	lds	r31, 0x6139	; 0x806139 <xTasksWaitingTermination+0x6>
    118a:	c6 81       	ldd	r28, Z+6	; 0x06
    118c:	d7 81       	ldd	r29, Z+7	; 0x07
    118e:	ce 01       	movw	r24, r28
    1190:	02 96       	adiw	r24, 0x02	; 2
    1192:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1196:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    119a:	81 50       	subi	r24, 0x01	; 1
    119c:	80 93 28 61 	sts	0x6128, r24	; 0x806128 <uxCurrentNumberOfTasks>
    11a0:	80 91 32 61 	lds	r24, 0x6132	; 0x806132 <uxDeletedTasksWaitingCleanUp>
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	80 93 32 61 	sts	0x6132, r24	; 0x806132 <uxDeletedTasksWaitingCleanUp>
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	8f 89       	ldd	r24, Y+23	; 0x17
    11b0:	98 8d       	ldd	r25, Y+24	; 0x18
    11b2:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    11bc:	80 91 32 61 	lds	r24, 0x6132	; 0x806132 <uxDeletedTasksWaitingCleanUp>
    11c0:	81 11       	cpse	r24, r1
    11c2:	dc cf       	rjmp	.-72     	; 0x117c <prvIdleTask+0x2>
    11c4:	80 91 5b 61 	lds	r24, 0x615B	; 0x80615b <pxReadyTasksLists>
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	10 f0       	brcs	.+4      	; 0x11d0 <prvIdleTask+0x56>
    11cc:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    11d0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <vApplicationIdleHook>
    11d4:	f3 cf       	rjmp	.-26     	; 0x11bc <prvIdleTask+0x42>

000011d6 <prvResetNextTaskUnblockTime.part.0>:
    11d6:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    11da:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    11de:	05 80       	ldd	r0, Z+5	; 0x05
    11e0:	f6 81       	ldd	r31, Z+6	; 0x06
    11e2:	e0 2d       	mov	r30, r0
    11e4:	06 80       	ldd	r0, Z+6	; 0x06
    11e6:	f7 81       	ldd	r31, Z+7	; 0x07
    11e8:	e0 2d       	mov	r30, r0
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	93 81       	ldd	r25, Z+3	; 0x03
    11ee:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    11f2:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    11f6:	08 95       	ret

000011f8 <prvAddCurrentTaskToDelayedList>:
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	ec 01       	movw	r28, r24
    1204:	f6 2e       	mov	r15, r22
    1206:	00 91 26 61 	lds	r16, 0x6126	; 0x806126 <xTickCount>
    120a:	10 91 27 61 	lds	r17, 0x6127	; 0x806127 <xTickCount+0x1>
    120e:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    1212:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1216:	02 96       	adiw	r24, 0x02	; 2
    1218:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    121c:	cf 3f       	cpi	r28, 0xFF	; 255
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	d8 07       	cpc	r29, r24
    1222:	a9 f1       	breq	.+106    	; 0x128e <prvAddCurrentTaskToDelayedList+0x96>
    1224:	c0 0f       	add	r28, r16
    1226:	d1 1f       	adc	r29, r17
    1228:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    122c:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1230:	c2 83       	std	Z+2, r28	; 0x02
    1232:	d3 83       	std	Z+3, r29	; 0x03
    1234:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    1238:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    123c:	c0 17       	cp	r28, r16
    123e:	d1 07       	cpc	r29, r17
    1240:	c8 f0       	brcs	.+50     	; 0x1274 <prvAddCurrentTaskToDelayedList+0x7c>
    1242:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <pxDelayedTaskList>
    1246:	90 91 48 61 	lds	r25, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    124a:	6e 5f       	subi	r22, 0xFE	; 254
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	0e 94 ad 03 	call	0x75a	; 0x75a <vListInsert>
    1252:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <xNextTaskUnblockTime>
    1256:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <xNextTaskUnblockTime+0x1>
    125a:	c8 17       	cp	r28, r24
    125c:	d9 07       	cpc	r29, r25
    125e:	20 f4       	brcc	.+8      	; 0x1268 <prvAddCurrentTaskToDelayedList+0x70>
    1260:	c0 93 1e 61 	sts	0x611E, r28	; 0x80611e <xNextTaskUnblockTime>
    1264:	d0 93 1f 61 	sts	0x611F, r29	; 0x80611f <xNextTaskUnblockTime+0x1>
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	08 95       	ret
    1274:	80 91 45 61 	lds	r24, 0x6145	; 0x806145 <pxOverflowDelayedTaskList>
    1278:	90 91 46 61 	lds	r25, 0x6146	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    127c:	6e 5f       	subi	r22, 0xFE	; 254
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	0c 94 ad 03 	jmp	0x75a	; 0x75a <vListInsert>
    128e:	ff 20       	and	r15, r15
    1290:	49 f2       	breq	.-110    	; 0x1224 <prvAddCurrentTaskToDelayedList+0x2c>
    1292:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    1296:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    129a:	6e 5f       	subi	r22, 0xFE	; 254
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	89 e2       	ldi	r24, 0x29	; 41
    12a0:	91 e6       	ldi	r25, 0x61	; 97
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	0c 94 8c 03 	jmp	0x718	; 0x718 <vListInsertEnd>

000012b0 <vTaskSwitchContext.part.5>:
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	10 92 22 61 	sts	0x6122, r1	; 0x806122 <xYieldPending>
    12ba:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    12be:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    12c2:	80 91 89 61 	lds	r24, 0x6189	; 0x806189 <StatsTimer>
    12c6:	90 91 8a 61 	lds	r25, 0x618A	; 0x80618a <StatsTimer+0x1>
    12ca:	a0 91 8b 61 	lds	r26, 0x618B	; 0x80618b <StatsTimer+0x2>
    12ce:	b0 91 8c 61 	lds	r27, 0x618C	; 0x80618c <StatsTimer+0x3>
    12d2:	82 0f       	add	r24, r18
    12d4:	93 1f       	adc	r25, r19
    12d6:	a1 1d       	adc	r26, r1
    12d8:	b1 1d       	adc	r27, r1
    12da:	00 91 17 61 	lds	r16, 0x6117	; 0x806117 <ulTaskSwitchedInTime>
    12de:	10 91 18 61 	lds	r17, 0x6118	; 0x806118 <ulTaskSwitchedInTime+0x1>
    12e2:	20 91 19 61 	lds	r18, 0x6119	; 0x806119 <ulTaskSwitchedInTime+0x2>
    12e6:	30 91 1a 61 	lds	r19, 0x611A	; 0x80611a <ulTaskSwitchedInTime+0x3>
    12ea:	08 17       	cp	r16, r24
    12ec:	19 07       	cpc	r17, r25
    12ee:	2a 07       	cpc	r18, r26
    12f0:	3b 07       	cpc	r19, r27
    12f2:	a0 f4       	brcc	.+40     	; 0x131c <vTaskSwitchContext.part.5+0x6c>
    12f4:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    12f8:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    12fc:	45 a1       	ldd	r20, Z+37	; 0x25
    12fe:	56 a1       	ldd	r21, Z+38	; 0x26
    1300:	67 a1       	ldd	r22, Z+39	; 0x27
    1302:	70 a5       	ldd	r23, Z+40	; 0x28
    1304:	40 1b       	sub	r20, r16
    1306:	51 0b       	sbc	r21, r17
    1308:	62 0b       	sbc	r22, r18
    130a:	73 0b       	sbc	r23, r19
    130c:	48 0f       	add	r20, r24
    130e:	59 1f       	adc	r21, r25
    1310:	6a 1f       	adc	r22, r26
    1312:	7b 1f       	adc	r23, r27
    1314:	45 a3       	std	Z+37, r20	; 0x25
    1316:	56 a3       	std	Z+38, r21	; 0x26
    1318:	67 a3       	std	Z+39, r22	; 0x27
    131a:	70 a7       	std	Z+40, r23	; 0x28
    131c:	80 93 17 61 	sts	0x6117, r24	; 0x806117 <ulTaskSwitchedInTime>
    1320:	90 93 18 61 	sts	0x6118, r25	; 0x806118 <ulTaskSwitchedInTime+0x1>
    1324:	a0 93 19 61 	sts	0x6119, r26	; 0x806119 <ulTaskSwitchedInTime+0x2>
    1328:	b0 93 1a 61 	sts	0x611A, r27	; 0x80611a <ulTaskSwitchedInTime+0x3>
    132c:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1330:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1334:	07 88       	ldd	r0, Z+23	; 0x17
    1336:	f0 8d       	ldd	r31, Z+24	; 0x18
    1338:	e0 2d       	mov	r30, r0
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	a2 81       	ldd	r26, Z+2	; 0x02
    1340:	b3 81       	ldd	r27, Z+3	; 0x03
    1342:	85 3a       	cpi	r24, 0xA5	; 165
    1344:	95 4a       	sbci	r25, 0xA5	; 165
    1346:	a5 4a       	sbci	r26, 0xA5	; 165
    1348:	b5 4a       	sbci	r27, 0xA5	; 165
    134a:	09 f4       	brne	.+2      	; 0x134e <vTaskSwitchContext.part.5+0x9e>
    134c:	4c c0       	rjmp	.+152    	; 0x13e6 <vTaskSwitchContext.part.5+0x136>
    134e:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    1352:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1356:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    135a:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    135e:	67 5e       	subi	r22, 0xE7	; 231
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <vApplicationStackOverflowHook>
    1366:	c0 91 25 61 	lds	r28, 0x6125	; 0x806125 <uxTopReadyPriority>
    136a:	8c 2f       	mov	r24, r28
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9c 01       	movw	r18, r24
    1370:	22 0f       	add	r18, r18
    1372:	33 1f       	adc	r19, r19
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	f9 01       	movw	r30, r18
    137e:	e8 0f       	add	r30, r24
    1380:	f9 1f       	adc	r31, r25
    1382:	e5 5a       	subi	r30, 0xA5	; 165
    1384:	fe 49       	sbci	r31, 0x9E	; 158
    1386:	40 81       	ld	r20, Z
    1388:	41 11       	cpse	r20, r1
    138a:	0c c0       	rjmp	.+24     	; 0x13a4 <vTaskSwitchContext.part.5+0xf4>
    138c:	cc 23       	and	r28, r28
    138e:	11 f0       	breq	.+4      	; 0x1394 <vTaskSwitchContext.part.5+0xe4>
    1390:	c1 50       	subi	r28, 0x01	; 1
    1392:	eb cf       	rjmp	.-42     	; 0x136a <vTaskSwitchContext.part.5+0xba>
    1394:	6c e8       	ldi	r22, 0x8C	; 140
    1396:	7b e0       	ldi	r23, 0x0B	; 11
    1398:	84 e2       	ldi	r24, 0x24	; 36
    139a:	90 e2       	ldi	r25, 0x20	; 32
    139c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    13a0:	c1 50       	subi	r28, 0x01	; 1
    13a2:	e3 cf       	rjmp	.-58     	; 0x136a <vTaskSwitchContext.part.5+0xba>
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	dc 01       	movw	r26, r24
    13aa:	a5 5a       	subi	r26, 0xA5	; 165
    13ac:	be 49       	sbci	r27, 0x9E	; 158
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	02 80       	ldd	r0, Z+2	; 0x02
    13b8:	f3 81       	ldd	r31, Z+3	; 0x03
    13ba:	e0 2d       	mov	r30, r0
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	ed 93       	st	X+, r30
    13c0:	fc 93       	st	X, r31
    13c2:	12 97       	sbiw	r26, 0x02	; 2
    13c4:	82 5a       	subi	r24, 0xA2	; 162
    13c6:	9e 49       	sbci	r25, 0x9E	; 158
    13c8:	e8 17       	cp	r30, r24
    13ca:	f9 07       	cpc	r31, r25
    13cc:	59 f1       	breq	.+86     	; 0x1424 <vTaskSwitchContext.part.5+0x174>
    13ce:	86 81       	ldd	r24, Z+6	; 0x06
    13d0:	97 81       	ldd	r25, Z+7	; 0x07
    13d2:	80 93 7f 61 	sts	0x617F, r24	; 0x80617f <pxCurrentTCB>
    13d6:	90 93 80 61 	sts	0x6180, r25	; 0x806180 <pxCurrentTCB+0x1>
    13da:	c0 93 25 61 	sts	0x6125, r28	; 0x806125 <uxTopReadyPriority>
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret
    13e6:	84 81       	ldd	r24, Z+4	; 0x04
    13e8:	95 81       	ldd	r25, Z+5	; 0x05
    13ea:	a6 81       	ldd	r26, Z+6	; 0x06
    13ec:	b7 81       	ldd	r27, Z+7	; 0x07
    13ee:	85 3a       	cpi	r24, 0xA5	; 165
    13f0:	95 4a       	sbci	r25, 0xA5	; 165
    13f2:	a5 4a       	sbci	r26, 0xA5	; 165
    13f4:	b5 4a       	sbci	r27, 0xA5	; 165
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vTaskSwitchContext.part.5+0x14a>
    13f8:	aa cf       	rjmp	.-172    	; 0x134e <vTaskSwitchContext.part.5+0x9e>
    13fa:	80 85       	ldd	r24, Z+8	; 0x08
    13fc:	91 85       	ldd	r25, Z+9	; 0x09
    13fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1400:	b3 85       	ldd	r27, Z+11	; 0x0b
    1402:	85 3a       	cpi	r24, 0xA5	; 165
    1404:	95 4a       	sbci	r25, 0xA5	; 165
    1406:	a5 4a       	sbci	r26, 0xA5	; 165
    1408:	b5 4a       	sbci	r27, 0xA5	; 165
    140a:	09 f0       	breq	.+2      	; 0x140e <vTaskSwitchContext.part.5+0x15e>
    140c:	a0 cf       	rjmp	.-192    	; 0x134e <vTaskSwitchContext.part.5+0x9e>
    140e:	84 85       	ldd	r24, Z+12	; 0x0c
    1410:	95 85       	ldd	r25, Z+13	; 0x0d
    1412:	a6 85       	ldd	r26, Z+14	; 0x0e
    1414:	b7 85       	ldd	r27, Z+15	; 0x0f
    1416:	85 3a       	cpi	r24, 0xA5	; 165
    1418:	95 4a       	sbci	r25, 0xA5	; 165
    141a:	a5 4a       	sbci	r26, 0xA5	; 165
    141c:	b5 4a       	sbci	r27, 0xA5	; 165
    141e:	09 f0       	breq	.+2      	; 0x1422 <vTaskSwitchContext.part.5+0x172>
    1420:	96 cf       	rjmp	.-212    	; 0x134e <vTaskSwitchContext.part.5+0x9e>
    1422:	a1 cf       	rjmp	.-190    	; 0x1366 <vTaskSwitchContext.part.5+0xb6>
    1424:	02 80       	ldd	r0, Z+2	; 0x02
    1426:	f3 81       	ldd	r31, Z+3	; 0x03
    1428:	e0 2d       	mov	r30, r0
    142a:	11 96       	adiw	r26, 0x01	; 1
    142c:	ed 93       	st	X+, r30
    142e:	fc 93       	st	X, r31
    1430:	12 97       	sbiw	r26, 0x02	; 2
    1432:	cd cf       	rjmp	.-102    	; 0x13ce <vTaskSwitchContext.part.5+0x11e>

00001434 <xTaskCreate>:
    1434:	5f 92       	push	r5
    1436:	6f 92       	push	r6
    1438:	7f 92       	push	r7
    143a:	8f 92       	push	r8
    143c:	9f 92       	push	r9
    143e:	af 92       	push	r10
    1440:	bf 92       	push	r11
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	4c 01       	movw	r8, r24
    1454:	eb 01       	movw	r28, r22
    1456:	5a 01       	movw	r10, r20
    1458:	39 01       	movw	r6, r18
    145a:	50 2e       	mov	r5, r16
    145c:	ca 01       	movw	r24, r20
    145e:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
    1462:	8c 01       	movw	r16, r24
    1464:	89 2b       	or	r24, r25
    1466:	09 f4       	brne	.+2      	; 0x146a <xTaskCreate+0x36>
    1468:	dc c0       	rjmp	.+440    	; 0x1622 <xTaskCreate+0x1ee>
    146a:	8e e2       	ldi	r24, 0x2E	; 46
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 b0 02 	call	0x560	; 0x560 <pvPortMalloc>
    1472:	6c 01       	movw	r12, r24
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	09 f4       	brne	.+2      	; 0x147a <xTaskCreate+0x46>
    1478:	d1 c0       	rjmp	.+418    	; 0x161c <xTaskCreate+0x1e8>
    147a:	dc 01       	movw	r26, r24
    147c:	57 96       	adiw	r26, 0x17	; 23
    147e:	0d 93       	st	X+, r16
    1480:	1c 93       	st	X, r17
    1482:	58 97       	sbiw	r26, 0x18	; 24
    1484:	20 97       	sbiw	r28, 0x00	; 0
    1486:	09 f4       	brne	.+2      	; 0x148a <xTaskCreate+0x56>
    1488:	ce c0       	rjmp	.+412    	; 0x1626 <xTaskCreate+0x1f2>
    148a:	c8 01       	movw	r24, r16
    148c:	a5 01       	movw	r20, r10
    148e:	65 ea       	ldi	r22, 0xA5	; 165
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	0e 94 79 14 	call	0x28f2	; 0x28f2 <memset>
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	af 1a       	sub	r10, r31
    149a:	b1 08       	sbc	r11, r1
    149c:	d6 01       	movw	r26, r12
    149e:	57 96       	adiw	r26, 0x17	; 23
    14a0:	8d 91       	ld	r24, X+
    14a2:	9c 91       	ld	r25, X
    14a4:	58 97       	sbiw	r26, 0x18	; 24
    14a6:	a8 0e       	add	r10, r24
    14a8:	b9 1e       	adc	r11, r25
    14aa:	f6 01       	movw	r30, r12
    14ac:	79 96       	adiw	r30, 0x19	; 25
    14ae:	9e 01       	movw	r18, r28
    14b0:	28 5f       	subi	r18, 0xF8	; 248
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	de 01       	movw	r26, r28
    14b6:	89 91       	ld	r24, Y+
    14b8:	81 93       	st	Z+, r24
    14ba:	8c 91       	ld	r24, X
    14bc:	88 23       	and	r24, r24
    14be:	19 f0       	breq	.+6      	; 0x14c6 <xTaskCreate+0x92>
    14c0:	c2 17       	cp	r28, r18
    14c2:	d3 07       	cpc	r29, r19
    14c4:	b9 f7       	brne	.-18     	; 0x14b4 <xTaskCreate+0x80>
    14c6:	f6 01       	movw	r30, r12
    14c8:	10 a2       	std	Z+32, r1	; 0x20
    14ca:	05 2d       	mov	r16, r5
    14cc:	04 30       	cpi	r16, 0x04	; 4
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <xTaskCreate+0x9e>
    14d0:	9f c0       	rjmp	.+318    	; 0x1610 <xTaskCreate+0x1dc>
    14d2:	d6 01       	movw	r26, r12
    14d4:	56 96       	adiw	r26, 0x16	; 22
    14d6:	0c 93       	st	X, r16
    14d8:	56 97       	sbiw	r26, 0x16	; 22
    14da:	93 96       	adiw	r26, 0x23	; 35
    14dc:	0c 93       	st	X, r16
    14de:	93 97       	sbiw	r26, 0x23	; 35
    14e0:	94 96       	adiw	r26, 0x24	; 36
    14e2:	1c 92       	st	X, r1
    14e4:	e6 01       	movw	r28, r12
    14e6:	22 96       	adiw	r28, 0x02	; 2
    14e8:	ce 01       	movw	r24, r28
    14ea:	0e 94 88 03 	call	0x710	; 0x710 <vListInitialiseItem>
    14ee:	c6 01       	movw	r24, r12
    14f0:	0c 96       	adiw	r24, 0x0c	; 12
    14f2:	0e 94 88 03 	call	0x710	; 0x710 <vListInitialiseItem>
    14f6:	f6 01       	movw	r30, r12
    14f8:	c0 86       	std	Z+8, r12	; 0x08
    14fa:	d1 86       	std	Z+9, r13	; 0x09
    14fc:	84 e0       	ldi	r24, 0x04	; 4
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	80 1b       	sub	r24, r16
    1502:	91 09       	sbc	r25, r1
    1504:	84 87       	std	Z+12, r24	; 0x0c
    1506:	95 87       	std	Z+13, r25	; 0x0d
    1508:	c2 8a       	std	Z+18, r12	; 0x12
    150a:	d3 8a       	std	Z+19, r13	; 0x13
    150c:	15 a2       	std	Z+37, r1	; 0x25
    150e:	16 a2       	std	Z+38, r1	; 0x26
    1510:	17 a2       	std	Z+39, r1	; 0x27
    1512:	10 a6       	std	Z+40, r1	; 0x28
    1514:	11 a6       	std	Z+41, r1	; 0x29
    1516:	12 a6       	std	Z+42, r1	; 0x2a
    1518:	13 a6       	std	Z+43, r1	; 0x2b
    151a:	14 a6       	std	Z+44, r1	; 0x2c
    151c:	15 a6       	std	Z+45, r1	; 0x2d
    151e:	a3 01       	movw	r20, r6
    1520:	b4 01       	movw	r22, r8
    1522:	c5 01       	movw	r24, r10
    1524:	0e 94 04 04 	call	0x808	; 0x808 <pxPortInitialiseStack>
    1528:	d6 01       	movw	r26, r12
    152a:	8d 93       	st	X+, r24
    152c:	9c 93       	st	X, r25
    152e:	e1 14       	cp	r14, r1
    1530:	f1 04       	cpc	r15, r1
    1532:	19 f0       	breq	.+6      	; 0x153a <xTaskCreate+0x106>
    1534:	f7 01       	movw	r30, r14
    1536:	c0 82       	st	Z, r12
    1538:	d1 82       	std	Z+1, r13	; 0x01
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	0f 92       	push	r0
    1540:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    1544:	8f 5f       	subi	r24, 0xFF	; 255
    1546:	80 93 28 61 	sts	0x6128, r24	; 0x806128 <uxCurrentNumberOfTasks>
    154a:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    154e:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1552:	89 2b       	or	r24, r25
    1554:	99 f0       	breq	.+38     	; 0x157c <xTaskCreate+0x148>
    1556:	80 91 24 61 	lds	r24, 0x6124	; 0x806124 <xSchedulerRunning>
    155a:	81 11       	cpse	r24, r1
    155c:	18 c0       	rjmp	.+48     	; 0x158e <xTaskCreate+0x15a>
    155e:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1562:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1566:	d6 01       	movw	r26, r12
    1568:	56 96       	adiw	r26, 0x16	; 22
    156a:	8c 91       	ld	r24, X
    156c:	96 89       	ldd	r25, Z+22	; 0x16
    156e:	89 17       	cp	r24, r25
    1570:	88 f0       	brcs	.+34     	; 0x1594 <xTaskCreate+0x160>
    1572:	c0 92 7f 61 	sts	0x617F, r12	; 0x80617f <pxCurrentTCB>
    1576:	d0 92 80 61 	sts	0x6180, r13	; 0x806180 <pxCurrentTCB+0x1>
    157a:	0c c0       	rjmp	.+24     	; 0x1594 <xTaskCreate+0x160>
    157c:	c0 92 7f 61 	sts	0x617F, r12	; 0x80617f <pxCurrentTCB>
    1580:	d0 92 80 61 	sts	0x6180, r13	; 0x806180 <pxCurrentTCB+0x1>
    1584:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	09 f4       	brne	.+2      	; 0x158e <xTaskCreate+0x15a>
    158c:	56 c0       	rjmp	.+172    	; 0x163a <xTaskCreate+0x206>
    158e:	d6 01       	movw	r26, r12
    1590:	56 96       	adiw	r26, 0x16	; 22
    1592:	8c 91       	ld	r24, X
    1594:	90 91 20 61 	lds	r25, 0x6120	; 0x806120 <uxTaskNumber>
    1598:	9f 5f       	subi	r25, 0xFF	; 255
    159a:	90 93 20 61 	sts	0x6120, r25	; 0x806120 <uxTaskNumber>
    159e:	f6 01       	movw	r30, r12
    15a0:	91 a3       	std	Z+33, r25	; 0x21
    15a2:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    15a6:	98 17       	cp	r25, r24
    15a8:	80 f1       	brcs	.+96     	; 0x160a <xTaskCreate+0x1d6>
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9c 01       	movw	r18, r24
    15ae:	22 0f       	add	r18, r18
    15b0:	33 1f       	adc	r19, r19
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	be 01       	movw	r22, r28
    15c0:	85 5a       	subi	r24, 0xA5	; 165
    15c2:	9e 49       	sbci	r25, 0x9E	; 158
    15c4:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	80 91 24 61 	lds	r24, 0x6124	; 0x806124 <xSchedulerRunning>
    15d0:	88 23       	and	r24, r24
    15d2:	51 f0       	breq	.+20     	; 0x15e8 <xTaskCreate+0x1b4>
    15d4:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    15d8:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    15dc:	96 89       	ldd	r25, Z+22	; 0x16
    15de:	d6 01       	movw	r26, r12
    15e0:	56 96       	adiw	r26, 0x16	; 22
    15e2:	8c 91       	ld	r24, X
    15e4:	98 17       	cp	r25, r24
    15e6:	b0 f0       	brcs	.+44     	; 0x1614 <xTaskCreate+0x1e0>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	bf 90       	pop	r11
    15fc:	af 90       	pop	r10
    15fe:	9f 90       	pop	r9
    1600:	8f 90       	pop	r8
    1602:	7f 90       	pop	r7
    1604:	6f 90       	pop	r6
    1606:	5f 90       	pop	r5
    1608:	08 95       	ret
    160a:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    160e:	cd cf       	rjmp	.-102    	; 0x15aa <xTaskCreate+0x176>
    1610:	03 e0       	ldi	r16, 0x03	; 3
    1612:	5f cf       	rjmp	.-322    	; 0x14d2 <xTaskCreate+0x9e>
    1614:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	e7 cf       	rjmp	.-50     	; 0x15ea <xTaskCreate+0x1b6>
    161c:	c8 01       	movw	r24, r16
    161e:	0e 94 4f 03 	call	0x69e	; 0x69e <vPortFree>
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	e2 cf       	rjmp	.-60     	; 0x15ea <xTaskCreate+0x1b6>
    1626:	60 e6       	ldi	r22, 0x60	; 96
    1628:	73 e0       	ldi	r23, 0x03	; 3
    162a:	84 e2       	ldi	r24, 0x24	; 36
    162c:	90 e2       	ldi	r25, 0x20	; 32
    162e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1632:	f6 01       	movw	r30, r12
    1634:	87 89       	ldd	r24, Z+23	; 0x17
    1636:	90 8d       	ldd	r25, Z+24	; 0x18
    1638:	29 cf       	rjmp	.-430    	; 0x148c <xTaskCreate+0x58>
    163a:	8b e5       	ldi	r24, 0x5B	; 91
    163c:	91 e6       	ldi	r25, 0x61	; 97
    163e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1642:	84 e6       	ldi	r24, 0x64	; 100
    1644:	91 e6       	ldi	r25, 0x61	; 97
    1646:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    164a:	8d e6       	ldi	r24, 0x6D	; 109
    164c:	91 e6       	ldi	r25, 0x61	; 97
    164e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1652:	86 e7       	ldi	r24, 0x76	; 118
    1654:	91 e6       	ldi	r25, 0x61	; 97
    1656:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    165a:	82 e5       	ldi	r24, 0x52	; 82
    165c:	91 e6       	ldi	r25, 0x61	; 97
    165e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1662:	89 e4       	ldi	r24, 0x49	; 73
    1664:	91 e6       	ldi	r25, 0x61	; 97
    1666:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    166a:	8c e3       	ldi	r24, 0x3C	; 60
    166c:	91 e6       	ldi	r25, 0x61	; 97
    166e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1672:	83 e3       	ldi	r24, 0x33	; 51
    1674:	91 e6       	ldi	r25, 0x61	; 97
    1676:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    167a:	89 e2       	ldi	r24, 0x29	; 41
    167c:	91 e6       	ldi	r25, 0x61	; 97
    167e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInitialise>
    1682:	82 e5       	ldi	r24, 0x52	; 82
    1684:	91 e6       	ldi	r25, 0x61	; 97
    1686:	80 93 47 61 	sts	0x6147, r24	; 0x806147 <pxDelayedTaskList>
    168a:	90 93 48 61 	sts	0x6148, r25	; 0x806148 <pxDelayedTaskList+0x1>
    168e:	89 e4       	ldi	r24, 0x49	; 73
    1690:	91 e6       	ldi	r25, 0x61	; 97
    1692:	80 93 45 61 	sts	0x6145, r24	; 0x806145 <pxOverflowDelayedTaskList>
    1696:	90 93 46 61 	sts	0x6146, r25	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    169a:	f6 01       	movw	r30, r12
    169c:	86 89       	ldd	r24, Z+22	; 0x16
    169e:	7a cf       	rjmp	.-268    	; 0x1594 <xTaskCreate+0x160>

000016a0 <vTaskStartScheduler>:
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	8c e1       	ldi	r24, 0x1C	; 28
    16a8:	e8 2e       	mov	r14, r24
    16aa:	81 e6       	ldi	r24, 0x61	; 97
    16ac:	f8 2e       	mov	r15, r24
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	51 e0       	ldi	r21, 0x01	; 1
    16b8:	68 e3       	ldi	r22, 0x38	; 56
    16ba:	70 e2       	ldi	r23, 0x20	; 32
    16bc:	8d eb       	ldi	r24, 0xBD	; 189
    16be:	98 e0       	ldi	r25, 0x08	; 8
    16c0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <xTaskCreate>
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	79 f0       	breq	.+30     	; 0x16e6 <vTaskStartScheduler+0x46>
    16c8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ca:	21 f0       	breq	.+8      	; 0x16d4 <vTaskStartScheduler+0x34>
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	08 95       	ret
    16d4:	67 e0       	ldi	r22, 0x07	; 7
    16d6:	78 e0       	ldi	r23, 0x08	; 8
    16d8:	84 e2       	ldi	r24, 0x24	; 36
    16da:	90 e2       	ldi	r25, 0x20	; 32
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <vAssertCalled>
    16e6:	f8 94       	cli
    16e8:	2f ef       	ldi	r18, 0xFF	; 255
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	20 93 1e 61 	sts	0x611E, r18	; 0x80611e <xNextTaskUnblockTime>
    16f0:	30 93 1f 61 	sts	0x611F, r19	; 0x80611f <xNextTaskUnblockTime+0x1>
    16f4:	80 93 24 61 	sts	0x6124, r24	; 0x806124 <xSchedulerRunning>
    16f8:	10 92 26 61 	sts	0x6126, r1	; 0x806126 <xTickCount>
    16fc:	10 92 27 61 	sts	0x6127, r1	; 0x806127 <xTickCount+0x1>
    1700:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vConfigureTimerForRunTimeStats>
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <xPortStartScheduler>

0000170e <vTaskSuspendAll>:
    170e:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <uxSchedulerSuspended>
    1718:	08 95       	ret

0000171a <xTaskIncrementTick>:
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    172c:	81 11       	cpse	r24, r1
    172e:	b9 c0       	rjmp	.+370    	; 0x18a2 <xTaskIncrementTick+0x188>
    1730:	e0 90 26 61 	lds	r14, 0x6126	; 0x806126 <xTickCount>
    1734:	f0 90 27 61 	lds	r15, 0x6127	; 0x806127 <xTickCount+0x1>
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	e8 1a       	sub	r14, r24
    173c:	f8 0a       	sbc	r15, r24
    173e:	e0 92 26 61 	sts	0x6126, r14	; 0x806126 <xTickCount>
    1742:	f0 92 27 61 	sts	0x6127, r15	; 0x806127 <xTickCount+0x1>
    1746:	e1 14       	cp	r14, r1
    1748:	f1 04       	cpc	r15, r1
    174a:	49 f5       	brne	.+82     	; 0x179e <xTaskIncrementTick+0x84>
    174c:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1750:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1754:	80 81       	ld	r24, Z
    1756:	81 11       	cpse	r24, r1
    1758:	ab c0       	rjmp	.+342    	; 0x18b0 <xTaskIncrementTick+0x196>
    175a:	80 91 47 61 	lds	r24, 0x6147	; 0x806147 <pxDelayedTaskList>
    175e:	90 91 48 61 	lds	r25, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1762:	20 91 45 61 	lds	r18, 0x6145	; 0x806145 <pxOverflowDelayedTaskList>
    1766:	30 91 46 61 	lds	r19, 0x6146	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    176a:	20 93 47 61 	sts	0x6147, r18	; 0x806147 <pxDelayedTaskList>
    176e:	30 93 48 61 	sts	0x6148, r19	; 0x806148 <pxDelayedTaskList+0x1>
    1772:	80 93 45 61 	sts	0x6145, r24	; 0x806145 <pxOverflowDelayedTaskList>
    1776:	90 93 46 61 	sts	0x6146, r25	; 0x806146 <pxOverflowDelayedTaskList+0x1>
    177a:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <xNumOfOverflows>
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	80 93 21 61 	sts	0x6121, r24	; 0x806121 <xNumOfOverflows>
    1784:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1788:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    178c:	80 81       	ld	r24, Z
    178e:	81 11       	cpse	r24, r1
    1790:	96 c0       	rjmp	.+300    	; 0x18be <xTaskIncrementTick+0x1a4>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    179a:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    179e:	80 91 1e 61 	lds	r24, 0x611E	; 0x80611e <xNextTaskUnblockTime>
    17a2:	90 91 1f 61 	lds	r25, 0x611F	; 0x80611f <xNextTaskUnblockTime+0x1>
    17a6:	d1 2c       	mov	r13, r1
    17a8:	e8 16       	cp	r14, r24
    17aa:	f9 06       	cpc	r15, r25
    17ac:	08 f4       	brcc	.+2      	; 0x17b0 <xTaskIncrementTick+0x96>
    17ae:	53 c0       	rjmp	.+166    	; 0x1856 <xTaskIncrementTick+0x13c>
    17b0:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    17b4:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    17b8:	80 81       	ld	r24, Z
    17ba:	88 23       	and	r24, r24
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <xTaskIncrementTick+0xa6>
    17be:	45 c0       	rjmp	.+138    	; 0x184a <xTaskIncrementTick+0x130>
    17c0:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    17c4:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    17c8:	05 80       	ldd	r0, Z+5	; 0x05
    17ca:	f6 81       	ldd	r31, Z+6	; 0x06
    17cc:	e0 2d       	mov	r30, r0
    17ce:	c6 81       	ldd	r28, Z+6	; 0x06
    17d0:	d7 81       	ldd	r29, Z+7	; 0x07
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	e8 16       	cp	r14, r24
    17d8:	f9 06       	cpc	r15, r25
    17da:	08 f4       	brcc	.+2      	; 0x17de <xTaskIncrementTick+0xc4>
    17dc:	73 c0       	rjmp	.+230    	; 0x18c4 <xTaskIncrementTick+0x1aa>
    17de:	8e 01       	movw	r16, r28
    17e0:	0e 5f       	subi	r16, 0xFE	; 254
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	c8 01       	movw	r24, r16
    17e6:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    17ea:	8c 89       	ldd	r24, Y+20	; 0x14
    17ec:	9d 89       	ldd	r25, Y+21	; 0x15
    17ee:	89 2b       	or	r24, r25
    17f0:	21 f0       	breq	.+8      	; 0x17fa <xTaskIncrementTick+0xe0>
    17f2:	ce 01       	movw	r24, r28
    17f4:	0c 96       	adiw	r24, 0x0c	; 12
    17f6:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    17fa:	8e 89       	ldd	r24, Y+22	; 0x16
    17fc:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    1800:	98 17       	cp	r25, r24
    1802:	10 f4       	brcc	.+4      	; 0x1808 <xTaskIncrementTick+0xee>
    1804:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9c 01       	movw	r18, r24
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	b8 01       	movw	r22, r16
    181e:	85 5a       	subi	r24, 0xA5	; 165
    1820:	9e 49       	sbci	r25, 0x9E	; 158
    1822:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1826:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    182a:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    182e:	9e 89       	ldd	r25, Y+22	; 0x16
    1830:	86 89       	ldd	r24, Z+22	; 0x16
    1832:	98 17       	cp	r25, r24
    1834:	08 f4       	brcc	.+2      	; 0x1838 <xTaskIncrementTick+0x11e>
    1836:	bc cf       	rjmp	.-136    	; 0x17b0 <xTaskIncrementTick+0x96>
    1838:	dd 24       	eor	r13, r13
    183a:	d3 94       	inc	r13
    183c:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1840:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1844:	80 81       	ld	r24, Z
    1846:	81 11       	cpse	r24, r1
    1848:	bb cf       	rjmp	.-138    	; 0x17c0 <xTaskIncrementTick+0xa6>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	9f ef       	ldi	r25, 0xFF	; 255
    184e:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    1852:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    1856:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    185a:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    185e:	86 89       	ldd	r24, Z+22	; 0x16
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	8e 0f       	add	r24, r30
    1872:	9f 1f       	adc	r25, r31
    1874:	fc 01       	movw	r30, r24
    1876:	e5 5a       	subi	r30, 0xA5	; 165
    1878:	fe 49       	sbci	r31, 0x9E	; 158
    187a:	80 81       	ld	r24, Z
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	10 f0       	brcs	.+4      	; 0x1884 <xTaskIncrementTick+0x16a>
    1880:	dd 24       	eor	r13, r13
    1882:	d3 94       	inc	r13
    1884:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <xYieldPending>
    1888:	88 23       	and	r24, r24
    188a:	11 f0       	breq	.+4      	; 0x1890 <xTaskIncrementTick+0x176>
    188c:	dd 24       	eor	r13, r13
    188e:	d3 94       	inc	r13
    1890:	8d 2d       	mov	r24, r13
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	08 95       	ret
    18a2:	80 91 23 61 	lds	r24, 0x6123	; 0x806123 <uxPendedTicks>
    18a6:	8f 5f       	subi	r24, 0xFF	; 255
    18a8:	80 93 23 61 	sts	0x6123, r24	; 0x806123 <uxPendedTicks>
    18ac:	d1 2c       	mov	r13, r1
    18ae:	ea cf       	rjmp	.-44     	; 0x1884 <xTaskIncrementTick+0x16a>
    18b0:	66 e6       	ldi	r22, 0x66	; 102
    18b2:	7a e0       	ldi	r23, 0x0A	; 10
    18b4:	84 e2       	ldi	r24, 0x24	; 36
    18b6:	90 e2       	ldi	r25, 0x20	; 32
    18b8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    18bc:	4e cf       	rjmp	.-356    	; 0x175a <xTaskIncrementTick+0x40>
    18be:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <prvResetNextTaskUnblockTime.part.0>
    18c2:	6d cf       	rjmp	.-294    	; 0x179e <xTaskIncrementTick+0x84>
    18c4:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    18c8:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    18cc:	c4 cf       	rjmp	.-120    	; 0x1856 <xTaskIncrementTick+0x13c>

000018ce <xTaskResumeAll>:
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <xTaskResumeAll+0x14>
    18e0:	77 c0       	rjmp	.+238    	; 0x19d0 <xTaskResumeAll+0x102>
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	0f 92       	push	r0
    18e8:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    18ec:	81 50       	subi	r24, 0x01	; 1
    18ee:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <uxSchedulerSuspended>
    18f2:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    18f6:	81 11       	cpse	r24, r1
    18f8:	62 c0       	rjmp	.+196    	; 0x19be <xTaskResumeAll+0xf0>
    18fa:	80 91 28 61 	lds	r24, 0x6128	; 0x806128 <uxCurrentNumberOfTasks>
    18fe:	88 23       	and	r24, r24
    1900:	09 f4       	brne	.+2      	; 0x1904 <xTaskResumeAll+0x36>
    1902:	5d c0       	rjmp	.+186    	; 0x19be <xTaskResumeAll+0xf0>
    1904:	c0 e0       	ldi	r28, 0x00	; 0
    1906:	d0 e0       	ldi	r29, 0x00	; 0
    1908:	ff 24       	eor	r15, r15
    190a:	f3 94       	inc	r15
    190c:	80 91 3c 61 	lds	r24, 0x613C	; 0x80613c <xPendingReadyList>
    1910:	88 23       	and	r24, r24
    1912:	a1 f1       	breq	.+104    	; 0x197c <xTaskResumeAll+0xae>
    1914:	e0 91 41 61 	lds	r30, 0x6141	; 0x806141 <xPendingReadyList+0x5>
    1918:	f0 91 42 61 	lds	r31, 0x6142	; 0x806142 <xPendingReadyList+0x6>
    191c:	c6 81       	ldd	r28, Z+6	; 0x06
    191e:	d7 81       	ldd	r29, Z+7	; 0x07
    1920:	ce 01       	movw	r24, r28
    1922:	0c 96       	adiw	r24, 0x0c	; 12
    1924:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1928:	8e 01       	movw	r16, r28
    192a:	0e 5f       	subi	r16, 0xFE	; 254
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	c8 01       	movw	r24, r16
    1930:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1934:	8e 89       	ldd	r24, Y+22	; 0x16
    1936:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    193a:	98 17       	cp	r25, r24
    193c:	10 f4       	brcc	.+4      	; 0x1942 <xTaskResumeAll+0x74>
    193e:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 01       	movw	r18, r24
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	82 0f       	add	r24, r18
    1954:	93 1f       	adc	r25, r19
    1956:	b8 01       	movw	r22, r16
    1958:	85 5a       	subi	r24, 0xA5	; 165
    195a:	9e 49       	sbci	r25, 0x9E	; 158
    195c:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1960:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1964:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1968:	9e 89       	ldd	r25, Y+22	; 0x16
    196a:	86 89       	ldd	r24, Z+22	; 0x16
    196c:	98 17       	cp	r25, r24
    196e:	70 f2       	brcs	.-100    	; 0x190c <xTaskResumeAll+0x3e>
    1970:	f0 92 22 61 	sts	0x6122, r15	; 0x806122 <xYieldPending>
    1974:	80 91 3c 61 	lds	r24, 0x613C	; 0x80613c <xPendingReadyList>
    1978:	81 11       	cpse	r24, r1
    197a:	cc cf       	rjmp	.-104    	; 0x1914 <xTaskResumeAll+0x46>
    197c:	cd 2b       	or	r28, r29
    197e:	69 f0       	breq	.+26     	; 0x199a <xTaskResumeAll+0xcc>
    1980:	e0 91 47 61 	lds	r30, 0x6147	; 0x806147 <pxDelayedTaskList>
    1984:	f0 91 48 61 	lds	r31, 0x6148	; 0x806148 <pxDelayedTaskList+0x1>
    1988:	80 81       	ld	r24, Z
    198a:	81 11       	cpse	r24, r1
    198c:	2c c0       	rjmp	.+88     	; 0x19e6 <xTaskResumeAll+0x118>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	80 93 1e 61 	sts	0x611E, r24	; 0x80611e <xNextTaskUnblockTime>
    1996:	90 93 1f 61 	sts	0x611F, r25	; 0x80611f <xNextTaskUnblockTime+0x1>
    199a:	c0 91 23 61 	lds	r28, 0x6123	; 0x806123 <uxPendedTicks>
    199e:	cc 23       	and	r28, r28
    19a0:	51 f0       	breq	.+20     	; 0x19b6 <xTaskResumeAll+0xe8>
    19a2:	d1 e0       	ldi	r29, 0x01	; 1
    19a4:	0e 94 8d 0b 	call	0x171a	; 0x171a <xTaskIncrementTick>
    19a8:	81 11       	cpse	r24, r1
    19aa:	d0 93 22 61 	sts	0x6122, r29	; 0x806122 <xYieldPending>
    19ae:	c1 50       	subi	r28, 0x01	; 1
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <xTaskResumeAll+0xd6>
    19b2:	10 92 23 61 	sts	0x6123, r1	; 0x806123 <uxPendedTicks>
    19b6:	80 91 22 61 	lds	r24, 0x6122	; 0x806122 <xYieldPending>
    19ba:	81 11       	cpse	r24, r1
    19bc:	10 c0       	rjmp	.+32     	; 0x19de <xTaskResumeAll+0x110>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	08 95       	ret
    19d0:	6c e6       	ldi	r22, 0x6C	; 108
    19d2:	78 e0       	ldi	r23, 0x08	; 8
    19d4:	84 e2       	ldi	r24, 0x24	; 36
    19d6:	90 e2       	ldi	r25, 0x20	; 32
    19d8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    19dc:	82 cf       	rjmp	.-252    	; 0x18e2 <xTaskResumeAll+0x14>
    19de:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	ed cf       	rjmp	.-38     	; 0x19c0 <xTaskResumeAll+0xf2>
    19e6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <prvResetNextTaskUnblockTime.part.0>
    19ea:	d7 cf       	rjmp	.-82     	; 0x199a <xTaskResumeAll+0xcc>

000019ec <vTaskDelay>:
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	ec 01       	movw	r28, r24
    19f2:	89 2b       	or	r24, r25
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <vTaskDelay+0x14>
    19f6:	0e 94 af 04 	call	0x95e	; 0x95e <vPortYield>
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret
    1a00:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1a04:	81 11       	cpse	r24, r1
    1a06:	10 c0       	rjmp	.+32     	; 0x1a28 <vTaskDelay+0x3c>
    1a08:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1a0c:	8f 5f       	subi	r24, 0xFF	; 255
    1a0e:	80 93 1b 61 	sts	0x611B, r24	; 0x80611b <uxSchedulerSuspended>
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	ce 01       	movw	r24, r28
    1a16:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <prvAddCurrentTaskToDelayedList>
    1a1a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xTaskResumeAll>
    1a1e:	88 23       	and	r24, r24
    1a20:	51 f3       	breq	.-44     	; 0x19f6 <vTaskDelay+0xa>
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret
    1a28:	60 e2       	ldi	r22, 0x20	; 32
    1a2a:	75 e0       	ldi	r23, 0x05	; 5
    1a2c:	84 e2       	ldi	r24, 0x24	; 36
    1a2e:	90 e2       	ldi	r25, 0x20	; 32
    1a30:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1a34:	e9 cf       	rjmp	.-46     	; 0x1a08 <vTaskDelay+0x1c>

00001a36 <vTaskSwitchContext>:
    1a36:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <vTaskSwitchContext+0xc>
    1a3e:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <vTaskSwitchContext.part.5>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xYieldPending>
    1a48:	08 95       	ret

00001a4a <vTaskPlaceOnEventList>:
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	ec 01       	movw	r28, r24
    1a54:	8b 01       	movw	r16, r22
    1a56:	89 2b       	or	r24, r25
    1a58:	89 f0       	breq	.+34     	; 0x1a7c <vTaskPlaceOnEventList+0x32>
    1a5a:	60 91 7f 61 	lds	r22, 0x617F	; 0x80617f <pxCurrentTCB>
    1a5e:	70 91 80 61 	lds	r23, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1a62:	64 5f       	subi	r22, 0xF4	; 244
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	ce 01       	movw	r24, r28
    1a68:	0e 94 ad 03 	call	0x75a	; 0x75a <vListInsert>
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	c8 01       	movw	r24, r16
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <prvAddCurrentTaskToDelayedList>
    1a7c:	63 ea       	ldi	r22, 0xA3	; 163
    1a7e:	7b e0       	ldi	r23, 0x0B	; 11
    1a80:	84 e2       	ldi	r24, 0x24	; 36
    1a82:	90 e2       	ldi	r25, 0x20	; 32
    1a84:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1a88:	e8 cf       	rjmp	.-48     	; 0x1a5a <vTaskPlaceOnEventList+0x10>

00001a8a <xTaskRemoveFromEventList>:
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	dc 01       	movw	r26, r24
    1a94:	15 96       	adiw	r26, 0x05	; 5
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	16 97       	sbiw	r26, 0x06	; 6
    1a9c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a9e:	d7 81       	ldd	r29, Z+7	; 0x07
    1aa0:	20 97       	sbiw	r28, 0x00	; 0
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <xTaskRemoveFromEventList+0x1c>
    1aa4:	42 c0       	rjmp	.+132    	; 0x1b2a <xTaskRemoveFromEventList+0xa0>
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	04 5f       	subi	r16, 0xF4	; 244
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	c8 01       	movw	r24, r16
    1aae:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1ab2:	80 91 1b 61 	lds	r24, 0x611B	; 0x80611b <uxSchedulerSuspended>
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	29 c0       	rjmp	.+82     	; 0x1b0c <xTaskRemoveFromEventList+0x82>
    1aba:	0a 50       	subi	r16, 0x0A	; 10
    1abc:	11 09       	sbc	r17, r1
    1abe:	c8 01       	movw	r24, r16
    1ac0:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
    1ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac6:	90 91 25 61 	lds	r25, 0x6125	; 0x806125 <uxTopReadyPriority>
    1aca:	98 17       	cp	r25, r24
    1acc:	28 f1       	brcs	.+74     	; 0x1b18 <xTaskRemoveFromEventList+0x8e>
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	22 0f       	add	r18, r18
    1ad4:	33 1f       	adc	r19, r19
    1ad6:	22 0f       	add	r18, r18
    1ad8:	33 1f       	adc	r19, r19
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	82 0f       	add	r24, r18
    1ae0:	93 1f       	adc	r25, r19
    1ae2:	b8 01       	movw	r22, r16
    1ae4:	85 5a       	subi	r24, 0xA5	; 165
    1ae6:	9e 49       	sbci	r25, 0x9E	; 158
    1ae8:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1aec:	e0 91 7f 61 	lds	r30, 0x617F	; 0x80617f <pxCurrentTCB>
    1af0:	f0 91 80 61 	lds	r31, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1af4:	9e 89       	ldd	r25, Y+22	; 0x16
    1af6:	86 89       	ldd	r24, Z+22	; 0x16
    1af8:	89 17       	cp	r24, r25
    1afa:	88 f4       	brcc	.+34     	; 0x1b1e <xTaskRemoveFromEventList+0x94>
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xYieldPending>
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret
    1b0c:	b8 01       	movw	r22, r16
    1b0e:	8c e3       	ldi	r24, 0x3C	; 60
    1b10:	91 e6       	ldi	r25, 0x61	; 97
    1b12:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
    1b16:	ea cf       	rjmp	.-44     	; 0x1aec <xTaskRemoveFromEventList+0x62>
    1b18:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <uxTopReadyPriority>
    1b1c:	d8 cf       	rjmp	.-80     	; 0x1ace <xTaskRemoveFromEventList+0x44>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret
    1b2a:	6e ef       	ldi	r22, 0xFE	; 254
    1b2c:	7b e0       	ldi	r23, 0x0B	; 11
    1b2e:	84 e2       	ldi	r24, 0x24	; 36
    1b30:	90 e2       	ldi	r25, 0x20	; 32
    1b32:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1b36:	b7 cf       	rjmp	.-146    	; 0x1aa6 <xTaskRemoveFromEventList+0x1c>

00001b38 <vTaskInternalSetTimeOutState>:
    1b38:	20 91 21 61 	lds	r18, 0x6121	; 0x806121 <xNumOfOverflows>
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 83       	st	Z, r18
    1b40:	20 91 26 61 	lds	r18, 0x6126	; 0x806126 <xTickCount>
    1b44:	30 91 27 61 	lds	r19, 0x6127	; 0x806127 <xTickCount+0x1>
    1b48:	21 83       	std	Z+1, r18	; 0x01
    1b4a:	32 83       	std	Z+2, r19	; 0x02
    1b4c:	08 95       	ret

00001b4e <xTaskCheckForTimeOut>:
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	ec 01       	movw	r28, r24
    1b58:	8b 01       	movw	r16, r22
    1b5a:	89 2b       	or	r24, r25
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <xTaskCheckForTimeOut+0x12>
    1b5e:	40 c0       	rjmp	.+128    	; 0x1be0 <xTaskCheckForTimeOut+0x92>
    1b60:	01 15       	cp	r16, r1
    1b62:	11 05       	cpc	r17, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <xTaskCheckForTimeOut+0x1a>
    1b66:	43 c0       	rjmp	.+134    	; 0x1bee <xTaskCheckForTimeOut+0xa0>
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	0f 92       	push	r0
    1b6e:	80 91 26 61 	lds	r24, 0x6126	; 0x806126 <xTickCount>
    1b72:	90 91 27 61 	lds	r25, 0x6127	; 0x806127 <xTickCount+0x1>
    1b76:	f8 01       	movw	r30, r16
    1b78:	20 81       	ld	r18, Z
    1b7a:	31 81       	ldd	r19, Z+1	; 0x01
    1b7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1b7e:	ff ef       	ldi	r31, 0xFF	; 255
    1b80:	3f 07       	cpc	r19, r31
    1b82:	61 f1       	breq	.+88     	; 0x1bdc <xTaskCheckForTimeOut+0x8e>
    1b84:	49 81       	ldd	r20, Y+1	; 0x01
    1b86:	5a 81       	ldd	r21, Y+2	; 0x02
    1b88:	60 91 21 61 	lds	r22, 0x6121	; 0x806121 <xNumOfOverflows>
    1b8c:	78 81       	ld	r23, Y
    1b8e:	76 17       	cp	r23, r22
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <xTaskCheckForTimeOut+0x4a>
    1b92:	84 17       	cp	r24, r20
    1b94:	95 07       	cpc	r25, r21
    1b96:	80 f4       	brcc	.+32     	; 0x1bb8 <xTaskCheckForTimeOut+0x6a>
    1b98:	84 1b       	sub	r24, r20
    1b9a:	95 0b       	sbc	r25, r21
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	68 f0       	brcs	.+26     	; 0x1bbc <xTaskCheckForTimeOut+0x6e>
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	10 82       	st	Z, r1
    1ba6:	11 82       	std	Z+1, r1	; 0x01
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	08 95       	ret
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	f7 cf       	rjmp	.-18     	; 0x1baa <xTaskCheckForTimeOut+0x5c>
    1bbc:	28 1b       	sub	r18, r24
    1bbe:	39 0b       	sbc	r19, r25
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	20 83       	st	Z, r18
    1bc4:	31 83       	std	Z+1, r19	; 0x01
    1bc6:	80 91 21 61 	lds	r24, 0x6121	; 0x806121 <xNumOfOverflows>
    1bca:	88 83       	st	Y, r24
    1bcc:	80 91 26 61 	lds	r24, 0x6126	; 0x806126 <xTickCount>
    1bd0:	90 91 27 61 	lds	r25, 0x6127	; 0x806127 <xTickCount+0x1>
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	e7 cf       	rjmp	.-50     	; 0x1baa <xTaskCheckForTimeOut+0x5c>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	e5 cf       	rjmp	.-54     	; 0x1baa <xTaskCheckForTimeOut+0x5c>
    1be0:	69 e6       	ldi	r22, 0x69	; 105
    1be2:	7c e0       	ldi	r23, 0x0C	; 12
    1be4:	84 e2       	ldi	r24, 0x24	; 36
    1be6:	90 e2       	ldi	r25, 0x20	; 32
    1be8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1bec:	b9 cf       	rjmp	.-142    	; 0x1b60 <xTaskCheckForTimeOut+0x12>
    1bee:	6a e6       	ldi	r22, 0x6A	; 106
    1bf0:	7c e0       	ldi	r23, 0x0C	; 12
    1bf2:	84 e2       	ldi	r24, 0x24	; 36
    1bf4:	90 e2       	ldi	r25, 0x20	; 32
    1bf6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1bfa:	b6 cf       	rjmp	.-148    	; 0x1b68 <xTaskCheckForTimeOut+0x1a>

00001bfc <vTaskMissedYield>:
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	80 93 22 61 	sts	0x6122, r24	; 0x806122 <xYieldPending>
    1c02:	08 95       	ret

00001c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
	TCB_t * const pxTCB = pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	c9 f0       	breq	.+50     	; 0x1c42 <xTaskPriorityDisinherit+0x3e>
    1c10:	ec 01       	movw	r28, r24
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    1c12:	80 91 7f 61 	lds	r24, 0x617F	; 0x80617f <pxCurrentTCB>
    1c16:	90 91 80 61 	lds	r25, 0x6180	; 0x806180 <pxCurrentTCB+0x1>
    1c1a:	c8 17       	cp	r28, r24
    1c1c:	d9 07       	cpc	r29, r25
    1c1e:	31 f0       	breq	.+12     	; 0x1c2c <xTaskPriorityDisinherit+0x28>
    1c20:	6e e7       	ldi	r22, 0x7E	; 126
    1c22:	7f e0       	ldi	r23, 0x0F	; 15
    1c24:	84 e2       	ldi	r24, 0x24	; 36
    1c26:	90 e2       	ldi	r25, 0x20	; 32
    1c28:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
			configASSERT( pxTCB->uxMutexesHeld );
    1c2c:	8c a1       	ldd	r24, Y+36	; 0x24
    1c2e:	88 23       	and	r24, r24
    1c30:	c1 f1       	breq	.+112    	; 0x1ca2 <xTaskPriorityDisinherit+0x9e>
			( pxTCB->uxMutexesHeld )--;
    1c32:	81 50       	subi	r24, 0x01	; 1
    1c34:	8c a3       	std	Y+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1c36:	2e 89       	ldd	r18, Y+22	; 0x16
    1c38:	9b a1       	ldd	r25, Y+35	; 0x23
    1c3a:	29 17       	cp	r18, r25
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <xTaskPriorityDisinherit+0x3e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1c3e:	88 23       	and	r24, r24
    1c40:	31 f0       	breq	.+12     	; 0x1c4e <xTaskPriorityDisinherit+0x4a>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    1c42:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	08 95       	ret
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1c4e:	8e 01       	movw	r16, r28
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	c8 01       	movw	r24, r16
    1c56:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1c5a:	2b a1       	ldd	r18, Y+35	; 0x23
    1c5c:	2e 8b       	std	Y+22, r18	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c5e:	82 2f       	mov	r24, r18
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	44 e0       	ldi	r20, 0x04	; 4
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	48 1b       	sub	r20, r24
    1c68:	59 0b       	sbc	r21, r25
    1c6a:	4c 87       	std	Y+12, r20	; 0x0c
    1c6c:	5d 87       	std	Y+13, r21	; 0x0d
					prvAddTaskToReadyList( pxTCB );
    1c6e:	30 91 25 61 	lds	r19, 0x6125	; 0x806125 <uxTopReadyPriority>
    1c72:	32 17       	cp	r19, r18
    1c74:	10 f4       	brcc	.+4      	; 0x1c7a <xTaskPriorityDisinherit+0x76>
    1c76:	20 93 25 61 	sts	0x6125, r18	; 0x806125 <uxTopReadyPriority>
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	22 0f       	add	r18, r18
    1c82:	33 1f       	adc	r19, r19
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	82 0f       	add	r24, r18
    1c8a:	93 1f       	adc	r25, r19
    1c8c:	b8 01       	movw	r22, r16
    1c8e:	85 5a       	subi	r24, 0xA5	; 165
    1c90:	9e 49       	sbci	r25, 0x9E	; 158
    1c92:	0e 94 8c 03 	call	0x718	; 0x718 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
    1ca2:	6f e7       	ldi	r22, 0x7F	; 127
    1ca4:	7f e0       	ldi	r23, 0x0F	; 15
    1ca6:	84 e2       	ldi	r24, 0x24	; 36
    1ca8:	90 e2       	ldi	r25, 0x20	; 32
    1caa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vAssertCalled>
    1cae:	8c a1       	ldd	r24, Y+36	; 0x24
    1cb0:	c0 cf       	rjmp	.-128    	; 0x1c32 <xTaskPriorityDisinherit+0x2e>

00001cb2 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    1cb2:	08 95       	ret

00001cb4 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    1cb4:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    1cb6:	87 e6       	ldi	r24, 0x67	; 103
    1cb8:	90 e2       	ldi	r25, 0x20	; 32
    1cba:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
	CFG_ERR_LED();
    1cbe:	80 e8       	ldi	r24, 0x80	; 128
    1cc0:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    1cc4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc8:	2f ef       	ldi	r18, 0xFF	; 255
    1cca:	33 ec       	ldi	r19, 0xC3	; 195
    1ccc:	99 e0       	ldi	r25, 0x09	; 9
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	30 40       	sbci	r19, 0x00	; 0
    1cd2:	90 40       	sbci	r25, 0x00	; 0
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <vApplicationMallocFailedHook+0x1a>
    1cd6:	00 c0       	rjmp	.+0      	; 0x1cd8 <vApplicationMallocFailedHook+0x24>
    1cd8:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1cda:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1cde:	2f ef       	ldi	r18, 0xFF	; 255
    1ce0:	33 ec       	ldi	r19, 0xC3	; 195
    1ce2:	99 e0       	ldi	r25, 0x09	; 9
    1ce4:	21 50       	subi	r18, 0x01	; 1
    1ce6:	30 40       	sbci	r19, 0x00	; 0
    1ce8:	90 40       	sbci	r25, 0x00	; 0
    1cea:	e1 f7       	brne	.-8      	; 0x1ce4 <vApplicationMallocFailedHook+0x30>
    1cec:	00 c0       	rjmp	.+0      	; 0x1cee <vApplicationMallocFailedHook+0x3a>
    1cee:	00 00       	nop
    1cf0:	e9 cf       	rjmp	.-46     	; 0x1cc4 <vApplicationMallocFailedHook+0x10>

00001cf2 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	c0 58       	subi	r28, 0x80	; 128
    1cfc:	d1 09       	sbc	r29, r1
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    1d02:	f8 94       	cli
	CFG_ERR_LED();
    1d04:	80 e8       	ldi	r24, 0x80	; 128
    1d06:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    1d0a:	7f 93       	push	r23
    1d0c:	6f 93       	push	r22
    1d0e:	29 e8       	ldi	r18, 0x89	; 137
    1d10:	30 e2       	ldi	r19, 0x20	; 32
    1d12:	3f 93       	push	r19
    1d14:	2f 93       	push	r18
    1d16:	1f 92       	push	r1
    1d18:	8f 93       	push	r24
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	0f 5f       	subi	r16, 0xFF	; 255
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	1f 93       	push	r17
    1d22:	0f 93       	push	r16
    1d24:	0e 94 db 14 	call	0x29b6	; 0x29b6 <snprintf>
	DbgPrint(Dbg);
    1d28:	c8 01       	movw	r24, r16
    1d2a:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1d32:	80 e8       	ldi	r24, 0x80	; 128
    1d34:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	93 ed       	ldi	r25, 0xD3	; 211
    1d3c:	20 e3       	ldi	r18, 0x30	; 48
    1d3e:	31 50       	subi	r19, 0x01	; 1
    1d40:	90 40       	sbci	r25, 0x00	; 0
    1d42:	20 40       	sbci	r18, 0x00	; 0
    1d44:	e1 f7       	brne	.-8      	; 0x1d3e <vApplicationStackOverflowHook+0x4c>
    1d46:	00 c0       	rjmp	.+0      	; 0x1d48 <vApplicationStackOverflowHook+0x56>
    1d48:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    1d4a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	93 ed       	ldi	r25, 0xD3	; 211
    1d52:	20 e3       	ldi	r18, 0x30	; 48
    1d54:	31 50       	subi	r19, 0x01	; 1
    1d56:	90 40       	sbci	r25, 0x00	; 0
    1d58:	20 40       	sbci	r18, 0x00	; 0
    1d5a:	e1 f7       	brne	.-8      	; 0x1d54 <vApplicationStackOverflowHook+0x62>
    1d5c:	00 c0       	rjmp	.+0      	; 0x1d5e <vApplicationStackOverflowHook+0x6c>
    1d5e:	00 00       	nop
    1d60:	e9 cf       	rjmp	.-46     	; 0x1d34 <vApplicationStackOverflowHook+0x42>

00001d62 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	c0 58       	subi	r28, 0x80	; 128
    1d6c:	d1 09       	sbc	r29, r1
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    1d72:	f8 94       	cli
	CFG_ERR_LED();
    1d74:	20 e8       	ldi	r18, 0x80	; 128
    1d76:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    1d7a:	7f 93       	push	r23
    1d7c:	6f 93       	push	r22
    1d7e:	9f 93       	push	r25
    1d80:	8f 93       	push	r24
    1d82:	85 ea       	ldi	r24, 0xA5	; 165
    1d84:	90 e2       	ldi	r25, 0x20	; 32
    1d86:	9f 93       	push	r25
    1d88:	8f 93       	push	r24
    1d8a:	1f 92       	push	r1
    1d8c:	2f 93       	push	r18
    1d8e:	8e 01       	movw	r16, r28
    1d90:	0f 5f       	subi	r16, 0xFF	; 255
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	1f 93       	push	r17
    1d96:	0f 93       	push	r16
    1d98:	0e 94 db 14 	call	0x29b6	; 0x29b6 <snprintf>
	DbgPrint(Dbg);
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	0e 94 ac 01 	call	0x358	; 0x358 <DbgPrint>
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    1da6:	80 e8       	ldi	r24, 0x80	; 128
    1da8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	93 ec       	ldi	r25, 0xC3	; 195
    1db0:	29 e0       	ldi	r18, 0x09	; 9
    1db2:	31 50       	subi	r19, 0x01	; 1
    1db4:	90 40       	sbci	r25, 0x00	; 0
    1db6:	20 40       	sbci	r18, 0x00	; 0
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <vAssertCalled+0x50>
    1dba:	00 c0       	rjmp	.+0      	; 0x1dbc <vAssertCalled+0x5a>
    1dbc:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    1dbe:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	93 ed       	ldi	r25, 0xD3	; 211
    1dc6:	20 e3       	ldi	r18, 0x30	; 48
    1dc8:	31 50       	subi	r19, 0x01	; 1
    1dca:	90 40       	sbci	r25, 0x00	; 0
    1dcc:	20 40       	sbci	r18, 0x00	; 0
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <vAssertCalled+0x66>
    1dd0:	00 c0       	rjmp	.+0      	; 0x1dd2 <vAssertCalled+0x70>
    1dd2:	00 00       	nop
    1dd4:	e9 cf       	rjmp	.-46     	; 0x1da8 <vAssertCalled+0x46>

00001dd6 <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    1dd6:	0e 94 ca 01 	call	0x394	; 0x394 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    1dda:	0e 94 96 02 	call	0x52c	; 0x52c <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    1dde:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <DriverPowerInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    1de8:	87 e0       	ldi	r24, 0x07	; 7
    1dea:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1dee:	78 94       	sei
    1df0:	2f ef       	ldi	r18, 0xFF	; 255
    1df2:	89 ef       	ldi	r24, 0xF9	; 249
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	21 50       	subi	r18, 0x01	; 1
    1df8:	80 40       	sbci	r24, 0x00	; 0
    1dfa:	90 40       	sbci	r25, 0x00	; 0
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <main+0x20>
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <main+0x2a>
    1e00:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitTransferTasks();
    1e02:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <InitTransferTasks>

	vTaskStartScheduler();	//Start scheduler loop
    1e06:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <vTaskStartScheduler>

	return 0;
}
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	08 95       	ret

00001e10 <WorkerSendTask>:

void WorkerSendTask(void *pvParameters)
{	
	while (1)
	{	
		Data=0x10101010;
    1e10:	80 e1       	ldi	r24, 0x10	; 16
    1e12:	88 2e       	mov	r8, r24
    1e14:	98 2c       	mov	r9, r8
    1e16:	54 01       	movw	r10, r8
		xQueueOverwrite(TransferTaskQueue, &Data); // Data wegschrijven naar de queue
		Data=0x20202020;
    1e18:	90 e2       	ldi	r25, 0x20	; 32
    1e1a:	c9 2e       	mov	r12, r25
    1e1c:	dc 2c       	mov	r13, r12
    1e1e:	76 01       	movw	r14, r12

void WorkerSendTask(void *pvParameters)
{	
	while (1)
	{	
		Data=0x10101010;
    1e20:	80 92 85 61 	sts	0x6185, r8	; 0x806185 <Data>
    1e24:	90 92 86 61 	sts	0x6186, r9	; 0x806186 <Data+0x1>
    1e28:	a0 92 87 61 	sts	0x6187, r10	; 0x806187 <Data+0x2>
    1e2c:	b0 92 88 61 	sts	0x6188, r11	; 0x806188 <Data+0x3>
		xQueueOverwrite(TransferTaskQueue, &Data); // Data wegschrijven naar de queue
    1e30:	22 e0       	ldi	r18, 0x02	; 2
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	65 e8       	ldi	r22, 0x85	; 133
    1e38:	71 e6       	ldi	r23, 0x61	; 97
    1e3a:	80 91 91 61 	lds	r24, 0x6191	; 0x806191 <TransferTaskQueue>
    1e3e:	90 91 92 61 	lds	r25, 0x6192	; 0x806192 <TransferTaskQueue+0x1>
    1e42:	0e 94 31 07 	call	0xe62	; 0xe62 <xQueueGenericSend>
		Data=0x20202020;
    1e46:	c0 92 85 61 	sts	0x6185, r12	; 0x806185 <Data>
    1e4a:	d0 92 86 61 	sts	0x6186, r13	; 0x806186 <Data+0x1>
    1e4e:	e0 92 87 61 	sts	0x6187, r14	; 0x806187 <Data+0x2>
    1e52:	f0 92 88 61 	sts	0x6188, r15	; 0x806188 <Data+0x3>
		xQueueOverwrite(TransferTaskQueue, &Data); // Data wegschrijven naar de queue
    1e56:	22 e0       	ldi	r18, 0x02	; 2
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	65 e8       	ldi	r22, 0x85	; 133
    1e5e:	71 e6       	ldi	r23, 0x61	; 97
    1e60:	80 91 91 61 	lds	r24, 0x6191	; 0x806191 <TransferTaskQueue>
    1e64:	90 91 92 61 	lds	r25, 0x6192	; 0x806192 <TransferTaskQueue+0x1>
    1e68:	0e 94 31 07 	call	0xe62	; 0xe62 <xQueueGenericSend>
    1e6c:	d9 cf       	rjmp	.-78     	; 0x1e20 <WorkerSendTask+0x10>

00001e6e <WorkerReceiveTask>:
{
	while(1)
	{
		Startwaarde = portGET_RUN_TIME_COUNTER_VALUE();
		xQueuePeek(TransferTaskQueue, &Data2, portMAX_DELAY); // Queuewaarde in Data2 steken
		if (Data2!=0x10101010 && Data2!=0x20202020) printf ("Invalid Data value:%lx \r\n",Data);
    1e6e:	05 ec       	ldi	r16, 0xC5	; 197
    1e70:	10 e2       	ldi	r17, 0x20	; 32
		printf("Tijd nodig: %d\r", portGET_RUN_TIME_COUNTER_VALUE() - Startwaarde); // Tijd nodig voor dit gedeelte afprinten
    1e72:	cf ed       	ldi	r28, 0xDF	; 223
    1e74:	d0 e2       	ldi	r29, 0x20	; 32

void WorkerReceiveTask(void *pvParameters)
{
	while(1)
	{
		Startwaarde = portGET_RUN_TIME_COUNTER_VALUE();
    1e76:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1e7a:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1e7e:	80 91 89 61 	lds	r24, 0x6189	; 0x806189 <StatsTimer>
    1e82:	90 91 8a 61 	lds	r25, 0x618A	; 0x80618a <StatsTimer+0x1>
    1e86:	a0 91 8b 61 	lds	r26, 0x618B	; 0x80618b <StatsTimer+0x2>
    1e8a:	b0 91 8c 61 	lds	r27, 0x618C	; 0x80618c <StatsTimer+0x3>
    1e8e:	82 0f       	add	r24, r18
    1e90:	93 1f       	adc	r25, r19
    1e92:	a1 1d       	adc	r26, r1
    1e94:	b1 1d       	adc	r27, r1
    1e96:	80 93 8d 61 	sts	0x618D, r24	; 0x80618d <Startwaarde>
    1e9a:	90 93 8e 61 	sts	0x618E, r25	; 0x80618e <Startwaarde+0x1>
    1e9e:	a0 93 8f 61 	sts	0x618F, r26	; 0x80618f <Startwaarde+0x2>
    1ea2:	b0 93 90 61 	sts	0x6190, r27	; 0x806190 <Startwaarde+0x3>
		xQueuePeek(TransferTaskQueue, &Data2, portMAX_DELAY); // Queuewaarde in Data2 steken
    1ea6:	4f ef       	ldi	r20, 0xFF	; 255
    1ea8:	5f ef       	ldi	r21, 0xFF	; 255
    1eaa:	61 e8       	ldi	r22, 0x81	; 129
    1eac:	71 e6       	ldi	r23, 0x61	; 97
    1eae:	80 91 91 61 	lds	r24, 0x6191	; 0x806191 <TransferTaskQueue>
    1eb2:	90 91 92 61 	lds	r25, 0x6192	; 0x806192 <TransferTaskQueue+0x1>
    1eb6:	0e 94 00 08 	call	0x1000	; 0x1000 <xQueuePeek>
		if (Data2!=0x10101010 && Data2!=0x20202020) printf ("Invalid Data value:%lx \r\n",Data);
    1eba:	80 91 81 61 	lds	r24, 0x6181	; 0x806181 <Data2>
    1ebe:	90 91 82 61 	lds	r25, 0x6182	; 0x806182 <Data2+0x1>
    1ec2:	a0 91 83 61 	lds	r26, 0x6183	; 0x806183 <Data2+0x2>
    1ec6:	b0 91 84 61 	lds	r27, 0x6184	; 0x806184 <Data2+0x3>
    1eca:	80 31       	cpi	r24, 0x10	; 16
    1ecc:	20 e1       	ldi	r18, 0x10	; 16
    1ece:	92 07       	cpc	r25, r18
    1ed0:	a2 07       	cpc	r26, r18
    1ed2:	b2 07       	cpc	r27, r18
    1ed4:	d9 f0       	breq	.+54     	; 0x1f0c <WorkerReceiveTask+0x9e>
    1ed6:	80 32       	cpi	r24, 0x20	; 32
    1ed8:	90 42       	sbci	r25, 0x20	; 32
    1eda:	a0 42       	sbci	r26, 0x20	; 32
    1edc:	b0 42       	sbci	r27, 0x20	; 32
    1ede:	b1 f0       	breq	.+44     	; 0x1f0c <WorkerReceiveTask+0x9e>
    1ee0:	80 91 88 61 	lds	r24, 0x6188	; 0x806188 <Data+0x3>
    1ee4:	8f 93       	push	r24
    1ee6:	80 91 87 61 	lds	r24, 0x6187	; 0x806187 <Data+0x2>
    1eea:	8f 93       	push	r24
    1eec:	80 91 86 61 	lds	r24, 0x6186	; 0x806186 <Data+0x1>
    1ef0:	8f 93       	push	r24
    1ef2:	80 91 85 61 	lds	r24, 0x6185	; 0x806185 <Data>
    1ef6:	8f 93       	push	r24
    1ef8:	1f 93       	push	r17
    1efa:	0f 93       	push	r16
    1efc:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
		printf("Tijd nodig: %d\r", portGET_RUN_TIME_COUNTER_VALUE() - Startwaarde); // Tijd nodig voor dit gedeelte afprinten
    1f0c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1f10:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1f14:	40 91 89 61 	lds	r20, 0x6189	; 0x806189 <StatsTimer>
    1f18:	50 91 8a 61 	lds	r21, 0x618A	; 0x80618a <StatsTimer+0x1>
    1f1c:	60 91 8b 61 	lds	r22, 0x618B	; 0x80618b <StatsTimer+0x2>
    1f20:	70 91 8c 61 	lds	r23, 0x618C	; 0x80618c <StatsTimer+0x3>
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	c0 90 8d 61 	lds	r12, 0x618D	; 0x80618d <Startwaarde>
    1f2c:	d0 90 8e 61 	lds	r13, 0x618E	; 0x80618e <Startwaarde+0x1>
    1f30:	e0 90 8f 61 	lds	r14, 0x618F	; 0x80618f <Startwaarde+0x2>
    1f34:	f0 90 90 61 	lds	r15, 0x6190	; 0x806190 <Startwaarde+0x3>
    1f38:	8c 19       	sub	r24, r12
    1f3a:	9d 09       	sbc	r25, r13
    1f3c:	ae 09       	sbc	r26, r14
    1f3e:	bf 09       	sbc	r27, r15
    1f40:	84 0f       	add	r24, r20
    1f42:	95 1f       	adc	r25, r21
    1f44:	a6 1f       	adc	r26, r22
    1f46:	b7 1f       	adc	r27, r23
    1f48:	bf 93       	push	r27
    1f4a:	af 93       	push	r26
    1f4c:	9f 93       	push	r25
    1f4e:	8f 93       	push	r24
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		vTaskDelay(1);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <vTaskDelay>
	}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	84 cf       	rjmp	.-248    	; 0x1e76 <WorkerReceiveTask+0x8>

00001f6e <InitTransferTasks>:
void WorkerSendTask(void *pvParameters);
void WorkerReceiveTask(void *pvParameters);

//Function definitions
void InitTransferTasks()
{
    1f6e:	ef 92       	push	r14
    1f70:	ff 92       	push	r15
    1f72:	0f 93       	push	r16
	xTaskCreate( WorkerSendTask, "sendtask", 256, NULL, tskIDLE_PRIORITY+1, NULL );
    1f74:	e1 2c       	mov	r14, r1
    1f76:	f1 2c       	mov	r15, r1
    1f78:	01 e0       	ldi	r16, 0x01	; 1
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	51 e0       	ldi	r21, 0x01	; 1
    1f82:	6f ee       	ldi	r22, 0xEF	; 239
    1f84:	70 e2       	ldi	r23, 0x20	; 32
    1f86:	88 e0       	ldi	r24, 0x08	; 8
    1f88:	9f e0       	ldi	r25, 0x0F	; 15
    1f8a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <xTaskCreate>
	xTaskCreate( WorkerReceiveTask, "receivetask", 256, NULL, tskIDLE_PRIORITY+2, NULL );
    1f8e:	02 e0       	ldi	r16, 0x02	; 2
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	51 e0       	ldi	r21, 0x01	; 1
    1f98:	68 ef       	ldi	r22, 0xF8	; 248
    1f9a:	70 e2       	ldi	r23, 0x20	; 32
    1f9c:	87 e3       	ldi	r24, 0x37	; 55
    1f9e:	9f e0       	ldi	r25, 0x0F	; 15
    1fa0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <xTaskCreate>
	TransferTaskQueue = xQueueCreate(1, sizeof(uint32_t)); // Creer de queue, er moet telkens maar 1 variabele in dus daarom lengte 1
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	64 e0       	ldi	r22, 0x04	; 4
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 ed 06 	call	0xdda	; 0xdda <xQueueGenericCreate>
    1fae:	80 93 91 61 	sts	0x6191, r24	; 0x806191 <TransferTaskQueue>
    1fb2:	90 93 92 61 	sts	0x6192, r25	; 0x806192 <TransferTaskQueue+0x1>
}
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	08 95       	ret

00001fbe <DriverPowerInit>:
    1fbe:	80 e2       	ldi	r24, 0x20	; 32
    1fc0:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    1fc4:	08 95       	ret

00001fc6 <DriverPowerVccAuxSet>:
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <DriverPowerVccAuxSet+0xc>
    1fca:	80 e2       	ldi	r24, 0x20	; 32
    1fcc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1fd0:	08 95       	ret
    1fd2:	80 e2       	ldi	r24, 0x20	; 32
    1fd4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    1fd8:	08 95       	ret

00001fda <vfprintf>:
    1fda:	2f 92       	push	r2
    1fdc:	3f 92       	push	r3
    1fde:	4f 92       	push	r4
    1fe0:	5f 92       	push	r5
    1fe2:	6f 92       	push	r6
    1fe4:	7f 92       	push	r7
    1fe6:	8f 92       	push	r8
    1fe8:	9f 92       	push	r9
    1fea:	af 92       	push	r10
    1fec:	bf 92       	push	r11
    1fee:	cf 92       	push	r12
    1ff0:	df 92       	push	r13
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	60 97       	sbiw	r28, 0x10	; 16
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	7c 01       	movw	r14, r24
    200a:	1b 01       	movw	r2, r22
    200c:	6a 01       	movw	r12, r20
    200e:	fc 01       	movw	r30, r24
    2010:	16 82       	std	Z+6, r1	; 0x06
    2012:	17 82       	std	Z+7, r1	; 0x07
    2014:	83 81       	ldd	r24, Z+3	; 0x03
    2016:	81 ff       	sbrs	r24, 1
    2018:	44 c3       	rjmp	.+1672   	; 0x26a2 <vfprintf+0x6c8>
    201a:	9e 01       	movw	r18, r28
    201c:	2f 5f       	subi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	39 01       	movw	r6, r18
    2022:	f7 01       	movw	r30, r14
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	f1 01       	movw	r30, r2
    2028:	93 fd       	sbrc	r25, 3
    202a:	85 91       	lpm	r24, Z+
    202c:	93 ff       	sbrs	r25, 3
    202e:	81 91       	ld	r24, Z+
    2030:	1f 01       	movw	r2, r30
    2032:	88 23       	and	r24, r24
    2034:	09 f4       	brne	.+2      	; 0x2038 <vfprintf+0x5e>
    2036:	31 c3       	rjmp	.+1634   	; 0x269a <vfprintf+0x6c0>
    2038:	85 32       	cpi	r24, 0x25	; 37
    203a:	39 f4       	brne	.+14     	; 0x204a <vfprintf+0x70>
    203c:	93 fd       	sbrc	r25, 3
    203e:	85 91       	lpm	r24, Z+
    2040:	93 ff       	sbrs	r25, 3
    2042:	81 91       	ld	r24, Z+
    2044:	1f 01       	movw	r2, r30
    2046:	85 32       	cpi	r24, 0x25	; 37
    2048:	39 f4       	brne	.+14     	; 0x2058 <vfprintf+0x7e>
    204a:	b7 01       	movw	r22, r14
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2052:	56 01       	movw	r10, r12
    2054:	65 01       	movw	r12, r10
    2056:	e5 cf       	rjmp	.-54     	; 0x2022 <vfprintf+0x48>
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	51 2c       	mov	r5, r1
    205c:	91 2c       	mov	r9, r1
    205e:	ff e1       	ldi	r31, 0x1F	; 31
    2060:	f9 15       	cp	r31, r9
    2062:	d8 f0       	brcs	.+54     	; 0x209a <vfprintf+0xc0>
    2064:	8b 32       	cpi	r24, 0x2B	; 43
    2066:	79 f0       	breq	.+30     	; 0x2086 <vfprintf+0xac>
    2068:	38 f4       	brcc	.+14     	; 0x2078 <vfprintf+0x9e>
    206a:	80 32       	cpi	r24, 0x20	; 32
    206c:	79 f0       	breq	.+30     	; 0x208c <vfprintf+0xb2>
    206e:	83 32       	cpi	r24, 0x23	; 35
    2070:	a1 f4       	brne	.+40     	; 0x209a <vfprintf+0xc0>
    2072:	f9 2d       	mov	r31, r9
    2074:	f0 61       	ori	r31, 0x10	; 16
    2076:	2e c0       	rjmp	.+92     	; 0x20d4 <vfprintf+0xfa>
    2078:	8d 32       	cpi	r24, 0x2D	; 45
    207a:	61 f0       	breq	.+24     	; 0x2094 <vfprintf+0xba>
    207c:	80 33       	cpi	r24, 0x30	; 48
    207e:	69 f4       	brne	.+26     	; 0x209a <vfprintf+0xc0>
    2080:	29 2d       	mov	r18, r9
    2082:	21 60       	ori	r18, 0x01	; 1
    2084:	2d c0       	rjmp	.+90     	; 0x20e0 <vfprintf+0x106>
    2086:	39 2d       	mov	r19, r9
    2088:	32 60       	ori	r19, 0x02	; 2
    208a:	93 2e       	mov	r9, r19
    208c:	89 2d       	mov	r24, r9
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	98 2e       	mov	r9, r24
    2092:	2a c0       	rjmp	.+84     	; 0x20e8 <vfprintf+0x10e>
    2094:	e9 2d       	mov	r30, r9
    2096:	e8 60       	ori	r30, 0x08	; 8
    2098:	15 c0       	rjmp	.+42     	; 0x20c4 <vfprintf+0xea>
    209a:	97 fc       	sbrc	r9, 7
    209c:	2d c0       	rjmp	.+90     	; 0x20f8 <vfprintf+0x11e>
    209e:	20 ed       	ldi	r18, 0xD0	; 208
    20a0:	28 0f       	add	r18, r24
    20a2:	2a 30       	cpi	r18, 0x0A	; 10
    20a4:	88 f4       	brcc	.+34     	; 0x20c8 <vfprintf+0xee>
    20a6:	96 fe       	sbrs	r9, 6
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <vfprintf+0xdc>
    20aa:	3a e0       	ldi	r19, 0x0A	; 10
    20ac:	13 9f       	mul	r17, r19
    20ae:	20 0d       	add	r18, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	12 2f       	mov	r17, r18
    20b4:	19 c0       	rjmp	.+50     	; 0x20e8 <vfprintf+0x10e>
    20b6:	8a e0       	ldi	r24, 0x0A	; 10
    20b8:	58 9e       	mul	r5, r24
    20ba:	20 0d       	add	r18, r0
    20bc:	11 24       	eor	r1, r1
    20be:	52 2e       	mov	r5, r18
    20c0:	e9 2d       	mov	r30, r9
    20c2:	e0 62       	ori	r30, 0x20	; 32
    20c4:	9e 2e       	mov	r9, r30
    20c6:	10 c0       	rjmp	.+32     	; 0x20e8 <vfprintf+0x10e>
    20c8:	8e 32       	cpi	r24, 0x2E	; 46
    20ca:	31 f4       	brne	.+12     	; 0x20d8 <vfprintf+0xfe>
    20cc:	96 fc       	sbrc	r9, 6
    20ce:	e5 c2       	rjmp	.+1482   	; 0x269a <vfprintf+0x6c0>
    20d0:	f9 2d       	mov	r31, r9
    20d2:	f0 64       	ori	r31, 0x40	; 64
    20d4:	9f 2e       	mov	r9, r31
    20d6:	08 c0       	rjmp	.+16     	; 0x20e8 <vfprintf+0x10e>
    20d8:	8c 36       	cpi	r24, 0x6C	; 108
    20da:	21 f4       	brne	.+8      	; 0x20e4 <vfprintf+0x10a>
    20dc:	29 2d       	mov	r18, r9
    20de:	20 68       	ori	r18, 0x80	; 128
    20e0:	92 2e       	mov	r9, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <vfprintf+0x10e>
    20e4:	88 36       	cpi	r24, 0x68	; 104
    20e6:	41 f4       	brne	.+16     	; 0x20f8 <vfprintf+0x11e>
    20e8:	f1 01       	movw	r30, r2
    20ea:	93 fd       	sbrc	r25, 3
    20ec:	85 91       	lpm	r24, Z+
    20ee:	93 ff       	sbrs	r25, 3
    20f0:	81 91       	ld	r24, Z+
    20f2:	1f 01       	movw	r2, r30
    20f4:	81 11       	cpse	r24, r1
    20f6:	b3 cf       	rjmp	.-154    	; 0x205e <vfprintf+0x84>
    20f8:	9b eb       	ldi	r25, 0xBB	; 187
    20fa:	98 0f       	add	r25, r24
    20fc:	93 30       	cpi	r25, 0x03	; 3
    20fe:	20 f4       	brcc	.+8      	; 0x2108 <vfprintf+0x12e>
    2100:	99 2d       	mov	r25, r9
    2102:	90 61       	ori	r25, 0x10	; 16
    2104:	80 5e       	subi	r24, 0xE0	; 224
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <vfprintf+0x13c>
    2108:	9b e9       	ldi	r25, 0x9B	; 155
    210a:	98 0f       	add	r25, r24
    210c:	93 30       	cpi	r25, 0x03	; 3
    210e:	08 f0       	brcs	.+2      	; 0x2112 <vfprintf+0x138>
    2110:	66 c1       	rjmp	.+716    	; 0x23de <vfprintf+0x404>
    2112:	99 2d       	mov	r25, r9
    2114:	9f 7e       	andi	r25, 0xEF	; 239
    2116:	96 ff       	sbrs	r25, 6
    2118:	16 e0       	ldi	r17, 0x06	; 6
    211a:	9f 73       	andi	r25, 0x3F	; 63
    211c:	99 2e       	mov	r9, r25
    211e:	85 36       	cpi	r24, 0x65	; 101
    2120:	19 f4       	brne	.+6      	; 0x2128 <vfprintf+0x14e>
    2122:	90 64       	ori	r25, 0x40	; 64
    2124:	99 2e       	mov	r9, r25
    2126:	08 c0       	rjmp	.+16     	; 0x2138 <vfprintf+0x15e>
    2128:	86 36       	cpi	r24, 0x66	; 102
    212a:	21 f4       	brne	.+8      	; 0x2134 <vfprintf+0x15a>
    212c:	39 2f       	mov	r19, r25
    212e:	30 68       	ori	r19, 0x80	; 128
    2130:	93 2e       	mov	r9, r19
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <vfprintf+0x15e>
    2134:	11 11       	cpse	r17, r1
    2136:	11 50       	subi	r17, 0x01	; 1
    2138:	97 fe       	sbrs	r9, 7
    213a:	07 c0       	rjmp	.+14     	; 0x214a <vfprintf+0x170>
    213c:	1c 33       	cpi	r17, 0x3C	; 60
    213e:	50 f4       	brcc	.+20     	; 0x2154 <vfprintf+0x17a>
    2140:	44 24       	eor	r4, r4
    2142:	43 94       	inc	r4
    2144:	41 0e       	add	r4, r17
    2146:	27 e0       	ldi	r18, 0x07	; 7
    2148:	0b c0       	rjmp	.+22     	; 0x2160 <vfprintf+0x186>
    214a:	18 30       	cpi	r17, 0x08	; 8
    214c:	38 f0       	brcs	.+14     	; 0x215c <vfprintf+0x182>
    214e:	27 e0       	ldi	r18, 0x07	; 7
    2150:	17 e0       	ldi	r17, 0x07	; 7
    2152:	05 c0       	rjmp	.+10     	; 0x215e <vfprintf+0x184>
    2154:	27 e0       	ldi	r18, 0x07	; 7
    2156:	9c e3       	ldi	r25, 0x3C	; 60
    2158:	49 2e       	mov	r4, r25
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <vfprintf+0x186>
    215c:	21 2f       	mov	r18, r17
    215e:	41 2c       	mov	r4, r1
    2160:	56 01       	movw	r10, r12
    2162:	84 e0       	ldi	r24, 0x04	; 4
    2164:	a8 0e       	add	r10, r24
    2166:	b1 1c       	adc	r11, r1
    2168:	f6 01       	movw	r30, r12
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	04 2d       	mov	r16, r4
    2174:	a3 01       	movw	r20, r6
    2176:	0e 94 8d 13 	call	0x271a	; 0x271a <__ftoa_engine>
    217a:	6c 01       	movw	r12, r24
    217c:	f9 81       	ldd	r31, Y+1	; 0x01
    217e:	fc 87       	std	Y+12, r31	; 0x0c
    2180:	f0 ff       	sbrs	r31, 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <vfprintf+0x1ae>
    2184:	f3 ff       	sbrs	r31, 3
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <vfprintf+0x1ba>
    2188:	91 fc       	sbrc	r9, 1
    218a:	06 c0       	rjmp	.+12     	; 0x2198 <vfprintf+0x1be>
    218c:	92 fe       	sbrs	r9, 2
    218e:	06 c0       	rjmp	.+12     	; 0x219c <vfprintf+0x1c2>
    2190:	00 e2       	ldi	r16, 0x20	; 32
    2192:	05 c0       	rjmp	.+10     	; 0x219e <vfprintf+0x1c4>
    2194:	0d e2       	ldi	r16, 0x2D	; 45
    2196:	03 c0       	rjmp	.+6      	; 0x219e <vfprintf+0x1c4>
    2198:	0b e2       	ldi	r16, 0x2B	; 43
    219a:	01 c0       	rjmp	.+2      	; 0x219e <vfprintf+0x1c4>
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a0:	8c 70       	andi	r24, 0x0C	; 12
    21a2:	19 f0       	breq	.+6      	; 0x21aa <vfprintf+0x1d0>
    21a4:	01 11       	cpse	r16, r1
    21a6:	5a c2       	rjmp	.+1204   	; 0x265c <vfprintf+0x682>
    21a8:	9b c2       	rjmp	.+1334   	; 0x26e0 <vfprintf+0x706>
    21aa:	97 fe       	sbrs	r9, 7
    21ac:	10 c0       	rjmp	.+32     	; 0x21ce <vfprintf+0x1f4>
    21ae:	4c 0c       	add	r4, r12
    21b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    21b2:	f4 ff       	sbrs	r31, 4
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <vfprintf+0x1e4>
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	81 33       	cpi	r24, 0x31	; 49
    21ba:	09 f4       	brne	.+2      	; 0x21be <vfprintf+0x1e4>
    21bc:	4a 94       	dec	r4
    21be:	14 14       	cp	r1, r4
    21c0:	74 f5       	brge	.+92     	; 0x221e <vfprintf+0x244>
    21c2:	28 e0       	ldi	r18, 0x08	; 8
    21c4:	24 15       	cp	r18, r4
    21c6:	78 f5       	brcc	.+94     	; 0x2226 <vfprintf+0x24c>
    21c8:	88 e0       	ldi	r24, 0x08	; 8
    21ca:	48 2e       	mov	r4, r24
    21cc:	2c c0       	rjmp	.+88     	; 0x2226 <vfprintf+0x24c>
    21ce:	96 fc       	sbrc	r9, 6
    21d0:	2a c0       	rjmp	.+84     	; 0x2226 <vfprintf+0x24c>
    21d2:	81 2f       	mov	r24, r17
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	8c 15       	cp	r24, r12
    21d8:	9d 05       	cpc	r25, r13
    21da:	9c f0       	brlt	.+38     	; 0x2202 <vfprintf+0x228>
    21dc:	3c ef       	ldi	r19, 0xFC	; 252
    21de:	c3 16       	cp	r12, r19
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	d3 06       	cpc	r13, r19
    21e4:	74 f0       	brlt	.+28     	; 0x2202 <vfprintf+0x228>
    21e6:	89 2d       	mov	r24, r9
    21e8:	80 68       	ori	r24, 0x80	; 128
    21ea:	98 2e       	mov	r9, r24
    21ec:	0a c0       	rjmp	.+20     	; 0x2202 <vfprintf+0x228>
    21ee:	e2 e0       	ldi	r30, 0x02	; 2
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	ec 0f       	add	r30, r28
    21f4:	fd 1f       	adc	r31, r29
    21f6:	e1 0f       	add	r30, r17
    21f8:	f1 1d       	adc	r31, r1
    21fa:	80 81       	ld	r24, Z
    21fc:	80 33       	cpi	r24, 0x30	; 48
    21fe:	19 f4       	brne	.+6      	; 0x2206 <vfprintf+0x22c>
    2200:	11 50       	subi	r17, 0x01	; 1
    2202:	11 11       	cpse	r17, r1
    2204:	f4 cf       	rjmp	.-24     	; 0x21ee <vfprintf+0x214>
    2206:	97 fe       	sbrs	r9, 7
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <vfprintf+0x24c>
    220a:	44 24       	eor	r4, r4
    220c:	43 94       	inc	r4
    220e:	41 0e       	add	r4, r17
    2210:	81 2f       	mov	r24, r17
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	c8 16       	cp	r12, r24
    2216:	d9 06       	cpc	r13, r25
    2218:	2c f4       	brge	.+10     	; 0x2224 <vfprintf+0x24a>
    221a:	1c 19       	sub	r17, r12
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <vfprintf+0x24c>
    221e:	44 24       	eor	r4, r4
    2220:	43 94       	inc	r4
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <vfprintf+0x24c>
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	97 fe       	sbrs	r9, 7
    2228:	06 c0       	rjmp	.+12     	; 0x2236 <vfprintf+0x25c>
    222a:	1c 14       	cp	r1, r12
    222c:	1d 04       	cpc	r1, r13
    222e:	34 f4       	brge	.+12     	; 0x223c <vfprintf+0x262>
    2230:	c6 01       	movw	r24, r12
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	05 c0       	rjmp	.+10     	; 0x2240 <vfprintf+0x266>
    2236:	85 e0       	ldi	r24, 0x05	; 5
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <vfprintf+0x266>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	01 11       	cpse	r16, r1
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	11 23       	and	r17, r17
    2246:	31 f0       	breq	.+12     	; 0x2254 <vfprintf+0x27a>
    2248:	21 2f       	mov	r18, r17
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	2f 5f       	subi	r18, 0xFF	; 255
    224e:	3f 4f       	sbci	r19, 0xFF	; 255
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	25 2d       	mov	r18, r5
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	82 17       	cp	r24, r18
    225a:	93 07       	cpc	r25, r19
    225c:	14 f4       	brge	.+4      	; 0x2262 <vfprintf+0x288>
    225e:	58 1a       	sub	r5, r24
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <vfprintf+0x28a>
    2262:	51 2c       	mov	r5, r1
    2264:	89 2d       	mov	r24, r9
    2266:	89 70       	andi	r24, 0x09	; 9
    2268:	49 f4       	brne	.+18     	; 0x227c <vfprintf+0x2a2>
    226a:	55 20       	and	r5, r5
    226c:	39 f0       	breq	.+14     	; 0x227c <vfprintf+0x2a2>
    226e:	b7 01       	movw	r22, r14
    2270:	80 e2       	ldi	r24, 0x20	; 32
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2278:	5a 94       	dec	r5
    227a:	f7 cf       	rjmp	.-18     	; 0x226a <vfprintf+0x290>
    227c:	00 23       	and	r16, r16
    227e:	29 f0       	breq	.+10     	; 0x228a <vfprintf+0x2b0>
    2280:	b7 01       	movw	r22, r14
    2282:	80 2f       	mov	r24, r16
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    228a:	93 fc       	sbrc	r9, 3
    228c:	09 c0       	rjmp	.+18     	; 0x22a0 <vfprintf+0x2c6>
    228e:	55 20       	and	r5, r5
    2290:	39 f0       	breq	.+14     	; 0x22a0 <vfprintf+0x2c6>
    2292:	b7 01       	movw	r22, r14
    2294:	80 e3       	ldi	r24, 0x30	; 48
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    229c:	5a 94       	dec	r5
    229e:	f7 cf       	rjmp	.-18     	; 0x228e <vfprintf+0x2b4>
    22a0:	97 fe       	sbrs	r9, 7
    22a2:	4c c0       	rjmp	.+152    	; 0x233c <vfprintf+0x362>
    22a4:	46 01       	movw	r8, r12
    22a6:	d7 fe       	sbrs	r13, 7
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <vfprintf+0x2d4>
    22aa:	81 2c       	mov	r8, r1
    22ac:	91 2c       	mov	r9, r1
    22ae:	c6 01       	movw	r24, r12
    22b0:	88 19       	sub	r24, r8
    22b2:	99 09       	sbc	r25, r9
    22b4:	f3 01       	movw	r30, r6
    22b6:	e8 0f       	add	r30, r24
    22b8:	f9 1f       	adc	r31, r25
    22ba:	ed 87       	std	Y+13, r30	; 0x0d
    22bc:	fe 87       	std	Y+14, r31	; 0x0e
    22be:	96 01       	movw	r18, r12
    22c0:	24 19       	sub	r18, r4
    22c2:	31 09       	sbc	r19, r1
    22c4:	2f 87       	std	Y+15, r18	; 0x0f
    22c6:	38 8b       	std	Y+16, r19	; 0x10
    22c8:	01 2f       	mov	r16, r17
    22ca:	10 e0       	ldi	r17, 0x00	; 0
    22cc:	11 95       	neg	r17
    22ce:	01 95       	neg	r16
    22d0:	11 09       	sbc	r17, r1
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	83 16       	cp	r8, r19
    22d6:	93 06       	cpc	r9, r19
    22d8:	29 f4       	brne	.+10     	; 0x22e4 <vfprintf+0x30a>
    22da:	b7 01       	movw	r22, r14
    22dc:	8e e2       	ldi	r24, 0x2E	; 46
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    22e4:	c8 14       	cp	r12, r8
    22e6:	d9 04       	cpc	r13, r9
    22e8:	4c f0       	brlt	.+18     	; 0x22fc <vfprintf+0x322>
    22ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ec:	98 89       	ldd	r25, Y+16	; 0x10
    22ee:	88 15       	cp	r24, r8
    22f0:	99 05       	cpc	r25, r9
    22f2:	24 f4       	brge	.+8      	; 0x22fc <vfprintf+0x322>
    22f4:	ed 85       	ldd	r30, Y+13	; 0x0d
    22f6:	fe 85       	ldd	r31, Y+14	; 0x0e
    22f8:	81 81       	ldd	r24, Z+1	; 0x01
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <vfprintf+0x324>
    22fc:	80 e3       	ldi	r24, 0x30	; 48
    22fe:	f1 e0       	ldi	r31, 0x01	; 1
    2300:	8f 1a       	sub	r8, r31
    2302:	91 08       	sbc	r9, r1
    2304:	2d 85       	ldd	r18, Y+13	; 0x0d
    2306:	3e 85       	ldd	r19, Y+14	; 0x0e
    2308:	2f 5f       	subi	r18, 0xFF	; 255
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	2d 87       	std	Y+13, r18	; 0x0d
    230e:	3e 87       	std	Y+14, r19	; 0x0e
    2310:	80 16       	cp	r8, r16
    2312:	91 06       	cpc	r9, r17
    2314:	2c f0       	brlt	.+10     	; 0x2320 <vfprintf+0x346>
    2316:	b7 01       	movw	r22, r14
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    231e:	d9 cf       	rjmp	.-78     	; 0x22d2 <vfprintf+0x2f8>
    2320:	c8 14       	cp	r12, r8
    2322:	d9 04       	cpc	r13, r9
    2324:	41 f4       	brne	.+16     	; 0x2336 <vfprintf+0x35c>
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	96 33       	cpi	r25, 0x36	; 54
    232a:	20 f4       	brcc	.+8      	; 0x2334 <vfprintf+0x35a>
    232c:	95 33       	cpi	r25, 0x35	; 53
    232e:	19 f4       	brne	.+6      	; 0x2336 <vfprintf+0x35c>
    2330:	3c 85       	ldd	r19, Y+12	; 0x0c
    2332:	34 ff       	sbrs	r19, 4
    2334:	81 e3       	ldi	r24, 0x31	; 49
    2336:	b7 01       	movw	r22, r14
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	4e c0       	rjmp	.+156    	; 0x23d8 <vfprintf+0x3fe>
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	81 33       	cpi	r24, 0x31	; 49
    2340:	19 f0       	breq	.+6      	; 0x2348 <vfprintf+0x36e>
    2342:	9c 85       	ldd	r25, Y+12	; 0x0c
    2344:	9f 7e       	andi	r25, 0xEF	; 239
    2346:	9c 87       	std	Y+12, r25	; 0x0c
    2348:	b7 01       	movw	r22, r14
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2350:	11 11       	cpse	r17, r1
    2352:	05 c0       	rjmp	.+10     	; 0x235e <vfprintf+0x384>
    2354:	94 fc       	sbrc	r9, 4
    2356:	18 c0       	rjmp	.+48     	; 0x2388 <vfprintf+0x3ae>
    2358:	85 e6       	ldi	r24, 0x65	; 101
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	17 c0       	rjmp	.+46     	; 0x238c <vfprintf+0x3b2>
    235e:	b7 01       	movw	r22, r14
    2360:	8e e2       	ldi	r24, 0x2E	; 46
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2368:	1e 5f       	subi	r17, 0xFE	; 254
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	01 e0       	ldi	r16, 0x01	; 1
    236e:	08 0f       	add	r16, r24
    2370:	f3 01       	movw	r30, r6
    2372:	e8 0f       	add	r30, r24
    2374:	f1 1d       	adc	r31, r1
    2376:	80 81       	ld	r24, Z
    2378:	b7 01       	movw	r22, r14
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2380:	80 2f       	mov	r24, r16
    2382:	01 13       	cpse	r16, r17
    2384:	f3 cf       	rjmp	.-26     	; 0x236c <vfprintf+0x392>
    2386:	e6 cf       	rjmp	.-52     	; 0x2354 <vfprintf+0x37a>
    2388:	85 e4       	ldi	r24, 0x45	; 69
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	b7 01       	movw	r22, r14
    238e:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2392:	d7 fc       	sbrc	r13, 7
    2394:	06 c0       	rjmp	.+12     	; 0x23a2 <vfprintf+0x3c8>
    2396:	c1 14       	cp	r12, r1
    2398:	d1 04       	cpc	r13, r1
    239a:	41 f4       	brne	.+16     	; 0x23ac <vfprintf+0x3d2>
    239c:	ec 85       	ldd	r30, Y+12	; 0x0c
    239e:	e4 ff       	sbrs	r30, 4
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <vfprintf+0x3d2>
    23a2:	d1 94       	neg	r13
    23a4:	c1 94       	neg	r12
    23a6:	d1 08       	sbc	r13, r1
    23a8:	8d e2       	ldi	r24, 0x2D	; 45
    23aa:	01 c0       	rjmp	.+2      	; 0x23ae <vfprintf+0x3d4>
    23ac:	8b e2       	ldi	r24, 0x2B	; 43
    23ae:	b7 01       	movw	r22, r14
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    23b6:	80 e3       	ldi	r24, 0x30	; 48
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	c2 16       	cp	r12, r18
    23bc:	d1 04       	cpc	r13, r1
    23be:	2c f0       	brlt	.+10     	; 0x23ca <vfprintf+0x3f0>
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	fa e0       	ldi	r31, 0x0A	; 10
    23c4:	cf 1a       	sub	r12, r31
    23c6:	d1 08       	sbc	r13, r1
    23c8:	f7 cf       	rjmp	.-18     	; 0x23b8 <vfprintf+0x3de>
    23ca:	b7 01       	movw	r22, r14
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    23d2:	b7 01       	movw	r22, r14
    23d4:	c6 01       	movw	r24, r12
    23d6:	c0 96       	adiw	r24, 0x30	; 48
    23d8:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    23dc:	54 c1       	rjmp	.+680    	; 0x2686 <vfprintf+0x6ac>
    23de:	83 36       	cpi	r24, 0x63	; 99
    23e0:	31 f0       	breq	.+12     	; 0x23ee <vfprintf+0x414>
    23e2:	83 37       	cpi	r24, 0x73	; 115
    23e4:	79 f0       	breq	.+30     	; 0x2404 <vfprintf+0x42a>
    23e6:	83 35       	cpi	r24, 0x53	; 83
    23e8:	09 f0       	breq	.+2      	; 0x23ec <vfprintf+0x412>
    23ea:	56 c0       	rjmp	.+172    	; 0x2498 <vfprintf+0x4be>
    23ec:	20 c0       	rjmp	.+64     	; 0x242e <vfprintf+0x454>
    23ee:	56 01       	movw	r10, r12
    23f0:	32 e0       	ldi	r19, 0x02	; 2
    23f2:	a3 0e       	add	r10, r19
    23f4:	b1 1c       	adc	r11, r1
    23f6:	f6 01       	movw	r30, r12
    23f8:	80 81       	ld	r24, Z
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	01 e0       	ldi	r16, 0x01	; 1
    23fe:	10 e0       	ldi	r17, 0x00	; 0
    2400:	63 01       	movw	r12, r6
    2402:	12 c0       	rjmp	.+36     	; 0x2428 <vfprintf+0x44e>
    2404:	56 01       	movw	r10, r12
    2406:	f2 e0       	ldi	r31, 0x02	; 2
    2408:	af 0e       	add	r10, r31
    240a:	b1 1c       	adc	r11, r1
    240c:	f6 01       	movw	r30, r12
    240e:	c0 80       	ld	r12, Z
    2410:	d1 80       	ldd	r13, Z+1	; 0x01
    2412:	96 fe       	sbrs	r9, 6
    2414:	03 c0       	rjmp	.+6      	; 0x241c <vfprintf+0x442>
    2416:	61 2f       	mov	r22, r17
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x446>
    241c:	6f ef       	ldi	r22, 0xFF	; 255
    241e:	7f ef       	ldi	r23, 0xFF	; 255
    2420:	c6 01       	movw	r24, r12
    2422:	0e 94 80 14 	call	0x2900	; 0x2900 <strnlen>
    2426:	8c 01       	movw	r16, r24
    2428:	f9 2d       	mov	r31, r9
    242a:	ff 77       	andi	r31, 0x7F	; 127
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <vfprintf+0x47c>
    242e:	56 01       	movw	r10, r12
    2430:	22 e0       	ldi	r18, 0x02	; 2
    2432:	a2 0e       	add	r10, r18
    2434:	b1 1c       	adc	r11, r1
    2436:	f6 01       	movw	r30, r12
    2438:	c0 80       	ld	r12, Z
    243a:	d1 80       	ldd	r13, Z+1	; 0x01
    243c:	96 fe       	sbrs	r9, 6
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <vfprintf+0x46c>
    2440:	61 2f       	mov	r22, r17
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	02 c0       	rjmp	.+4      	; 0x244a <vfprintf+0x470>
    2446:	6f ef       	ldi	r22, 0xFF	; 255
    2448:	7f ef       	ldi	r23, 0xFF	; 255
    244a:	c6 01       	movw	r24, r12
    244c:	0e 94 65 14 	call	0x28ca	; 0x28ca <strnlen_P>
    2450:	8c 01       	movw	r16, r24
    2452:	f9 2d       	mov	r31, r9
    2454:	f0 68       	ori	r31, 0x80	; 128
    2456:	9f 2e       	mov	r9, r31
    2458:	f3 fd       	sbrc	r31, 3
    245a:	1a c0       	rjmp	.+52     	; 0x2490 <vfprintf+0x4b6>
    245c:	85 2d       	mov	r24, r5
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	08 17       	cp	r16, r24
    2462:	19 07       	cpc	r17, r25
    2464:	a8 f4       	brcc	.+42     	; 0x2490 <vfprintf+0x4b6>
    2466:	b7 01       	movw	r22, r14
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2470:	5a 94       	dec	r5
    2472:	f4 cf       	rjmp	.-24     	; 0x245c <vfprintf+0x482>
    2474:	f6 01       	movw	r30, r12
    2476:	97 fc       	sbrc	r9, 7
    2478:	85 91       	lpm	r24, Z+
    247a:	97 fe       	sbrs	r9, 7
    247c:	81 91       	ld	r24, Z+
    247e:	6f 01       	movw	r12, r30
    2480:	b7 01       	movw	r22, r14
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2488:	51 10       	cpse	r5, r1
    248a:	5a 94       	dec	r5
    248c:	01 50       	subi	r16, 0x01	; 1
    248e:	11 09       	sbc	r17, r1
    2490:	01 15       	cp	r16, r1
    2492:	11 05       	cpc	r17, r1
    2494:	79 f7       	brne	.-34     	; 0x2474 <vfprintf+0x49a>
    2496:	f7 c0       	rjmp	.+494    	; 0x2686 <vfprintf+0x6ac>
    2498:	84 36       	cpi	r24, 0x64	; 100
    249a:	11 f0       	breq	.+4      	; 0x24a0 <vfprintf+0x4c6>
    249c:	89 36       	cpi	r24, 0x69	; 105
    249e:	61 f5       	brne	.+88     	; 0x24f8 <vfprintf+0x51e>
    24a0:	56 01       	movw	r10, r12
    24a2:	97 fe       	sbrs	r9, 7
    24a4:	09 c0       	rjmp	.+18     	; 0x24b8 <vfprintf+0x4de>
    24a6:	24 e0       	ldi	r18, 0x04	; 4
    24a8:	a2 0e       	add	r10, r18
    24aa:	b1 1c       	adc	r11, r1
    24ac:	f6 01       	movw	r30, r12
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	0a c0       	rjmp	.+20     	; 0x24cc <vfprintf+0x4f2>
    24b8:	f2 e0       	ldi	r31, 0x02	; 2
    24ba:	af 0e       	add	r10, r31
    24bc:	b1 1c       	adc	r11, r1
    24be:	f6 01       	movw	r30, r12
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	07 2e       	mov	r0, r23
    24c6:	00 0c       	add	r0, r0
    24c8:	88 0b       	sbc	r24, r24
    24ca:	99 0b       	sbc	r25, r25
    24cc:	f9 2d       	mov	r31, r9
    24ce:	ff 76       	andi	r31, 0x6F	; 111
    24d0:	9f 2e       	mov	r9, r31
    24d2:	97 ff       	sbrs	r25, 7
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <vfprintf+0x50e>
    24d6:	90 95       	com	r25
    24d8:	80 95       	com	r24
    24da:	70 95       	com	r23
    24dc:	61 95       	neg	r22
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	8f 4f       	sbci	r24, 0xFF	; 255
    24e2:	9f 4f       	sbci	r25, 0xFF	; 255
    24e4:	f0 68       	ori	r31, 0x80	; 128
    24e6:	9f 2e       	mov	r9, r31
    24e8:	2a e0       	ldi	r18, 0x0A	; 10
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	a3 01       	movw	r20, r6
    24ee:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__ultoa_invert>
    24f2:	c8 2e       	mov	r12, r24
    24f4:	c6 18       	sub	r12, r6
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <vfprintf+0x59c>
    24f8:	09 2d       	mov	r16, r9
    24fa:	85 37       	cpi	r24, 0x75	; 117
    24fc:	21 f4       	brne	.+8      	; 0x2506 <vfprintf+0x52c>
    24fe:	0f 7e       	andi	r16, 0xEF	; 239
    2500:	2a e0       	ldi	r18, 0x0A	; 10
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	1d c0       	rjmp	.+58     	; 0x2540 <vfprintf+0x566>
    2506:	09 7f       	andi	r16, 0xF9	; 249
    2508:	8f 36       	cpi	r24, 0x6F	; 111
    250a:	91 f0       	breq	.+36     	; 0x2530 <vfprintf+0x556>
    250c:	18 f4       	brcc	.+6      	; 0x2514 <vfprintf+0x53a>
    250e:	88 35       	cpi	r24, 0x58	; 88
    2510:	59 f0       	breq	.+22     	; 0x2528 <vfprintf+0x54e>
    2512:	c3 c0       	rjmp	.+390    	; 0x269a <vfprintf+0x6c0>
    2514:	80 37       	cpi	r24, 0x70	; 112
    2516:	19 f0       	breq	.+6      	; 0x251e <vfprintf+0x544>
    2518:	88 37       	cpi	r24, 0x78	; 120
    251a:	11 f0       	breq	.+4      	; 0x2520 <vfprintf+0x546>
    251c:	be c0       	rjmp	.+380    	; 0x269a <vfprintf+0x6c0>
    251e:	00 61       	ori	r16, 0x10	; 16
    2520:	04 ff       	sbrs	r16, 4
    2522:	09 c0       	rjmp	.+18     	; 0x2536 <vfprintf+0x55c>
    2524:	04 60       	ori	r16, 0x04	; 4
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <vfprintf+0x55c>
    2528:	94 fe       	sbrs	r9, 4
    252a:	08 c0       	rjmp	.+16     	; 0x253c <vfprintf+0x562>
    252c:	06 60       	ori	r16, 0x06	; 6
    252e:	06 c0       	rjmp	.+12     	; 0x253c <vfprintf+0x562>
    2530:	28 e0       	ldi	r18, 0x08	; 8
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <vfprintf+0x566>
    2536:	20 e1       	ldi	r18, 0x10	; 16
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <vfprintf+0x566>
    253c:	20 e1       	ldi	r18, 0x10	; 16
    253e:	32 e0       	ldi	r19, 0x02	; 2
    2540:	56 01       	movw	r10, r12
    2542:	07 ff       	sbrs	r16, 7
    2544:	09 c0       	rjmp	.+18     	; 0x2558 <vfprintf+0x57e>
    2546:	84 e0       	ldi	r24, 0x04	; 4
    2548:	a8 0e       	add	r10, r24
    254a:	b1 1c       	adc	r11, r1
    254c:	f6 01       	movw	r30, r12
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	08 c0       	rjmp	.+16     	; 0x2568 <vfprintf+0x58e>
    2558:	f2 e0       	ldi	r31, 0x02	; 2
    255a:	af 0e       	add	r10, r31
    255c:	b1 1c       	adc	r11, r1
    255e:	f6 01       	movw	r30, r12
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a3 01       	movw	r20, r6
    256a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__ultoa_invert>
    256e:	c8 2e       	mov	r12, r24
    2570:	c6 18       	sub	r12, r6
    2572:	0f 77       	andi	r16, 0x7F	; 127
    2574:	90 2e       	mov	r9, r16
    2576:	96 fe       	sbrs	r9, 6
    2578:	0b c0       	rjmp	.+22     	; 0x2590 <vfprintf+0x5b6>
    257a:	09 2d       	mov	r16, r9
    257c:	0e 7f       	andi	r16, 0xFE	; 254
    257e:	c1 16       	cp	r12, r17
    2580:	50 f4       	brcc	.+20     	; 0x2596 <vfprintf+0x5bc>
    2582:	94 fe       	sbrs	r9, 4
    2584:	0a c0       	rjmp	.+20     	; 0x259a <vfprintf+0x5c0>
    2586:	92 fc       	sbrc	r9, 2
    2588:	08 c0       	rjmp	.+16     	; 0x259a <vfprintf+0x5c0>
    258a:	09 2d       	mov	r16, r9
    258c:	0e 7e       	andi	r16, 0xEE	; 238
    258e:	05 c0       	rjmp	.+10     	; 0x259a <vfprintf+0x5c0>
    2590:	dc 2c       	mov	r13, r12
    2592:	09 2d       	mov	r16, r9
    2594:	03 c0       	rjmp	.+6      	; 0x259c <vfprintf+0x5c2>
    2596:	dc 2c       	mov	r13, r12
    2598:	01 c0       	rjmp	.+2      	; 0x259c <vfprintf+0x5c2>
    259a:	d1 2e       	mov	r13, r17
    259c:	04 ff       	sbrs	r16, 4
    259e:	0d c0       	rjmp	.+26     	; 0x25ba <vfprintf+0x5e0>
    25a0:	fe 01       	movw	r30, r28
    25a2:	ec 0d       	add	r30, r12
    25a4:	f1 1d       	adc	r31, r1
    25a6:	80 81       	ld	r24, Z
    25a8:	80 33       	cpi	r24, 0x30	; 48
    25aa:	11 f4       	brne	.+4      	; 0x25b0 <vfprintf+0x5d6>
    25ac:	09 7e       	andi	r16, 0xE9	; 233
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <vfprintf+0x5e8>
    25b0:	02 ff       	sbrs	r16, 2
    25b2:	06 c0       	rjmp	.+12     	; 0x25c0 <vfprintf+0x5e6>
    25b4:	d3 94       	inc	r13
    25b6:	d3 94       	inc	r13
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <vfprintf+0x5e8>
    25ba:	80 2f       	mov	r24, r16
    25bc:	86 78       	andi	r24, 0x86	; 134
    25be:	09 f0       	breq	.+2      	; 0x25c2 <vfprintf+0x5e8>
    25c0:	d3 94       	inc	r13
    25c2:	03 fd       	sbrc	r16, 3
    25c4:	11 c0       	rjmp	.+34     	; 0x25e8 <vfprintf+0x60e>
    25c6:	00 ff       	sbrs	r16, 0
    25c8:	06 c0       	rjmp	.+12     	; 0x25d6 <vfprintf+0x5fc>
    25ca:	1c 2d       	mov	r17, r12
    25cc:	d5 14       	cp	r13, r5
    25ce:	80 f4       	brcc	.+32     	; 0x25f0 <vfprintf+0x616>
    25d0:	15 0d       	add	r17, r5
    25d2:	1d 19       	sub	r17, r13
    25d4:	0d c0       	rjmp	.+26     	; 0x25f0 <vfprintf+0x616>
    25d6:	d5 14       	cp	r13, r5
    25d8:	58 f4       	brcc	.+22     	; 0x25f0 <vfprintf+0x616>
    25da:	b7 01       	movw	r22, r14
    25dc:	80 e2       	ldi	r24, 0x20	; 32
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    25e4:	d3 94       	inc	r13
    25e6:	f7 cf       	rjmp	.-18     	; 0x25d6 <vfprintf+0x5fc>
    25e8:	d5 14       	cp	r13, r5
    25ea:	10 f4       	brcc	.+4      	; 0x25f0 <vfprintf+0x616>
    25ec:	5d 18       	sub	r5, r13
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <vfprintf+0x618>
    25f0:	51 2c       	mov	r5, r1
    25f2:	04 ff       	sbrs	r16, 4
    25f4:	10 c0       	rjmp	.+32     	; 0x2616 <vfprintf+0x63c>
    25f6:	b7 01       	movw	r22, r14
    25f8:	80 e3       	ldi	r24, 0x30	; 48
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2600:	02 ff       	sbrs	r16, 2
    2602:	17 c0       	rjmp	.+46     	; 0x2632 <vfprintf+0x658>
    2604:	01 fd       	sbrc	r16, 1
    2606:	03 c0       	rjmp	.+6      	; 0x260e <vfprintf+0x634>
    2608:	88 e7       	ldi	r24, 0x78	; 120
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <vfprintf+0x638>
    260e:	88 e5       	ldi	r24, 0x58	; 88
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	b7 01       	movw	r22, r14
    2614:	0c c0       	rjmp	.+24     	; 0x262e <vfprintf+0x654>
    2616:	80 2f       	mov	r24, r16
    2618:	86 78       	andi	r24, 0x86	; 134
    261a:	59 f0       	breq	.+22     	; 0x2632 <vfprintf+0x658>
    261c:	01 ff       	sbrs	r16, 1
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <vfprintf+0x64a>
    2620:	8b e2       	ldi	r24, 0x2B	; 43
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <vfprintf+0x64c>
    2624:	80 e2       	ldi	r24, 0x20	; 32
    2626:	07 fd       	sbrc	r16, 7
    2628:	8d e2       	ldi	r24, 0x2D	; 45
    262a:	b7 01       	movw	r22, r14
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2632:	c1 16       	cp	r12, r17
    2634:	38 f4       	brcc	.+14     	; 0x2644 <vfprintf+0x66a>
    2636:	b7 01       	movw	r22, r14
    2638:	80 e3       	ldi	r24, 0x30	; 48
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2640:	11 50       	subi	r17, 0x01	; 1
    2642:	f7 cf       	rjmp	.-18     	; 0x2632 <vfprintf+0x658>
    2644:	ca 94       	dec	r12
    2646:	f3 01       	movw	r30, r6
    2648:	ec 0d       	add	r30, r12
    264a:	f1 1d       	adc	r31, r1
    264c:	80 81       	ld	r24, Z
    264e:	b7 01       	movw	r22, r14
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2656:	c1 10       	cpse	r12, r1
    2658:	f5 cf       	rjmp	.-22     	; 0x2644 <vfprintf+0x66a>
    265a:	15 c0       	rjmp	.+42     	; 0x2686 <vfprintf+0x6ac>
    265c:	f4 e0       	ldi	r31, 0x04	; 4
    265e:	f5 15       	cp	r31, r5
    2660:	60 f5       	brcc	.+88     	; 0x26ba <vfprintf+0x6e0>
    2662:	84 e0       	ldi	r24, 0x04	; 4
    2664:	58 1a       	sub	r5, r24
    2666:	93 fe       	sbrs	r9, 3
    2668:	1f c0       	rjmp	.+62     	; 0x26a8 <vfprintf+0x6ce>
    266a:	01 11       	cpse	r16, r1
    266c:	27 c0       	rjmp	.+78     	; 0x26bc <vfprintf+0x6e2>
    266e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2670:	23 ff       	sbrs	r18, 3
    2672:	2a c0       	rjmp	.+84     	; 0x26c8 <vfprintf+0x6ee>
    2674:	00 e1       	ldi	r16, 0x10	; 16
    2676:	12 e0       	ldi	r17, 0x02	; 2
    2678:	39 2d       	mov	r19, r9
    267a:	30 71       	andi	r19, 0x10	; 16
    267c:	93 2e       	mov	r9, r19
    267e:	f8 01       	movw	r30, r16
    2680:	84 91       	lpm	r24, Z
    2682:	81 11       	cpse	r24, r1
    2684:	24 c0       	rjmp	.+72     	; 0x26ce <vfprintf+0x6f4>
    2686:	55 20       	and	r5, r5
    2688:	09 f4       	brne	.+2      	; 0x268c <vfprintf+0x6b2>
    268a:	e4 cc       	rjmp	.-1592   	; 0x2054 <vfprintf+0x7a>
    268c:	b7 01       	movw	r22, r14
    268e:	80 e2       	ldi	r24, 0x20	; 32
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2696:	5a 94       	dec	r5
    2698:	f6 cf       	rjmp	.-20     	; 0x2686 <vfprintf+0x6ac>
    269a:	f7 01       	movw	r30, r14
    269c:	86 81       	ldd	r24, Z+6	; 0x06
    269e:	97 81       	ldd	r25, Z+7	; 0x07
    26a0:	26 c0       	rjmp	.+76     	; 0x26ee <vfprintf+0x714>
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	9f ef       	ldi	r25, 0xFF	; 255
    26a6:	23 c0       	rjmp	.+70     	; 0x26ee <vfprintf+0x714>
    26a8:	b7 01       	movw	r22, r14
    26aa:	80 e2       	ldi	r24, 0x20	; 32
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    26b2:	5a 94       	dec	r5
    26b4:	51 10       	cpse	r5, r1
    26b6:	f8 cf       	rjmp	.-16     	; 0x26a8 <vfprintf+0x6ce>
    26b8:	d8 cf       	rjmp	.-80     	; 0x266a <vfprintf+0x690>
    26ba:	51 2c       	mov	r5, r1
    26bc:	b7 01       	movw	r22, r14
    26be:	80 2f       	mov	r24, r16
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    26c6:	d3 cf       	rjmp	.-90     	; 0x266e <vfprintf+0x694>
    26c8:	04 e1       	ldi	r16, 0x14	; 20
    26ca:	12 e0       	ldi	r17, 0x02	; 2
    26cc:	d5 cf       	rjmp	.-86     	; 0x2678 <vfprintf+0x69e>
    26ce:	91 10       	cpse	r9, r1
    26d0:	80 52       	subi	r24, 0x20	; 32
    26d2:	b7 01       	movw	r22, r14
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    26da:	0f 5f       	subi	r16, 0xFF	; 255
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	cf cf       	rjmp	.-98     	; 0x267e <vfprintf+0x6a4>
    26e0:	23 e0       	ldi	r18, 0x03	; 3
    26e2:	25 15       	cp	r18, r5
    26e4:	10 f4       	brcc	.+4      	; 0x26ea <vfprintf+0x710>
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	bd cf       	rjmp	.-134    	; 0x2664 <vfprintf+0x68a>
    26ea:	51 2c       	mov	r5, r1
    26ec:	c0 cf       	rjmp	.-128    	; 0x266e <vfprintf+0x694>
    26ee:	60 96       	adiw	r28, 0x10	; 16
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	7f 90       	pop	r7
    270e:	6f 90       	pop	r6
    2710:	5f 90       	pop	r5
    2712:	4f 90       	pop	r4
    2714:	3f 90       	pop	r3
    2716:	2f 90       	pop	r2
    2718:	08 95       	ret

0000271a <__ftoa_engine>:
    271a:	28 30       	cpi	r18, 0x08	; 8
    271c:	08 f0       	brcs	.+2      	; 0x2720 <__ftoa_engine+0x6>
    271e:	27 e0       	ldi	r18, 0x07	; 7
    2720:	33 27       	eor	r19, r19
    2722:	da 01       	movw	r26, r20
    2724:	99 0f       	add	r25, r25
    2726:	31 1d       	adc	r19, r1
    2728:	87 fd       	sbrc	r24, 7
    272a:	91 60       	ori	r25, 0x01	; 1
    272c:	00 96       	adiw	r24, 0x00	; 0
    272e:	61 05       	cpc	r22, r1
    2730:	71 05       	cpc	r23, r1
    2732:	39 f4       	brne	.+14     	; 0x2742 <__ftoa_engine+0x28>
    2734:	32 60       	ori	r19, 0x02	; 2
    2736:	2e 5f       	subi	r18, 0xFE	; 254
    2738:	3d 93       	st	X+, r19
    273a:	30 e3       	ldi	r19, 0x30	; 48
    273c:	2a 95       	dec	r18
    273e:	e1 f7       	brne	.-8      	; 0x2738 <__ftoa_engine+0x1e>
    2740:	08 95       	ret
    2742:	9f 3f       	cpi	r25, 0xFF	; 255
    2744:	30 f0       	brcs	.+12     	; 0x2752 <__ftoa_engine+0x38>
    2746:	80 38       	cpi	r24, 0x80	; 128
    2748:	71 05       	cpc	r23, r1
    274a:	61 05       	cpc	r22, r1
    274c:	09 f0       	breq	.+2      	; 0x2750 <__ftoa_engine+0x36>
    274e:	3c 5f       	subi	r19, 0xFC	; 252
    2750:	3c 5f       	subi	r19, 0xFC	; 252
    2752:	3d 93       	st	X+, r19
    2754:	91 30       	cpi	r25, 0x01	; 1
    2756:	08 f0       	brcs	.+2      	; 0x275a <__ftoa_engine+0x40>
    2758:	80 68       	ori	r24, 0x80	; 128
    275a:	91 1d       	adc	r25, r1
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	1f 93       	push	r17
    2762:	0f 93       	push	r16
    2764:	ff 92       	push	r15
    2766:	ef 92       	push	r14
    2768:	19 2f       	mov	r17, r25
    276a:	98 7f       	andi	r25, 0xF8	; 248
    276c:	96 95       	lsr	r25
    276e:	e9 2f       	mov	r30, r25
    2770:	96 95       	lsr	r25
    2772:	96 95       	lsr	r25
    2774:	e9 0f       	add	r30, r25
    2776:	ff 27       	eor	r31, r31
    2778:	ee 58       	subi	r30, 0x8E	; 142
    277a:	fd 4f       	sbci	r31, 0xFD	; 253
    277c:	99 27       	eor	r25, r25
    277e:	33 27       	eor	r19, r19
    2780:	ee 24       	eor	r14, r14
    2782:	ff 24       	eor	r15, r15
    2784:	a7 01       	movw	r20, r14
    2786:	e7 01       	movw	r28, r14
    2788:	05 90       	lpm	r0, Z+
    278a:	08 94       	sec
    278c:	07 94       	ror	r0
    278e:	28 f4       	brcc	.+10     	; 0x279a <__ftoa_engine+0x80>
    2790:	36 0f       	add	r19, r22
    2792:	e7 1e       	adc	r14, r23
    2794:	f8 1e       	adc	r15, r24
    2796:	49 1f       	adc	r20, r25
    2798:	51 1d       	adc	r21, r1
    279a:	66 0f       	add	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	88 1f       	adc	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	06 94       	lsr	r0
    27a4:	a1 f7       	brne	.-24     	; 0x278e <__ftoa_engine+0x74>
    27a6:	05 90       	lpm	r0, Z+
    27a8:	07 94       	ror	r0
    27aa:	28 f4       	brcc	.+10     	; 0x27b6 <__ftoa_engine+0x9c>
    27ac:	e7 0e       	add	r14, r23
    27ae:	f8 1e       	adc	r15, r24
    27b0:	49 1f       	adc	r20, r25
    27b2:	56 1f       	adc	r21, r22
    27b4:	c1 1d       	adc	r28, r1
    27b6:	77 0f       	add	r23, r23
    27b8:	88 1f       	adc	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	66 1f       	adc	r22, r22
    27be:	06 94       	lsr	r0
    27c0:	a1 f7       	brne	.-24     	; 0x27aa <__ftoa_engine+0x90>
    27c2:	05 90       	lpm	r0, Z+
    27c4:	07 94       	ror	r0
    27c6:	28 f4       	brcc	.+10     	; 0x27d2 <__ftoa_engine+0xb8>
    27c8:	f8 0e       	add	r15, r24
    27ca:	49 1f       	adc	r20, r25
    27cc:	56 1f       	adc	r21, r22
    27ce:	c7 1f       	adc	r28, r23
    27d0:	d1 1d       	adc	r29, r1
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	66 1f       	adc	r22, r22
    27d8:	77 1f       	adc	r23, r23
    27da:	06 94       	lsr	r0
    27dc:	a1 f7       	brne	.-24     	; 0x27c6 <__ftoa_engine+0xac>
    27de:	05 90       	lpm	r0, Z+
    27e0:	07 94       	ror	r0
    27e2:	20 f4       	brcc	.+8      	; 0x27ec <__ftoa_engine+0xd2>
    27e4:	49 0f       	add	r20, r25
    27e6:	56 1f       	adc	r21, r22
    27e8:	c7 1f       	adc	r28, r23
    27ea:	d8 1f       	adc	r29, r24
    27ec:	99 0f       	add	r25, r25
    27ee:	66 1f       	adc	r22, r22
    27f0:	77 1f       	adc	r23, r23
    27f2:	88 1f       	adc	r24, r24
    27f4:	06 94       	lsr	r0
    27f6:	a9 f7       	brne	.-22     	; 0x27e2 <__ftoa_engine+0xc8>
    27f8:	84 91       	lpm	r24, Z
    27fa:	10 95       	com	r17
    27fc:	17 70       	andi	r17, 0x07	; 7
    27fe:	41 f0       	breq	.+16     	; 0x2810 <__ftoa_engine+0xf6>
    2800:	d6 95       	lsr	r29
    2802:	c7 95       	ror	r28
    2804:	57 95       	ror	r21
    2806:	47 95       	ror	r20
    2808:	f7 94       	ror	r15
    280a:	e7 94       	ror	r14
    280c:	1a 95       	dec	r17
    280e:	c1 f7       	brne	.-16     	; 0x2800 <__ftoa_engine+0xe6>
    2810:	e8 e1       	ldi	r30, 0x18	; 24
    2812:	f2 e0       	ldi	r31, 0x02	; 2
    2814:	68 94       	set
    2816:	15 90       	lpm	r1, Z+
    2818:	15 91       	lpm	r17, Z+
    281a:	35 91       	lpm	r19, Z+
    281c:	65 91       	lpm	r22, Z+
    281e:	95 91       	lpm	r25, Z+
    2820:	05 90       	lpm	r0, Z+
    2822:	7f e2       	ldi	r23, 0x2F	; 47
    2824:	73 95       	inc	r23
    2826:	e1 18       	sub	r14, r1
    2828:	f1 0a       	sbc	r15, r17
    282a:	43 0b       	sbc	r20, r19
    282c:	56 0b       	sbc	r21, r22
    282e:	c9 0b       	sbc	r28, r25
    2830:	d0 09       	sbc	r29, r0
    2832:	c0 f7       	brcc	.-16     	; 0x2824 <__ftoa_engine+0x10a>
    2834:	e1 0c       	add	r14, r1
    2836:	f1 1e       	adc	r15, r17
    2838:	43 1f       	adc	r20, r19
    283a:	56 1f       	adc	r21, r22
    283c:	c9 1f       	adc	r28, r25
    283e:	d0 1d       	adc	r29, r0
    2840:	7e f4       	brtc	.+30     	; 0x2860 <__ftoa_engine+0x146>
    2842:	70 33       	cpi	r23, 0x30	; 48
    2844:	11 f4       	brne	.+4      	; 0x284a <__ftoa_engine+0x130>
    2846:	8a 95       	dec	r24
    2848:	e6 cf       	rjmp	.-52     	; 0x2816 <__ftoa_engine+0xfc>
    284a:	e8 94       	clt
    284c:	01 50       	subi	r16, 0x01	; 1
    284e:	30 f0       	brcs	.+12     	; 0x285c <__ftoa_engine+0x142>
    2850:	08 0f       	add	r16, r24
    2852:	0a f4       	brpl	.+2      	; 0x2856 <__ftoa_engine+0x13c>
    2854:	00 27       	eor	r16, r16
    2856:	02 17       	cp	r16, r18
    2858:	08 f4       	brcc	.+2      	; 0x285c <__ftoa_engine+0x142>
    285a:	20 2f       	mov	r18, r16
    285c:	23 95       	inc	r18
    285e:	02 2f       	mov	r16, r18
    2860:	7a 33       	cpi	r23, 0x3A	; 58
    2862:	28 f0       	brcs	.+10     	; 0x286e <__ftoa_engine+0x154>
    2864:	79 e3       	ldi	r23, 0x39	; 57
    2866:	7d 93       	st	X+, r23
    2868:	2a 95       	dec	r18
    286a:	e9 f7       	brne	.-6      	; 0x2866 <__ftoa_engine+0x14c>
    286c:	10 c0       	rjmp	.+32     	; 0x288e <__ftoa_engine+0x174>
    286e:	7d 93       	st	X+, r23
    2870:	2a 95       	dec	r18
    2872:	89 f6       	brne	.-94     	; 0x2816 <__ftoa_engine+0xfc>
    2874:	06 94       	lsr	r0
    2876:	97 95       	ror	r25
    2878:	67 95       	ror	r22
    287a:	37 95       	ror	r19
    287c:	17 95       	ror	r17
    287e:	17 94       	ror	r1
    2880:	e1 18       	sub	r14, r1
    2882:	f1 0a       	sbc	r15, r17
    2884:	43 0b       	sbc	r20, r19
    2886:	56 0b       	sbc	r21, r22
    2888:	c9 0b       	sbc	r28, r25
    288a:	d0 09       	sbc	r29, r0
    288c:	98 f0       	brcs	.+38     	; 0x28b4 <__ftoa_engine+0x19a>
    288e:	23 95       	inc	r18
    2890:	7e 91       	ld	r23, -X
    2892:	73 95       	inc	r23
    2894:	7a 33       	cpi	r23, 0x3A	; 58
    2896:	08 f0       	brcs	.+2      	; 0x289a <__ftoa_engine+0x180>
    2898:	70 e3       	ldi	r23, 0x30	; 48
    289a:	7c 93       	st	X, r23
    289c:	20 13       	cpse	r18, r16
    289e:	b8 f7       	brcc	.-18     	; 0x288e <__ftoa_engine+0x174>
    28a0:	7e 91       	ld	r23, -X
    28a2:	70 61       	ori	r23, 0x10	; 16
    28a4:	7d 93       	st	X+, r23
    28a6:	30 f0       	brcs	.+12     	; 0x28b4 <__ftoa_engine+0x19a>
    28a8:	83 95       	inc	r24
    28aa:	71 e3       	ldi	r23, 0x31	; 49
    28ac:	7d 93       	st	X+, r23
    28ae:	70 e3       	ldi	r23, 0x30	; 48
    28b0:	2a 95       	dec	r18
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <__ftoa_engine+0x192>
    28b4:	11 24       	eor	r1, r1
    28b6:	ef 90       	pop	r14
    28b8:	ff 90       	pop	r15
    28ba:	0f 91       	pop	r16
    28bc:	1f 91       	pop	r17
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	99 27       	eor	r25, r25
    28c4:	87 fd       	sbrc	r24, 7
    28c6:	90 95       	com	r25
    28c8:	08 95       	ret

000028ca <strnlen_P>:
    28ca:	fc 01       	movw	r30, r24
    28cc:	05 90       	lpm	r0, Z+
    28ce:	61 50       	subi	r22, 0x01	; 1
    28d0:	70 40       	sbci	r23, 0x00	; 0
    28d2:	01 10       	cpse	r0, r1
    28d4:	d8 f7       	brcc	.-10     	; 0x28cc <strnlen_P+0x2>
    28d6:	80 95       	com	r24
    28d8:	90 95       	com	r25
    28da:	8e 0f       	add	r24, r30
    28dc:	9f 1f       	adc	r25, r31
    28de:	08 95       	ret

000028e0 <memcpy>:
    28e0:	fb 01       	movw	r30, r22
    28e2:	dc 01       	movw	r26, r24
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <memcpy+0xa>
    28e6:	01 90       	ld	r0, Z+
    28e8:	0d 92       	st	X+, r0
    28ea:	41 50       	subi	r20, 0x01	; 1
    28ec:	50 40       	sbci	r21, 0x00	; 0
    28ee:	d8 f7       	brcc	.-10     	; 0x28e6 <memcpy+0x6>
    28f0:	08 95       	ret

000028f2 <memset>:
    28f2:	dc 01       	movw	r26, r24
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <memset+0x6>
    28f6:	6d 93       	st	X+, r22
    28f8:	41 50       	subi	r20, 0x01	; 1
    28fa:	50 40       	sbci	r21, 0x00	; 0
    28fc:	e0 f7       	brcc	.-8      	; 0x28f6 <memset+0x4>
    28fe:	08 95       	ret

00002900 <strnlen>:
    2900:	fc 01       	movw	r30, r24
    2902:	61 50       	subi	r22, 0x01	; 1
    2904:	70 40       	sbci	r23, 0x00	; 0
    2906:	01 90       	ld	r0, Z+
    2908:	01 10       	cpse	r0, r1
    290a:	d8 f7       	brcc	.-10     	; 0x2902 <strnlen+0x2>
    290c:	80 95       	com	r24
    290e:	90 95       	com	r25
    2910:	8e 0f       	add	r24, r30
    2912:	9f 1f       	adc	r25, r31
    2914:	08 95       	ret

00002916 <fputc>:
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	fb 01       	movw	r30, r22
    2920:	23 81       	ldd	r18, Z+3	; 0x03
    2922:	21 fd       	sbrc	r18, 1
    2924:	03 c0       	rjmp	.+6      	; 0x292c <fputc+0x16>
    2926:	8f ef       	ldi	r24, 0xFF	; 255
    2928:	9f ef       	ldi	r25, 0xFF	; 255
    292a:	2c c0       	rjmp	.+88     	; 0x2984 <fputc+0x6e>
    292c:	22 ff       	sbrs	r18, 2
    292e:	16 c0       	rjmp	.+44     	; 0x295c <fputc+0x46>
    2930:	46 81       	ldd	r20, Z+6	; 0x06
    2932:	57 81       	ldd	r21, Z+7	; 0x07
    2934:	24 81       	ldd	r18, Z+4	; 0x04
    2936:	35 81       	ldd	r19, Z+5	; 0x05
    2938:	42 17       	cp	r20, r18
    293a:	53 07       	cpc	r21, r19
    293c:	44 f4       	brge	.+16     	; 0x294e <fputc+0x38>
    293e:	a0 81       	ld	r26, Z
    2940:	b1 81       	ldd	r27, Z+1	; 0x01
    2942:	9d 01       	movw	r18, r26
    2944:	2f 5f       	subi	r18, 0xFF	; 255
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	20 83       	st	Z, r18
    294a:	31 83       	std	Z+1, r19	; 0x01
    294c:	8c 93       	st	X, r24
    294e:	26 81       	ldd	r18, Z+6	; 0x06
    2950:	37 81       	ldd	r19, Z+7	; 0x07
    2952:	2f 5f       	subi	r18, 0xFF	; 255
    2954:	3f 4f       	sbci	r19, 0xFF	; 255
    2956:	26 83       	std	Z+6, r18	; 0x06
    2958:	37 83       	std	Z+7, r19	; 0x07
    295a:	14 c0       	rjmp	.+40     	; 0x2984 <fputc+0x6e>
    295c:	8b 01       	movw	r16, r22
    295e:	ec 01       	movw	r28, r24
    2960:	fb 01       	movw	r30, r22
    2962:	00 84       	ldd	r0, Z+8	; 0x08
    2964:	f1 85       	ldd	r31, Z+9	; 0x09
    2966:	e0 2d       	mov	r30, r0
    2968:	19 95       	eicall
    296a:	89 2b       	or	r24, r25
    296c:	e1 f6       	brne	.-72     	; 0x2926 <fputc+0x10>
    296e:	d8 01       	movw	r26, r16
    2970:	16 96       	adiw	r26, 0x06	; 6
    2972:	8d 91       	ld	r24, X+
    2974:	9c 91       	ld	r25, X
    2976:	17 97       	sbiw	r26, 0x07	; 7
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	16 96       	adiw	r26, 0x06	; 6
    297c:	8d 93       	st	X+, r24
    297e:	9c 93       	st	X, r25
    2980:	17 97       	sbiw	r26, 0x07	; 7
    2982:	ce 01       	movw	r24, r28
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	08 95       	ret

0000298e <printf>:
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	ae 01       	movw	r20, r28
    2998:	4a 5f       	subi	r20, 0xFA	; 250
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	fa 01       	movw	r30, r20
    299e:	61 91       	ld	r22, Z+
    29a0:	71 91       	ld	r23, Z+
    29a2:	af 01       	movw	r20, r30
    29a4:	80 91 95 61 	lds	r24, 0x6195	; 0x806195 <__iob+0x2>
    29a8:	90 91 96 61 	lds	r25, 0x6196	; 0x806196 <__iob+0x3>
    29ac:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <vfprintf>
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <snprintf>:
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	2e 97       	sbiw	r28, 0x0e	; 14
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0e 89       	ldd	r16, Y+22	; 0x16
    29ca:	1f 89       	ldd	r17, Y+23	; 0x17
    29cc:	88 8d       	ldd	r24, Y+24	; 0x18
    29ce:	99 8d       	ldd	r25, Y+25	; 0x19
    29d0:	26 e0       	ldi	r18, 0x06	; 6
    29d2:	2c 83       	std	Y+4, r18	; 0x04
    29d4:	09 83       	std	Y+1, r16	; 0x01
    29d6:	1a 83       	std	Y+2, r17	; 0x02
    29d8:	97 ff       	sbrs	r25, 7
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <snprintf+0x2a>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e8       	ldi	r25, 0x80	; 128
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	ae 01       	movw	r20, r28
    29e8:	44 5e       	subi	r20, 0xE4	; 228
    29ea:	5f 4f       	sbci	r21, 0xFF	; 255
    29ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <vfprintf>
    29f8:	4d 81       	ldd	r20, Y+5	; 0x05
    29fa:	5e 81       	ldd	r21, Y+6	; 0x06
    29fc:	57 fd       	sbrc	r21, 7
    29fe:	0a c0       	rjmp	.+20     	; 0x2a14 <snprintf+0x5e>
    2a00:	2f 81       	ldd	r18, Y+7	; 0x07
    2a02:	38 85       	ldd	r19, Y+8	; 0x08
    2a04:	42 17       	cp	r20, r18
    2a06:	53 07       	cpc	r21, r19
    2a08:	0c f4       	brge	.+2      	; 0x2a0c <snprintf+0x56>
    2a0a:	9a 01       	movw	r18, r20
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	e2 0f       	add	r30, r18
    2a10:	f3 1f       	adc	r31, r19
    2a12:	10 82       	st	Z, r1
    2a14:	2e 96       	adiw	r28, 0x0e	; 14
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	08 95       	ret

00002a24 <__ultoa_invert>:
    2a24:	fa 01       	movw	r30, r20
    2a26:	aa 27       	eor	r26, r26
    2a28:	28 30       	cpi	r18, 0x08	; 8
    2a2a:	51 f1       	breq	.+84     	; 0x2a80 <__ultoa_invert+0x5c>
    2a2c:	20 31       	cpi	r18, 0x10	; 16
    2a2e:	81 f1       	breq	.+96     	; 0x2a90 <__ultoa_invert+0x6c>
    2a30:	e8 94       	clt
    2a32:	6f 93       	push	r22
    2a34:	6e 7f       	andi	r22, 0xFE	; 254
    2a36:	6e 5f       	subi	r22, 0xFE	; 254
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	af 4f       	sbci	r26, 0xFF	; 255
    2a40:	b1 e0       	ldi	r27, 0x01	; 1
    2a42:	3e d0       	rcall	.+124    	; 0x2ac0 <__ultoa_invert+0x9c>
    2a44:	b4 e0       	ldi	r27, 0x04	; 4
    2a46:	3c d0       	rcall	.+120    	; 0x2ac0 <__ultoa_invert+0x9c>
    2a48:	67 0f       	add	r22, r23
    2a4a:	78 1f       	adc	r23, r24
    2a4c:	89 1f       	adc	r24, r25
    2a4e:	9a 1f       	adc	r25, r26
    2a50:	a1 1d       	adc	r26, r1
    2a52:	68 0f       	add	r22, r24
    2a54:	79 1f       	adc	r23, r25
    2a56:	8a 1f       	adc	r24, r26
    2a58:	91 1d       	adc	r25, r1
    2a5a:	a1 1d       	adc	r26, r1
    2a5c:	6a 0f       	add	r22, r26
    2a5e:	71 1d       	adc	r23, r1
    2a60:	81 1d       	adc	r24, r1
    2a62:	91 1d       	adc	r25, r1
    2a64:	a1 1d       	adc	r26, r1
    2a66:	20 d0       	rcall	.+64     	; 0x2aa8 <__ultoa_invert+0x84>
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <__ultoa_invert+0x48>
    2a6a:	68 94       	set
    2a6c:	3f 91       	pop	r19
    2a6e:	2a e0       	ldi	r18, 0x0A	; 10
    2a70:	26 9f       	mul	r18, r22
    2a72:	11 24       	eor	r1, r1
    2a74:	30 19       	sub	r19, r0
    2a76:	30 5d       	subi	r19, 0xD0	; 208
    2a78:	31 93       	st	Z+, r19
    2a7a:	de f6       	brtc	.-74     	; 0x2a32 <__ultoa_invert+0xe>
    2a7c:	cf 01       	movw	r24, r30
    2a7e:	08 95       	ret
    2a80:	46 2f       	mov	r20, r22
    2a82:	47 70       	andi	r20, 0x07	; 7
    2a84:	40 5d       	subi	r20, 0xD0	; 208
    2a86:	41 93       	st	Z+, r20
    2a88:	b3 e0       	ldi	r27, 0x03	; 3
    2a8a:	0f d0       	rcall	.+30     	; 0x2aaa <__ultoa_invert+0x86>
    2a8c:	c9 f7       	brne	.-14     	; 0x2a80 <__ultoa_invert+0x5c>
    2a8e:	f6 cf       	rjmp	.-20     	; 0x2a7c <__ultoa_invert+0x58>
    2a90:	46 2f       	mov	r20, r22
    2a92:	4f 70       	andi	r20, 0x0F	; 15
    2a94:	40 5d       	subi	r20, 0xD0	; 208
    2a96:	4a 33       	cpi	r20, 0x3A	; 58
    2a98:	18 f0       	brcs	.+6      	; 0x2aa0 <__ultoa_invert+0x7c>
    2a9a:	49 5d       	subi	r20, 0xD9	; 217
    2a9c:	31 fd       	sbrc	r19, 1
    2a9e:	40 52       	subi	r20, 0x20	; 32
    2aa0:	41 93       	st	Z+, r20
    2aa2:	02 d0       	rcall	.+4      	; 0x2aa8 <__ultoa_invert+0x84>
    2aa4:	a9 f7       	brne	.-22     	; 0x2a90 <__ultoa_invert+0x6c>
    2aa6:	ea cf       	rjmp	.-44     	; 0x2a7c <__ultoa_invert+0x58>
    2aa8:	b4 e0       	ldi	r27, 0x04	; 4
    2aaa:	a6 95       	lsr	r26
    2aac:	97 95       	ror	r25
    2aae:	87 95       	ror	r24
    2ab0:	77 95       	ror	r23
    2ab2:	67 95       	ror	r22
    2ab4:	ba 95       	dec	r27
    2ab6:	c9 f7       	brne	.-14     	; 0x2aaa <__ultoa_invert+0x86>
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	61 05       	cpc	r22, r1
    2abc:	71 05       	cpc	r23, r1
    2abe:	08 95       	ret
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	0a 2e       	mov	r0, r26
    2ac6:	06 94       	lsr	r0
    2ac8:	57 95       	ror	r21
    2aca:	47 95       	ror	r20
    2acc:	37 95       	ror	r19
    2ace:	27 95       	ror	r18
    2ad0:	ba 95       	dec	r27
    2ad2:	c9 f7       	brne	.-14     	; 0x2ac6 <__ultoa_invert+0xa2>
    2ad4:	62 0f       	add	r22, r18
    2ad6:	73 1f       	adc	r23, r19
    2ad8:	84 1f       	adc	r24, r20
    2ada:	95 1f       	adc	r25, r21
    2adc:	a0 1d       	adc	r26, r0
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
