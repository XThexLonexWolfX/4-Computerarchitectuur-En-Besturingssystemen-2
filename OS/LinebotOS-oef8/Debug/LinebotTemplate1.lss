
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00802000  00003a26  00003aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000428d  00802112  00802112  00003bcc  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0fe  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000416a  00000000  00000000  0000f336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000473e  00000000  00000000  000134a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011b8  00000000  00000000  00017be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f39  00000000  00000000  00018d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000795a  00000000  00000000  0001ccd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  0002462b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__ctors_end>
       4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
       8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
       c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      10:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      14:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      18:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      20:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      24:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      28:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      2c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      30:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      34:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      38:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__vector_14>
      3c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      40:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      44:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      48:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      4c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      50:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_20>
      54:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      58:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      5c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      60:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      64:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      68:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      6c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      70:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      74:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      78:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      7c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      80:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      84:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      88:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      8c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      90:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      94:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      98:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      9c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      a8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      ac:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      b8:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_46>
      bc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      c8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      cc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      d8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      dc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      e8:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_58>
      ec:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f0:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_60>
      f4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      f8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
      fc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     100:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     104:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     108:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     10c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     110:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     114:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     118:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     11c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     120:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     124:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     128:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     12c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     130:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     134:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     138:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     13c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     140:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     144:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     148:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     14c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     150:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     154:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     158:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     15c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     160:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     164:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     168:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     16c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     170:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     174:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     178:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     17c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     180:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     184:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     188:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     18c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     190:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     194:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     198:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     19c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1a8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1ac:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1b8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1bc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1c8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1cc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1d8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1dc:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1e8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1ec:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f0:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>
     1f8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 b1 02 	jmp	0x562	; 0x562 <stdio_getchar>
     200:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <WorkerTerminal>
     204:	0c 94 12 13 	jmp	0x2624	; 0x2624 <WorkerLooplicht>
     208:	0c 94 c7 02 	jmp	0x58e	; 0x58e <stdio_putchar>
     20c:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <prvIdleTask>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__c.2474>:
     312:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000031e <__ctors_end>:
     31e:	11 24       	eor	r1, r1
     320:	1f be       	out	0x3f, r1	; 63
     322:	cf ef       	ldi	r28, 0xFF	; 255
     324:	cd bf       	out	0x3d, r28	; 61
     326:	df e9       	ldi	r29, 0x9F	; 159
     328:	de bf       	out	0x3e, r29	; 62
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	0c bf       	out	0x3c, r16	; 60

0000032e <__do_copy_data>:
     32e:	11 e2       	ldi	r17, 0x21	; 33
     330:	a0 e0       	ldi	r26, 0x00	; 0
     332:	b0 e2       	ldi	r27, 0x20	; 32
     334:	e6 e2       	ldi	r30, 0x26	; 38
     336:	fa e3       	ldi	r31, 0x3A	; 58
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	0b bf       	out	0x3b, r16	; 59
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__do_copy_data+0x14>
     33e:	07 90       	elpm	r0, Z+
     340:	0d 92       	st	X+, r0
     342:	a2 31       	cpi	r26, 0x12	; 18
     344:	b1 07       	cpc	r27, r17
     346:	d9 f7       	brne	.-10     	; 0x33e <__do_copy_data+0x10>

00000348 <__do_clear_bss>:
     348:	23 e6       	ldi	r18, 0x63	; 99
     34a:	a2 e1       	ldi	r26, 0x12	; 18
     34c:	b1 e2       	ldi	r27, 0x21	; 33
     34e:	01 c0       	rjmp	.+2      	; 0x352 <.do_clear_bss_start>

00000350 <.do_clear_bss_loop>:
     350:	1d 92       	st	X+, r1

00000352 <.do_clear_bss_start>:
     352:	af 39       	cpi	r26, 0x9F	; 159
     354:	b2 07       	cpc	r27, r18
     356:	e1 f7       	brne	.-8      	; 0x350 <.do_clear_bss_loop>
     358:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <main>
     35c:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <_exit>

00000360 <__bad_interrupt>:
     360:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000364 <DriverAdcInit>:
#include "DriverAdc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void DriverAdcInit(void)
{
     364:	08 95       	ret

00000366 <DriverCursorstickInit>:
#include "DriverCursorstick.h"

void DriverCursorstickInit(void)
{
     366:	08 95       	ret

00000368 <DbgPrint>:
#include "DriverDbgUSART.h"
#include "hwconfig.h"

void DbgPrint(char *Text)
{
     368:	fc 01       	movw	r30, r24
	uint8_t CtrlABack;
	uint8_t CtrlBBack;
	uint8_t CtrlCBack;
	
	CtrlABack=USART.CTRLA;
     36a:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	CtrlBBack=USART.CTRLB;
     36e:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	CtrlCBack=USART.CTRLC;
     372:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
	
	while (*Text!=0)
     376:	90 81       	ld	r25, Z
     378:	99 23       	and	r25, r25
     37a:	69 f0       	breq	.+26     	; 0x396 <DbgPrint+0x2e>
     37c:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     37e:	80 e4       	ldi	r24, 0x40	; 64
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
	{
		USART.DATA = *Text;
     380:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     384:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     388:	96 ff       	sbrs	r25, 6
     38a:	fc cf       	rjmp	.-8      	; 0x384 <DbgPrint+0x1c>
		USART.STATUS=0b01000000;
     38c:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
	
	CtrlABack=USART.CTRLA;
	CtrlBBack=USART.CTRLB;
	CtrlCBack=USART.CTRLC;
	
	while (*Text!=0)
     390:	91 91       	ld	r25, Z+
     392:	91 11       	cpse	r25, r1
     394:	f5 cf       	rjmp	.-22     	; 0x380 <DbgPrint+0x18>
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
		Text++;
	}
	
	USART.CTRLA=CtrlABack;
     396:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	USART.CTRLB=CtrlBBack;
     39a:	30 93 a4 0a 	sts	0x0AA4, r19	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
	USART.CTRLC=CtrlCBack;
     39e:	40 93 a5 0a 	sts	0x0AA5, r20	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
}
     3a2:	08 95       	ret

000003a4 <DriverLedInit>:
#include "DriverLed.h"

void DriverLedInit(void)
{
	PORTB.DIRSET=0b00000111; // PB0-2 als uitgang zetten
     3a4:	e0 e2       	ldi	r30, 0x20	; 32
     3a6:	f6 e0       	ldi	r31, 0x06	; 6
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	81 83       	std	Z+1, r24	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTB.PIN0CTRL=0b01000000;
     3ac:	80 e4       	ldi	r24, 0x40	; 64
     3ae:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL=0b01000000;
     3b0:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL=0b01000000;
     3b2:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTA.DIRSET=0b10000000; // PA7 als uitgang zetten
     3b4:	e0 e0       	ldi	r30, 0x00	; 0
     3b6:	f6 e0       	ldi	r31, 0x06	; 6
     3b8:	90 e8       	ldi	r25, 0x80	; 128
     3ba:	91 83       	std	Z+1, r25	; 0x01
	// Logica omdraaien zodat een 1 sturen naar de LED's ze laat branden ipv een 0
	// Zie pagina 133
	PORTA.PIN7CTRL=0b01000000;
     3bc:	87 8b       	std	Z+23, r24	; 0x17
     3be:	08 95       	ret

000003c0 <DriverLedWrite>:
}

void DriverLedWrite(uint8_t LedData)
{
	PORTB.OUT = LedData & 0b00000111;	// Alleen de de waarden van PB0-2 overhouden
     3c0:	98 2f       	mov	r25, r24
     3c2:	97 70       	andi	r25, 0x07	; 7
     3c4:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	LedData = LedData<<4; // 4 nullen langs rechts inschuiven om de 4de bit op plaats 8 te krijgen voor PA7
	PORTA.OUT = LedData & 0b10000000; // Alleen waarde van PA7 overhouden
     3c8:	82 95       	swap	r24
     3ca:	80 78       	andi	r24, 0x80	; 128
     3cc:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
     3d0:	08 95       	ret

000003d2 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     3d2:	8b ec       	ldi	r24, 0xCB	; 203
     3d4:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     3de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3e2:	83 ff       	sbrs	r24, 3
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     3e6:	82 ec       	ldi	r24, 0xC2	; 194
     3e8:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     3ec:	88 e1       	ldi	r24, 0x18	; 24
     3ee:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     3f2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     3f6:	84 ff       	sbrs	r24, 4
     3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     3fa:	88 ed       	ldi	r24, 0xD8	; 216
     3fc:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret

00000408 <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     408:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
     40c:	e0 e8       	ldi	r30, 0x80	; 128
     40e:	f6 e0       	ldi	r31, 0x06	; 6
     410:	88 e1       	ldi	r24, 0x18	; 24
     412:	80 8b       	std	Z+16, r24	; 0x10
     414:	81 8b       	std	Z+17, r24	; 0x11
     416:	e0 ea       	ldi	r30, 0xA0	; 160
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	88 e7       	ldi	r24, 0x78	; 120
     41c:	81 83       	std	Z+1, r24	; 0x01
     41e:	83 e2       	ldi	r24, 0x23	; 35
     420:	85 83       	std	Z+5, r24	; 0x05
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	84 83       	std	Z+4, r24	; 0x04
     426:	08 95       	ret

00000428 <TWIMWriteHandler>:
     428:	90 91 16 21 	lds	r25, 0x2116	; 0x802116 <Twim_bytesToWrite>
     42c:	20 91 15 21 	lds	r18, 0x2115	; 0x802115 <Twim_bytesToRead>
     430:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     434:	84 fd       	sbrc	r24, 4
     436:	08 c0       	rjmp	.+16     	; 0x448 <TWIMWriteHandler+0x20>
     438:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <Twim_bytesWritten>
     43c:	89 17       	cp	r24, r25
     43e:	50 f0       	brcs	.+20     	; 0x454 <TWIMWriteHandler+0x2c>
     440:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <Twim_bytesRead>
     444:	82 17       	cp	r24, r18
     446:	b8 f0       	brcs	.+46     	; 0x476 <TWIMWriteHandler+0x4e>
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     44e:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
     452:	08 95       	ret
     454:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <Twim_bytesWritten>
     458:	e0 91 19 21 	lds	r30, 0x2119	; 0x802119 <Twim_writeData>
     45c:	f0 91 1a 21 	lds	r31, 0x211A	; 0x80211a <Twim_writeData+0x1>
     460:	e8 0f       	add	r30, r24
     462:	f1 1d       	adc	r31, r1
     464:	80 81       	ld	r24, Z
     466:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     46a:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <Twim_bytesWritten>
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <Twim_bytesWritten>
     474:	08 95       	ret
     476:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <Twim_address>
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     480:	08 95       	ret

00000482 <TWIMReadHandler>:
     482:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <Twim_bytesRead>
     486:	80 32       	cpi	r24, 0x20	; 32
     488:	e0 f4       	brcc	.+56     	; 0x4c2 <TWIMReadHandler+0x40>
     48a:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     48e:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <Twim_bytesRead>
     492:	e0 91 17 21 	lds	r30, 0x2117	; 0x802117 <Twim_readData>
     496:	f0 91 18 21 	lds	r31, 0x2118	; 0x802118 <Twim_readData+0x1>
     49a:	e9 0f       	add	r30, r25
     49c:	f1 1d       	adc	r31, r1
     49e:	80 83       	st	Z, r24
     4a0:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <Twim_bytesRead>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <Twim_bytesRead>
     4aa:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <Twim_bytesToRead>
     4ae:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <Twim_bytesRead>
     4b2:	89 17       	cp	r24, r25
     4b4:	88 f0       	brcs	.+34     	; 0x4d8 <TWIMReadHandler+0x56>
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4bc:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
     4c0:	08 95       	ret
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4c8:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
     4cc:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <Twim_bytesToRead>
     4d0:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <Twim_bytesRead>
     4d4:	89 17       	cp	r24, r25
     4d6:	78 f7       	brcc	.-34     	; 0x4b6 <TWIMReadHandler+0x34>
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     4de:	08 95       	ret

000004e0 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	0b b6       	in	r0, 0x3b	; 59
     4ec:	0f 92       	push	r0
     4ee:	2f 93       	push	r18
     4f0:	3f 93       	push	r19
     4f2:	4f 93       	push	r20
     4f4:	5f 93       	push	r21
     4f6:	6f 93       	push	r22
     4f8:	7f 93       	push	r23
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
     4fe:	af 93       	push	r26
     500:	bf 93       	push	r27
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     506:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     50a:	98 2f       	mov	r25, r24
     50c:	9c 70       	andi	r25, 0x0C	; 12
     50e:	39 f4       	brne	.+14     	; 0x51e <__vector_46+0x3e>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     510:	86 fd       	sbrc	r24, 6
     512:	21 c0       	rjmp	.+66     	; 0x556 <__vector_46+0x76>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     514:	87 fd       	sbrc	r24, 7
     516:	22 c0       	rjmp	.+68     	; 0x55c <__vector_46+0x7c>
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     518:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
     51c:	07 c0       	rjmp	.+14     	; 0x52c <__vector_46+0x4c>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     51e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     522:	88 60       	ori	r24, 0x08	; 8
     524:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
     528:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
     52c:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <__data_end>
	{	
	}
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0b be       	out	0x3b, r0	; 59
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
     556:	0e 94 14 02 	call	0x428	; 0x428 <TWIMWriteHandler>
     55a:	e8 cf       	rjmp	.-48     	; 0x52c <__vector_46+0x4c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
     55c:	0e 94 41 02 	call	0x482	; 0x482 <TWIMReadHandler>
     560:	e5 cf       	rjmp	.-54     	; 0x52c <__vector_46+0x4c>

00000562 <stdio_getchar>:
		xQueueReceive(FifoTransmit, &USART.DATA, portMAX_DELAY); // Databyte van FIFO afhalen en rechtsreeks naar USART DATA register schrijven
	}
}
	
static int stdio_getchar(FILE *stream)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	1f 92       	push	r1
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	char Data;
	xQueueReceive(FifoReceive, &Data, portMAX_DELAY); // Data inlezen
     56c:	4f ef       	ldi	r20, 0xFF	; 255
     56e:	5f ef       	ldi	r21, 0xFF	; 255
     570:	be 01       	movw	r22, r28
     572:	6f 5f       	subi	r22, 0xFF	; 255
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	80 91 8f 63 	lds	r24, 0x638F	; 0x80638f <FifoReceive>
     57a:	90 91 90 63 	lds	r25, 0x6390	; 0x806390 <FifoReceive+0x1>
     57e:	0e 94 c8 08 	call	0x1190	; 0x1190 <xQueueReceive>
	return Data; // Data teruggeven
     582:	89 81       	ldd	r24, Y+1	; 0x01
}
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0f 90       	pop	r0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <stdio_putchar>:
	FifoTransmit = xQueueCreate(10, sizeof(char));
}


static int stdio_putchar(char c, FILE * stream)
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	1f 92       	push	r1
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	89 83       	std	Y+1, r24	; 0x01
	/*USART.DATA = c;
	while (!(USART.STATUS & 0b01000000));
	USART.STATUS=0b01000000;
	return 0;*/
	xQueueSend(FifoTransmit, &c, portMAX_DELAY); // Databyte op FIFO zetten
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	4f ef       	ldi	r20, 0xFF	; 255
     59e:	5f ef       	ldi	r21, 0xFF	; 255
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 91 91 63 	lds	r24, 0x6391	; 0x806391 <FifoTransmit>
     5aa:	90 91 92 63 	lds	r25, 0x6392	; 0x806392 <FifoTransmit+0x1>
     5ae:	0e 94 9e 07 	call	0xf3c	; 0xf3c <xQueueGenericSend>
	if (USART.STATUS & 0b00100000) { // Kijken of UART data aan het verzenden is
     5b2:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     5b6:	85 ff       	sbrs	r24, 5
     5b8:	0a c0       	rjmp	.+20     	; 0x5ce <stdio_putchar+0x40>
		xQueueReceive(FifoTransmit, &USART.DATA, portMAX_DELAY); // Databyte van FIFO afhalen en rechtsreeks naar USART DATA register schrijven
     5ba:	4f ef       	ldi	r20, 0xFF	; 255
     5bc:	5f ef       	ldi	r21, 0xFF	; 255
     5be:	60 ea       	ldi	r22, 0xA0	; 160
     5c0:	7a e0       	ldi	r23, 0x0A	; 10
     5c2:	80 91 91 63 	lds	r24, 0x6391	; 0x806391 <FifoTransmit>
     5c6:	90 91 92 63 	lds	r25, 0x6392	; 0x806392 <FifoTransmit+0x1>
     5ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <xQueueReceive>
	}
}
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <DriverUSARTInit>:
QueueHandle_t FifoReceive;
QueueHandle_t FifoTransmit;

void DriverUSARTInit(void)
{
	USART_PORT.DIRSET=0b00001000;	
     5d6:	e0 e8       	ldi	r30, 0x80	; 128
     5d8:	f6 e0       	ldi	r31, 0x06	; 6
     5da:	88 e0       	ldi	r24, 0x08	; 8
     5dc:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     5de:	84 e0       	ldi	r24, 0x04	; 4
     5e0:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00010100; // Pagina 259
     5e2:	e0 ea       	ldi	r30, 0xA0	; 160
     5e4:	fa e0       	ldi	r31, 0x0A	; 10
     5e6:	84 e1       	ldi	r24, 0x14	; 20
     5e8:	83 83       	std	Z+3, r24	; 0x03
	USART.CTRLB=0b00011000; // Pagina 260
     5ea:	88 e1       	ldi	r24, 0x18	; 24
     5ec:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;	
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
     5f2:	85 ee       	ldi	r24, 0xE5	; 229
     5f4:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
     5f6:	8c eb       	ldi	r24, 0xBC	; 188
     5f8:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
     5fa:	e9 e9       	ldi	r30, 0x99	; 153
     5fc:	f3 e6       	ldi	r31, 0x63	; 99
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e2       	ldi	r25, 0x20	; 32
     602:	82 83       	std	Z+2, r24	; 0x02
     604:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
     606:	80 83       	st	Z, r24
     608:	91 83       	std	Z+1, r25	; 0x01
	
	FifoReceive = xQueueCreate(10, sizeof(char)); // USART gebruikt 10 bits zie periferie dia 78
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	8a e0       	ldi	r24, 0x0A	; 10
     610:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <xQueueGenericCreate>
     614:	80 93 8f 63 	sts	0x638F, r24	; 0x80638f <FifoReceive>
     618:	90 93 90 63 	sts	0x6390, r25	; 0x806390 <FifoReceive+0x1>
	FifoTransmit = xQueueCreate(10, sizeof(char));
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <xQueueGenericCreate>
     626:	80 93 91 63 	sts	0x6391, r24	; 0x806391 <FifoTransmit>
     62a:	90 93 92 63 	sts	0x6392, r25	; 0x806392 <FifoTransmit+0x1>
     62e:	08 95       	ret

00000630 <__vector_58>:
	char Data;
	xQueueReceive(FifoReceive, &Data, portMAX_DELAY); // Data inlezen
	return Data; // Data teruggeven
}

ISR(USART_RXC_vect) { // Receive Interrupt Vector
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	0b b6       	in	r0, 0x3b	; 59
     63c:	0f 92       	push	r0
     63e:	2f 93       	push	r18
     640:	3f 93       	push	r19
     642:	4f 93       	push	r20
     644:	5f 93       	push	r21
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	bf 93       	push	r27
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
	xQueueSendFromISR(FifoReceive, &USART.DATA, NULL); // Data doorsturen
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	60 ea       	ldi	r22, 0xA0	; 160
     65e:	7a e0       	ldi	r23, 0x0A	; 10
     660:	80 91 8f 63 	lds	r24, 0x638F	; 0x80638f <FifoReceive>
     664:	90 91 90 63 	lds	r25, 0x6390	; 0x806390 <FifoReceive+0x1>
     668:	0e 94 6d 08 	call	0x10da	; 0x10da <xQueueGenericSendFromISR>
}
     66c:	ff 91       	pop	r31
     66e:	ef 91       	pop	r30
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	7f 91       	pop	r23
     67a:	6f 91       	pop	r22
     67c:	5f 91       	pop	r21
     67e:	4f 91       	pop	r20
     680:	3f 91       	pop	r19
     682:	2f 91       	pop	r18
     684:	0f 90       	pop	r0
     686:	0b be       	out	0x3b, r0	; 59
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <__vector_60>:

ISR(USART_TXC_vect) {
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	0b b6       	in	r0, 0x3b	; 59
     69e:	0f 92       	push	r0
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	xQueueReceiveFromISR(FifoTransmit, &USART.DATA, NULL); // Databyte van FIFO afhalen en naar USART.DATA register schrijven
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	60 ea       	ldi	r22, 0xA0	; 160
     6be:	7a e0       	ldi	r23, 0x0A	; 10
     6c0:	80 91 91 63 	lds	r24, 0x6391	; 0x806391 <FifoTransmit>
     6c4:	90 91 92 63 	lds	r25, 0x6392	; 0x806392 <FifoTransmit+0x1>
     6c8:	0e 94 85 09 	call	0x130a	; 0x130a <xQueueReceiveFromISR>
     6cc:	ff 91       	pop	r31
     6ce:	ef 91       	pop	r30
     6d0:	bf 91       	pop	r27
     6d2:	af 91       	pop	r26
     6d4:	9f 91       	pop	r25
     6d6:	8f 91       	pop	r24
     6d8:	7f 91       	pop	r23
     6da:	6f 91       	pop	r22
     6dc:	5f 91       	pop	r21
     6de:	4f 91       	pop	r20
     6e0:	3f 91       	pop	r19
     6e2:	2f 91       	pop	r18
     6e4:	0f 90       	pop	r0
     6e6:	0b be       	out	0x3b, r0	; 59
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     6fc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     700:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <xHeapHasBeenInitialised.4117>
     704:	81 11       	cpse	r24, r1
     706:	21 c0       	rjmp	.+66     	; 0x74a <pvPortMalloc+0x58>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     708:	86 e2       	ldi	r24, 0x26	; 38
     70a:	91 e2       	ldi	r25, 0x21	; 33
     70c:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <xStart>
     710:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
     714:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <xStart+0x2>
     718:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	9f e3       	ldi	r25, 0x3F	; 63
     720:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <xEnd+0x2>
     724:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
     728:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <xEnd>
     72c:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     730:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <ucHeap+0x3>
     734:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <ucHeap+0x4>
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     738:	8d e1       	ldi	r24, 0x1D	; 29
     73a:	91 e2       	ldi	r25, 0x21	; 33
     73c:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <ucHeap+0x1>
     740:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <ucHeap+0x2>
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <xHeapHasBeenInitialised.4117>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     74a:	20 97       	sbiw	r28, 0x00	; 0
     74c:	09 f4       	brne	.+2      	; 0x750 <pvPortMalloc+0x5e>
     74e:	64 c0       	rjmp	.+200    	; 0x818 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
     750:	ae 01       	movw	r20, r28
     752:	4c 5f       	subi	r20, 0xFC	; 252
     754:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     756:	23 96       	adiw	r28, 0x03	; 3
     758:	ce 3f       	cpi	r28, 0xFE	; 254
     75a:	df 43       	sbci	r29, 0x3F	; 63
     75c:	08 f0       	brcs	.+2      	; 0x760 <pvPortMalloc+0x6e>
     75e:	5c c0       	rjmp	.+184    	; 0x818 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     760:	e0 91 21 21 	lds	r30, 0x2121	; 0x802121 <xStart>
     764:	f0 91 22 21 	lds	r31, 0x2122	; 0x802122 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     768:	a1 e2       	ldi	r26, 0x21	; 33
     76a:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     76c:	06 c0       	rjmp	.+12     	; 0x77a <pvPortMalloc+0x88>
     76e:	80 81       	ld	r24, Z
     770:	91 81       	ldd	r25, Z+1	; 0x01
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	39 f0       	breq	.+14     	; 0x784 <pvPortMalloc+0x92>
     776:	df 01       	movw	r26, r30
     778:	fc 01       	movw	r30, r24
     77a:	22 81       	ldd	r18, Z+2	; 0x02
     77c:	33 81       	ldd	r19, Z+3	; 0x03
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	a8 f3       	brcs	.-22     	; 0x76e <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     784:	c1 e2       	ldi	r28, 0x21	; 33
     786:	ed 31       	cpi	r30, 0x1D	; 29
     788:	fc 07       	cpc	r31, r28
     78a:	09 f4       	brne	.+2      	; 0x78e <pvPortMalloc+0x9c>
     78c:	45 c0       	rjmp	.+138    	; 0x818 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     78e:	cd 91       	ld	r28, X+
     790:	dc 91       	ld	r29, X
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	8e 01       	movw	r16, r28
     796:	0c 5f       	subi	r16, 0xFC	; 252
     798:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	8d 93       	st	X+, r24
     7a0:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     7a2:	c9 01       	movw	r24, r18
     7a4:	84 1b       	sub	r24, r20
     7a6:	95 0b       	sbc	r25, r21
     7a8:	89 30       	cpi	r24, 0x09	; 9
     7aa:	91 05       	cpc	r25, r1
     7ac:	00 f1       	brcs	.+64     	; 0x7ee <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7ae:	bf 01       	movw	r22, r30
     7b0:	64 0f       	add	r22, r20
     7b2:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7b4:	db 01       	movw	r26, r22
     7b6:	12 96       	adiw	r26, 0x02	; 2
     7b8:	8d 93       	st	X+, r24
     7ba:	9c 93       	st	X, r25
     7bc:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     7be:	42 83       	std	Z+2, r20	; 0x02
     7c0:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     7c2:	12 96       	adiw	r26, 0x02	; 2
     7c4:	2d 91       	ld	r18, X+
     7c6:	3c 91       	ld	r19, X
     7c8:	13 97       	sbiw	r26, 0x03	; 3
     7ca:	a1 e2       	ldi	r26, 0x21	; 33
     7cc:	b1 e2       	ldi	r27, 0x21	; 33
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <pvPortMalloc+0xe0>
     7d0:	df 01       	movw	r26, r30
     7d2:	ed 91       	ld	r30, X+
     7d4:	fc 91       	ld	r31, X
     7d6:	11 97       	sbiw	r26, 0x01	; 1
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	b8 f3       	brcs	.-18     	; 0x7d0 <pvPortMalloc+0xde>
     7e2:	eb 01       	movw	r28, r22
     7e4:	e8 83       	st	Y, r30
     7e6:	f9 83       	std	Y+1, r31	; 0x01
     7e8:	6d 93       	st	X+, r22
     7ea:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
     7ec:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     7ee:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     7f2:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     7f6:	82 1b       	sub	r24, r18
     7f8:	93 0b       	sbc	r25, r19
     7fa:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <xFreeBytesRemaining>
     7fe:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     802:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     806:	01 15       	cp	r16, r1
     808:	11 05       	cpc	r17, r1
     80a:	41 f0       	breq	.+16     	; 0x81c <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
     80c:	c8 01       	movw	r24, r16
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     818:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     81c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <vApplicationMallocFailedHook>
     820:	00 e0       	ldi	r16, 0x00	; 0
     822:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
     824:	c8 01       	movw	r24, r16
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	21 f1       	breq	.+72     	; 0x880 <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     838:	ec 01       	movw	r28, r24
     83a:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     83c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     840:	4a 81       	ldd	r20, Y+2	; 0x02
     842:	5b 81       	ldd	r21, Y+3	; 0x03
     844:	a1 e2       	ldi	r26, 0x21	; 33
     846:	b1 e2       	ldi	r27, 0x21	; 33
     848:	01 c0       	rjmp	.+2      	; 0x84c <vPortFree+0x1c>
     84a:	df 01       	movw	r26, r30
     84c:	ed 91       	ld	r30, X+
     84e:	fc 91       	ld	r31, X
     850:	11 97       	sbiw	r26, 0x01	; 1
     852:	22 81       	ldd	r18, Z+2	; 0x02
     854:	33 81       	ldd	r19, Z+3	; 0x03
     856:	24 17       	cp	r18, r20
     858:	35 07       	cpc	r19, r21
     85a:	b8 f3       	brcs	.-18     	; 0x84a <vPortFree+0x1a>
     85c:	e8 83       	st	Y, r30
     85e:	f9 83       	std	Y+1, r31	; 0x01
     860:	cd 93       	st	X+, r28
     862:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
     864:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <xFreeBytesRemaining>
     868:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <xFreeBytesRemaining+0x1>
     86c:	48 0f       	add	r20, r24
     86e:	59 1f       	adc	r21, r25
     870:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <xFreeBytesRemaining>
     874:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     87c:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <xTaskResumeAll>
	}
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     886:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     888:	03 96       	adiw	r24, 0x03	; 3
     88a:	81 83       	std	Z+1, r24	; 0x01
     88c:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	3f ef       	ldi	r19, 0xFF	; 255
     892:	23 83       	std	Z+3, r18	; 0x03
     894:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     896:	85 83       	std	Z+5, r24	; 0x05
     898:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     89a:	87 83       	std	Z+7, r24	; 0x07
     89c:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     89e:	10 82       	st	Z, r1
     8a0:	08 95       	ret

000008a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     8a2:	fc 01       	movw	r30, r24
     8a4:	10 86       	std	Z+8, r1	; 0x08
     8a6:	11 86       	std	Z+9, r1	; 0x09
     8a8:	08 95       	ret

000008aa <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	9c 01       	movw	r18, r24
     8b0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     8b2:	dc 01       	movw	r26, r24
     8b4:	11 96       	adiw	r26, 0x01	; 1
     8b6:	cd 91       	ld	r28, X+
     8b8:	dc 91       	ld	r29, X
     8ba:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     8bc:	c2 83       	std	Z+2, r28	; 0x02
     8be:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	9d 81       	ldd	r25, Y+5	; 0x05
     8c4:	84 83       	std	Z+4, r24	; 0x04
     8c6:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	9d 81       	ldd	r25, Y+5	; 0x05
     8cc:	dc 01       	movw	r26, r24
     8ce:	12 96       	adiw	r26, 0x02	; 2
     8d0:	6d 93       	st	X+, r22
     8d2:	7c 93       	st	X, r23
     8d4:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     8d6:	6c 83       	std	Y+4, r22	; 0x04
     8d8:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     8da:	20 87       	std	Z+8, r18	; 0x08
     8dc:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     8de:	f9 01       	movw	r30, r18
     8e0:	80 81       	ld	r24, Z
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	80 83       	st	Z, r24
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8f2:	48 81       	ld	r20, Y
     8f4:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8f6:	4f 3f       	cpi	r20, 0xFF	; 255
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	52 07       	cpc	r21, r18
     8fc:	01 f1       	breq	.+64     	; 0x93e <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     8fe:	dc 01       	movw	r26, r24
     900:	13 96       	adiw	r26, 0x03	; 3
     902:	01 c0       	rjmp	.+2      	; 0x906 <vListInsert+0x1a>
     904:	df 01       	movw	r26, r30
     906:	12 96       	adiw	r26, 0x02	; 2
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	13 97       	sbiw	r26, 0x03	; 3
     90e:	20 81       	ld	r18, Z
     910:	31 81       	ldd	r19, Z+1	; 0x01
     912:	42 17       	cp	r20, r18
     914:	53 07       	cpc	r21, r19
     916:	b0 f7       	brcc	.-20     	; 0x904 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     918:	ea 83       	std	Y+2, r30	; 0x02
     91a:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     91c:	c4 83       	std	Z+4, r28	; 0x04
     91e:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     920:	ac 83       	std	Y+4, r26	; 0x04
     922:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     924:	12 96       	adiw	r26, 0x02	; 2
     926:	cd 93       	st	X+, r28
     928:	dc 93       	st	X, r29
     92a:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     92c:	88 87       	std	Y+8, r24	; 0x08
     92e:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     930:	fc 01       	movw	r30, r24
     932:	20 81       	ld	r18, Z
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	20 83       	st	Z, r18
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     93e:	fc 01       	movw	r30, r24
     940:	a7 81       	ldd	r26, Z+7	; 0x07
     942:	b0 85       	ldd	r27, Z+8	; 0x08
     944:	12 96       	adiw	r26, 0x02	; 2
     946:	ed 91       	ld	r30, X+
     948:	fc 91       	ld	r31, X
     94a:	13 97       	sbiw	r26, 0x03	; 3
     94c:	e5 cf       	rjmp	.-54     	; 0x918 <vListInsert+0x2c>

0000094e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     954:	a0 85       	ldd	r26, Z+8	; 0x08
     956:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     958:	22 81       	ldd	r18, Z+2	; 0x02
     95a:	33 81       	ldd	r19, Z+3	; 0x03
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	95 81       	ldd	r25, Z+5	; 0x05
     960:	e9 01       	movw	r28, r18
     962:	8c 83       	std	Y+4, r24	; 0x04
     964:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     966:	84 81       	ldd	r24, Z+4	; 0x04
     968:	95 81       	ldd	r25, Z+5	; 0x05
     96a:	ec 01       	movw	r28, r24
     96c:	2a 83       	std	Y+2, r18	; 0x02
     96e:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	2d 91       	ld	r18, X+
     974:	3c 91       	ld	r19, X
     976:	12 97       	sbiw	r26, 0x02	; 2
     978:	e2 17       	cp	r30, r18
     97a:	f3 07       	cpc	r31, r19
     97c:	49 f0       	breq	.+18     	; 0x990 <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     97e:	10 86       	std	Z+8, r1	; 0x08
     980:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     982:	8c 91       	ld	r24, X
     984:	81 50       	subi	r24, 0x01	; 1
     986:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     988:	8c 91       	ld	r24, X
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     990:	11 96       	adiw	r26, 0x01	; 1
     992:	8d 93       	st	X+, r24
     994:	9c 93       	st	X, r25
     996:	12 97       	sbiw	r26, 0x02	; 2
     998:	f2 cf       	rjmp	.-28     	; 0x97e <uxListRemove+0x30>

0000099a <pxPortInitialiseStack>:
void vPortYieldISR( void )
{
	portSAVE_CONTEXT();
	vTaskSwitchContext();
	portRESTORE_CONTEXT();
	asm volatile ( "reti" );
     99a:	31 e1       	ldi	r19, 0x11	; 17
     99c:	fc 01       	movw	r30, r24
     99e:	30 83       	st	Z, r19
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	22 e2       	ldi	r18, 0x22	; 34
     9a4:	20 83       	st	Z, r18
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	a3 e3       	ldi	r26, 0x33	; 51
     9aa:	a0 83       	st	Z, r26
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	60 83       	st	Z, r22
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	70 83       	st	Z, r23
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	10 82       	st	Z, r1
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	10 82       	st	Z, r1
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	60 e8       	ldi	r22, 0x80	; 128
     9c0:	60 83       	st	Z, r22
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	10 82       	st	Z, r1
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	60 83       	st	Z, r22
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	60 83       	st	Z, r22
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	64 e0       	ldi	r22, 0x04	; 4
     9d6:	60 83       	st	Z, r22
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	65 e0       	ldi	r22, 0x05	; 5
     9dc:	60 83       	st	Z, r22
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	66 e0       	ldi	r22, 0x06	; 6
     9e2:	60 83       	st	Z, r22
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	60 83       	st	Z, r22
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	68 e0       	ldi	r22, 0x08	; 8
     9ee:	60 83       	st	Z, r22
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	69 e0       	ldi	r22, 0x09	; 9
     9f4:	60 83       	st	Z, r22
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	60 e1       	ldi	r22, 0x10	; 16
     9fa:	60 83       	st	Z, r22
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	30 83       	st	Z, r19
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	32 e1       	ldi	r19, 0x12	; 18
     a04:	30 83       	st	Z, r19
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	33 e1       	ldi	r19, 0x13	; 19
     a0a:	30 83       	st	Z, r19
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	34 e1       	ldi	r19, 0x14	; 20
     a10:	30 83       	st	Z, r19
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	35 e1       	ldi	r19, 0x15	; 21
     a16:	30 83       	st	Z, r19
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	36 e1       	ldi	r19, 0x16	; 22
     a1c:	30 83       	st	Z, r19
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	37 e1       	ldi	r19, 0x17	; 23
     a22:	30 83       	st	Z, r19
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	38 e1       	ldi	r19, 0x18	; 24
     a28:	30 83       	st	Z, r19
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	39 e1       	ldi	r19, 0x19	; 25
     a2e:	30 83       	st	Z, r19
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	30 e2       	ldi	r19, 0x20	; 32
     a34:	30 83       	st	Z, r19
     a36:	31 97       	sbiw	r30, 0x01	; 1
     a38:	31 e2       	ldi	r19, 0x21	; 33
     a3a:	30 83       	st	Z, r19
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	20 83       	st	Z, r18
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	23 e2       	ldi	r18, 0x23	; 35
     a44:	20 83       	st	Z, r18
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	40 83       	st	Z, r20
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	50 83       	st	Z, r21
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	26 e2       	ldi	r18, 0x26	; 38
     a52:	20 83       	st	Z, r18
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	27 e2       	ldi	r18, 0x27	; 39
     a58:	20 83       	st	Z, r18
     a5a:	31 97       	sbiw	r30, 0x01	; 1
     a5c:	28 e2       	ldi	r18, 0x28	; 40
     a5e:	20 83       	st	Z, r18
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	29 e2       	ldi	r18, 0x29	; 41
     a64:	20 83       	st	Z, r18
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	20 e3       	ldi	r18, 0x30	; 48
     a6a:	20 83       	st	Z, r18
     a6c:	31 97       	sbiw	r30, 0x01	; 1
     a6e:	21 e3       	ldi	r18, 0x31	; 49
     a70:	20 83       	st	Z, r18
     a72:	87 97       	sbiw	r24, 0x27	; 39
     a74:	08 95       	ret

00000a76 <xPortStartScheduler>:
     a76:	e0 e0       	ldi	r30, 0x00	; 0
     a78:	f8 e0       	ldi	r31, 0x08	; 8
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
     a7e:	86 83       	std	Z+6, r24	; 0x06
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	9d e7       	ldi	r25, 0x7D	; 125
     a84:	86 a3       	std	Z+38, r24	; 0x26
     a86:	97 a3       	std	Z+39, r25	; 0x27
     a88:	a0 91 8d 61 	lds	r26, 0x618D	; 0x80618d <pxCurrentTCB>
     a8c:	b0 91 8e 61 	lds	r27, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
     a90:	cd 91       	ld	r28, X+
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	dd 91       	ld	r29, X+
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	bf 90       	pop	r11
     ac2:	af 90       	pop	r10
     ac4:	9f 90       	pop	r9
     ac6:	8f 90       	pop	r8
     ac8:	7f 90       	pop	r7
     aca:	6f 90       	pop	r6
     acc:	5f 90       	pop	r5
     ace:	4f 90       	pop	r4
     ad0:	3f 90       	pop	r3
     ad2:	2f 90       	pop	r2
     ad4:	1f 90       	pop	r1
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	08 95       	ret
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	08 95       	ret

00000ae2 <vPortYield>:
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	0f 92       	push	r0
     aea:	1f 92       	push	r1
     aec:	11 24       	eor	r1, r1
     aee:	2f 92       	push	r2
     af0:	3f 92       	push	r3
     af2:	4f 92       	push	r4
     af4:	5f 92       	push	r5
     af6:	6f 92       	push	r6
     af8:	7f 92       	push	r7
     afa:	8f 92       	push	r8
     afc:	9f 92       	push	r9
     afe:	af 92       	push	r10
     b00:	bf 92       	push	r11
     b02:	cf 92       	push	r12
     b04:	df 92       	push	r13
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	2f 93       	push	r18
     b10:	3f 93       	push	r19
     b12:	4f 93       	push	r20
     b14:	5f 93       	push	r21
     b16:	6f 93       	push	r22
     b18:	7f 93       	push	r23
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ef 93       	push	r30
     b28:	ff 93       	push	r31
     b2a:	a0 91 8d 61 	lds	r26, 0x618D	; 0x80618d <pxCurrentTCB>
     b2e:	b0 91 8e 61 	lds	r27, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
     b32:	0d b6       	in	r0, 0x3d	; 61
     b34:	0d 92       	st	X+, r0
     b36:	0e b6       	in	r0, 0x3e	; 62
     b38:	0d 92       	st	X+, r0
     b3a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vTaskSwitchContext>
     b3e:	a0 91 8d 61 	lds	r26, 0x618D	; 0x80618d <pxCurrentTCB>
     b42:	b0 91 8e 61 	lds	r27, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
     b46:	cd 91       	ld	r28, X+
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	dd 91       	ld	r29, X+
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	bf 90       	pop	r11
     b78:	af 90       	pop	r10
     b7a:	9f 90       	pop	r9
     b7c:	8f 90       	pop	r8
     b7e:	7f 90       	pop	r7
     b80:	6f 90       	pop	r6
     b82:	5f 90       	pop	r5
     b84:	4f 90       	pop	r4
     b86:	3f 90       	pop	r3
     b88:	2f 90       	pop	r2
     b8a:	1f 90       	pop	r1
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	08 95       	ret

00000b94 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	0f 92       	push	r0
     b9c:	1f 92       	push	r1
     b9e:	11 24       	eor	r1, r1
     ba0:	2f 92       	push	r2
     ba2:	3f 92       	push	r3
     ba4:	4f 92       	push	r4
     ba6:	5f 92       	push	r5
     ba8:	6f 92       	push	r6
     baa:	7f 92       	push	r7
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
     bdc:	a0 91 8d 61 	lds	r26, 0x618D	; 0x80618d <pxCurrentTCB>
     be0:	b0 91 8e 61 	lds	r27, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
     be4:	0d b6       	in	r0, 0x3d	; 61
     be6:	0d 92       	st	X+, r0
     be8:	0e b6       	in	r0, 0x3e	; 62
     bea:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
     bec:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     bf0:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     bf4:	80 91 93 63 	lds	r24, 0x6393	; 0x806393 <StatsTimer>
     bf8:	90 91 94 63 	lds	r25, 0x6394	; 0x806394 <StatsTimer+0x1>
     bfc:	a0 91 95 63 	lds	r26, 0x6395	; 0x806395 <StatsTimer+0x2>
     c00:	b0 91 96 63 	lds	r27, 0x6396	; 0x806396 <StatsTimer+0x3>
     c04:	82 0f       	add	r24, r18
     c06:	93 1f       	adc	r25, r19
     c08:	a1 1d       	adc	r26, r1
     c0a:	b1 1d       	adc	r27, r1
     c0c:	80 93 93 63 	sts	0x6393, r24	; 0x806393 <StatsTimer>
     c10:	90 93 94 63 	sts	0x6394, r25	; 0x806394 <StatsTimer+0x1>
     c14:	a0 93 95 63 	sts	0x6395, r26	; 0x806395 <StatsTimer+0x2>
     c18:	b0 93 96 63 	sts	0x6396, r27	; 0x806396 <StatsTimer+0x3>
		xTaskIncrementTick();
     c1c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskIncrementTick>
		vTaskSwitchContext();
     c20:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vTaskSwitchContext>
		portRESTORE_CONTEXT();
     c24:	a0 91 8d 61 	lds	r26, 0x618D	; 0x80618d <pxCurrentTCB>
     c28:	b0 91 8e 61 	lds	r27, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
     c2c:	cd 91       	ld	r28, X+
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	dd 91       	ld	r29, X+
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	7f 90       	pop	r7
     c66:	6f 90       	pop	r6
     c68:	5f 90       	pop	r5
     c6a:	4f 90       	pop	r4
     c6c:	3f 90       	pop	r3
     c6e:	2f 90       	pop	r2
     c70:	1f 90       	pop	r1
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0

		asm volatile ( "reti" );
     c78:	18 95       	reti

00000c7a <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
     c7a:	08 95       	ret

00000c7c <__vector_20>:
	//TCC1.CTRLA=0b0111; //DIV1024	
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC1_OVF_vect)
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
	//StatsTimer++;
}
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <prvCopyDataToQueue>:
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	04 2f       	mov	r16, r20
     c9c:	1a 8d       	ldd	r17, Y+26	; 0x1a
     c9e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ca0:	41 11       	cpse	r20, r1
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <prvCopyDataToQueue+0x2e>
     ca4:	88 81       	ld	r24, Y
     ca6:	99 81       	ldd	r25, Y+1	; 0x01
     ca8:	89 2b       	or	r24, r25
     caa:	09 f4       	brne	.+2      	; 0xcae <prvCopyDataToQueue+0x1e>
     cac:	43 c0       	rjmp	.+134    	; 0xd34 <prvCopyDataToQueue+0xa4>
     cae:	1f 5f       	subi	r17, 0xFF	; 255
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	1a 8f       	std	Y+26, r17	; 0x1a
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	01 11       	cpse	r16, r1
     cc2:	15 c0       	rjmp	.+42     	; 0xcee <prvCopyDataToQueue+0x5e>
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	9b 81       	ldd	r25, Y+3	; 0x03
     cc8:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <memcpy>
     ccc:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	82 0f       	add	r24, r18
     cd4:	91 1d       	adc	r25, r1
     cd6:	8a 83       	std	Y+2, r24	; 0x02
     cd8:	9b 83       	std	Y+3, r25	; 0x03
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	82 17       	cp	r24, r18
     ce0:	93 07       	cpc	r25, r19
     ce2:	28 f3       	brcs	.-54     	; 0xcae <prvCopyDataToQueue+0x1e>
     ce4:	88 81       	ld	r24, Y
     ce6:	99 81       	ldd	r25, Y+1	; 0x01
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	e0 cf       	rjmp	.-64     	; 0xcae <prvCopyDataToQueue+0x1e>
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <memcpy>
     cf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	91 95       	neg	r25
     cfc:	81 95       	neg	r24
     cfe:	91 09       	sbc	r25, r1
     d00:	2e 81       	ldd	r18, Y+6	; 0x06
     d02:	3f 81       	ldd	r19, Y+7	; 0x07
     d04:	28 0f       	add	r18, r24
     d06:	39 1f       	adc	r19, r25
     d08:	2e 83       	std	Y+6, r18	; 0x06
     d0a:	3f 83       	std	Y+7, r19	; 0x07
     d0c:	48 81       	ld	r20, Y
     d0e:	59 81       	ldd	r21, Y+1	; 0x01
     d10:	24 17       	cp	r18, r20
     d12:	35 07       	cpc	r19, r21
     d14:	30 f4       	brcc	.+12     	; 0xd22 <prvCopyDataToQueue+0x92>
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	3d 81       	ldd	r19, Y+5	; 0x05
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	8e 83       	std	Y+6, r24	; 0x06
     d20:	9f 83       	std	Y+7, r25	; 0x07
     d22:	02 30       	cpi	r16, 0x02	; 2
     d24:	21 f6       	brne	.-120    	; 0xcae <prvCopyDataToQueue+0x1e>
     d26:	11 23       	and	r17, r17
     d28:	11 f0       	breq	.+4      	; 0xd2e <prvCopyDataToQueue+0x9e>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	c2 cf       	rjmp	.-124    	; 0xcb2 <prvCopyDataToQueue+0x22>
     d2e:	11 e0       	ldi	r17, 0x01	; 1
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	bf cf       	rjmp	.-130    	; 0xcb2 <prvCopyDataToQueue+0x22>
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	0e 94 4c 11 	call	0x2298	; 0x2298 <xTaskPriorityDisinherit>
     d3c:	1c 82       	std	Y+4, r1	; 0x04
     d3e:	1d 82       	std	Y+5, r1	; 0x05
     d40:	1f 5f       	subi	r17, 0xFF	; 255
     d42:	b7 cf       	rjmp	.-146    	; 0xcb2 <prvCopyDataToQueue+0x22>

00000d44 <prvCopyDataFromQueue>:
     d44:	fc 01       	movw	r30, r24
     d46:	cb 01       	movw	r24, r22
     d48:	44 8d       	ldd	r20, Z+28	; 0x1c
     d4a:	44 23       	and	r20, r20
     d4c:	91 f0       	breq	.+36     	; 0xd72 <prvCopyDataFromQueue+0x2e>
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	66 81       	ldd	r22, Z+6	; 0x06
     d52:	77 81       	ldd	r23, Z+7	; 0x07
     d54:	64 0f       	add	r22, r20
     d56:	75 1f       	adc	r23, r21
     d58:	66 83       	std	Z+6, r22	; 0x06
     d5a:	77 83       	std	Z+7, r23	; 0x07
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	62 17       	cp	r22, r18
     d62:	73 07       	cpc	r23, r19
     d64:	20 f0       	brcs	.+8      	; 0xd6e <prvCopyDataFromQueue+0x2a>
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	66 83       	std	Z+6, r22	; 0x06
     d6c:	77 83       	std	Z+7, r23	; 0x07
     d6e:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <memcpy>
     d72:	08 95       	ret

00000d74 <prvUnlockQueue>:
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	8c 01       	movw	r16, r24
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	0f 92       	push	r0
     d86:	fc 01       	movw	r30, r24
     d88:	c6 8d       	ldd	r28, Z+30	; 0x1e
     d8a:	1c 16       	cp	r1, r28
     d8c:	c4 f4       	brge	.+48     	; 0xdbe <prvUnlockQueue+0x4a>
     d8e:	fc 01       	movw	r30, r24
     d90:	81 89       	ldd	r24, Z+17	; 0x11
     d92:	88 23       	and	r24, r24
     d94:	a1 f0       	breq	.+40     	; 0xdbe <prvUnlockQueue+0x4a>
     d96:	78 01       	movw	r14, r16
     d98:	f1 e1       	ldi	r31, 0x11	; 17
     d9a:	ef 0e       	add	r14, r31
     d9c:	f1 1c       	adc	r15, r1
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <prvUnlockQueue+0x38>
     da0:	c1 50       	subi	r28, 0x01	; 1
     da2:	69 f0       	breq	.+26     	; 0xdbe <prvUnlockQueue+0x4a>
     da4:	f8 01       	movw	r30, r16
     da6:	81 89       	ldd	r24, Z+17	; 0x11
     da8:	88 23       	and	r24, r24
     daa:	49 f0       	breq	.+18     	; 0xdbe <prvUnlockQueue+0x4a>
     dac:	c7 01       	movw	r24, r14
     dae:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
     db2:	88 23       	and	r24, r24
     db4:	a9 f3       	breq	.-22     	; 0xda0 <prvUnlockQueue+0x2c>
     db6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vTaskMissedYield>
     dba:	c1 50       	subi	r28, 0x01	; 1
     dbc:	99 f7       	brne	.-26     	; 0xda4 <prvUnlockQueue+0x30>
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	f8 01       	movw	r30, r16
     dc2:	86 8f       	std	Z+30, r24	; 0x1e
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	0f 92       	push	r0
     dce:	c5 8d       	ldd	r28, Z+29	; 0x1d
     dd0:	1c 16       	cp	r1, r28
     dd2:	c4 f4       	brge	.+48     	; 0xe04 <prvUnlockQueue+0x90>
     dd4:	f8 01       	movw	r30, r16
     dd6:	80 85       	ldd	r24, Z+8	; 0x08
     dd8:	88 23       	and	r24, r24
     dda:	a1 f0       	breq	.+40     	; 0xe04 <prvUnlockQueue+0x90>
     ddc:	78 01       	movw	r14, r16
     dde:	f8 e0       	ldi	r31, 0x08	; 8
     de0:	ef 0e       	add	r14, r31
     de2:	f1 1c       	adc	r15, r1
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <prvUnlockQueue+0x7e>
     de6:	c1 50       	subi	r28, 0x01	; 1
     de8:	69 f0       	breq	.+26     	; 0xe04 <prvUnlockQueue+0x90>
     dea:	f8 01       	movw	r30, r16
     dec:	80 85       	ldd	r24, Z+8	; 0x08
     dee:	88 23       	and	r24, r24
     df0:	49 f0       	breq	.+18     	; 0xe04 <prvUnlockQueue+0x90>
     df2:	c7 01       	movw	r24, r14
     df4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
     df8:	88 23       	and	r24, r24
     dfa:	a9 f3       	breq	.-22     	; 0xde6 <prvUnlockQueue+0x72>
     dfc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vTaskMissedYield>
     e00:	c1 50       	subi	r28, 0x01	; 1
     e02:	99 f7       	brne	.-26     	; 0xdea <prvUnlockQueue+0x76>
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	f8 01       	movw	r30, r16
     e08:	85 8f       	std	Z+29, r24	; 0x1d
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	08 95       	ret

00000e1a <xQueueGenericReset>:
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
     e22:	16 2f       	mov	r17, r22
     e24:	89 2b       	or	r24, r25
     e26:	09 f4       	brne	.+2      	; 0xe2a <xQueueGenericReset+0x10>
     e28:	3e c0       	rjmp	.+124    	; 0xea6 <xQueueGenericReset+0x8c>
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	0f 92       	push	r0
     e30:	48 81       	ld	r20, Y
     e32:	59 81       	ldd	r21, Y+1	; 0x01
     e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e36:	6c 8d       	ldd	r22, Y+28	; 0x1c
     e38:	9a 01       	movw	r18, r20
     e3a:	86 9f       	mul	r24, r22
     e3c:	20 0d       	add	r18, r0
     e3e:	31 1d       	adc	r19, r1
     e40:	11 24       	eor	r1, r1
     e42:	2c 83       	std	Y+4, r18	; 0x04
     e44:	3d 83       	std	Y+5, r19	; 0x05
     e46:	1a 8e       	std	Y+26, r1	; 0x1a
     e48:	4a 83       	std	Y+2, r20	; 0x02
     e4a:	5b 83       	std	Y+3, r21	; 0x03
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	68 9f       	mul	r22, r24
     e52:	90 01       	movw	r18, r0
     e54:	69 9f       	mul	r22, r25
     e56:	30 0d       	add	r19, r0
     e58:	11 24       	eor	r1, r1
     e5a:	ca 01       	movw	r24, r20
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	8e 83       	std	Y+6, r24	; 0x06
     e62:	9f 83       	std	Y+7, r25	; 0x07
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	8d 8f       	std	Y+29, r24	; 0x1d
     e68:	8e 8f       	std	Y+30, r24	; 0x1e
     e6a:	11 11       	cpse	r17, r1
     e6c:	13 c0       	rjmp	.+38     	; 0xe94 <xQueueGenericReset+0x7a>
     e6e:	88 85       	ldd	r24, Y+8	; 0x08
     e70:	81 11       	cpse	r24, r1
     e72:	07 c0       	rjmp	.+14     	; 0xe82 <xQueueGenericReset+0x68>
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	08 95       	ret
     e82:	ce 01       	movw	r24, r28
     e84:	08 96       	adiw	r24, 0x08	; 8
     e86:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
     e8a:	88 23       	and	r24, r24
     e8c:	99 f3       	breq	.-26     	; 0xe74 <xQueueGenericReset+0x5a>
     e8e:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
     e92:	f0 cf       	rjmp	.-32     	; 0xe74 <xQueueGenericReset+0x5a>
     e94:	ce 01       	movw	r24, r28
     e96:	08 96       	adiw	r24, 0x08	; 8
     e98:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
     e9c:	ce 01       	movw	r24, r28
     e9e:	41 96       	adiw	r24, 0x11	; 17
     ea0:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
     ea4:	e7 cf       	rjmp	.-50     	; 0xe74 <xQueueGenericReset+0x5a>
     ea6:	63 e0       	ldi	r22, 0x03	; 3
     ea8:	71 e0       	ldi	r23, 0x01	; 1
     eaa:	85 e2       	ldi	r24, 0x25	; 37
     eac:	90 e2       	ldi	r25, 0x20	; 32
     eae:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
     eb2:	bb cf       	rjmp	.-138    	; 0xe2a <xQueueGenericReset+0x10>

00000eb4 <xQueueGenericCreate>:
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	18 2f       	mov	r17, r24
     ec0:	06 2f       	mov	r16, r22
     ec2:	f4 2e       	mov	r15, r20
     ec4:	88 23       	and	r24, r24
     ec6:	99 f1       	breq	.+102    	; 0xf2e <xQueueGenericCreate+0x7a>
     ec8:	00 23       	and	r16, r16
     eca:	d1 f0       	breq	.+52     	; 0xf00 <xQueueGenericCreate+0x4c>
     ecc:	10 9f       	mul	r17, r16
     ece:	c0 01       	movw	r24, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	81 96       	adiw	r24, 0x21	; 33
     ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <pvPortMalloc>
     ed8:	ec 01       	movw	r28, r24
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	51 f0       	breq	.+20     	; 0xef2 <xQueueGenericCreate+0x3e>
     ede:	81 96       	adiw	r24, 0x21	; 33
     ee0:	88 83       	st	Y, r24
     ee2:	99 83       	std	Y+1, r25	; 0x01
     ee4:	1b 8f       	std	Y+27, r17	; 0x1b
     ee6:	0c 8f       	std	Y+28, r16	; 0x1c
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 0d 07 	call	0xe1a	; 0xe1a <xQueueGenericReset>
     ef0:	f8 a2       	std	Y+32, r15	; 0x20
     ef2:	ce 01       	movw	r24, r28
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	08 95       	ret
     f00:	81 e2       	ldi	r24, 0x21	; 33
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <pvPortMalloc>
     f08:	ec 01       	movw	r28, r24
     f0a:	89 2b       	or	r24, r25
     f0c:	91 f3       	breq	.-28     	; 0xef2 <xQueueGenericCreate+0x3e>
     f0e:	c8 83       	st	Y, r28
     f10:	d9 83       	std	Y+1, r29	; 0x01
     f12:	1b 8f       	std	Y+27, r17	; 0x1b
     f14:	0c 8f       	std	Y+28, r16	; 0x1c
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <xQueueGenericReset>
     f1e:	f8 a2       	std	Y+32, r15	; 0x20
     f20:	ce 01       	movw	r24, r28
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	08 95       	ret
     f2e:	66 e7       	ldi	r22, 0x76	; 118
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	85 e2       	ldi	r24, 0x25	; 37
     f34:	90 e2       	ldi	r25, 0x20	; 32
     f36:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
     f3a:	c6 cf       	rjmp	.-116    	; 0xec8 <xQueueGenericCreate+0x14>

00000f3c <xQueueGenericSend>:
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	25 97       	sbiw	r28, 0x05	; 5
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	8c 01       	movw	r16, r24
     f5a:	6b 01       	movw	r12, r22
     f5c:	4c 83       	std	Y+4, r20	; 0x04
     f5e:	5d 83       	std	Y+5, r21	; 0x05
     f60:	b2 2e       	mov	r11, r18
     f62:	89 2b       	or	r24, r25
     f64:	09 f4       	brne	.+2      	; 0xf68 <xQueueGenericSend+0x2c>
     f66:	b2 c0       	rjmp	.+356    	; 0x10cc <xQueueGenericSend+0x190>
     f68:	c1 14       	cp	r12, r1
     f6a:	d1 04       	cpc	r13, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <xQueueGenericSend+0x34>
     f6e:	a2 c0       	rjmp	.+324    	; 0x10b4 <xQueueGenericSend+0x178>
     f70:	f2 e0       	ldi	r31, 0x02	; 2
     f72:	bf 16       	cp	r11, r31
     f74:	09 f4       	brne	.+2      	; 0xf78 <xQueueGenericSend+0x3c>
     f76:	7d c0       	rjmp	.+250    	; 0x1072 <xQueueGenericSend+0x136>
     f78:	f8 01       	movw	r30, r16
     f7a:	83 8d       	ldd	r24, Z+27	; 0x1b
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	78 01       	movw	r14, r16
     f80:	f8 e0       	ldi	r31, 0x08	; 8
     f82:	ef 0e       	add	r14, r31
     f84:	f1 1c       	adc	r15, r1
     f86:	10 c0       	rjmp	.+32     	; 0xfa8 <xQueueGenericSend+0x6c>
     f88:	6c 81       	ldd	r22, Y+4	; 0x04
     f8a:	7d 81       	ldd	r23, Y+5	; 0x05
     f8c:	c7 01       	movw	r24, r14
     f8e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <vTaskPlaceOnEventList>
     f92:	c8 01       	movw	r24, r16
     f94:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvUnlockQueue>
     f98:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
     f9c:	88 23       	and	r24, r24
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <xQueueGenericSend+0x66>
     fa0:	4a c0       	rjmp	.+148    	; 0x1036 <xQueueGenericSend+0xfa>
     fa2:	f8 01       	movw	r30, r16
     fa4:	83 8d       	ldd	r24, Z+27	; 0x1b
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	0f 92       	push	r0
     fae:	f8 01       	movw	r30, r16
     fb0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fb2:	98 17       	cp	r25, r24
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <xQueueGenericSend+0x7c>
     fb6:	42 c0       	rjmp	.+132    	; 0x103c <xQueueGenericSend+0x100>
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	bf 16       	cp	r11, r31
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <xQueueGenericSend+0x84>
     fbe:	3e c0       	rjmp	.+124    	; 0x103c <xQueueGenericSend+0x100>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	89 2b       	or	r24, r25
     fc6:	09 f4       	brne	.+2      	; 0xfca <xQueueGenericSend+0x8e>
     fc8:	60 c0       	rjmp	.+192    	; 0x108a <xQueueGenericSend+0x14e>
     fca:	22 23       	and	r18, r18
     fcc:	59 f1       	breq	.+86     	; 0x1024 <xQueueGenericSend+0xe8>
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskSuspendAll>
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	0f 92       	push	r0
     fdc:	f8 01       	movw	r30, r16
     fde:	85 8d       	ldd	r24, Z+29	; 0x1d
     fe0:	8f 3f       	cpi	r24, 0xFF	; 255
     fe2:	39 f1       	breq	.+78     	; 0x1032 <xQueueGenericSend+0xf6>
     fe4:	f8 01       	movw	r30, r16
     fe6:	86 8d       	ldd	r24, Z+30	; 0x1e
     fe8:	8f 3f       	cpi	r24, 0xFF	; 255
     fea:	09 f1       	breq	.+66     	; 0x102e <xQueueGenericSend+0xf2>
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	be 01       	movw	r22, r28
     ff2:	6c 5f       	subi	r22, 0xFC	; 252
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <xTaskCheckForTimeOut>
     ffe:	81 11       	cpse	r24, r1
    1000:	48 c0       	rjmp	.+144    	; 0x1092 <xQueueGenericSend+0x156>
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	0f 92       	push	r0
    1008:	f8 01       	movw	r30, r16
    100a:	92 8d       	ldd	r25, Z+26	; 0x1a
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	83 8d       	ldd	r24, Z+27	; 0x1b
    1012:	98 17       	cp	r25, r24
    1014:	09 f4       	brne	.+2      	; 0x1018 <xQueueGenericSend+0xdc>
    1016:	b8 cf       	rjmp	.-144    	; 0xf88 <xQueueGenericSend+0x4c>
    1018:	c8 01       	movw	r24, r16
    101a:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvUnlockQueue>
    101e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    1022:	bf cf       	rjmp	.-130    	; 0xfa2 <xQueueGenericSend+0x66>
    1024:	ce 01       	movw	r24, r28
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vTaskInternalSetTimeOutState>
    102c:	d0 cf       	rjmp	.-96     	; 0xfce <xQueueGenericSend+0x92>
    102e:	16 8e       	std	Z+30, r1	; 0x1e
    1030:	dd cf       	rjmp	.-70     	; 0xfec <xQueueGenericSend+0xb0>
    1032:	15 8e       	std	Z+29, r1	; 0x1d
    1034:	d7 cf       	rjmp	.-82     	; 0xfe4 <xQueueGenericSend+0xa8>
    1036:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    103a:	b3 cf       	rjmp	.-154    	; 0xfa2 <xQueueGenericSend+0x66>
    103c:	4b 2d       	mov	r20, r11
    103e:	b6 01       	movw	r22, r12
    1040:	c8 01       	movw	r24, r16
    1042:	0e 94 48 06 	call	0xc90	; 0xc90 <prvCopyDataToQueue>
    1046:	f8 01       	movw	r30, r16
    1048:	91 89       	ldd	r25, Z+17	; 0x11
    104a:	91 11       	cpse	r25, r1
    104c:	2c c0       	rjmp	.+88     	; 0x10a6 <xQueueGenericSend+0x16a>
    104e:	81 11       	cpse	r24, r1
    1050:	27 c0       	rjmp	.+78     	; 0x10a0 <xQueueGenericSend+0x164>
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	25 96       	adiw	r28, 0x05	; 5
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	08 95       	ret
    1072:	f8 01       	movw	r30, r16
    1074:	83 8d       	ldd	r24, Z+27	; 0x1b
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	09 f4       	brne	.+2      	; 0x107c <xQueueGenericSend+0x140>
    107a:	80 cf       	rjmp	.-256    	; 0xf7c <xQueueGenericSend+0x40>
    107c:	63 ef       	ldi	r22, 0xF3	; 243
    107e:	72 e0       	ldi	r23, 0x02	; 2
    1080:	85 e2       	ldi	r24, 0x25	; 37
    1082:	90 e2       	ldi	r25, 0x20	; 32
    1084:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1088:	77 cf       	rjmp	.-274    	; 0xf78 <xQueueGenericSend+0x3c>
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	e3 cf       	rjmp	.-58     	; 0x1058 <xQueueGenericSend+0x11c>
    1092:	c8 01       	movw	r24, r16
    1094:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvUnlockQueue>
    1098:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	dc cf       	rjmp	.-72     	; 0x1058 <xQueueGenericSend+0x11c>
    10a0:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    10a4:	d6 cf       	rjmp	.-84     	; 0x1052 <xQueueGenericSend+0x116>
    10a6:	c8 01       	movw	r24, r16
    10a8:	41 96       	adiw	r24, 0x11	; 17
    10aa:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
    10ae:	88 23       	and	r24, r24
    10b0:	81 f2       	breq	.-96     	; 0x1052 <xQueueGenericSend+0x116>
    10b2:	f6 cf       	rjmp	.-20     	; 0x10a0 <xQueueGenericSend+0x164>
    10b4:	f8 01       	movw	r30, r16
    10b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    10b8:	88 23       	and	r24, r24
    10ba:	09 f4       	brne	.+2      	; 0x10be <xQueueGenericSend+0x182>
    10bc:	59 cf       	rjmp	.-334    	; 0xf70 <xQueueGenericSend+0x34>
    10be:	62 ef       	ldi	r22, 0xF2	; 242
    10c0:	72 e0       	ldi	r23, 0x02	; 2
    10c2:	85 e2       	ldi	r24, 0x25	; 37
    10c4:	90 e2       	ldi	r25, 0x20	; 32
    10c6:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    10ca:	52 cf       	rjmp	.-348    	; 0xf70 <xQueueGenericSend+0x34>
    10cc:	61 ef       	ldi	r22, 0xF1	; 241
    10ce:	72 e0       	ldi	r23, 0x02	; 2
    10d0:	85 e2       	ldi	r24, 0x25	; 37
    10d2:	90 e2       	ldi	r25, 0x20	; 32
    10d4:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    10d8:	47 cf       	rjmp	.-370    	; 0xf68 <xQueueGenericSend+0x2c>

000010da <xQueueGenericSendFromISR>:
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	8b 01       	movw	r16, r22
    10ee:	6a 01       	movw	r12, r20
    10f0:	f2 2e       	mov	r15, r18
    10f2:	89 2b       	or	r24, r25
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <xQueueGenericSendFromISR+0x1e>
    10f6:	45 c0       	rjmp	.+138    	; 0x1182 <xQueueGenericSendFromISR+0xa8>
    10f8:	01 15       	cp	r16, r1
    10fa:	11 05       	cpc	r17, r1
    10fc:	c1 f1       	breq	.+112    	; 0x116e <xQueueGenericSendFromISR+0x94>
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	f8 16       	cp	r15, r24
    1102:	71 f0       	breq	.+28     	; 0x1120 <xQueueGenericSendFromISR+0x46>
    1104:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1108:	98 17       	cp	r25, r24
    110a:	a0 f0       	brcs	.+40     	; 0x1134 <xQueueGenericSendFromISR+0x5a>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	08 95       	ret
    1120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	31 f0       	breq	.+12     	; 0x1132 <xQueueGenericSendFromISR+0x58>
    1126:	65 ec       	ldi	r22, 0xC5	; 197
    1128:	73 e0       	ldi	r23, 0x03	; 3
    112a:	85 e2       	ldi	r24, 0x25	; 37
    112c:	90 e2       	ldi	r25, 0x20	; 32
    112e:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1132:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1134:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1136:	4f 2d       	mov	r20, r15
    1138:	b8 01       	movw	r22, r16
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 48 06 	call	0xc90	; 0xc90 <prvCopyDataToQueue>
    1140:	ef ef       	ldi	r30, 0xFF	; 255
    1142:	ee 16       	cp	r14, r30
    1144:	21 f0       	breq	.+8      	; 0x114e <xQueueGenericSendFromISR+0x74>
    1146:	e3 94       	inc	r14
    1148:	ee 8e       	std	Y+30, r14	; 0x1e
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	e0 cf       	rjmp	.-64     	; 0x110e <xQueueGenericSendFromISR+0x34>
    114e:	89 89       	ldd	r24, Y+17	; 0x11
    1150:	88 23       	and	r24, r24
    1152:	d9 f3       	breq	.-10     	; 0x114a <xQueueGenericSendFromISR+0x70>
    1154:	ce 01       	movw	r24, r28
    1156:	41 96       	adiw	r24, 0x11	; 17
    1158:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
    115c:	88 23       	and	r24, r24
    115e:	a9 f3       	breq	.-22     	; 0x114a <xQueueGenericSendFromISR+0x70>
    1160:	c1 14       	cp	r12, r1
    1162:	d1 04       	cpc	r13, r1
    1164:	91 f3       	breq	.-28     	; 0x114a <xQueueGenericSendFromISR+0x70>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	f6 01       	movw	r30, r12
    116a:	80 83       	st	Z, r24
    116c:	d0 cf       	rjmp	.-96     	; 0x110e <xQueueGenericSendFromISR+0x34>
    116e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1170:	88 23       	and	r24, r24
    1172:	29 f2       	breq	.-118    	; 0x10fe <xQueueGenericSendFromISR+0x24>
    1174:	64 ec       	ldi	r22, 0xC4	; 196
    1176:	73 e0       	ldi	r23, 0x03	; 3
    1178:	85 e2       	ldi	r24, 0x25	; 37
    117a:	90 e2       	ldi	r25, 0x20	; 32
    117c:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1180:	be cf       	rjmp	.-132    	; 0x10fe <xQueueGenericSendFromISR+0x24>
    1182:	63 ec       	ldi	r22, 0xC3	; 195
    1184:	73 e0       	ldi	r23, 0x03	; 3
    1186:	85 e2       	ldi	r24, 0x25	; 37
    1188:	90 e2       	ldi	r25, 0x20	; 32
    118a:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    118e:	b4 cf       	rjmp	.-152    	; 0x10f8 <xQueueGenericSendFromISR+0x1e>

00001190 <xQueueReceive>:
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	25 97       	sbiw	r28, 0x05	; 5
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	8c 01       	movw	r16, r24
    11ae:	5b 01       	movw	r10, r22
    11b0:	4c 83       	std	Y+4, r20	; 0x04
    11b2:	5d 83       	std	Y+5, r21	; 0x05
    11b4:	89 2b       	or	r24, r25
    11b6:	09 f4       	brne	.+2      	; 0x11ba <xQueueReceive+0x2a>
    11b8:	a1 c0       	rjmp	.+322    	; 0x12fc <xQueueReceive+0x16c>
    11ba:	a1 14       	cp	r10, r1
    11bc:	b1 04       	cpc	r11, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <xQueueReceive+0x32>
    11c0:	91 c0       	rjmp	.+290    	; 0x12e4 <xQueueReceive+0x154>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	68 01       	movw	r12, r16
    11c6:	f1 e1       	ldi	r31, 0x11	; 17
    11c8:	cf 0e       	add	r12, r31
    11ca:	d1 1c       	adc	r13, r1
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	0f 92       	push	r0
    11d2:	f8 01       	movw	r30, r16
    11d4:	f2 8c       	ldd	r15, Z+26	; 0x1a
    11d6:	f1 10       	cpse	r15, r1
    11d8:	6a c0       	rjmp	.+212    	; 0x12ae <xQueueReceive+0x11e>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	89 2b       	or	r24, r25
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <xQueueReceive+0x54>
    11e2:	73 c0       	rjmp	.+230    	; 0x12ca <xQueueReceive+0x13a>
    11e4:	22 23       	and	r18, r18
    11e6:	09 f4       	brne	.+2      	; 0x11ea <xQueueReceive+0x5a>
    11e8:	59 c0       	rjmp	.+178    	; 0x129c <xQueueReceive+0x10c>
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskSuspendAll>
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	0f 92       	push	r0
    11f8:	f8 01       	movw	r30, r16
    11fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    11fc:	8f 3f       	cpi	r24, 0xFF	; 255
    11fe:	09 f4       	brne	.+2      	; 0x1202 <xQueueReceive+0x72>
    1200:	54 c0       	rjmp	.+168    	; 0x12aa <xQueueReceive+0x11a>
    1202:	f8 01       	movw	r30, r16
    1204:	86 8d       	ldd	r24, Z+30	; 0x1e
    1206:	8f 3f       	cpi	r24, 0xFF	; 255
    1208:	09 f4       	brne	.+2      	; 0x120c <xQueueReceive+0x7c>
    120a:	4d c0       	rjmp	.+154    	; 0x12a6 <xQueueReceive+0x116>
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	be 01       	movw	r22, r28
    1212:	6c 5f       	subi	r22, 0xFC	; 252
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <xTaskCheckForTimeOut>
    121e:	81 11       	cpse	r24, r1
    1220:	22 c0       	rjmp	.+68     	; 0x1266 <xQueueReceive+0xd6>
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	0f 92       	push	r0
    1228:	f8 01       	movw	r30, r16
    122a:	82 8d       	ldd	r24, Z+26	; 0x1a
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	81 11       	cpse	r24, r1
    1232:	12 c0       	rjmp	.+36     	; 0x1258 <xQueueReceive+0xc8>
    1234:	6c 81       	ldd	r22, Y+4	; 0x04
    1236:	7d 81       	ldd	r23, Y+5	; 0x05
    1238:	c6 01       	movw	r24, r12
    123a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <vTaskPlaceOnEventList>
    123e:	c8 01       	movw	r24, r16
    1240:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvUnlockQueue>
    1244:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    1248:	88 23       	and	r24, r24
    124a:	11 f0       	breq	.+4      	; 0x1250 <xQueueReceive+0xc0>
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	be cf       	rjmp	.-132    	; 0x11cc <xQueueReceive+0x3c>
    1250:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	ba cf       	rjmp	.-140    	; 0x11cc <xQueueReceive+0x3c>
    1258:	c8 01       	movw	r24, r16
    125a:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvUnlockQueue>
    125e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	b3 cf       	rjmp	.-154    	; 0x11cc <xQueueReceive+0x3c>
    1266:	c8 01       	movw	r24, r16
    1268:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvUnlockQueue>
    126c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	0f 92       	push	r0
    1276:	f8 01       	movw	r30, r16
    1278:	82 8d       	ldd	r24, Z+26	; 0x1a
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	81 11       	cpse	r24, r1
    1280:	e5 cf       	rjmp	.-54     	; 0x124c <xQueueReceive+0xbc>
    1282:	25 96       	adiw	r28, 0x05	; 5
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	08 95       	ret
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vTaskInternalSetTimeOutState>
    12a4:	a2 cf       	rjmp	.-188    	; 0x11ea <xQueueReceive+0x5a>
    12a6:	16 8e       	std	Z+30, r1	; 0x1e
    12a8:	b1 cf       	rjmp	.-158    	; 0x120c <xQueueReceive+0x7c>
    12aa:	15 8e       	std	Z+29, r1	; 0x1d
    12ac:	aa cf       	rjmp	.-172    	; 0x1202 <xQueueReceive+0x72>
    12ae:	b5 01       	movw	r22, r10
    12b0:	c8 01       	movw	r24, r16
    12b2:	0e 94 a2 06 	call	0xd44	; 0xd44 <prvCopyDataFromQueue>
    12b6:	fa 94       	dec	r15
    12b8:	f8 01       	movw	r30, r16
    12ba:	f2 8e       	std	Z+26, r15	; 0x1a
    12bc:	80 85       	ldd	r24, Z+8	; 0x08
    12be:	81 11       	cpse	r24, r1
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <xQueueReceive+0x142>
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	dc cf       	rjmp	.-72     	; 0x1282 <xQueueReceive+0xf2>
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	d8 cf       	rjmp	.-80     	; 0x1282 <xQueueReceive+0xf2>
    12d2:	c8 01       	movw	r24, r16
    12d4:	08 96       	adiw	r24, 0x08	; 8
    12d6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
    12da:	88 23       	and	r24, r24
    12dc:	91 f3       	breq	.-28     	; 0x12c2 <xQueueReceive+0x132>
    12de:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    12e2:	ef cf       	rjmp	.-34     	; 0x12c2 <xQueueReceive+0x132>
    12e4:	f8 01       	movw	r30, r16
    12e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    12e8:	88 23       	and	r24, r24
    12ea:	09 f4       	brne	.+2      	; 0x12ee <xQueueReceive+0x15e>
    12ec:	6a cf       	rjmp	.-300    	; 0x11c2 <xQueueReceive+0x32>
    12ee:	64 e0       	ldi	r22, 0x04	; 4
    12f0:	75 e0       	ldi	r23, 0x05	; 5
    12f2:	85 e2       	ldi	r24, 0x25	; 37
    12f4:	90 e2       	ldi	r25, 0x20	; 32
    12f6:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    12fa:	63 cf       	rjmp	.-314    	; 0x11c2 <xQueueReceive+0x32>
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	75 e0       	ldi	r23, 0x05	; 5
    1300:	85 e2       	ldi	r24, 0x25	; 37
    1302:	90 e2       	ldi	r25, 0x20	; 32
    1304:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1308:	58 cf       	rjmp	.-336    	; 0x11ba <xQueueReceive+0x2a>

0000130a <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    131c:	7b 01       	movw	r14, r22
    131e:	6a 01       	movw	r12, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
    1320:	89 2b       	or	r24, r25
    1322:	b9 f1       	breq	.+110    	; 0x1392 <xQueueReceiveFromISR+0x88>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1324:	e1 14       	cp	r14, r1
    1326:	f1 04       	cpc	r15, r1
    1328:	d1 f0       	breq	.+52     	; 0x135e <xQueueReceiveFromISR+0x54>
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    132a:	1a 8d       	ldd	r17, Y+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    132c:	11 11       	cpse	r17, r1
    132e:	0a c0       	rjmp	.+20     	; 0x1344 <xQueueReceiveFromISR+0x3a>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
    1330:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	08 95       	ret
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    1344:	0d 8d       	ldd	r16, Y+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1346:	b7 01       	movw	r22, r14
    1348:	ce 01       	movw	r24, r28
    134a:	0e 94 a2 06 	call	0xd44	; 0xd44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    134e:	11 50       	subi	r17, 0x01	; 1
    1350:	1a 8f       	std	Y+26, r17	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    1352:	0f 3f       	cpi	r16, 0xFF	; 255
    1354:	71 f0       	breq	.+28     	; 0x1372 <xQueueReceiveFromISR+0x68>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    1356:	0f 5f       	subi	r16, 0xFF	; 255
    1358:	0d 8f       	std	Y+29, r16	; 0x1d
			}

			xReturn = pdPASS;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	ea cf       	rjmp	.-44     	; 0x1332 <xQueueReceiveFromISR+0x28>
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    135e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1360:	88 23       	and	r24, r24
    1362:	19 f3       	breq	.-58     	; 0x132a <xQueueReceiveFromISR+0x20>
    1364:	6c ef       	ldi	r22, 0xFC	; 252
    1366:	76 e0       	ldi	r23, 0x06	; 6
    1368:	85 e2       	ldi	r24, 0x25	; 37
    136a:	90 e2       	ldi	r25, 0x20	; 32
    136c:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1370:	dc cf       	rjmp	.-72     	; 0x132a <xQueueReceiveFromISR+0x20>
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1372:	88 85       	ldd	r24, Y+8	; 0x08
    1374:	88 23       	and	r24, r24
    1376:	89 f3       	breq	.-30     	; 0x135a <xQueueReceiveFromISR+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1378:	ce 01       	movw	r24, r28
    137a:	08 96       	adiw	r24, 0x08	; 8
    137c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <xTaskRemoveFromEventList>
    1380:	88 23       	and	r24, r24
    1382:	59 f3       	breq	.-42     	; 0x135a <xQueueReceiveFromISR+0x50>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1384:	c1 14       	cp	r12, r1
    1386:	d1 04       	cpc	r13, r1
    1388:	41 f3       	breq	.-48     	; 0x135a <xQueueReceiveFromISR+0x50>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	f6 01       	movw	r30, r12
    138e:	80 83       	st	Z, r24
    1390:	d0 cf       	rjmp	.-96     	; 0x1332 <xQueueReceiveFromISR+0x28>
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
    1392:	6b ef       	ldi	r22, 0xFB	; 251
    1394:	76 e0       	ldi	r23, 0x06	; 6
    1396:	85 e2       	ldi	r24, 0x25	; 37
    1398:	90 e2       	ldi	r25, 0x20	; 32
    139a:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    139e:	c2 cf       	rjmp	.-124    	; 0x1324 <xQueueReceiveFromISR+0x1a>

000013a0 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    13a0:	20 c0       	rjmp	.+64     	; 0x13e2 <prvIdleTask+0x42>
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	0f 92       	push	r0
    13a8:	e0 91 46 61 	lds	r30, 0x6146	; 0x806146 <xTasksWaitingTermination+0x5>
    13ac:	f0 91 47 61 	lds	r31, 0x6147	; 0x806147 <xTasksWaitingTermination+0x6>
    13b0:	c6 81       	ldd	r28, Z+6	; 0x06
    13b2:	d7 81       	ldd	r29, Z+7	; 0x07
    13b4:	ce 01       	movw	r24, r28
    13b6:	02 96       	adiw	r24, 0x02	; 2
    13b8:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    13bc:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>
    13c0:	81 50       	subi	r24, 0x01	; 1
    13c2:	80 93 36 61 	sts	0x6136, r24	; 0x806136 <uxCurrentNumberOfTasks>
    13c6:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxDeletedTasksWaitingCleanUp>
    13ca:	81 50       	subi	r24, 0x01	; 1
    13cc:	80 93 40 61 	sts	0x6140, r24	; 0x806140 <uxDeletedTasksWaitingCleanUp>
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	0e 94 18 04 	call	0x830	; 0x830 <vPortFree>
    13dc:	ce 01       	movw	r24, r28
    13de:	0e 94 18 04 	call	0x830	; 0x830 <vPortFree>
    13e2:	80 91 40 61 	lds	r24, 0x6140	; 0x806140 <uxDeletedTasksWaitingCleanUp>
    13e6:	81 11       	cpse	r24, r1
    13e8:	dc cf       	rjmp	.-72     	; 0x13a2 <prvIdleTask+0x2>
    13ea:	80 91 69 61 	lds	r24, 0x6169	; 0x806169 <pxReadyTasksLists>
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <prvIdleTask+0x56>
    13f2:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    13f6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vApplicationIdleHook>
    13fa:	f3 cf       	rjmp	.-26     	; 0x13e2 <prvIdleTask+0x42>

000013fc <prvWriteNameToBuffer>:
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24
    1402:	0e 94 75 18 	call	0x30ea	; 0x30ea <strcpy>
    1406:	fe 01       	movw	r30, r28
    1408:	01 90       	ld	r0, Z+
    140a:	00 20       	and	r0, r0
    140c:	e9 f7       	brne	.-6      	; 0x1408 <prvWriteNameToBuffer+0xc>
    140e:	31 97       	sbiw	r30, 0x01	; 1
    1410:	ec 1b       	sub	r30, r28
    1412:	fd 0b       	sbc	r31, r29
    1414:	e7 30       	cpi	r30, 0x07	; 7
    1416:	f1 05       	cpc	r31, r1
    1418:	60 f4       	brcc	.+24     	; 0x1432 <prvWriteNameToBuffer+0x36>
    141a:	ec 0f       	add	r30, r28
    141c:	fd 1f       	adc	r31, r29
    141e:	9e 01       	movw	r18, r28
    1420:	29 5f       	subi	r18, 0xF9	; 249
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	80 e2       	ldi	r24, 0x20	; 32
    1426:	81 93       	st	Z+, r24
    1428:	e2 17       	cp	r30, r18
    142a:	f3 07       	cpc	r31, r19
    142c:	e1 f7       	brne	.-8      	; 0x1426 <prvWriteNameToBuffer+0x2a>
    142e:	e7 e0       	ldi	r30, 0x07	; 7
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	ce 01       	movw	r24, r28
    1434:	8e 0f       	add	r24, r30
    1436:	9f 1f       	adc	r25, r31
    1438:	fc 01       	movw	r30, r24
    143a:	10 82       	st	Z, r1
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <prvResetNextTaskUnblockTime.part.0>:
    1442:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1446:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    144a:	05 80       	ldd	r0, Z+5	; 0x05
    144c:	f6 81       	ldd	r31, Z+6	; 0x06
    144e:	e0 2d       	mov	r30, r0
    1450:	06 80       	ldd	r0, Z+6	; 0x06
    1452:	f7 81       	ldd	r31, Z+7	; 0x07
    1454:	e0 2d       	mov	r30, r0
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <xNextTaskUnblockTime>
    145e:	90 93 2d 61 	sts	0x612D, r25	; 0x80612d <xNextTaskUnblockTime+0x1>
    1462:	08 95       	ret

00001464 <prvAddCurrentTaskToDelayedList>:
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
    1470:	f6 2e       	mov	r15, r22
    1472:	00 91 34 61 	lds	r16, 0x6134	; 0x806134 <xTickCount>
    1476:	10 91 35 61 	lds	r17, 0x6135	; 0x806135 <xTickCount+0x1>
    147a:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <pxCurrentTCB>
    147e:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1482:	02 96       	adiw	r24, 0x02	; 2
    1484:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1488:	cf 3f       	cpi	r28, 0xFF	; 255
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	d8 07       	cpc	r29, r24
    148e:	a9 f1       	breq	.+106    	; 0x14fa <prvAddCurrentTaskToDelayedList+0x96>
    1490:	c0 0f       	add	r28, r16
    1492:	d1 1f       	adc	r29, r17
    1494:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1498:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    149c:	c2 83       	std	Z+2, r28	; 0x02
    149e:	d3 83       	std	Z+3, r29	; 0x03
    14a0:	60 91 8d 61 	lds	r22, 0x618D	; 0x80618d <pxCurrentTCB>
    14a4:	70 91 8e 61 	lds	r23, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    14a8:	c0 17       	cp	r28, r16
    14aa:	d1 07       	cpc	r29, r17
    14ac:	c8 f0       	brcs	.+50     	; 0x14e0 <prvAddCurrentTaskToDelayedList+0x7c>
    14ae:	80 91 55 61 	lds	r24, 0x6155	; 0x806155 <pxDelayedTaskList>
    14b2:	90 91 56 61 	lds	r25, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    14b6:	6e 5f       	subi	r22, 0xFE	; 254
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInsert>
    14be:	80 91 2c 61 	lds	r24, 0x612C	; 0x80612c <xNextTaskUnblockTime>
    14c2:	90 91 2d 61 	lds	r25, 0x612D	; 0x80612d <xNextTaskUnblockTime+0x1>
    14c6:	c8 17       	cp	r28, r24
    14c8:	d9 07       	cpc	r29, r25
    14ca:	20 f4       	brcc	.+8      	; 0x14d4 <prvAddCurrentTaskToDelayedList+0x70>
    14cc:	c0 93 2c 61 	sts	0x612C, r28	; 0x80612c <xNextTaskUnblockTime>
    14d0:	d0 93 2d 61 	sts	0x612D, r29	; 0x80612d <xNextTaskUnblockTime+0x1>
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	08 95       	ret
    14e0:	80 91 53 61 	lds	r24, 0x6153	; 0x806153 <pxOverflowDelayedTaskList>
    14e4:	90 91 54 61 	lds	r25, 0x6154	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    14e8:	6e 5f       	subi	r22, 0xFE	; 254
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <vListInsert>
    14fa:	ff 20       	and	r15, r15
    14fc:	49 f2       	breq	.-110    	; 0x1490 <prvAddCurrentTaskToDelayedList+0x2c>
    14fe:	60 91 8d 61 	lds	r22, 0x618D	; 0x80618d <pxCurrentTCB>
    1502:	70 91 8e 61 	lds	r23, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1506:	6e 5f       	subi	r22, 0xFE	; 254
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	87 e3       	ldi	r24, 0x37	; 55
    150c:	91 e6       	ldi	r25, 0x61	; 97
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <vListInsertEnd>

0000151c <vTaskSwitchContext.part.5>:
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	10 92 30 61 	sts	0x6130, r1	; 0x806130 <xYieldPending>
    1526:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    152a:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    152e:	80 91 93 63 	lds	r24, 0x6393	; 0x806393 <StatsTimer>
    1532:	90 91 94 63 	lds	r25, 0x6394	; 0x806394 <StatsTimer+0x1>
    1536:	a0 91 95 63 	lds	r26, 0x6395	; 0x806395 <StatsTimer+0x2>
    153a:	b0 91 96 63 	lds	r27, 0x6396	; 0x806396 <StatsTimer+0x3>
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	a1 1d       	adc	r26, r1
    1544:	b1 1d       	adc	r27, r1
    1546:	00 91 25 61 	lds	r16, 0x6125	; 0x806125 <ulTaskSwitchedInTime>
    154a:	10 91 26 61 	lds	r17, 0x6126	; 0x806126 <ulTaskSwitchedInTime+0x1>
    154e:	20 91 27 61 	lds	r18, 0x6127	; 0x806127 <ulTaskSwitchedInTime+0x2>
    1552:	30 91 28 61 	lds	r19, 0x6128	; 0x806128 <ulTaskSwitchedInTime+0x3>
    1556:	08 17       	cp	r16, r24
    1558:	19 07       	cpc	r17, r25
    155a:	2a 07       	cpc	r18, r26
    155c:	3b 07       	cpc	r19, r27
    155e:	a0 f4       	brcc	.+40     	; 0x1588 <vTaskSwitchContext.part.5+0x6c>
    1560:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1564:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1568:	45 a1       	ldd	r20, Z+37	; 0x25
    156a:	56 a1       	ldd	r21, Z+38	; 0x26
    156c:	67 a1       	ldd	r22, Z+39	; 0x27
    156e:	70 a5       	ldd	r23, Z+40	; 0x28
    1570:	40 1b       	sub	r20, r16
    1572:	51 0b       	sbc	r21, r17
    1574:	62 0b       	sbc	r22, r18
    1576:	73 0b       	sbc	r23, r19
    1578:	48 0f       	add	r20, r24
    157a:	59 1f       	adc	r21, r25
    157c:	6a 1f       	adc	r22, r26
    157e:	7b 1f       	adc	r23, r27
    1580:	45 a3       	std	Z+37, r20	; 0x25
    1582:	56 a3       	std	Z+38, r21	; 0x26
    1584:	67 a3       	std	Z+39, r22	; 0x27
    1586:	70 a7       	std	Z+40, r23	; 0x28
    1588:	80 93 25 61 	sts	0x6125, r24	; 0x806125 <ulTaskSwitchedInTime>
    158c:	90 93 26 61 	sts	0x6126, r25	; 0x806126 <ulTaskSwitchedInTime+0x1>
    1590:	a0 93 27 61 	sts	0x6127, r26	; 0x806127 <ulTaskSwitchedInTime+0x2>
    1594:	b0 93 28 61 	sts	0x6128, r27	; 0x806128 <ulTaskSwitchedInTime+0x3>
    1598:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    159c:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    15a0:	07 88       	ldd	r0, Z+23	; 0x17
    15a2:	f0 8d       	ldd	r31, Z+24	; 0x18
    15a4:	e0 2d       	mov	r30, r0
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	a2 81       	ldd	r26, Z+2	; 0x02
    15ac:	b3 81       	ldd	r27, Z+3	; 0x03
    15ae:	85 3a       	cpi	r24, 0xA5	; 165
    15b0:	95 4a       	sbci	r25, 0xA5	; 165
    15b2:	a5 4a       	sbci	r26, 0xA5	; 165
    15b4:	b5 4a       	sbci	r27, 0xA5	; 165
    15b6:	09 f4       	brne	.+2      	; 0x15ba <vTaskSwitchContext.part.5+0x9e>
    15b8:	4c c0       	rjmp	.+152    	; 0x1652 <vTaskSwitchContext.part.5+0x136>
    15ba:	60 91 8d 61 	lds	r22, 0x618D	; 0x80618d <pxCurrentTCB>
    15be:	70 91 8e 61 	lds	r23, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    15c2:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <pxCurrentTCB>
    15c6:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    15ca:	67 5e       	subi	r22, 0xE7	; 231
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	0e 94 79 12 	call	0x24f2	; 0x24f2 <vApplicationStackOverflowHook>
    15d2:	c0 91 33 61 	lds	r28, 0x6133	; 0x806133 <uxTopReadyPriority>
    15d6:	8c 2f       	mov	r24, r28
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9c 01       	movw	r18, r24
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	22 0f       	add	r18, r18
    15e2:	33 1f       	adc	r19, r19
    15e4:	22 0f       	add	r18, r18
    15e6:	33 1f       	adc	r19, r19
    15e8:	f9 01       	movw	r30, r18
    15ea:	e8 0f       	add	r30, r24
    15ec:	f9 1f       	adc	r31, r25
    15ee:	e7 59       	subi	r30, 0x97	; 151
    15f0:	fe 49       	sbci	r31, 0x9E	; 158
    15f2:	40 81       	ld	r20, Z
    15f4:	41 11       	cpse	r20, r1
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <vTaskSwitchContext.part.5+0xf4>
    15f8:	cc 23       	and	r28, r28
    15fa:	11 f0       	breq	.+4      	; 0x1600 <vTaskSwitchContext.part.5+0xe4>
    15fc:	c1 50       	subi	r28, 0x01	; 1
    15fe:	eb cf       	rjmp	.-42     	; 0x15d6 <vTaskSwitchContext.part.5+0xba>
    1600:	6c e8       	ldi	r22, 0x8C	; 140
    1602:	7b e0       	ldi	r23, 0x0B	; 11
    1604:	89 e3       	ldi	r24, 0x39	; 57
    1606:	90 e2       	ldi	r25, 0x20	; 32
    1608:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    160c:	c1 50       	subi	r28, 0x01	; 1
    160e:	e3 cf       	rjmp	.-58     	; 0x15d6 <vTaskSwitchContext.part.5+0xba>
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	dc 01       	movw	r26, r24
    1616:	a7 59       	subi	r26, 0x97	; 151
    1618:	be 49       	sbci	r27, 0x9E	; 158
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	ed 91       	ld	r30, X+
    161e:	fc 91       	ld	r31, X
    1620:	12 97       	sbiw	r26, 0x02	; 2
    1622:	02 80       	ldd	r0, Z+2	; 0x02
    1624:	f3 81       	ldd	r31, Z+3	; 0x03
    1626:	e0 2d       	mov	r30, r0
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	ed 93       	st	X+, r30
    162c:	fc 93       	st	X, r31
    162e:	12 97       	sbiw	r26, 0x02	; 2
    1630:	84 59       	subi	r24, 0x94	; 148
    1632:	9e 49       	sbci	r25, 0x9E	; 158
    1634:	e8 17       	cp	r30, r24
    1636:	f9 07       	cpc	r31, r25
    1638:	59 f1       	breq	.+86     	; 0x1690 <vTaskSwitchContext.part.5+0x174>
    163a:	86 81       	ldd	r24, Z+6	; 0x06
    163c:	97 81       	ldd	r25, Z+7	; 0x07
    163e:	80 93 8d 61 	sts	0x618D, r24	; 0x80618d <pxCurrentTCB>
    1642:	90 93 8e 61 	sts	0x618E, r25	; 0x80618e <pxCurrentTCB+0x1>
    1646:	c0 93 33 61 	sts	0x6133, r28	; 0x806133 <uxTopReadyPriority>
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret
    1652:	84 81       	ldd	r24, Z+4	; 0x04
    1654:	95 81       	ldd	r25, Z+5	; 0x05
    1656:	a6 81       	ldd	r26, Z+6	; 0x06
    1658:	b7 81       	ldd	r27, Z+7	; 0x07
    165a:	85 3a       	cpi	r24, 0xA5	; 165
    165c:	95 4a       	sbci	r25, 0xA5	; 165
    165e:	a5 4a       	sbci	r26, 0xA5	; 165
    1660:	b5 4a       	sbci	r27, 0xA5	; 165
    1662:	09 f0       	breq	.+2      	; 0x1666 <vTaskSwitchContext.part.5+0x14a>
    1664:	aa cf       	rjmp	.-172    	; 0x15ba <vTaskSwitchContext.part.5+0x9e>
    1666:	80 85       	ldd	r24, Z+8	; 0x08
    1668:	91 85       	ldd	r25, Z+9	; 0x09
    166a:	a2 85       	ldd	r26, Z+10	; 0x0a
    166c:	b3 85       	ldd	r27, Z+11	; 0x0b
    166e:	85 3a       	cpi	r24, 0xA5	; 165
    1670:	95 4a       	sbci	r25, 0xA5	; 165
    1672:	a5 4a       	sbci	r26, 0xA5	; 165
    1674:	b5 4a       	sbci	r27, 0xA5	; 165
    1676:	09 f0       	breq	.+2      	; 0x167a <vTaskSwitchContext.part.5+0x15e>
    1678:	a0 cf       	rjmp	.-192    	; 0x15ba <vTaskSwitchContext.part.5+0x9e>
    167a:	84 85       	ldd	r24, Z+12	; 0x0c
    167c:	95 85       	ldd	r25, Z+13	; 0x0d
    167e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1680:	b7 85       	ldd	r27, Z+15	; 0x0f
    1682:	85 3a       	cpi	r24, 0xA5	; 165
    1684:	95 4a       	sbci	r25, 0xA5	; 165
    1686:	a5 4a       	sbci	r26, 0xA5	; 165
    1688:	b5 4a       	sbci	r27, 0xA5	; 165
    168a:	09 f0       	breq	.+2      	; 0x168e <vTaskSwitchContext.part.5+0x172>
    168c:	96 cf       	rjmp	.-212    	; 0x15ba <vTaskSwitchContext.part.5+0x9e>
    168e:	a1 cf       	rjmp	.-190    	; 0x15d2 <vTaskSwitchContext.part.5+0xb6>
    1690:	02 80       	ldd	r0, Z+2	; 0x02
    1692:	f3 81       	ldd	r31, Z+3	; 0x03
    1694:	e0 2d       	mov	r30, r0
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	ed 93       	st	X+, r30
    169a:	fc 93       	st	X, r31
    169c:	12 97       	sbiw	r26, 0x02	; 2
    169e:	cd cf       	rjmp	.-102    	; 0x163a <vTaskSwitchContext.part.5+0x11e>

000016a0 <xTaskCreate>:
    16a0:	5f 92       	push	r5
    16a2:	6f 92       	push	r6
    16a4:	7f 92       	push	r7
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	bf 92       	push	r11
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	4c 01       	movw	r8, r24
    16c0:	eb 01       	movw	r28, r22
    16c2:	5a 01       	movw	r10, r20
    16c4:	39 01       	movw	r6, r18
    16c6:	50 2e       	mov	r5, r16
    16c8:	ca 01       	movw	r24, r20
    16ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <pvPortMalloc>
    16ce:	8c 01       	movw	r16, r24
    16d0:	89 2b       	or	r24, r25
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <xTaskCreate+0x36>
    16d4:	dc c0       	rjmp	.+440    	; 0x188e <xTaskCreate+0x1ee>
    16d6:	8e e2       	ldi	r24, 0x2E	; 46
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <pvPortMalloc>
    16de:	6c 01       	movw	r12, r24
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <xTaskCreate+0x46>
    16e4:	d1 c0       	rjmp	.+418    	; 0x1888 <xTaskCreate+0x1e8>
    16e6:	dc 01       	movw	r26, r24
    16e8:	57 96       	adiw	r26, 0x17	; 23
    16ea:	0d 93       	st	X+, r16
    16ec:	1c 93       	st	X, r17
    16ee:	58 97       	sbiw	r26, 0x18	; 24
    16f0:	20 97       	sbiw	r28, 0x00	; 0
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <xTaskCreate+0x56>
    16f4:	ce c0       	rjmp	.+412    	; 0x1892 <xTaskCreate+0x1f2>
    16f6:	c8 01       	movw	r24, r16
    16f8:	a5 01       	movw	r20, r10
    16fa:	65 ea       	ldi	r22, 0xA5	; 165
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	0e 94 65 18 	call	0x30ca	; 0x30ca <memset>
    1702:	f1 e0       	ldi	r31, 0x01	; 1
    1704:	af 1a       	sub	r10, r31
    1706:	b1 08       	sbc	r11, r1
    1708:	d6 01       	movw	r26, r12
    170a:	57 96       	adiw	r26, 0x17	; 23
    170c:	8d 91       	ld	r24, X+
    170e:	9c 91       	ld	r25, X
    1710:	58 97       	sbiw	r26, 0x18	; 24
    1712:	a8 0e       	add	r10, r24
    1714:	b9 1e       	adc	r11, r25
    1716:	f6 01       	movw	r30, r12
    1718:	79 96       	adiw	r30, 0x19	; 25
    171a:	9e 01       	movw	r18, r28
    171c:	28 5f       	subi	r18, 0xF8	; 248
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	de 01       	movw	r26, r28
    1722:	89 91       	ld	r24, Y+
    1724:	81 93       	st	Z+, r24
    1726:	8c 91       	ld	r24, X
    1728:	88 23       	and	r24, r24
    172a:	19 f0       	breq	.+6      	; 0x1732 <xTaskCreate+0x92>
    172c:	c2 17       	cp	r28, r18
    172e:	d3 07       	cpc	r29, r19
    1730:	b9 f7       	brne	.-18     	; 0x1720 <xTaskCreate+0x80>
    1732:	f6 01       	movw	r30, r12
    1734:	10 a2       	std	Z+32, r1	; 0x20
    1736:	05 2d       	mov	r16, r5
    1738:	04 30       	cpi	r16, 0x04	; 4
    173a:	08 f0       	brcs	.+2      	; 0x173e <xTaskCreate+0x9e>
    173c:	9f c0       	rjmp	.+318    	; 0x187c <xTaskCreate+0x1dc>
    173e:	d6 01       	movw	r26, r12
    1740:	56 96       	adiw	r26, 0x16	; 22
    1742:	0c 93       	st	X, r16
    1744:	56 97       	sbiw	r26, 0x16	; 22
    1746:	93 96       	adiw	r26, 0x23	; 35
    1748:	0c 93       	st	X, r16
    174a:	93 97       	sbiw	r26, 0x23	; 35
    174c:	94 96       	adiw	r26, 0x24	; 36
    174e:	1c 92       	st	X, r1
    1750:	e6 01       	movw	r28, r12
    1752:	22 96       	adiw	r28, 0x02	; 2
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 51 04 	call	0x8a2	; 0x8a2 <vListInitialiseItem>
    175a:	c6 01       	movw	r24, r12
    175c:	0c 96       	adiw	r24, 0x0c	; 12
    175e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <vListInitialiseItem>
    1762:	f6 01       	movw	r30, r12
    1764:	c0 86       	std	Z+8, r12	; 0x08
    1766:	d1 86       	std	Z+9, r13	; 0x09
    1768:	84 e0       	ldi	r24, 0x04	; 4
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	80 1b       	sub	r24, r16
    176e:	91 09       	sbc	r25, r1
    1770:	84 87       	std	Z+12, r24	; 0x0c
    1772:	95 87       	std	Z+13, r25	; 0x0d
    1774:	c2 8a       	std	Z+18, r12	; 0x12
    1776:	d3 8a       	std	Z+19, r13	; 0x13
    1778:	15 a2       	std	Z+37, r1	; 0x25
    177a:	16 a2       	std	Z+38, r1	; 0x26
    177c:	17 a2       	std	Z+39, r1	; 0x27
    177e:	10 a6       	std	Z+40, r1	; 0x28
    1780:	11 a6       	std	Z+41, r1	; 0x29
    1782:	12 a6       	std	Z+42, r1	; 0x2a
    1784:	13 a6       	std	Z+43, r1	; 0x2b
    1786:	14 a6       	std	Z+44, r1	; 0x2c
    1788:	15 a6       	std	Z+45, r1	; 0x2d
    178a:	a3 01       	movw	r20, r6
    178c:	b4 01       	movw	r22, r8
    178e:	c5 01       	movw	r24, r10
    1790:	0e 94 cd 04 	call	0x99a	; 0x99a <pxPortInitialiseStack>
    1794:	d6 01       	movw	r26, r12
    1796:	8d 93       	st	X+, r24
    1798:	9c 93       	st	X, r25
    179a:	e1 14       	cp	r14, r1
    179c:	f1 04       	cpc	r15, r1
    179e:	19 f0       	breq	.+6      	; 0x17a6 <xTaskCreate+0x106>
    17a0:	f7 01       	movw	r30, r14
    17a2:	c0 82       	st	Z, r12
    17a4:	d1 82       	std	Z+1, r13	; 0x01
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	0f 92       	push	r0
    17ac:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	80 93 36 61 	sts	0x6136, r24	; 0x806136 <uxCurrentNumberOfTasks>
    17b6:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <pxCurrentTCB>
    17ba:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    17be:	89 2b       	or	r24, r25
    17c0:	99 f0       	breq	.+38     	; 0x17e8 <xTaskCreate+0x148>
    17c2:	80 91 32 61 	lds	r24, 0x6132	; 0x806132 <xSchedulerRunning>
    17c6:	81 11       	cpse	r24, r1
    17c8:	18 c0       	rjmp	.+48     	; 0x17fa <xTaskCreate+0x15a>
    17ca:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    17ce:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    17d2:	d6 01       	movw	r26, r12
    17d4:	56 96       	adiw	r26, 0x16	; 22
    17d6:	8c 91       	ld	r24, X
    17d8:	96 89       	ldd	r25, Z+22	; 0x16
    17da:	89 17       	cp	r24, r25
    17dc:	88 f0       	brcs	.+34     	; 0x1800 <xTaskCreate+0x160>
    17de:	c0 92 8d 61 	sts	0x618D, r12	; 0x80618d <pxCurrentTCB>
    17e2:	d0 92 8e 61 	sts	0x618E, r13	; 0x80618e <pxCurrentTCB+0x1>
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <xTaskCreate+0x160>
    17e8:	c0 92 8d 61 	sts	0x618D, r12	; 0x80618d <pxCurrentTCB>
    17ec:	d0 92 8e 61 	sts	0x618E, r13	; 0x80618e <pxCurrentTCB+0x1>
    17f0:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <xTaskCreate+0x15a>
    17f8:	56 c0       	rjmp	.+172    	; 0x18a6 <xTaskCreate+0x206>
    17fa:	d6 01       	movw	r26, r12
    17fc:	56 96       	adiw	r26, 0x16	; 22
    17fe:	8c 91       	ld	r24, X
    1800:	90 91 2e 61 	lds	r25, 0x612E	; 0x80612e <uxTaskNumber>
    1804:	9f 5f       	subi	r25, 0xFF	; 255
    1806:	90 93 2e 61 	sts	0x612E, r25	; 0x80612e <uxTaskNumber>
    180a:	f6 01       	movw	r30, r12
    180c:	91 a3       	std	Z+33, r25	; 0x21
    180e:	90 91 33 61 	lds	r25, 0x6133	; 0x806133 <uxTopReadyPriority>
    1812:	98 17       	cp	r25, r24
    1814:	80 f1       	brcs	.+96     	; 0x1876 <xTaskCreate+0x1d6>
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 01       	movw	r18, r24
    181a:	22 0f       	add	r18, r18
    181c:	33 1f       	adc	r19, r19
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	82 0f       	add	r24, r18
    1828:	93 1f       	adc	r25, r19
    182a:	be 01       	movw	r22, r28
    182c:	87 59       	subi	r24, 0x97	; 151
    182e:	9e 49       	sbci	r25, 0x9E	; 158
    1830:	0e 94 55 04 	call	0x8aa	; 0x8aa <vListInsertEnd>
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	80 91 32 61 	lds	r24, 0x6132	; 0x806132 <xSchedulerRunning>
    183c:	88 23       	and	r24, r24
    183e:	51 f0       	breq	.+20     	; 0x1854 <xTaskCreate+0x1b4>
    1840:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1844:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1848:	96 89       	ldd	r25, Z+22	; 0x16
    184a:	d6 01       	movw	r26, r12
    184c:	56 96       	adiw	r26, 0x16	; 22
    184e:	8c 91       	ld	r24, X
    1850:	98 17       	cp	r25, r24
    1852:	b0 f0       	brcs	.+44     	; 0x1880 <xTaskCreate+0x1e0>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	7f 90       	pop	r7
    1870:	6f 90       	pop	r6
    1872:	5f 90       	pop	r5
    1874:	08 95       	ret
    1876:	80 93 33 61 	sts	0x6133, r24	; 0x806133 <uxTopReadyPriority>
    187a:	cd cf       	rjmp	.-102    	; 0x1816 <xTaskCreate+0x176>
    187c:	03 e0       	ldi	r16, 0x03	; 3
    187e:	5f cf       	rjmp	.-322    	; 0x173e <xTaskCreate+0x9e>
    1880:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	e7 cf       	rjmp	.-50     	; 0x1856 <xTaskCreate+0x1b6>
    1888:	c8 01       	movw	r24, r16
    188a:	0e 94 18 04 	call	0x830	; 0x830 <vPortFree>
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	e2 cf       	rjmp	.-60     	; 0x1856 <xTaskCreate+0x1b6>
    1892:	60 e6       	ldi	r22, 0x60	; 96
    1894:	73 e0       	ldi	r23, 0x03	; 3
    1896:	89 e3       	ldi	r24, 0x39	; 57
    1898:	90 e2       	ldi	r25, 0x20	; 32
    189a:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    189e:	f6 01       	movw	r30, r12
    18a0:	87 89       	ldd	r24, Z+23	; 0x17
    18a2:	90 8d       	ldd	r25, Z+24	; 0x18
    18a4:	29 cf       	rjmp	.-430    	; 0x16f8 <xTaskCreate+0x58>
    18a6:	89 e6       	ldi	r24, 0x69	; 105
    18a8:	91 e6       	ldi	r25, 0x61	; 97
    18aa:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18ae:	82 e7       	ldi	r24, 0x72	; 114
    18b0:	91 e6       	ldi	r25, 0x61	; 97
    18b2:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18b6:	8b e7       	ldi	r24, 0x7B	; 123
    18b8:	91 e6       	ldi	r25, 0x61	; 97
    18ba:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18be:	84 e8       	ldi	r24, 0x84	; 132
    18c0:	91 e6       	ldi	r25, 0x61	; 97
    18c2:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18c6:	80 e6       	ldi	r24, 0x60	; 96
    18c8:	91 e6       	ldi	r25, 0x61	; 97
    18ca:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18ce:	87 e5       	ldi	r24, 0x57	; 87
    18d0:	91 e6       	ldi	r25, 0x61	; 97
    18d2:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18d6:	8a e4       	ldi	r24, 0x4A	; 74
    18d8:	91 e6       	ldi	r25, 0x61	; 97
    18da:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18de:	81 e4       	ldi	r24, 0x41	; 65
    18e0:	91 e6       	ldi	r25, 0x61	; 97
    18e2:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18e6:	87 e3       	ldi	r24, 0x37	; 55
    18e8:	91 e6       	ldi	r25, 0x61	; 97
    18ea:	0e 94 43 04 	call	0x886	; 0x886 <vListInitialise>
    18ee:	80 e6       	ldi	r24, 0x60	; 96
    18f0:	91 e6       	ldi	r25, 0x61	; 97
    18f2:	80 93 55 61 	sts	0x6155, r24	; 0x806155 <pxDelayedTaskList>
    18f6:	90 93 56 61 	sts	0x6156, r25	; 0x806156 <pxDelayedTaskList+0x1>
    18fa:	87 e5       	ldi	r24, 0x57	; 87
    18fc:	91 e6       	ldi	r25, 0x61	; 97
    18fe:	80 93 53 61 	sts	0x6153, r24	; 0x806153 <pxOverflowDelayedTaskList>
    1902:	90 93 54 61 	sts	0x6154, r25	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    1906:	f6 01       	movw	r30, r12
    1908:	86 89       	ldd	r24, Z+22	; 0x16
    190a:	7a cf       	rjmp	.-268    	; 0x1800 <xTaskCreate+0x160>

0000190c <eTaskGetState>:
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
    1912:	89 2b       	or	r24, r25
    1914:	09 f4       	brne	.+2      	; 0x1918 <eTaskGetState+0xc>
    1916:	3a c0       	rjmp	.+116    	; 0x198c <eTaskGetState+0x80>
    1918:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <pxCurrentTCB>
    191c:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1920:	c8 17       	cp	r28, r24
    1922:	d9 07       	cpc	r29, r25
    1924:	79 f1       	breq	.+94     	; 0x1984 <eTaskGetState+0x78>
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	0f 92       	push	r0
    192c:	8a 85       	ldd	r24, Y+10	; 0x0a
    192e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1930:	20 91 55 61 	lds	r18, 0x6155	; 0x806155 <pxDelayedTaskList>
    1934:	30 91 56 61 	lds	r19, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1938:	40 91 53 61 	lds	r20, 0x6153	; 0x806153 <pxOverflowDelayedTaskList>
    193c:	50 91 54 61 	lds	r21, 0x6154	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	82 17       	cp	r24, r18
    1946:	93 07       	cpc	r25, r19
    1948:	a9 f0       	breq	.+42     	; 0x1974 <eTaskGetState+0x68>
    194a:	84 17       	cp	r24, r20
    194c:	95 07       	cpc	r25, r21
    194e:	91 f0       	breq	.+36     	; 0x1974 <eTaskGetState+0x68>
    1950:	21 e6       	ldi	r18, 0x61	; 97
    1952:	87 33       	cpi	r24, 0x37	; 55
    1954:	92 07       	cpc	r25, r18
    1956:	51 f0       	breq	.+20     	; 0x196c <eTaskGetState+0x60>
    1958:	21 e6       	ldi	r18, 0x61	; 97
    195a:	81 34       	cpi	r24, 0x41	; 65
    195c:	92 07       	cpc	r25, r18
    195e:	71 f0       	breq	.+28     	; 0x197c <eTaskGetState+0x70>
    1960:	89 2b       	or	r24, r25
    1962:	61 f0       	breq	.+24     	; 0x197c <eTaskGetState+0x70>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret
    196c:	8c 89       	ldd	r24, Y+20	; 0x14
    196e:	9d 89       	ldd	r25, Y+21	; 0x15
    1970:	89 2b       	or	r24, r25
    1972:	99 f0       	breq	.+38     	; 0x199a <eTaskGetState+0x8e>
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret
    197c:	84 e0       	ldi	r24, 0x04	; 4
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret
    198c:	6c e4       	ldi	r22, 0x4C	; 76
    198e:	75 e0       	ldi	r23, 0x05	; 5
    1990:	89 e3       	ldi	r24, 0x39	; 57
    1992:	90 e2       	ldi	r25, 0x20	; 32
    1994:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1998:	bf cf       	rjmp	.-130    	; 0x1918 <eTaskGetState+0xc>
    199a:	8d a5       	ldd	r24, Y+45	; 0x2d
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	51 f3       	breq	.-44     	; 0x1974 <eTaskGetState+0x68>
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	e1 cf       	rjmp	.-62     	; 0x1966 <eTaskGetState+0x5a>

000019a4 <vTaskStartScheduler>:
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	8a e2       	ldi	r24, 0x2A	; 42
    19ac:	e8 2e       	mov	r14, r24
    19ae:	81 e6       	ldi	r24, 0x61	; 97
    19b0:	f8 2e       	mov	r15, r24
    19b2:	00 e0       	ldi	r16, 0x00	; 0
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	51 e0       	ldi	r21, 0x01	; 1
    19bc:	6d e4       	ldi	r22, 0x4D	; 77
    19be:	70 e2       	ldi	r23, 0x20	; 32
    19c0:	80 ed       	ldi	r24, 0xD0	; 208
    19c2:	99 e0       	ldi	r25, 0x09	; 9
    19c4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <xTaskCreate>
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	79 f0       	breq	.+30     	; 0x19ea <vTaskStartScheduler+0x46>
    19cc:	8f 3f       	cpi	r24, 0xFF	; 255
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <vTaskStartScheduler+0x34>
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	08 95       	ret
    19d8:	67 e0       	ldi	r22, 0x07	; 7
    19da:	78 e0       	ldi	r23, 0x08	; 8
    19dc:	89 e3       	ldi	r24, 0x39	; 57
    19de:	90 e2       	ldi	r25, 0x20	; 32
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <vAssertCalled>
    19ea:	f8 94       	cli
    19ec:	2f ef       	ldi	r18, 0xFF	; 255
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	20 93 2c 61 	sts	0x612C, r18	; 0x80612c <xNextTaskUnblockTime>
    19f4:	30 93 2d 61 	sts	0x612D, r19	; 0x80612d <xNextTaskUnblockTime+0x1>
    19f8:	80 93 32 61 	sts	0x6132, r24	; 0x806132 <xSchedulerRunning>
    19fc:	10 92 34 61 	sts	0x6134, r1	; 0x806134 <xTickCount>
    1a00:	10 92 35 61 	sts	0x6135, r1	; 0x806135 <xTickCount+0x1>
    1a04:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vConfigureTimerForRunTimeStats>
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <xPortStartScheduler>

00001a12 <vTaskSuspendAll>:
    1a12:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 29 61 	sts	0x6129, r24	; 0x806129 <uxSchedulerSuspended>
    1a1c:	08 95       	ret

00001a1e <xTaskIncrementTick>:
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1a30:	81 11       	cpse	r24, r1
    1a32:	b9 c0       	rjmp	.+370    	; 0x1ba6 <xTaskIncrementTick+0x188>
    1a34:	e0 90 34 61 	lds	r14, 0x6134	; 0x806134 <xTickCount>
    1a38:	f0 90 35 61 	lds	r15, 0x6135	; 0x806135 <xTickCount+0x1>
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	e8 1a       	sub	r14, r24
    1a40:	f8 0a       	sbc	r15, r24
    1a42:	e0 92 34 61 	sts	0x6134, r14	; 0x806134 <xTickCount>
    1a46:	f0 92 35 61 	sts	0x6135, r15	; 0x806135 <xTickCount+0x1>
    1a4a:	e1 14       	cp	r14, r1
    1a4c:	f1 04       	cpc	r15, r1
    1a4e:	49 f5       	brne	.+82     	; 0x1aa2 <xTaskIncrementTick+0x84>
    1a50:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1a54:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1a58:	80 81       	ld	r24, Z
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	ab c0       	rjmp	.+342    	; 0x1bb4 <xTaskIncrementTick+0x196>
    1a5e:	80 91 55 61 	lds	r24, 0x6155	; 0x806155 <pxDelayedTaskList>
    1a62:	90 91 56 61 	lds	r25, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1a66:	20 91 53 61 	lds	r18, 0x6153	; 0x806153 <pxOverflowDelayedTaskList>
    1a6a:	30 91 54 61 	lds	r19, 0x6154	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    1a6e:	20 93 55 61 	sts	0x6155, r18	; 0x806155 <pxDelayedTaskList>
    1a72:	30 93 56 61 	sts	0x6156, r19	; 0x806156 <pxDelayedTaskList+0x1>
    1a76:	80 93 53 61 	sts	0x6153, r24	; 0x806153 <pxOverflowDelayedTaskList>
    1a7a:	90 93 54 61 	sts	0x6154, r25	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    1a7e:	80 91 2f 61 	lds	r24, 0x612F	; 0x80612f <xNumOfOverflows>
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	80 93 2f 61 	sts	0x612F, r24	; 0x80612f <xNumOfOverflows>
    1a88:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1a8c:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1a90:	80 81       	ld	r24, Z
    1a92:	81 11       	cpse	r24, r1
    1a94:	96 c0       	rjmp	.+300    	; 0x1bc2 <xTaskIncrementTick+0x1a4>
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	9f ef       	ldi	r25, 0xFF	; 255
    1a9a:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <xNextTaskUnblockTime>
    1a9e:	90 93 2d 61 	sts	0x612D, r25	; 0x80612d <xNextTaskUnblockTime+0x1>
    1aa2:	80 91 2c 61 	lds	r24, 0x612C	; 0x80612c <xNextTaskUnblockTime>
    1aa6:	90 91 2d 61 	lds	r25, 0x612D	; 0x80612d <xNextTaskUnblockTime+0x1>
    1aaa:	d1 2c       	mov	r13, r1
    1aac:	e8 16       	cp	r14, r24
    1aae:	f9 06       	cpc	r15, r25
    1ab0:	08 f4       	brcc	.+2      	; 0x1ab4 <xTaskIncrementTick+0x96>
    1ab2:	53 c0       	rjmp	.+166    	; 0x1b5a <xTaskIncrementTick+0x13c>
    1ab4:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1ab8:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <xTaskIncrementTick+0xa6>
    1ac2:	45 c0       	rjmp	.+138    	; 0x1b4e <xTaskIncrementTick+0x130>
    1ac4:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1ac8:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1acc:	05 80       	ldd	r0, Z+5	; 0x05
    1ace:	f6 81       	ldd	r31, Z+6	; 0x06
    1ad0:	e0 2d       	mov	r30, r0
    1ad2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ad4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	e8 16       	cp	r14, r24
    1adc:	f9 06       	cpc	r15, r25
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <xTaskIncrementTick+0xc4>
    1ae0:	73 c0       	rjmp	.+230    	; 0x1bc8 <xTaskIncrementTick+0x1aa>
    1ae2:	8e 01       	movw	r16, r28
    1ae4:	0e 5f       	subi	r16, 0xFE	; 254
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	c8 01       	movw	r24, r16
    1aea:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1aee:	8c 89       	ldd	r24, Y+20	; 0x14
    1af0:	9d 89       	ldd	r25, Y+21	; 0x15
    1af2:	89 2b       	or	r24, r25
    1af4:	21 f0       	breq	.+8      	; 0x1afe <xTaskIncrementTick+0xe0>
    1af6:	ce 01       	movw	r24, r28
    1af8:	0c 96       	adiw	r24, 0x0c	; 12
    1afa:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1afe:	8e 89       	ldd	r24, Y+22	; 0x16
    1b00:	90 91 33 61 	lds	r25, 0x6133	; 0x806133 <uxTopReadyPriority>
    1b04:	98 17       	cp	r25, r24
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <xTaskIncrementTick+0xee>
    1b08:	80 93 33 61 	sts	0x6133, r24	; 0x806133 <uxTopReadyPriority>
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 01       	movw	r18, r24
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	22 0f       	add	r18, r18
    1b16:	33 1f       	adc	r19, r19
    1b18:	22 0f       	add	r18, r18
    1b1a:	33 1f       	adc	r19, r19
    1b1c:	82 0f       	add	r24, r18
    1b1e:	93 1f       	adc	r25, r19
    1b20:	b8 01       	movw	r22, r16
    1b22:	87 59       	subi	r24, 0x97	; 151
    1b24:	9e 49       	sbci	r25, 0x9E	; 158
    1b26:	0e 94 55 04 	call	0x8aa	; 0x8aa <vListInsertEnd>
    1b2a:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1b2e:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1b32:	9e 89       	ldd	r25, Y+22	; 0x16
    1b34:	86 89       	ldd	r24, Z+22	; 0x16
    1b36:	98 17       	cp	r25, r24
    1b38:	08 f4       	brcc	.+2      	; 0x1b3c <xTaskIncrementTick+0x11e>
    1b3a:	bc cf       	rjmp	.-136    	; 0x1ab4 <xTaskIncrementTick+0x96>
    1b3c:	dd 24       	eor	r13, r13
    1b3e:	d3 94       	inc	r13
    1b40:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1b44:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 11       	cpse	r24, r1
    1b4c:	bb cf       	rjmp	.-138    	; 0x1ac4 <xTaskIncrementTick+0xa6>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <xNextTaskUnblockTime>
    1b56:	90 93 2d 61 	sts	0x612D, r25	; 0x80612d <xNextTaskUnblockTime+0x1>
    1b5a:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1b5e:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1b62:	86 89       	ldd	r24, Z+22	; 0x16
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	8e 0f       	add	r24, r30
    1b76:	9f 1f       	adc	r25, r31
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e7 59       	subi	r30, 0x97	; 151
    1b7c:	fe 49       	sbci	r31, 0x9E	; 158
    1b7e:	80 81       	ld	r24, Z
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	10 f0       	brcs	.+4      	; 0x1b88 <xTaskIncrementTick+0x16a>
    1b84:	dd 24       	eor	r13, r13
    1b86:	d3 94       	inc	r13
    1b88:	80 91 30 61 	lds	r24, 0x6130	; 0x806130 <xYieldPending>
    1b8c:	88 23       	and	r24, r24
    1b8e:	11 f0       	breq	.+4      	; 0x1b94 <xTaskIncrementTick+0x176>
    1b90:	dd 24       	eor	r13, r13
    1b92:	d3 94       	inc	r13
    1b94:	8d 2d       	mov	r24, r13
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	08 95       	ret
    1ba6:	80 91 31 61 	lds	r24, 0x6131	; 0x806131 <uxPendedTicks>
    1baa:	8f 5f       	subi	r24, 0xFF	; 255
    1bac:	80 93 31 61 	sts	0x6131, r24	; 0x806131 <uxPendedTicks>
    1bb0:	d1 2c       	mov	r13, r1
    1bb2:	ea cf       	rjmp	.-44     	; 0x1b88 <xTaskIncrementTick+0x16a>
    1bb4:	66 e6       	ldi	r22, 0x66	; 102
    1bb6:	7a e0       	ldi	r23, 0x0A	; 10
    1bb8:	89 e3       	ldi	r24, 0x39	; 57
    1bba:	90 e2       	ldi	r25, 0x20	; 32
    1bbc:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1bc0:	4e cf       	rjmp	.-356    	; 0x1a5e <xTaskIncrementTick+0x40>
    1bc2:	0e 94 21 0a 	call	0x1442	; 0x1442 <prvResetNextTaskUnblockTime.part.0>
    1bc6:	6d cf       	rjmp	.-294    	; 0x1aa2 <xTaskIncrementTick+0x84>
    1bc8:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <xNextTaskUnblockTime>
    1bcc:	90 93 2d 61 	sts	0x612D, r25	; 0x80612d <xNextTaskUnblockTime+0x1>
    1bd0:	c4 cf       	rjmp	.-120    	; 0x1b5a <xTaskIncrementTick+0x13c>

00001bd2 <xTaskResumeAll>:
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1be0:	88 23       	and	r24, r24
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <xTaskResumeAll+0x14>
    1be4:	77 c0       	rjmp	.+238    	; 0x1cd4 <xTaskResumeAll+0x102>
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	0f 92       	push	r0
    1bec:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1bf0:	81 50       	subi	r24, 0x01	; 1
    1bf2:	80 93 29 61 	sts	0x6129, r24	; 0x806129 <uxSchedulerSuspended>
    1bf6:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	62 c0       	rjmp	.+196    	; 0x1cc2 <xTaskResumeAll+0xf0>
    1bfe:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>
    1c02:	88 23       	and	r24, r24
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <xTaskResumeAll+0x36>
    1c06:	5d c0       	rjmp	.+186    	; 0x1cc2 <xTaskResumeAll+0xf0>
    1c08:	c0 e0       	ldi	r28, 0x00	; 0
    1c0a:	d0 e0       	ldi	r29, 0x00	; 0
    1c0c:	ff 24       	eor	r15, r15
    1c0e:	f3 94       	inc	r15
    1c10:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <xPendingReadyList>
    1c14:	88 23       	and	r24, r24
    1c16:	a1 f1       	breq	.+104    	; 0x1c80 <xTaskResumeAll+0xae>
    1c18:	e0 91 4f 61 	lds	r30, 0x614F	; 0x80614f <xPendingReadyList+0x5>
    1c1c:	f0 91 50 61 	lds	r31, 0x6150	; 0x806150 <xPendingReadyList+0x6>
    1c20:	c6 81       	ldd	r28, Z+6	; 0x06
    1c22:	d7 81       	ldd	r29, Z+7	; 0x07
    1c24:	ce 01       	movw	r24, r28
    1c26:	0c 96       	adiw	r24, 0x0c	; 12
    1c28:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	0e 5f       	subi	r16, 0xFE	; 254
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1c38:	8e 89       	ldd	r24, Y+22	; 0x16
    1c3a:	90 91 33 61 	lds	r25, 0x6133	; 0x806133 <uxTopReadyPriority>
    1c3e:	98 17       	cp	r25, r24
    1c40:	10 f4       	brcc	.+4      	; 0x1c46 <xTaskResumeAll+0x74>
    1c42:	80 93 33 61 	sts	0x6133, r24	; 0x806133 <uxTopReadyPriority>
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 01       	movw	r18, r24
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	b8 01       	movw	r22, r16
    1c5c:	87 59       	subi	r24, 0x97	; 151
    1c5e:	9e 49       	sbci	r25, 0x9E	; 158
    1c60:	0e 94 55 04 	call	0x8aa	; 0x8aa <vListInsertEnd>
    1c64:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1c68:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1c6c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c6e:	86 89       	ldd	r24, Z+22	; 0x16
    1c70:	98 17       	cp	r25, r24
    1c72:	70 f2       	brcs	.-100    	; 0x1c10 <xTaskResumeAll+0x3e>
    1c74:	f0 92 30 61 	sts	0x6130, r15	; 0x806130 <xYieldPending>
    1c78:	80 91 4a 61 	lds	r24, 0x614A	; 0x80614a <xPendingReadyList>
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	cc cf       	rjmp	.-104    	; 0x1c18 <xTaskResumeAll+0x46>
    1c80:	cd 2b       	or	r28, r29
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <xTaskResumeAll+0xcc>
    1c84:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    1c88:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    1c8c:	80 81       	ld	r24, Z
    1c8e:	81 11       	cpse	r24, r1
    1c90:	2c c0       	rjmp	.+88     	; 0x1cea <xTaskResumeAll+0x118>
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	9f ef       	ldi	r25, 0xFF	; 255
    1c96:	80 93 2c 61 	sts	0x612C, r24	; 0x80612c <xNextTaskUnblockTime>
    1c9a:	90 93 2d 61 	sts	0x612D, r25	; 0x80612d <xNextTaskUnblockTime+0x1>
    1c9e:	c0 91 31 61 	lds	r28, 0x6131	; 0x806131 <uxPendedTicks>
    1ca2:	cc 23       	and	r28, r28
    1ca4:	51 f0       	breq	.+20     	; 0x1cba <xTaskResumeAll+0xe8>
    1ca6:	d1 e0       	ldi	r29, 0x01	; 1
    1ca8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskIncrementTick>
    1cac:	81 11       	cpse	r24, r1
    1cae:	d0 93 30 61 	sts	0x6130, r29	; 0x806130 <xYieldPending>
    1cb2:	c1 50       	subi	r28, 0x01	; 1
    1cb4:	c9 f7       	brne	.-14     	; 0x1ca8 <xTaskResumeAll+0xd6>
    1cb6:	10 92 31 61 	sts	0x6131, r1	; 0x806131 <uxPendedTicks>
    1cba:	80 91 30 61 	lds	r24, 0x6130	; 0x806130 <xYieldPending>
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	10 c0       	rjmp	.+32     	; 0x1ce2 <xTaskResumeAll+0x110>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	08 95       	ret
    1cd4:	6c e6       	ldi	r22, 0x6C	; 108
    1cd6:	78 e0       	ldi	r23, 0x08	; 8
    1cd8:	89 e3       	ldi	r24, 0x39	; 57
    1cda:	90 e2       	ldi	r25, 0x20	; 32
    1cdc:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1ce0:	82 cf       	rjmp	.-252    	; 0x1be6 <xTaskResumeAll+0x14>
    1ce2:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	ed cf       	rjmp	.-38     	; 0x1cc4 <xTaskResumeAll+0xf2>
    1cea:	0e 94 21 0a 	call	0x1442	; 0x1442 <prvResetNextTaskUnblockTime.part.0>
    1cee:	d7 cf       	rjmp	.-82     	; 0x1c9e <xTaskResumeAll+0xcc>

00001cf0 <vTaskDelayUntil>:
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	8c 01       	movw	r16, r24
    1cfa:	eb 01       	movw	r28, r22
    1cfc:	89 2b       	or	r24, r25
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <vTaskDelayUntil+0x12>
    1d00:	46 c0       	rjmp	.+140    	; 0x1d8e <vTaskDelayUntil+0x9e>
    1d02:	20 97       	sbiw	r28, 0x00	; 0
    1d04:	e9 f1       	breq	.+122    	; 0x1d80 <vTaskDelayUntil+0x90>
    1d06:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	32 c0       	rjmp	.+100    	; 0x1d72 <vTaskDelayUntil+0x82>
    1d0e:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1d12:	8f 5f       	subi	r24, 0xFF	; 255
    1d14:	80 93 29 61 	sts	0x6129, r24	; 0x806129 <uxSchedulerSuspended>
    1d18:	40 91 34 61 	lds	r20, 0x6134	; 0x806134 <xTickCount>
    1d1c:	50 91 35 61 	lds	r21, 0x6135	; 0x806135 <xTickCount+0x1>
    1d20:	f8 01       	movw	r30, r16
    1d22:	20 81       	ld	r18, Z
    1d24:	31 81       	ldd	r19, Z+1	; 0x01
    1d26:	ce 01       	movw	r24, r28
    1d28:	82 0f       	add	r24, r18
    1d2a:	93 1f       	adc	r25, r19
    1d2c:	42 17       	cp	r20, r18
    1d2e:	53 07       	cpc	r21, r19
    1d30:	88 f4       	brcc	.+34     	; 0x1d54 <vTaskDelayUntil+0x64>
    1d32:	82 17       	cp	r24, r18
    1d34:	93 07       	cpc	r25, r19
    1d36:	88 f0       	brcs	.+34     	; 0x1d5a <vTaskDelayUntil+0x6a>
    1d38:	f8 01       	movw	r30, r16
    1d3a:	80 83       	st	Z, r24
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    1d42:	81 11       	cpse	r24, r1
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vTaskDelayUntil+0x5a>
    1d46:	0e 94 71 05 	call	0xae2	; 0xae2 <vPortYield>
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	08 95       	ret
    1d54:	82 17       	cp	r24, r18
    1d56:	93 07       	cpc	r25, r19
    1d58:	18 f0       	brcs	.+6      	; 0x1d60 <vTaskDelayUntil+0x70>
    1d5a:	48 17       	cp	r20, r24
    1d5c:	59 07       	cpc	r21, r25
    1d5e:	60 f7       	brcc	.-40     	; 0x1d38 <vTaskDelayUntil+0x48>
    1d60:	f8 01       	movw	r30, r16
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	84 1b       	sub	r24, r20
    1d6a:	95 0b       	sbc	r25, r21
    1d6c:	0e 94 32 0a 	call	0x1464	; 0x1464 <prvAddCurrentTaskToDelayedList>
    1d70:	e6 cf       	rjmp	.-52     	; 0x1d3e <vTaskDelayUntil+0x4e>
    1d72:	6c ec       	ldi	r22, 0xCC	; 204
    1d74:	74 e0       	ldi	r23, 0x04	; 4
    1d76:	89 e3       	ldi	r24, 0x39	; 57
    1d78:	90 e2       	ldi	r25, 0x20	; 32
    1d7a:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1d7e:	c7 cf       	rjmp	.-114    	; 0x1d0e <vTaskDelayUntil+0x1e>
    1d80:	6b ec       	ldi	r22, 0xCB	; 203
    1d82:	74 e0       	ldi	r23, 0x04	; 4
    1d84:	89 e3       	ldi	r24, 0x39	; 57
    1d86:	90 e2       	ldi	r25, 0x20	; 32
    1d88:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1d8c:	bc cf       	rjmp	.-136    	; 0x1d06 <vTaskDelayUntil+0x16>
    1d8e:	6a ec       	ldi	r22, 0xCA	; 202
    1d90:	74 e0       	ldi	r23, 0x04	; 4
    1d92:	89 e3       	ldi	r24, 0x39	; 57
    1d94:	90 e2       	ldi	r25, 0x20	; 32
    1d96:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1d9a:	b3 cf       	rjmp	.-154    	; 0x1d02 <vTaskDelayUntil+0x12>

00001d9c <vTaskSwitchContext>:
    1d9c:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1da0:	81 11       	cpse	r24, r1
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vTaskSwitchContext+0xc>
    1da4:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <vTaskSwitchContext.part.5>
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	80 93 30 61 	sts	0x6130, r24	; 0x806130 <xYieldPending>
    1dae:	08 95       	ret

00001db0 <vTaskPlaceOnEventList>:
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	ec 01       	movw	r28, r24
    1dba:	8b 01       	movw	r16, r22
    1dbc:	89 2b       	or	r24, r25
    1dbe:	89 f0       	breq	.+34     	; 0x1de2 <vTaskPlaceOnEventList+0x32>
    1dc0:	60 91 8d 61 	lds	r22, 0x618D	; 0x80618d <pxCurrentTCB>
    1dc4:	70 91 8e 61 	lds	r23, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1dc8:	64 5f       	subi	r22, 0xF4	; 244
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	ce 01       	movw	r24, r28
    1dce:	0e 94 76 04 	call	0x8ec	; 0x8ec <vListInsert>
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <prvAddCurrentTaskToDelayedList>
    1de2:	63 ea       	ldi	r22, 0xA3	; 163
    1de4:	7b e0       	ldi	r23, 0x0B	; 11
    1de6:	89 e3       	ldi	r24, 0x39	; 57
    1de8:	90 e2       	ldi	r25, 0x20	; 32
    1dea:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1dee:	e8 cf       	rjmp	.-48     	; 0x1dc0 <vTaskPlaceOnEventList+0x10>

00001df0 <xTaskRemoveFromEventList>:
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	dc 01       	movw	r26, r24
    1dfa:	15 96       	adiw	r26, 0x05	; 5
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	fc 91       	ld	r31, X
    1e00:	16 97       	sbiw	r26, 0x06	; 6
    1e02:	c6 81       	ldd	r28, Z+6	; 0x06
    1e04:	d7 81       	ldd	r29, Z+7	; 0x07
    1e06:	20 97       	sbiw	r28, 0x00	; 0
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <xTaskRemoveFromEventList+0x1c>
    1e0a:	42 c0       	rjmp	.+132    	; 0x1e90 <xTaskRemoveFromEventList+0xa0>
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	04 5f       	subi	r16, 0xF4	; 244
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	c8 01       	movw	r24, r16
    1e14:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1e18:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	29 c0       	rjmp	.+82     	; 0x1e72 <xTaskRemoveFromEventList+0x82>
    1e20:	0a 50       	subi	r16, 0x0A	; 10
    1e22:	11 09       	sbc	r17, r1
    1e24:	c8 01       	movw	r24, r16
    1e26:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    1e2a:	8e 89       	ldd	r24, Y+22	; 0x16
    1e2c:	90 91 33 61 	lds	r25, 0x6133	; 0x806133 <uxTopReadyPriority>
    1e30:	98 17       	cp	r25, r24
    1e32:	28 f1       	brcs	.+74     	; 0x1e7e <xTaskRemoveFromEventList+0x8e>
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9c 01       	movw	r18, r24
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	22 0f       	add	r18, r18
    1e3e:	33 1f       	adc	r19, r19
    1e40:	22 0f       	add	r18, r18
    1e42:	33 1f       	adc	r19, r19
    1e44:	82 0f       	add	r24, r18
    1e46:	93 1f       	adc	r25, r19
    1e48:	b8 01       	movw	r22, r16
    1e4a:	87 59       	subi	r24, 0x97	; 151
    1e4c:	9e 49       	sbci	r25, 0x9E	; 158
    1e4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <vListInsertEnd>
    1e52:	e0 91 8d 61 	lds	r30, 0x618D	; 0x80618d <pxCurrentTCB>
    1e56:	f0 91 8e 61 	lds	r31, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1e5a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e5c:	86 89       	ldd	r24, Z+22	; 0x16
    1e5e:	89 17       	cp	r24, r25
    1e60:	88 f4       	brcc	.+34     	; 0x1e84 <xTaskRemoveFromEventList+0x94>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 93 30 61 	sts	0x6130, r24	; 0x806130 <xYieldPending>
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	08 95       	ret
    1e72:	b8 01       	movw	r22, r16
    1e74:	8a e4       	ldi	r24, 0x4A	; 74
    1e76:	91 e6       	ldi	r25, 0x61	; 97
    1e78:	0e 94 55 04 	call	0x8aa	; 0x8aa <vListInsertEnd>
    1e7c:	ea cf       	rjmp	.-44     	; 0x1e52 <xTaskRemoveFromEventList+0x62>
    1e7e:	80 93 33 61 	sts	0x6133, r24	; 0x806133 <uxTopReadyPriority>
    1e82:	d8 cf       	rjmp	.-80     	; 0x1e34 <xTaskRemoveFromEventList+0x44>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	08 95       	ret
    1e90:	6e ef       	ldi	r22, 0xFE	; 254
    1e92:	7b e0       	ldi	r23, 0x0B	; 11
    1e94:	89 e3       	ldi	r24, 0x39	; 57
    1e96:	90 e2       	ldi	r25, 0x20	; 32
    1e98:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1e9c:	b7 cf       	rjmp	.-146    	; 0x1e0c <xTaskRemoveFromEventList+0x1c>

00001e9e <vTaskInternalSetTimeOutState>:
    1e9e:	20 91 2f 61 	lds	r18, 0x612F	; 0x80612f <xNumOfOverflows>
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
    1ea6:	20 91 34 61 	lds	r18, 0x6134	; 0x806134 <xTickCount>
    1eaa:	30 91 35 61 	lds	r19, 0x6135	; 0x806135 <xTickCount+0x1>
    1eae:	21 83       	std	Z+1, r18	; 0x01
    1eb0:	32 83       	std	Z+2, r19	; 0x02
    1eb2:	08 95       	ret

00001eb4 <xTaskCheckForTimeOut>:
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	ec 01       	movw	r28, r24
    1ebe:	8b 01       	movw	r16, r22
    1ec0:	89 2b       	or	r24, r25
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <xTaskCheckForTimeOut+0x12>
    1ec4:	40 c0       	rjmp	.+128    	; 0x1f46 <xTaskCheckForTimeOut+0x92>
    1ec6:	01 15       	cp	r16, r1
    1ec8:	11 05       	cpc	r17, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <xTaskCheckForTimeOut+0x1a>
    1ecc:	43 c0       	rjmp	.+134    	; 0x1f54 <xTaskCheckForTimeOut+0xa0>
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	0f 92       	push	r0
    1ed4:	80 91 34 61 	lds	r24, 0x6134	; 0x806134 <xTickCount>
    1ed8:	90 91 35 61 	lds	r25, 0x6135	; 0x806135 <xTickCount+0x1>
    1edc:	f8 01       	movw	r30, r16
    1ede:	20 81       	ld	r18, Z
    1ee0:	31 81       	ldd	r19, Z+1	; 0x01
    1ee2:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee4:	ff ef       	ldi	r31, 0xFF	; 255
    1ee6:	3f 07       	cpc	r19, r31
    1ee8:	61 f1       	breq	.+88     	; 0x1f42 <xTaskCheckForTimeOut+0x8e>
    1eea:	49 81       	ldd	r20, Y+1	; 0x01
    1eec:	5a 81       	ldd	r21, Y+2	; 0x02
    1eee:	60 91 2f 61 	lds	r22, 0x612F	; 0x80612f <xNumOfOverflows>
    1ef2:	78 81       	ld	r23, Y
    1ef4:	76 17       	cp	r23, r22
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <xTaskCheckForTimeOut+0x4a>
    1ef8:	84 17       	cp	r24, r20
    1efa:	95 07       	cpc	r25, r21
    1efc:	80 f4       	brcc	.+32     	; 0x1f1e <xTaskCheckForTimeOut+0x6a>
    1efe:	84 1b       	sub	r24, r20
    1f00:	95 0b       	sbc	r25, r21
    1f02:	82 17       	cp	r24, r18
    1f04:	93 07       	cpc	r25, r19
    1f06:	68 f0       	brcs	.+26     	; 0x1f22 <xTaskCheckForTimeOut+0x6e>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	10 82       	st	Z, r1
    1f0c:	11 82       	std	Z+1, r1	; 0x01
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	08 95       	ret
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	f7 cf       	rjmp	.-18     	; 0x1f10 <xTaskCheckForTimeOut+0x5c>
    1f22:	28 1b       	sub	r18, r24
    1f24:	39 0b       	sbc	r19, r25
    1f26:	f8 01       	movw	r30, r16
    1f28:	20 83       	st	Z, r18
    1f2a:	31 83       	std	Z+1, r19	; 0x01
    1f2c:	80 91 2f 61 	lds	r24, 0x612F	; 0x80612f <xNumOfOverflows>
    1f30:	88 83       	st	Y, r24
    1f32:	80 91 34 61 	lds	r24, 0x6134	; 0x806134 <xTickCount>
    1f36:	90 91 35 61 	lds	r25, 0x6135	; 0x806135 <xTickCount+0x1>
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	e7 cf       	rjmp	.-50     	; 0x1f10 <xTaskCheckForTimeOut+0x5c>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	e5 cf       	rjmp	.-54     	; 0x1f10 <xTaskCheckForTimeOut+0x5c>
    1f46:	69 e6       	ldi	r22, 0x69	; 105
    1f48:	7c e0       	ldi	r23, 0x0C	; 12
    1f4a:	89 e3       	ldi	r24, 0x39	; 57
    1f4c:	90 e2       	ldi	r25, 0x20	; 32
    1f4e:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1f52:	b9 cf       	rjmp	.-142    	; 0x1ec6 <xTaskCheckForTimeOut+0x12>
    1f54:	6a e6       	ldi	r22, 0x6A	; 106
    1f56:	7c e0       	ldi	r23, 0x0C	; 12
    1f58:	89 e3       	ldi	r24, 0x39	; 57
    1f5a:	90 e2       	ldi	r25, 0x20	; 32
    1f5c:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    1f60:	b6 cf       	rjmp	.-148    	; 0x1ece <xTaskCheckForTimeOut+0x1a>

00001f62 <vTaskMissedYield>:
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	80 93 30 61 	sts	0x6130, r24	; 0x806130 <xYieldPending>
    1f68:	08 95       	ret

00001f6a <vTaskGetInfo>:
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	8c 01       	movw	r16, r24
    1f76:	eb 01       	movw	r28, r22
    1f78:	f4 2e       	mov	r15, r20
    1f7a:	89 2b       	or	r24, r25
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <vTaskGetInfo+0x16>
    1f7e:	64 c0       	rjmp	.+200    	; 0x2048 <vTaskGetInfo+0xde>
    1f80:	08 83       	st	Y, r16
    1f82:	19 83       	std	Y+1, r17	; 0x01
    1f84:	c8 01       	movw	r24, r16
    1f86:	49 96       	adiw	r24, 0x19	; 25
    1f88:	8a 83       	std	Y+2, r24	; 0x02
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	d8 01       	movw	r26, r16
    1f8e:	56 96       	adiw	r26, 0x16	; 22
    1f90:	8c 91       	ld	r24, X
    1f92:	56 97       	sbiw	r26, 0x16	; 22
    1f94:	8e 83       	std	Y+6, r24	; 0x06
    1f96:	57 96       	adiw	r26, 0x17	; 23
    1f98:	8d 91       	ld	r24, X+
    1f9a:	9c 91       	ld	r25, X
    1f9c:	58 97       	sbiw	r26, 0x18	; 24
    1f9e:	8c 87       	std	Y+12, r24	; 0x0c
    1fa0:	9d 87       	std	Y+13, r25	; 0x0d
    1fa2:	91 96       	adiw	r26, 0x21	; 33
    1fa4:	8c 91       	ld	r24, X
    1fa6:	91 97       	sbiw	r26, 0x21	; 33
    1fa8:	8c 83       	std	Y+4, r24	; 0x04
    1faa:	93 96       	adiw	r26, 0x23	; 35
    1fac:	8c 91       	ld	r24, X
    1fae:	93 97       	sbiw	r26, 0x23	; 35
    1fb0:	8f 83       	std	Y+7, r24	; 0x07
    1fb2:	95 96       	adiw	r26, 0x25	; 37
    1fb4:	8d 91       	ld	r24, X+
    1fb6:	9d 91       	ld	r25, X+
    1fb8:	0d 90       	ld	r0, X+
    1fba:	bc 91       	ld	r27, X
    1fbc:	a0 2d       	mov	r26, r0
    1fbe:	88 87       	std	Y+8, r24	; 0x08
    1fc0:	99 87       	std	Y+9, r25	; 0x09
    1fc2:	aa 87       	std	Y+10, r26	; 0x0a
    1fc4:	bb 87       	std	Y+11, r27	; 0x0b
    1fc6:	25 30       	cpi	r18, 0x05	; 5
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <vTaskGetInfo+0x62>
    1fca:	43 c0       	rjmp	.+134    	; 0x2052 <vTaskGetInfo+0xe8>
    1fcc:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <pxCurrentTCB>
    1fd0:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    1fd4:	08 17       	cp	r16, r24
    1fd6:	19 07       	cpc	r17, r25
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <vTaskGetInfo+0x72>
    1fda:	40 c0       	rjmp	.+128    	; 0x205c <vTaskGetInfo+0xf2>
    1fdc:	2d 83       	std	Y+5, r18	; 0x05
    1fde:	23 30       	cpi	r18, 0x03	; 3
    1fe0:	21 f1       	breq	.+72     	; 0x202a <vTaskGetInfo+0xc0>
    1fe2:	ff 20       	and	r15, r15
    1fe4:	d1 f0       	breq	.+52     	; 0x201a <vTaskGetInfo+0xb0>
    1fe6:	d8 01       	movw	r26, r16
    1fe8:	57 96       	adiw	r26, 0x17	; 23
    1fea:	ed 91       	ld	r30, X+
    1fec:	fc 91       	ld	r31, X
    1fee:	58 97       	sbiw	r26, 0x18	; 24
    1ff0:	80 81       	ld	r24, Z
    1ff2:	85 3a       	cpi	r24, 0xA5	; 165
    1ff4:	a9 f5       	brne	.+106    	; 0x2060 <vTaskGetInfo+0xf6>
    1ff6:	31 96       	adiw	r30, 0x01	; 1
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	a1 1d       	adc	r26, r1
    2002:	b1 1d       	adc	r27, r1
    2004:	21 91       	ld	r18, Z+
    2006:	25 3a       	cpi	r18, 0xA5	; 165
    2008:	d1 f3       	breq	.-12     	; 0x1ffe <vTaskGetInfo+0x94>
    200a:	8e 87       	std	Y+14, r24	; 0x0e
    200c:	9f 87       	std	Y+15, r25	; 0x0f
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	08 95       	ret
    201a:	1e 86       	std	Y+14, r1	; 0x0e
    201c:	1f 86       	std	Y+15, r1	; 0x0f
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	ff 90       	pop	r15
    2028:	08 95       	ret
    202a:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	80 93 29 61 	sts	0x6129, r24	; 0x806129 <uxSchedulerSuspended>
    2034:	f8 01       	movw	r30, r16
    2036:	84 89       	ldd	r24, Z+20	; 0x14
    2038:	95 89       	ldd	r25, Z+21	; 0x15
    203a:	89 2b       	or	r24, r25
    203c:	11 f0       	breq	.+4      	; 0x2042 <vTaskGetInfo+0xd8>
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	8d 83       	std	Y+5, r24	; 0x05
    2042:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    2046:	cd cf       	rjmp	.-102    	; 0x1fe2 <vTaskGetInfo+0x78>
    2048:	00 91 8d 61 	lds	r16, 0x618D	; 0x80618d <pxCurrentTCB>
    204c:	10 91 8e 61 	lds	r17, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    2050:	97 cf       	rjmp	.-210    	; 0x1f80 <vTaskGetInfo+0x16>
    2052:	c8 01       	movw	r24, r16
    2054:	0e 94 86 0c 	call	0x190c	; 0x190c <eTaskGetState>
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	c3 cf       	rjmp	.-122    	; 0x1fe2 <vTaskGetInfo+0x78>
    205c:	1d 82       	std	Y+5, r1	; 0x05
    205e:	c1 cf       	rjmp	.-126    	; 0x1fe2 <vTaskGetInfo+0x78>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	d2 cf       	rjmp	.-92     	; 0x200a <vTaskGetInfo+0xa0>

00002066 <prvListTasksWithinSingleList.part.6>:
    2066:	8f 92       	push	r8
    2068:	9f 92       	push	r9
    206a:	af 92       	push	r10
    206c:	bf 92       	push	r11
    206e:	cf 92       	push	r12
    2070:	df 92       	push	r13
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	5c 01       	movw	r10, r24
    2080:	8b 01       	movw	r16, r22
    2082:	d4 2f       	mov	r29, r20
    2084:	db 01       	movw	r26, r22
    2086:	11 96       	adiw	r26, 0x01	; 1
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	12 97       	sbiw	r26, 0x02	; 2
    208e:	02 80       	ldd	r0, Z+2	; 0x02
    2090:	f3 81       	ldd	r31, Z+3	; 0x03
    2092:	e0 2d       	mov	r30, r0
    2094:	11 96       	adiw	r26, 0x01	; 1
    2096:	ed 93       	st	X+, r30
    2098:	fc 93       	st	X, r31
    209a:	12 97       	sbiw	r26, 0x02	; 2
    209c:	7b 01       	movw	r14, r22
    209e:	b3 e0       	ldi	r27, 0x03	; 3
    20a0:	eb 0e       	add	r14, r27
    20a2:	f1 1c       	adc	r15, r1
    20a4:	ee 15       	cp	r30, r14
    20a6:	ff 05       	cpc	r31, r15
    20a8:	e1 f1       	breq	.+120    	; 0x2122 <prvListTasksWithinSingleList.part.6+0xbc>
    20aa:	c6 80       	ldd	r12, Z+6	; 0x06
    20ac:	d7 80       	ldd	r13, Z+7	; 0x07
    20ae:	c0 e0       	ldi	r28, 0x00	; 0
    20b0:	16 c0       	rjmp	.+44     	; 0x20de <prvListTasksWithinSingleList.part.6+0x78>
    20b2:	86 80       	ldd	r8, Z+6	; 0x06
    20b4:	97 80       	ldd	r9, Z+7	; 0x07
    20b6:	b5 01       	movw	r22, r10
    20b8:	b0 e1       	ldi	r27, 0x10	; 16
    20ba:	cb 9f       	mul	r28, r27
    20bc:	60 0d       	add	r22, r0
    20be:	71 1d       	adc	r23, r1
    20c0:	11 24       	eor	r1, r1
    20c2:	2d 2f       	mov	r18, r29
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	c4 01       	movw	r24, r8
    20c8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <vTaskGetInfo>
    20cc:	cf 5f       	subi	r28, 0xFF	; 255
    20ce:	c8 14       	cp	r12, r8
    20d0:	d9 04       	cpc	r13, r9
    20d2:	c9 f0       	breq	.+50     	; 0x2106 <prvListTasksWithinSingleList.part.6+0xa0>
    20d4:	d8 01       	movw	r26, r16
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	ed 91       	ld	r30, X+
    20da:	fc 91       	ld	r31, X
    20dc:	12 97       	sbiw	r26, 0x02	; 2
    20de:	02 80       	ldd	r0, Z+2	; 0x02
    20e0:	f3 81       	ldd	r31, Z+3	; 0x03
    20e2:	e0 2d       	mov	r30, r0
    20e4:	d8 01       	movw	r26, r16
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	ed 93       	st	X+, r30
    20ea:	fc 93       	st	X, r31
    20ec:	12 97       	sbiw	r26, 0x02	; 2
    20ee:	ee 16       	cp	r14, r30
    20f0:	ff 06       	cpc	r15, r31
    20f2:	f9 f6       	brne	.-66     	; 0x20b2 <prvListTasksWithinSingleList.part.6+0x4c>
    20f4:	15 96       	adiw	r26, 0x05	; 5
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	16 97       	sbiw	r26, 0x06	; 6
    20fc:	11 96       	adiw	r26, 0x01	; 1
    20fe:	ed 93       	st	X+, r30
    2100:	fc 93       	st	X, r31
    2102:	12 97       	sbiw	r26, 0x02	; 2
    2104:	d6 cf       	rjmp	.-84     	; 0x20b2 <prvListTasksWithinSingleList.part.6+0x4c>
    2106:	8c 2f       	mov	r24, r28
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	df 90       	pop	r13
    2116:	cf 90       	pop	r12
    2118:	bf 90       	pop	r11
    211a:	af 90       	pop	r10
    211c:	9f 90       	pop	r9
    211e:	8f 90       	pop	r8
    2120:	08 95       	ret
    2122:	02 80       	ldd	r0, Z+2	; 0x02
    2124:	f3 81       	ldd	r31, Z+3	; 0x03
    2126:	e0 2d       	mov	r30, r0
    2128:	c0 cf       	rjmp	.-128    	; 0x20aa <prvListTasksWithinSingleList.part.6+0x44>

0000212a <uxTaskGetSystemState>:
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	8c 01       	movw	r16, r24
    2138:	7a 01       	movw	r14, r20
    213a:	80 91 29 61 	lds	r24, 0x6129	; 0x806129 <uxSchedulerSuspended>
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	80 93 29 61 	sts	0x6129, r24	; 0x806129 <uxSchedulerSuspended>
    2144:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>
    2148:	68 17       	cp	r22, r24
    214a:	08 f4       	brcc	.+2      	; 0x214e <uxTaskGetSystemState+0x24>
    214c:	63 c0       	rjmp	.+198    	; 0x2214 <uxTaskGetSystemState+0xea>
    214e:	c4 e0       	ldi	r28, 0x04	; 4
    2150:	d0 e0       	ldi	r29, 0x00	; 0
    2152:	c1 50       	subi	r28, 0x01	; 1
    2154:	6c 2f       	mov	r22, r28
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	cb 01       	movw	r24, r22
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	68 0f       	add	r22, r24
    2168:	79 1f       	adc	r23, r25
    216a:	fb 01       	movw	r30, r22
    216c:	e7 59       	subi	r30, 0x97	; 151
    216e:	fe 49       	sbci	r31, 0x9E	; 158
    2170:	80 81       	ld	r24, Z
    2172:	81 11       	cpse	r24, r1
    2174:	44 c0       	rjmp	.+136    	; 0x21fe <uxTaskGetSystemState+0xd4>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	d8 0f       	add	r29, r24
    217a:	c1 11       	cpse	r28, r1
    217c:	ea cf       	rjmp	.-44     	; 0x2152 <uxTaskGetSystemState+0x28>
    217e:	e0 91 55 61 	lds	r30, 0x6155	; 0x806155 <pxDelayedTaskList>
    2182:	f0 91 56 61 	lds	r31, 0x6156	; 0x806156 <pxDelayedTaskList+0x1>
    2186:	80 81       	ld	r24, Z
    2188:	81 11       	cpse	r24, r1
    218a:	46 c0       	rjmp	.+140    	; 0x2218 <uxTaskGetSystemState+0xee>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	d8 0f       	add	r29, r24
    2190:	e0 91 53 61 	lds	r30, 0x6153	; 0x806153 <pxOverflowDelayedTaskList>
    2194:	f0 91 54 61 	lds	r31, 0x6154	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    2198:	80 81       	ld	r24, Z
    219a:	81 11       	cpse	r24, r1
    219c:	50 c0       	rjmp	.+160    	; 0x223e <uxTaskGetSystemState+0x114>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	d8 0f       	add	r29, r24
    21a2:	80 91 41 61 	lds	r24, 0x6141	; 0x806141 <xTasksWaitingTermination>
    21a6:	81 11       	cpse	r24, r1
    21a8:	5a c0       	rjmp	.+180    	; 0x225e <uxTaskGetSystemState+0x134>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	d8 0f       	add	r29, r24
    21ae:	80 91 37 61 	lds	r24, 0x6137	; 0x806137 <xSuspendedTaskList>
    21b2:	81 11       	cpse	r24, r1
    21b4:	65 c0       	rjmp	.+202    	; 0x2280 <uxTaskGetSystemState+0x156>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	d8 0f       	add	r29, r24
    21ba:	e1 14       	cp	r14, r1
    21bc:	f1 04       	cpc	r15, r1
    21be:	a9 f0       	breq	.+42     	; 0x21ea <uxTaskGetSystemState+0xc0>
    21c0:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    21c4:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    21c8:	80 91 93 63 	lds	r24, 0x6393	; 0x806393 <StatsTimer>
    21cc:	90 91 94 63 	lds	r25, 0x6394	; 0x806394 <StatsTimer+0x1>
    21d0:	a0 91 95 63 	lds	r26, 0x6395	; 0x806395 <StatsTimer+0x2>
    21d4:	b0 91 96 63 	lds	r27, 0x6396	; 0x806396 <StatsTimer+0x3>
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	a1 1d       	adc	r26, r1
    21de:	b1 1d       	adc	r27, r1
    21e0:	f7 01       	movw	r30, r14
    21e2:	80 83       	st	Z, r24
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	a2 83       	std	Z+2, r26	; 0x02
    21e8:	b3 83       	std	Z+3, r27	; 0x03
    21ea:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xTaskResumeAll>
    21ee:	8d 2f       	mov	r24, r29
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	08 95       	ret
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	bf 01       	movw	r22, r30
    2202:	c8 01       	movw	r24, r16
    2204:	20 e1       	ldi	r18, 0x10	; 16
    2206:	d2 9f       	mul	r29, r18
    2208:	80 0d       	add	r24, r0
    220a:	91 1d       	adc	r25, r1
    220c:	11 24       	eor	r1, r1
    220e:	0e 94 33 10 	call	0x2066	; 0x2066 <prvListTasksWithinSingleList.part.6>
    2212:	b2 cf       	rjmp	.-156    	; 0x2178 <uxTaskGetSystemState+0x4e>
    2214:	d0 e0       	ldi	r29, 0x00	; 0
    2216:	e9 cf       	rjmp	.-46     	; 0x21ea <uxTaskGetSystemState+0xc0>
    2218:	42 e0       	ldi	r20, 0x02	; 2
    221a:	bf 01       	movw	r22, r30
    221c:	c8 01       	movw	r24, r16
    221e:	e0 e1       	ldi	r30, 0x10	; 16
    2220:	de 9f       	mul	r29, r30
    2222:	80 0d       	add	r24, r0
    2224:	91 1d       	adc	r25, r1
    2226:	11 24       	eor	r1, r1
    2228:	0e 94 33 10 	call	0x2066	; 0x2066 <prvListTasksWithinSingleList.part.6>
    222c:	d8 0f       	add	r29, r24
    222e:	e0 91 53 61 	lds	r30, 0x6153	; 0x806153 <pxOverflowDelayedTaskList>
    2232:	f0 91 54 61 	lds	r31, 0x6154	; 0x806154 <pxOverflowDelayedTaskList+0x1>
    2236:	80 81       	ld	r24, Z
    2238:	88 23       	and	r24, r24
    223a:	09 f4       	brne	.+2      	; 0x223e <uxTaskGetSystemState+0x114>
    223c:	b0 cf       	rjmp	.-160    	; 0x219e <uxTaskGetSystemState+0x74>
    223e:	42 e0       	ldi	r20, 0x02	; 2
    2240:	bf 01       	movw	r22, r30
    2242:	c8 01       	movw	r24, r16
    2244:	f0 e1       	ldi	r31, 0x10	; 16
    2246:	df 9f       	mul	r29, r31
    2248:	80 0d       	add	r24, r0
    224a:	91 1d       	adc	r25, r1
    224c:	11 24       	eor	r1, r1
    224e:	0e 94 33 10 	call	0x2066	; 0x2066 <prvListTasksWithinSingleList.part.6>
    2252:	d8 0f       	add	r29, r24
    2254:	80 91 41 61 	lds	r24, 0x6141	; 0x806141 <xTasksWaitingTermination>
    2258:	88 23       	and	r24, r24
    225a:	09 f4       	brne	.+2      	; 0x225e <uxTaskGetSystemState+0x134>
    225c:	a6 cf       	rjmp	.-180    	; 0x21aa <uxTaskGetSystemState+0x80>
    225e:	44 e0       	ldi	r20, 0x04	; 4
    2260:	61 e4       	ldi	r22, 0x41	; 65
    2262:	71 e6       	ldi	r23, 0x61	; 97
    2264:	c8 01       	movw	r24, r16
    2266:	20 e1       	ldi	r18, 0x10	; 16
    2268:	d2 9f       	mul	r29, r18
    226a:	80 0d       	add	r24, r0
    226c:	91 1d       	adc	r25, r1
    226e:	11 24       	eor	r1, r1
    2270:	0e 94 33 10 	call	0x2066	; 0x2066 <prvListTasksWithinSingleList.part.6>
    2274:	d8 0f       	add	r29, r24
    2276:	80 91 37 61 	lds	r24, 0x6137	; 0x806137 <xSuspendedTaskList>
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <uxTaskGetSystemState+0x156>
    227e:	9b cf       	rjmp	.-202    	; 0x21b6 <uxTaskGetSystemState+0x8c>
    2280:	43 e0       	ldi	r20, 0x03	; 3
    2282:	67 e3       	ldi	r22, 0x37	; 55
    2284:	71 e6       	ldi	r23, 0x61	; 97
    2286:	c8 01       	movw	r24, r16
    2288:	e0 e1       	ldi	r30, 0x10	; 16
    228a:	de 9f       	mul	r29, r30
    228c:	80 0d       	add	r24, r0
    228e:	91 1d       	adc	r25, r1
    2290:	11 24       	eor	r1, r1
    2292:	0e 94 33 10 	call	0x2066	; 0x2066 <prvListTasksWithinSingleList.part.6>
    2296:	90 cf       	rjmp	.-224    	; 0x21b8 <uxTaskGetSystemState+0x8e>

00002298 <xTaskPriorityDisinherit>:
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	c9 f0       	breq	.+50     	; 0x22d6 <xTaskPriorityDisinherit+0x3e>
    22a4:	ec 01       	movw	r28, r24
    22a6:	80 91 8d 61 	lds	r24, 0x618D	; 0x80618d <pxCurrentTCB>
    22aa:	90 91 8e 61 	lds	r25, 0x618E	; 0x80618e <pxCurrentTCB+0x1>
    22ae:	c8 17       	cp	r28, r24
    22b0:	d9 07       	cpc	r29, r25
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <xTaskPriorityDisinherit+0x28>
    22b4:	6e e7       	ldi	r22, 0x7E	; 126
    22b6:	7f e0       	ldi	r23, 0x0F	; 15
    22b8:	89 e3       	ldi	r24, 0x39	; 57
    22ba:	90 e2       	ldi	r25, 0x20	; 32
    22bc:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    22c0:	8c a1       	ldd	r24, Y+36	; 0x24
    22c2:	88 23       	and	r24, r24
    22c4:	c1 f1       	breq	.+112    	; 0x2336 <xTaskPriorityDisinherit+0x9e>
    22c6:	81 50       	subi	r24, 0x01	; 1
    22c8:	8c a3       	std	Y+36, r24	; 0x24
    22ca:	2e 89       	ldd	r18, Y+22	; 0x16
    22cc:	9b a1       	ldd	r25, Y+35	; 0x23
    22ce:	29 17       	cp	r18, r25
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <xTaskPriorityDisinherit+0x3e>
    22d2:	88 23       	and	r24, r24
    22d4:	31 f0       	breq	.+12     	; 0x22e2 <xTaskPriorityDisinherit+0x4a>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	08 95       	ret
    22e2:	8e 01       	movw	r16, r28
    22e4:	0e 5f       	subi	r16, 0xFE	; 254
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	c8 01       	movw	r24, r16
    22ea:	0e 94 a7 04 	call	0x94e	; 0x94e <uxListRemove>
    22ee:	2b a1       	ldd	r18, Y+35	; 0x23
    22f0:	2e 8b       	std	Y+22, r18	; 0x16
    22f2:	82 2f       	mov	r24, r18
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	44 e0       	ldi	r20, 0x04	; 4
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	48 1b       	sub	r20, r24
    22fc:	59 0b       	sbc	r21, r25
    22fe:	4c 87       	std	Y+12, r20	; 0x0c
    2300:	5d 87       	std	Y+13, r21	; 0x0d
    2302:	30 91 33 61 	lds	r19, 0x6133	; 0x806133 <uxTopReadyPriority>
    2306:	32 17       	cp	r19, r18
    2308:	10 f4       	brcc	.+4      	; 0x230e <xTaskPriorityDisinherit+0x76>
    230a:	20 93 33 61 	sts	0x6133, r18	; 0x806133 <uxTopReadyPriority>
    230e:	9c 01       	movw	r18, r24
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	22 0f       	add	r18, r18
    2316:	33 1f       	adc	r19, r19
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	b8 01       	movw	r22, r16
    2322:	87 59       	subi	r24, 0x97	; 151
    2324:	9e 49       	sbci	r25, 0x9E	; 158
    2326:	0e 94 55 04 	call	0x8aa	; 0x8aa <vListInsertEnd>
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	08 95       	ret
    2336:	6f e7       	ldi	r22, 0x7F	; 127
    2338:	7f e0       	ldi	r23, 0x0F	; 15
    233a:	89 e3       	ldi	r24, 0x39	; 57
    233c:	90 e2       	ldi	r25, 0x20	; 32
    233e:	0e 94 b1 12 	call	0x2562	; 0x2562 <vAssertCalled>
    2342:	8c a1       	ldd	r24, Y+36	; 0x24
    2344:	c0 cf       	rjmp	.-128    	; 0x22c6 <xTaskPriorityDisinherit+0x2e>

00002346 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
    2346:	2f 92       	push	r2
    2348:	3f 92       	push	r3
    234a:	4f 92       	push	r4
    234c:	5f 92       	push	r5
    234e:	6f 92       	push	r6
    2350:	7f 92       	push	r7
    2352:	8f 92       	push	r8
    2354:	9f 92       	push	r9
    2356:	af 92       	push	r10
    2358:	bf 92       	push	r11
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	00 d0       	rcall	.+0      	; 0x236c <vTaskGetRunTimeStats+0x26>
    236c:	1f 92       	push	r1
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	8c 01       	movw	r16, r24
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
    2374:	fc 01       	movw	r30, r24
    2376:	10 82       	st	Z, r1

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
    2378:	f0 90 36 61 	lds	r15, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
    237c:	80 91 36 61 	lds	r24, 0x6136	; 0x806136 <uxCurrentNumberOfTasks>
    2380:	f0 e1       	ldi	r31, 0x10	; 16
    2382:	8f 9f       	mul	r24, r31
    2384:	c0 01       	movw	r24, r0
    2386:	11 24       	eor	r1, r1
    2388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <pvPortMalloc>
    238c:	5c 01       	movw	r10, r24

		if( pxTaskStatusArray != NULL )
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	09 f4       	brne	.+2      	; 0x2394 <vTaskGetRunTimeStats+0x4e>
    2392:	79 c0       	rjmp	.+242    	; 0x2486 <vTaskGetRunTimeStats+0x140>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
    2394:	ae 01       	movw	r20, r28
    2396:	4f 5f       	subi	r20, 0xFF	; 255
    2398:	5f 4f       	sbci	r21, 0xFF	; 255
    239a:	6f 2d       	mov	r22, r15
    239c:	0e 94 95 10 	call	0x212a	; 0x212a <uxTaskGetSystemState>
    23a0:	88 2e       	mov	r8, r24

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
    23a2:	69 81       	ldd	r22, Y+1	; 0x01
    23a4:	7a 81       	ldd	r23, Y+2	; 0x02
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	24 e6       	ldi	r18, 0x64	; 100
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	0e 94 57 17 	call	0x2eae	; 0x2eae <__udivmodsi4>
    23b6:	29 83       	std	Y+1, r18	; 0x01
    23b8:	3a 83       	std	Y+2, r19	; 0x02
    23ba:	4b 83       	std	Y+3, r20	; 0x03
    23bc:	5c 83       	std	Y+4, r21	; 0x04

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
    23be:	21 15       	cp	r18, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 05       	cpc	r20, r1
    23c4:	51 05       	cpc	r21, r1
    23c6:	09 f4       	brne	.+2      	; 0x23ca <vTaskGetRunTimeStats+0x84>
    23c8:	5b c0       	rjmp	.+182    	; 0x2480 <vTaskGetRunTimeStats+0x13a>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    23ca:	88 20       	and	r8, r8
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <vTaskGetRunTimeStats+0x8a>
    23ce:	58 c0       	rjmp	.+176    	; 0x2480 <vTaskGetRunTimeStats+0x13a>
    23d0:	75 01       	movw	r14, r10
    23d2:	91 2c       	mov	r9, r1
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    23d4:	8f e6       	ldi	r24, 0x6F	; 111
    23d6:	c8 2e       	mov	r12, r24
    23d8:	80 e2       	ldi	r24, 0x20	; 32
    23da:	d8 2e       	mov	r13, r24

					if( ulStatsAsPercentage > 0UL )
					{
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
    23dc:	91 e6       	ldi	r25, 0x61	; 97
    23de:	29 2e       	mov	r2, r25
    23e0:	90 e2       	ldi	r25, 0x20	; 32
    23e2:	39 2e       	mov	r3, r25
    23e4:	26 c0       	rjmp	.+76     	; 0x2432 <vTaskGetRunTimeStats+0xec>
    23e6:	7f 92       	push	r7
    23e8:	6f 92       	push	r6
    23ea:	5f 92       	push	r5
    23ec:	4f 92       	push	r4
    23ee:	f7 01       	movw	r30, r14
    23f0:	83 85       	ldd	r24, Z+11	; 0x0b
    23f2:	8f 93       	push	r24
    23f4:	82 85       	ldd	r24, Z+10	; 0x0a
    23f6:	8f 93       	push	r24
    23f8:	81 85       	ldd	r24, Z+9	; 0x09
    23fa:	8f 93       	push	r24
    23fc:	80 85       	ldd	r24, Z+8	; 0x08
    23fe:	8f 93       	push	r24
    2400:	3f 92       	push	r3
    2402:	2f 92       	push	r2
    2404:	1f 93       	push	r17
    2406:	0f 93       	push	r16
    2408:	0e 94 3e 19 	call	0x327c	; 0x327c <sprintf>
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	de bf       	out	0x3e, r29	; 62
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
    2410:	f8 01       	movw	r30, r16
    2412:	01 90       	ld	r0, Z+
    2414:	00 20       	and	r0, r0
    2416:	e9 f7       	brne	.-6      	; 0x2412 <vTaskGetRunTimeStats+0xcc>
    2418:	8f 01       	movw	r16, r30
    241a:	01 50       	subi	r16, 0x01	; 1
    241c:	11 09       	sbc	r17, r1

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
    241e:	93 94       	inc	r9
    2420:	90 e1       	ldi	r25, 0x10	; 16
    2422:	e9 0e       	add	r14, r25
    2424:	f1 1c       	adc	r15, r1
    2426:	89 14       	cp	r8, r9
    2428:	59 f1       	breq	.+86     	; 0x2480 <vTaskGetRunTimeStats+0x13a>
    242a:	29 81       	ldd	r18, Y+1	; 0x01
    242c:	3a 81       	ldd	r19, Y+2	; 0x02
    242e:	4b 81       	ldd	r20, Y+3	; 0x03
    2430:	5c 81       	ldd	r21, Y+4	; 0x04
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
    2432:	f7 01       	movw	r30, r14
    2434:	60 85       	ldd	r22, Z+8	; 0x08
    2436:	71 85       	ldd	r23, Z+9	; 0x09
    2438:	82 85       	ldd	r24, Z+10	; 0x0a
    243a:	93 85       	ldd	r25, Z+11	; 0x0b
    243c:	0e 94 57 17 	call	0x2eae	; 0x2eae <__udivmodsi4>
    2440:	29 01       	movw	r4, r18
    2442:	3a 01       	movw	r6, r20

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
    2444:	f7 01       	movw	r30, r14
    2446:	62 81       	ldd	r22, Z+2	; 0x02
    2448:	73 81       	ldd	r23, Z+3	; 0x03
    244a:	c8 01       	movw	r24, r16
    244c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <prvWriteNameToBuffer>
    2450:	8c 01       	movw	r16, r24

					if( ulStatsAsPercentage > 0UL )
    2452:	41 14       	cp	r4, r1
    2454:	51 04       	cpc	r5, r1
    2456:	61 04       	cpc	r6, r1
    2458:	71 04       	cpc	r7, r1
    245a:	29 f6       	brne	.-118    	; 0x23e6 <vTaskGetRunTimeStats+0xa0>
					{
						/* If the percentage is zero here then the task has
						consumed less than 1% of the total run time. */
						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
    245c:	f7 01       	movw	r30, r14
    245e:	83 85       	ldd	r24, Z+11	; 0x0b
    2460:	8f 93       	push	r24
    2462:	82 85       	ldd	r24, Z+10	; 0x0a
    2464:	8f 93       	push	r24
    2466:	81 85       	ldd	r24, Z+9	; 0x09
    2468:	8f 93       	push	r24
    246a:	80 85       	ldd	r24, Z+8	; 0x08
    246c:	8f 93       	push	r24
    246e:	df 92       	push	r13
    2470:	cf 92       	push	r12
    2472:	1f 93       	push	r17
    2474:	0f 93       	push	r16
    2476:	0e 94 3e 19 	call	0x327c	; 0x327c <sprintf>
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	c8 cf       	rjmp	.-112    	; 0x2410 <vTaskGetRunTimeStats+0xca>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
    2480:	c5 01       	movw	r24, r10
    2482:	0e 94 18 04 	call	0x830	; 0x830 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2486:	24 96       	adiw	r28, 0x04	; 4
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	bf 90       	pop	r11
    249e:	af 90       	pop	r10
    24a0:	9f 90       	pop	r9
    24a2:	8f 90       	pop	r8
    24a4:	7f 90       	pop	r7
    24a6:	6f 90       	pop	r6
    24a8:	5f 90       	pop	r5
    24aa:	4f 90       	pop	r4
    24ac:	3f 90       	pop	r3
    24ae:	2f 90       	pop	r2
    24b0:	08 95       	ret

000024b2 <vApplicationIdleHook>:
#define CFG_ERR_LED() PORTA.DIRSET=1<<7
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7

void vApplicationIdleHook( void )
{
    24b2:	08 95       	ret

000024b4 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    24b4:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    24b6:	8c e7       	ldi	r24, 0x7C	; 124
    24b8:	90 e2       	ldi	r25, 0x20	; 32
    24ba:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
	CFG_ERR_LED();
    24be:	80 e8       	ldi	r24, 0x80	; 128
    24c0:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    24c4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24c8:	2f ef       	ldi	r18, 0xFF	; 255
    24ca:	33 ec       	ldi	r19, 0xC3	; 195
    24cc:	99 e0       	ldi	r25, 0x09	; 9
    24ce:	21 50       	subi	r18, 0x01	; 1
    24d0:	30 40       	sbci	r19, 0x00	; 0
    24d2:	90 40       	sbci	r25, 0x00	; 0
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <vApplicationMallocFailedHook+0x1a>
    24d6:	00 c0       	rjmp	.+0      	; 0x24d8 <vApplicationMallocFailedHook+0x24>
    24d8:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    24da:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    24de:	2f ef       	ldi	r18, 0xFF	; 255
    24e0:	33 ec       	ldi	r19, 0xC3	; 195
    24e2:	99 e0       	ldi	r25, 0x09	; 9
    24e4:	21 50       	subi	r18, 0x01	; 1
    24e6:	30 40       	sbci	r19, 0x00	; 0
    24e8:	90 40       	sbci	r25, 0x00	; 0
    24ea:	e1 f7       	brne	.-8      	; 0x24e4 <vApplicationMallocFailedHook+0x30>
    24ec:	00 c0       	rjmp	.+0      	; 0x24ee <vApplicationMallocFailedHook+0x3a>
    24ee:	00 00       	nop
    24f0:	e9 cf       	rjmp	.-46     	; 0x24c4 <vApplicationMallocFailedHook+0x10>

000024f2 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	c0 58       	subi	r28, 0x80	; 128
    24fc:	d1 09       	sbc	r29, r1
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();
    2502:	f8 94       	cli
	CFG_ERR_LED();
    2504:	80 e8       	ldi	r24, 0x80	; 128
    2506:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"STACK overflow in task %s\r\n",pcTaskName);
    250a:	7f 93       	push	r23
    250c:	6f 93       	push	r22
    250e:	2e e9       	ldi	r18, 0x9E	; 158
    2510:	30 e2       	ldi	r19, 0x20	; 32
    2512:	3f 93       	push	r19
    2514:	2f 93       	push	r18
    2516:	1f 92       	push	r1
    2518:	8f 93       	push	r24
    251a:	8e 01       	movw	r16, r28
    251c:	0f 5f       	subi	r16, 0xFF	; 255
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	1f 93       	push	r17
    2522:	0f 93       	push	r16
    2524:	0e 94 07 19 	call	0x320e	; 0x320e <snprintf>
	DbgPrint(Dbg);
    2528:	c8 01       	movw	r24, r16
    252a:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    2532:	80 e8       	ldi	r24, 0x80	; 128
    2534:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	93 ed       	ldi	r25, 0xD3	; 211
    253c:	20 e3       	ldi	r18, 0x30	; 48
    253e:	31 50       	subi	r19, 0x01	; 1
    2540:	90 40       	sbci	r25, 0x00	; 0
    2542:	20 40       	sbci	r18, 0x00	; 0
    2544:	e1 f7       	brne	.-8      	; 0x253e <vApplicationStackOverflowHook+0x4c>
    2546:	00 c0       	rjmp	.+0      	; 0x2548 <vApplicationStackOverflowHook+0x56>
    2548:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    254a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	93 ed       	ldi	r25, 0xD3	; 211
    2552:	20 e3       	ldi	r18, 0x30	; 48
    2554:	31 50       	subi	r19, 0x01	; 1
    2556:	90 40       	sbci	r25, 0x00	; 0
    2558:	20 40       	sbci	r18, 0x00	; 0
    255a:	e1 f7       	brne	.-8      	; 0x2554 <vApplicationStackOverflowHook+0x62>
    255c:	00 c0       	rjmp	.+0      	; 0x255e <vApplicationStackOverflowHook+0x6c>
    255e:	00 00       	nop
    2560:	e9 cf       	rjmp	.-46     	; 0x2534 <vApplicationStackOverflowHook+0x42>

00002562 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	c0 58       	subi	r28, 0x80	; 128
    256c:	d1 09       	sbc	r29, r1
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	de bf       	out	0x3e, r29	; 62
	char Dbg[128];
	taskDISABLE_INTERRUPTS();	
    2572:	f8 94       	cli
	CFG_ERR_LED();
    2574:	20 e8       	ldi	r18, 0x80	; 128
    2576:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	snprintf(Dbg,128,"Assert in file %s, line nr %d\r\n",File,Line);
    257a:	7f 93       	push	r23
    257c:	6f 93       	push	r22
    257e:	9f 93       	push	r25
    2580:	8f 93       	push	r24
    2582:	8a eb       	ldi	r24, 0xBA	; 186
    2584:	90 e2       	ldi	r25, 0x20	; 32
    2586:	9f 93       	push	r25
    2588:	8f 93       	push	r24
    258a:	1f 92       	push	r1
    258c:	2f 93       	push	r18
    258e:	8e 01       	movw	r16, r28
    2590:	0f 5f       	subi	r16, 0xFF	; 255
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	1f 93       	push	r17
    2596:	0f 93       	push	r16
    2598:	0e 94 07 19 	call	0x320e	; 0x320e <snprintf>
	DbgPrint(Dbg);
    259c:	c8 01       	movw	r24, r16
    259e:	0e 94 b4 01 	call	0x368	; 0x368 <DbgPrint>
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	de bf       	out	0x3e, r29	; 62
	while (1)
	{
		SET_ERR_LED();
    25a6:	80 e8       	ldi	r24, 0x80	; 128
    25a8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	93 ec       	ldi	r25, 0xC3	; 195
    25b0:	29 e0       	ldi	r18, 0x09	; 9
    25b2:	31 50       	subi	r19, 0x01	; 1
    25b4:	90 40       	sbci	r25, 0x00	; 0
    25b6:	20 40       	sbci	r18, 0x00	; 0
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <vAssertCalled+0x50>
    25ba:	00 c0       	rjmp	.+0      	; 0x25bc <vAssertCalled+0x5a>
    25bc:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    25be:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	93 ed       	ldi	r25, 0xD3	; 211
    25c6:	20 e3       	ldi	r18, 0x30	; 48
    25c8:	31 50       	subi	r19, 0x01	; 1
    25ca:	90 40       	sbci	r25, 0x00	; 0
    25cc:	20 40       	sbci	r18, 0x00	; 0
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <vAssertCalled+0x66>
    25d0:	00 c0       	rjmp	.+0      	; 0x25d2 <vAssertCalled+0x70>
    25d2:	00 00       	nop
    25d4:	e9 cf       	rjmp	.-46     	; 0x25a8 <vAssertCalled+0x46>

000025d6 <main>:

#include <stdio.h>

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    25d6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DriverSysClkXtalInit>
	DriverUSARTInit();		//USART init and link to stdio
    25da:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DriverUSARTInit>
	DriverTWIMInit();		//Initialize TWI in master mode
    25de:	0e 94 04 02 	call	0x408	; 0x408 <DriverTWIMInit>
	DriverCursorstickInit();//Initialize cursor stick
    25e2:	0e 94 b3 01 	call	0x366	; 0x366 <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    25e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <DriverLedInit>
	DriverPowerInit();		//Initialize aux power driver
    25ea:	0e 94 a9 13 	call	0x2752	; 0x2752 <DriverPowerInit>
	DriverAdcInit();		//Initialize ADC driver
    25ee:	0e 94 b2 01 	call	0x364	; 0x364 <DriverAdcInit>
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	0e 94 ad 13 	call	0x275a	; 0x275a <DriverPowerVccAuxSet>

	//Enable interrupts
	PMIC.CTRL=0b111;		
    25f8:	87 e0       	ldi	r24, 0x07	; 7
    25fa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    25fe:	78 94       	sei
    2600:	2f ef       	ldi	r18, 0xFF	; 255
    2602:	89 ef       	ldi	r24, 0xF9	; 249
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	21 50       	subi	r18, 0x01	; 1
    2608:	80 40       	sbci	r24, 0x00	; 0
    260a:	90 40       	sbci	r25, 0x00	; 0
    260c:	e1 f7       	brne	.-8      	; 0x2606 <main+0x30>
    260e:	00 c0       	rjmp	.+0      	; 0x2610 <main+0x3a>
    2610:	00 00       	nop

	_delay_ms(10);

	//Init tasks
	InitLooplichtTask(); // Looplicht task oproepen
    2612:	0e 94 43 13 	call	0x2686	; 0x2686 <InitLooplichtTask>
	InitTerminalTask(); // Terminal task oproepen
    2616:	0e 94 95 13 	call	0x272a	; 0x272a <InitTerminalTask>
	vTaskStartScheduler();	//Start scheduler loop
    261a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vTaskStartScheduler>

	return 0;
}
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	08 95       	ret

00002624 <WorkerLooplicht>:
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    2624:	cf e0       	ldi	r28, 0x0F	; 15
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    2626:	18 e0       	ldi	r17, 0x08	; 8
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    2628:	d1 e0       	ldi	r29, 0x01	; 1
static void WorkerLooplicht(void *pvParameters)
{
	while (1)
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
    262a:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <xTimeIncrement>
    262e:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <xTimeIncrement+0x1>
    2632:	87 e9       	ldi	r24, 0x97	; 151
    2634:	93 e6       	ldi	r25, 0x63	; 99
    2636:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <vTaskDelayUntil>
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
    263a:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    263e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DriverLedWrite>
		if (RichtingInt == 1) {
    2642:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <RichtingInt>
    2646:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <RichtingInt+0x1>
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	91 05       	cpc	r25, r1
    264e:	29 f0       	breq	.+10     	; 0x265a <WorkerLooplicht+0x36>
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
    2650:	02 97       	sbiw	r24, 0x02	; 2
    2652:	59 f0       	breq	.+22     	; 0x266a <WorkerLooplicht+0x46>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
			} 
		} else { // Zo kan ik makkelijk zien of er een error is
			LedData = 0b1111;
    2654:	c0 93 12 20 	sts	0x2012, r28	; 0x802012 <LedData>
    2658:	e8 cf       	rjmp	.-48     	; 0x262a <WorkerLooplicht+0x6>
	{
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
    265a:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    265e:	88 30       	cpi	r24, 0x08	; 8
    2660:	61 f0       	breq	.+24     	; 0x267a <WorkerLooplicht+0x56>
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
    2662:	88 0f       	add	r24, r24
    2664:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <LedData>
    2668:	e0 cf       	rjmp	.-64     	; 0x262a <WorkerLooplicht+0x6>
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
    266a:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <LedData>
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	39 f0       	breq	.+14     	; 0x2680 <WorkerLooplicht+0x5c>
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
			} else {
				LedData = LedData>>1; // Naar de volgende LED gaan, door een 0 links in te voegen (rechts shiften)
    2672:	86 95       	lsr	r24
    2674:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <LedData>
    2678:	d8 cf       	rjmp	.-80     	; 0x262a <WorkerLooplicht+0x6>
		//_delay_ms(500);
		vTaskDelayUntil(&pxPreviousWakeTime, xTimeIncrement); // Pointer nodig van pxPreviousWakeTime want vTaskDelayUntil moet deze variabele kunnen aanpassen
		DriverLedWrite(LedData); // LedData doorgeven om LED's aan te sturen
		if (RichtingInt == 1) {
			if (LedData == 0b1000) {
				LedData = 0b0001; // Laatste Led is bereikt dus we gaan terug naar de eerste
    267a:	d0 93 12 20 	sts	0x2012, r29	; 0x802012 <LedData>
    267e:	d5 cf       	rjmp	.-86     	; 0x262a <WorkerLooplicht+0x6>
			} else {
				LedData = LedData<<1; // Naar de volgende LED gaan, door een 0 rechts in te voegen (links shiften)
			}
		} else if (RichtingInt == 2){
			if (LedData == 0b0001) {
				LedData = 0b1000; // Laatste Led is bereikt dus we gaan terug naar de eerste
    2680:	10 93 12 20 	sts	0x2012, r17	; 0x802012 <LedData>
    2684:	d2 cf       	rjmp	.-92     	; 0x262a <WorkerLooplicht+0x6>

00002686 <InitLooplichtTask>:
//Private function prototypes
static void WorkerLooplicht(void *pvParameters);

//Function definitions
void InitLooplichtTask()
{
    2686:	ef 92       	push	r14
    2688:	ff 92       	push	r15
    268a:	0f 93       	push	r16
	xTaskCreate( WorkerLooplicht, "looplicht", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL );	
    268c:	e1 2c       	mov	r14, r1
    268e:	f1 2c       	mov	r15, r1
    2690:	02 e0       	ldi	r16, 0x02	; 2
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	51 e0       	ldi	r21, 0x01	; 1
    269a:	6a ed       	ldi	r22, 0xDA	; 218
    269c:	70 e2       	ldi	r23, 0x20	; 32
    269e:	82 e1       	ldi	r24, 0x12	; 18
    26a0:	93 e1       	ldi	r25, 0x13	; 19
    26a2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <xTaskCreate>
}
    26a6:	0f 91       	pop	r16
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	08 95       	ret

000026ae <WorkerTerminal>:

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    26ae:	05 e1       	ldi	r16, 0x15	; 21
    26b0:	10 e2       	ldi	r17, 0x20	; 32
    26b2:	c4 ee       	ldi	r28, 0xE4	; 228
    26b4:	d0 e2       	ldi	r29, 0x20	; 32
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	a8 2e       	mov	r10, r24
    26ba:	b1 2c       	mov	r11, r1
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
    26bc:	92 e0       	ldi	r25, 0x02	; 2
    26be:	c9 2e       	mov	r12, r25
    26c0:	d1 2c       	mov	r13, r1
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
		if (strcmp(RichtingString, "looplicht_links") == 0) {
			RichtingInt = 1;
    26c2:	ee 24       	eor	r14, r14
    26c4:	e3 94       	inc	r14
    26c6:	f1 2c       	mov	r15, r1
    26c8:	08 c0       	rjmp	.+16     	; 0x26da <WorkerTerminal+0x2c>
    26ca:	e0 92 13 20 	sts	0x2013, r14	; 0x802013 <RichtingInt>
    26ce:	f0 92 14 20 	sts	0x2014, r15	; 0x802014 <RichtingInt+0x1>
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
			RichtingInt = 2;
		} else {
			RichtingInt = 3;
		}
		puts(Buffer); // Buffer afprinten
    26d2:	8f e8       	ldi	r24, 0x8F	; 143
    26d4:	91 e6       	ldi	r25, 0x61	; 97
    26d6:	0e 94 c3 18 	call	0x3186	; 0x3186 <puts>

static void WorkerTerminal(void *pvParameters)
{
	while (1)
	{
		scanf("%s", RichtingString); // Waarde inlezen en in Richting zetten
    26da:	1f 93       	push	r17
    26dc:	0f 93       	push	r16
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <scanf>
		vTaskGetRunTimeStats(Buffer); // Overzicht van alle tasks en de toegekende processortijd verkrijgen		
    26e6:	8f e8       	ldi	r24, 0x8F	; 143
    26e8:	91 e6       	ldi	r25, 0x61	; 97
    26ea:	0e 94 a3 11 	call	0x2346	; 0x2346 <vTaskGetRunTimeStats>
		if (strcmp(RichtingString, "looplicht_links") == 0) {
    26ee:	67 ee       	ldi	r22, 0xE7	; 231
    26f0:	70 e2       	ldi	r23, 0x20	; 32
    26f2:	85 e1       	ldi	r24, 0x15	; 21
    26f4:	90 e2       	ldi	r25, 0x20	; 32
    26f6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <strcmp>
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	89 2b       	or	r24, r25
    2704:	11 f3       	breq	.-60     	; 0x26ca <WorkerTerminal+0x1c>
			RichtingInt = 1;
		} else if (strcmp(RichtingString,  "looplicht_rechts") == 0 ) {
    2706:	67 ef       	ldi	r22, 0xF7	; 247
    2708:	70 e2       	ldi	r23, 0x20	; 32
    270a:	85 e1       	ldi	r24, 0x15	; 21
    270c:	90 e2       	ldi	r25, 0x20	; 32
    270e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <strcmp>
    2712:	89 2b       	or	r24, r25
    2714:	29 f4       	brne	.+10     	; 0x2720 <WorkerTerminal+0x72>
			RichtingInt = 2;
    2716:	c0 92 13 20 	sts	0x2013, r12	; 0x802013 <RichtingInt>
    271a:	d0 92 14 20 	sts	0x2014, r13	; 0x802014 <RichtingInt+0x1>
    271e:	d9 cf       	rjmp	.-78     	; 0x26d2 <WorkerTerminal+0x24>
		} else {
			RichtingInt = 3;
    2720:	a0 92 13 20 	sts	0x2013, r10	; 0x802013 <RichtingInt>
    2724:	b0 92 14 20 	sts	0x2014, r11	; 0x802014 <RichtingInt+0x1>
    2728:	d4 cf       	rjmp	.-88     	; 0x26d2 <WorkerTerminal+0x24>

0000272a <InitTerminalTask>:
//Private function prototypes
static void WorkerTerminal(void *pvParameters);

//Function definitions
void InitTerminalTask()
{
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
	xTaskCreate( WorkerTerminal, "terminal", configMINIMAL_STACK_SIZE+512 , NULL, tskIDLE_PRIORITY+1, NULL );	
    2730:	e1 2c       	mov	r14, r1
    2732:	f1 2c       	mov	r15, r1
    2734:	01 e0       	ldi	r16, 0x01	; 1
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	53 e0       	ldi	r21, 0x03	; 3
    273e:	68 e0       	ldi	r22, 0x08	; 8
    2740:	71 e2       	ldi	r23, 0x21	; 33
    2742:	87 e5       	ldi	r24, 0x57	; 87
    2744:	93 e1       	ldi	r25, 0x13	; 19
    2746:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <xTaskCreate>
}
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	08 95       	ret

00002752 <DriverPowerInit>:
    2752:	80 e2       	ldi	r24, 0x20	; 32
    2754:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    2758:	08 95       	ret

0000275a <DriverPowerVccAuxSet>:
    275a:	81 11       	cpse	r24, r1
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <DriverPowerVccAuxSet+0xc>
    275e:	80 e2       	ldi	r24, 0x20	; 32
    2760:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    2764:	08 95       	ret
    2766:	80 e2       	ldi	r24, 0x20	; 32
    2768:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    276c:	08 95       	ret

0000276e <vfprintf>:
    276e:	2f 92       	push	r2
    2770:	3f 92       	push	r3
    2772:	4f 92       	push	r4
    2774:	5f 92       	push	r5
    2776:	6f 92       	push	r6
    2778:	7f 92       	push	r7
    277a:	8f 92       	push	r8
    277c:	9f 92       	push	r9
    277e:	af 92       	push	r10
    2780:	bf 92       	push	r11
    2782:	cf 92       	push	r12
    2784:	df 92       	push	r13
    2786:	ef 92       	push	r14
    2788:	ff 92       	push	r15
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	60 97       	sbiw	r28, 0x10	; 16
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	7c 01       	movw	r14, r24
    279e:	1b 01       	movw	r2, r22
    27a0:	6a 01       	movw	r12, r20
    27a2:	fc 01       	movw	r30, r24
    27a4:	16 82       	std	Z+6, r1	; 0x06
    27a6:	17 82       	std	Z+7, r1	; 0x07
    27a8:	83 81       	ldd	r24, Z+3	; 0x03
    27aa:	81 ff       	sbrs	r24, 1
    27ac:	44 c3       	rjmp	.+1672   	; 0x2e36 <vfprintf+0x6c8>
    27ae:	9e 01       	movw	r18, r28
    27b0:	2f 5f       	subi	r18, 0xFF	; 255
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	39 01       	movw	r6, r18
    27b6:	f7 01       	movw	r30, r14
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	f1 01       	movw	r30, r2
    27bc:	93 fd       	sbrc	r25, 3
    27be:	85 91       	lpm	r24, Z+
    27c0:	93 ff       	sbrs	r25, 3
    27c2:	81 91       	ld	r24, Z+
    27c4:	1f 01       	movw	r2, r30
    27c6:	88 23       	and	r24, r24
    27c8:	09 f4       	brne	.+2      	; 0x27cc <vfprintf+0x5e>
    27ca:	31 c3       	rjmp	.+1634   	; 0x2e2e <vfprintf+0x6c0>
    27cc:	85 32       	cpi	r24, 0x25	; 37
    27ce:	39 f4       	brne	.+14     	; 0x27de <vfprintf+0x70>
    27d0:	93 fd       	sbrc	r25, 3
    27d2:	85 91       	lpm	r24, Z+
    27d4:	93 ff       	sbrs	r25, 3
    27d6:	81 91       	ld	r24, Z+
    27d8:	1f 01       	movw	r2, r30
    27da:	85 32       	cpi	r24, 0x25	; 37
    27dc:	39 f4       	brne	.+14     	; 0x27ec <vfprintf+0x7e>
    27de:	b7 01       	movw	r22, r14
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    27e6:	56 01       	movw	r10, r12
    27e8:	65 01       	movw	r12, r10
    27ea:	e5 cf       	rjmp	.-54     	; 0x27b6 <vfprintf+0x48>
    27ec:	10 e0       	ldi	r17, 0x00	; 0
    27ee:	51 2c       	mov	r5, r1
    27f0:	91 2c       	mov	r9, r1
    27f2:	ff e1       	ldi	r31, 0x1F	; 31
    27f4:	f9 15       	cp	r31, r9
    27f6:	d8 f0       	brcs	.+54     	; 0x282e <vfprintf+0xc0>
    27f8:	8b 32       	cpi	r24, 0x2B	; 43
    27fa:	79 f0       	breq	.+30     	; 0x281a <vfprintf+0xac>
    27fc:	38 f4       	brcc	.+14     	; 0x280c <vfprintf+0x9e>
    27fe:	80 32       	cpi	r24, 0x20	; 32
    2800:	79 f0       	breq	.+30     	; 0x2820 <vfprintf+0xb2>
    2802:	83 32       	cpi	r24, 0x23	; 35
    2804:	a1 f4       	brne	.+40     	; 0x282e <vfprintf+0xc0>
    2806:	f9 2d       	mov	r31, r9
    2808:	f0 61       	ori	r31, 0x10	; 16
    280a:	2e c0       	rjmp	.+92     	; 0x2868 <vfprintf+0xfa>
    280c:	8d 32       	cpi	r24, 0x2D	; 45
    280e:	61 f0       	breq	.+24     	; 0x2828 <vfprintf+0xba>
    2810:	80 33       	cpi	r24, 0x30	; 48
    2812:	69 f4       	brne	.+26     	; 0x282e <vfprintf+0xc0>
    2814:	29 2d       	mov	r18, r9
    2816:	21 60       	ori	r18, 0x01	; 1
    2818:	2d c0       	rjmp	.+90     	; 0x2874 <vfprintf+0x106>
    281a:	39 2d       	mov	r19, r9
    281c:	32 60       	ori	r19, 0x02	; 2
    281e:	93 2e       	mov	r9, r19
    2820:	89 2d       	mov	r24, r9
    2822:	84 60       	ori	r24, 0x04	; 4
    2824:	98 2e       	mov	r9, r24
    2826:	2a c0       	rjmp	.+84     	; 0x287c <vfprintf+0x10e>
    2828:	e9 2d       	mov	r30, r9
    282a:	e8 60       	ori	r30, 0x08	; 8
    282c:	15 c0       	rjmp	.+42     	; 0x2858 <vfprintf+0xea>
    282e:	97 fc       	sbrc	r9, 7
    2830:	2d c0       	rjmp	.+90     	; 0x288c <vfprintf+0x11e>
    2832:	20 ed       	ldi	r18, 0xD0	; 208
    2834:	28 0f       	add	r18, r24
    2836:	2a 30       	cpi	r18, 0x0A	; 10
    2838:	88 f4       	brcc	.+34     	; 0x285c <vfprintf+0xee>
    283a:	96 fe       	sbrs	r9, 6
    283c:	06 c0       	rjmp	.+12     	; 0x284a <vfprintf+0xdc>
    283e:	3a e0       	ldi	r19, 0x0A	; 10
    2840:	13 9f       	mul	r17, r19
    2842:	20 0d       	add	r18, r0
    2844:	11 24       	eor	r1, r1
    2846:	12 2f       	mov	r17, r18
    2848:	19 c0       	rjmp	.+50     	; 0x287c <vfprintf+0x10e>
    284a:	8a e0       	ldi	r24, 0x0A	; 10
    284c:	58 9e       	mul	r5, r24
    284e:	20 0d       	add	r18, r0
    2850:	11 24       	eor	r1, r1
    2852:	52 2e       	mov	r5, r18
    2854:	e9 2d       	mov	r30, r9
    2856:	e0 62       	ori	r30, 0x20	; 32
    2858:	9e 2e       	mov	r9, r30
    285a:	10 c0       	rjmp	.+32     	; 0x287c <vfprintf+0x10e>
    285c:	8e 32       	cpi	r24, 0x2E	; 46
    285e:	31 f4       	brne	.+12     	; 0x286c <vfprintf+0xfe>
    2860:	96 fc       	sbrc	r9, 6
    2862:	e5 c2       	rjmp	.+1482   	; 0x2e2e <vfprintf+0x6c0>
    2864:	f9 2d       	mov	r31, r9
    2866:	f0 64       	ori	r31, 0x40	; 64
    2868:	9f 2e       	mov	r9, r31
    286a:	08 c0       	rjmp	.+16     	; 0x287c <vfprintf+0x10e>
    286c:	8c 36       	cpi	r24, 0x6C	; 108
    286e:	21 f4       	brne	.+8      	; 0x2878 <vfprintf+0x10a>
    2870:	29 2d       	mov	r18, r9
    2872:	20 68       	ori	r18, 0x80	; 128
    2874:	92 2e       	mov	r9, r18
    2876:	02 c0       	rjmp	.+4      	; 0x287c <vfprintf+0x10e>
    2878:	88 36       	cpi	r24, 0x68	; 104
    287a:	41 f4       	brne	.+16     	; 0x288c <vfprintf+0x11e>
    287c:	f1 01       	movw	r30, r2
    287e:	93 fd       	sbrc	r25, 3
    2880:	85 91       	lpm	r24, Z+
    2882:	93 ff       	sbrs	r25, 3
    2884:	81 91       	ld	r24, Z+
    2886:	1f 01       	movw	r2, r30
    2888:	81 11       	cpse	r24, r1
    288a:	b3 cf       	rjmp	.-154    	; 0x27f2 <vfprintf+0x84>
    288c:	9b eb       	ldi	r25, 0xBB	; 187
    288e:	98 0f       	add	r25, r24
    2890:	93 30       	cpi	r25, 0x03	; 3
    2892:	20 f4       	brcc	.+8      	; 0x289c <vfprintf+0x12e>
    2894:	99 2d       	mov	r25, r9
    2896:	90 61       	ori	r25, 0x10	; 16
    2898:	80 5e       	subi	r24, 0xE0	; 224
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <vfprintf+0x13c>
    289c:	9b e9       	ldi	r25, 0x9B	; 155
    289e:	98 0f       	add	r25, r24
    28a0:	93 30       	cpi	r25, 0x03	; 3
    28a2:	08 f0       	brcs	.+2      	; 0x28a6 <vfprintf+0x138>
    28a4:	66 c1       	rjmp	.+716    	; 0x2b72 <vfprintf+0x404>
    28a6:	99 2d       	mov	r25, r9
    28a8:	9f 7e       	andi	r25, 0xEF	; 239
    28aa:	96 ff       	sbrs	r25, 6
    28ac:	16 e0       	ldi	r17, 0x06	; 6
    28ae:	9f 73       	andi	r25, 0x3F	; 63
    28b0:	99 2e       	mov	r9, r25
    28b2:	85 36       	cpi	r24, 0x65	; 101
    28b4:	19 f4       	brne	.+6      	; 0x28bc <vfprintf+0x14e>
    28b6:	90 64       	ori	r25, 0x40	; 64
    28b8:	99 2e       	mov	r9, r25
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <vfprintf+0x15e>
    28bc:	86 36       	cpi	r24, 0x66	; 102
    28be:	21 f4       	brne	.+8      	; 0x28c8 <vfprintf+0x15a>
    28c0:	39 2f       	mov	r19, r25
    28c2:	30 68       	ori	r19, 0x80	; 128
    28c4:	93 2e       	mov	r9, r19
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <vfprintf+0x15e>
    28c8:	11 11       	cpse	r17, r1
    28ca:	11 50       	subi	r17, 0x01	; 1
    28cc:	97 fe       	sbrs	r9, 7
    28ce:	07 c0       	rjmp	.+14     	; 0x28de <vfprintf+0x170>
    28d0:	1c 33       	cpi	r17, 0x3C	; 60
    28d2:	50 f4       	brcc	.+20     	; 0x28e8 <vfprintf+0x17a>
    28d4:	44 24       	eor	r4, r4
    28d6:	43 94       	inc	r4
    28d8:	41 0e       	add	r4, r17
    28da:	27 e0       	ldi	r18, 0x07	; 7
    28dc:	0b c0       	rjmp	.+22     	; 0x28f4 <vfprintf+0x186>
    28de:	18 30       	cpi	r17, 0x08	; 8
    28e0:	38 f0       	brcs	.+14     	; 0x28f0 <vfprintf+0x182>
    28e2:	27 e0       	ldi	r18, 0x07	; 7
    28e4:	17 e0       	ldi	r17, 0x07	; 7
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <vfprintf+0x184>
    28e8:	27 e0       	ldi	r18, 0x07	; 7
    28ea:	9c e3       	ldi	r25, 0x3C	; 60
    28ec:	49 2e       	mov	r4, r25
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <vfprintf+0x186>
    28f0:	21 2f       	mov	r18, r17
    28f2:	41 2c       	mov	r4, r1
    28f4:	56 01       	movw	r10, r12
    28f6:	84 e0       	ldi	r24, 0x04	; 4
    28f8:	a8 0e       	add	r10, r24
    28fa:	b1 1c       	adc	r11, r1
    28fc:	f6 01       	movw	r30, r12
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	04 2d       	mov	r16, r4
    2908:	a3 01       	movw	r20, r6
    290a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__ftoa_engine>
    290e:	6c 01       	movw	r12, r24
    2910:	f9 81       	ldd	r31, Y+1	; 0x01
    2912:	fc 87       	std	Y+12, r31	; 0x0c
    2914:	f0 ff       	sbrs	r31, 0
    2916:	02 c0       	rjmp	.+4      	; 0x291c <vfprintf+0x1ae>
    2918:	f3 ff       	sbrs	r31, 3
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <vfprintf+0x1ba>
    291c:	91 fc       	sbrc	r9, 1
    291e:	06 c0       	rjmp	.+12     	; 0x292c <vfprintf+0x1be>
    2920:	92 fe       	sbrs	r9, 2
    2922:	06 c0       	rjmp	.+12     	; 0x2930 <vfprintf+0x1c2>
    2924:	00 e2       	ldi	r16, 0x20	; 32
    2926:	05 c0       	rjmp	.+10     	; 0x2932 <vfprintf+0x1c4>
    2928:	0d e2       	ldi	r16, 0x2D	; 45
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <vfprintf+0x1c4>
    292c:	0b e2       	ldi	r16, 0x2B	; 43
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <vfprintf+0x1c4>
    2930:	00 e0       	ldi	r16, 0x00	; 0
    2932:	8c 85       	ldd	r24, Y+12	; 0x0c
    2934:	8c 70       	andi	r24, 0x0C	; 12
    2936:	19 f0       	breq	.+6      	; 0x293e <vfprintf+0x1d0>
    2938:	01 11       	cpse	r16, r1
    293a:	5a c2       	rjmp	.+1204   	; 0x2df0 <vfprintf+0x682>
    293c:	9b c2       	rjmp	.+1334   	; 0x2e74 <vfprintf+0x706>
    293e:	97 fe       	sbrs	r9, 7
    2940:	10 c0       	rjmp	.+32     	; 0x2962 <vfprintf+0x1f4>
    2942:	4c 0c       	add	r4, r12
    2944:	fc 85       	ldd	r31, Y+12	; 0x0c
    2946:	f4 ff       	sbrs	r31, 4
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <vfprintf+0x1e4>
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	81 33       	cpi	r24, 0x31	; 49
    294e:	09 f4       	brne	.+2      	; 0x2952 <vfprintf+0x1e4>
    2950:	4a 94       	dec	r4
    2952:	14 14       	cp	r1, r4
    2954:	74 f5       	brge	.+92     	; 0x29b2 <vfprintf+0x244>
    2956:	28 e0       	ldi	r18, 0x08	; 8
    2958:	24 15       	cp	r18, r4
    295a:	78 f5       	brcc	.+94     	; 0x29ba <vfprintf+0x24c>
    295c:	88 e0       	ldi	r24, 0x08	; 8
    295e:	48 2e       	mov	r4, r24
    2960:	2c c0       	rjmp	.+88     	; 0x29ba <vfprintf+0x24c>
    2962:	96 fc       	sbrc	r9, 6
    2964:	2a c0       	rjmp	.+84     	; 0x29ba <vfprintf+0x24c>
    2966:	81 2f       	mov	r24, r17
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	8c 15       	cp	r24, r12
    296c:	9d 05       	cpc	r25, r13
    296e:	9c f0       	brlt	.+38     	; 0x2996 <vfprintf+0x228>
    2970:	3c ef       	ldi	r19, 0xFC	; 252
    2972:	c3 16       	cp	r12, r19
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	d3 06       	cpc	r13, r19
    2978:	74 f0       	brlt	.+28     	; 0x2996 <vfprintf+0x228>
    297a:	89 2d       	mov	r24, r9
    297c:	80 68       	ori	r24, 0x80	; 128
    297e:	98 2e       	mov	r9, r24
    2980:	0a c0       	rjmp	.+20     	; 0x2996 <vfprintf+0x228>
    2982:	e2 e0       	ldi	r30, 0x02	; 2
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	ec 0f       	add	r30, r28
    2988:	fd 1f       	adc	r31, r29
    298a:	e1 0f       	add	r30, r17
    298c:	f1 1d       	adc	r31, r1
    298e:	80 81       	ld	r24, Z
    2990:	80 33       	cpi	r24, 0x30	; 48
    2992:	19 f4       	brne	.+6      	; 0x299a <vfprintf+0x22c>
    2994:	11 50       	subi	r17, 0x01	; 1
    2996:	11 11       	cpse	r17, r1
    2998:	f4 cf       	rjmp	.-24     	; 0x2982 <vfprintf+0x214>
    299a:	97 fe       	sbrs	r9, 7
    299c:	0e c0       	rjmp	.+28     	; 0x29ba <vfprintf+0x24c>
    299e:	44 24       	eor	r4, r4
    29a0:	43 94       	inc	r4
    29a2:	41 0e       	add	r4, r17
    29a4:	81 2f       	mov	r24, r17
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	c8 16       	cp	r12, r24
    29aa:	d9 06       	cpc	r13, r25
    29ac:	2c f4       	brge	.+10     	; 0x29b8 <vfprintf+0x24a>
    29ae:	1c 19       	sub	r17, r12
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <vfprintf+0x24c>
    29b2:	44 24       	eor	r4, r4
    29b4:	43 94       	inc	r4
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <vfprintf+0x24c>
    29b8:	10 e0       	ldi	r17, 0x00	; 0
    29ba:	97 fe       	sbrs	r9, 7
    29bc:	06 c0       	rjmp	.+12     	; 0x29ca <vfprintf+0x25c>
    29be:	1c 14       	cp	r1, r12
    29c0:	1d 04       	cpc	r1, r13
    29c2:	34 f4       	brge	.+12     	; 0x29d0 <vfprintf+0x262>
    29c4:	c6 01       	movw	r24, r12
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	05 c0       	rjmp	.+10     	; 0x29d4 <vfprintf+0x266>
    29ca:	85 e0       	ldi	r24, 0x05	; 5
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <vfprintf+0x266>
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	01 11       	cpse	r16, r1
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	11 23       	and	r17, r17
    29da:	31 f0       	breq	.+12     	; 0x29e8 <vfprintf+0x27a>
    29dc:	21 2f       	mov	r18, r17
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	2f 5f       	subi	r18, 0xFF	; 255
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	25 2d       	mov	r18, r5
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	82 17       	cp	r24, r18
    29ee:	93 07       	cpc	r25, r19
    29f0:	14 f4       	brge	.+4      	; 0x29f6 <vfprintf+0x288>
    29f2:	58 1a       	sub	r5, r24
    29f4:	01 c0       	rjmp	.+2      	; 0x29f8 <vfprintf+0x28a>
    29f6:	51 2c       	mov	r5, r1
    29f8:	89 2d       	mov	r24, r9
    29fa:	89 70       	andi	r24, 0x09	; 9
    29fc:	49 f4       	brne	.+18     	; 0x2a10 <vfprintf+0x2a2>
    29fe:	55 20       	and	r5, r5
    2a00:	39 f0       	breq	.+14     	; 0x2a10 <vfprintf+0x2a2>
    2a02:	b7 01       	movw	r22, r14
    2a04:	80 e2       	ldi	r24, 0x20	; 32
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2a0c:	5a 94       	dec	r5
    2a0e:	f7 cf       	rjmp	.-18     	; 0x29fe <vfprintf+0x290>
    2a10:	00 23       	and	r16, r16
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <vfprintf+0x2b0>
    2a14:	b7 01       	movw	r22, r14
    2a16:	80 2f       	mov	r24, r16
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2a1e:	93 fc       	sbrc	r9, 3
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <vfprintf+0x2c6>
    2a22:	55 20       	and	r5, r5
    2a24:	39 f0       	breq	.+14     	; 0x2a34 <vfprintf+0x2c6>
    2a26:	b7 01       	movw	r22, r14
    2a28:	80 e3       	ldi	r24, 0x30	; 48
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2a30:	5a 94       	dec	r5
    2a32:	f7 cf       	rjmp	.-18     	; 0x2a22 <vfprintf+0x2b4>
    2a34:	97 fe       	sbrs	r9, 7
    2a36:	4c c0       	rjmp	.+152    	; 0x2ad0 <vfprintf+0x362>
    2a38:	46 01       	movw	r8, r12
    2a3a:	d7 fe       	sbrs	r13, 7
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <vfprintf+0x2d4>
    2a3e:	81 2c       	mov	r8, r1
    2a40:	91 2c       	mov	r9, r1
    2a42:	c6 01       	movw	r24, r12
    2a44:	88 19       	sub	r24, r8
    2a46:	99 09       	sbc	r25, r9
    2a48:	f3 01       	movw	r30, r6
    2a4a:	e8 0f       	add	r30, r24
    2a4c:	f9 1f       	adc	r31, r25
    2a4e:	ed 87       	std	Y+13, r30	; 0x0d
    2a50:	fe 87       	std	Y+14, r31	; 0x0e
    2a52:	96 01       	movw	r18, r12
    2a54:	24 19       	sub	r18, r4
    2a56:	31 09       	sbc	r19, r1
    2a58:	2f 87       	std	Y+15, r18	; 0x0f
    2a5a:	38 8b       	std	Y+16, r19	; 0x10
    2a5c:	01 2f       	mov	r16, r17
    2a5e:	10 e0       	ldi	r17, 0x00	; 0
    2a60:	11 95       	neg	r17
    2a62:	01 95       	neg	r16
    2a64:	11 09       	sbc	r17, r1
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	83 16       	cp	r8, r19
    2a6a:	93 06       	cpc	r9, r19
    2a6c:	29 f4       	brne	.+10     	; 0x2a78 <vfprintf+0x30a>
    2a6e:	b7 01       	movw	r22, r14
    2a70:	8e e2       	ldi	r24, 0x2E	; 46
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2a78:	c8 14       	cp	r12, r8
    2a7a:	d9 04       	cpc	r13, r9
    2a7c:	4c f0       	brlt	.+18     	; 0x2a90 <vfprintf+0x322>
    2a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a80:	98 89       	ldd	r25, Y+16	; 0x10
    2a82:	88 15       	cp	r24, r8
    2a84:	99 05       	cpc	r25, r9
    2a86:	24 f4       	brge	.+8      	; 0x2a90 <vfprintf+0x322>
    2a88:	ed 85       	ldd	r30, Y+13	; 0x0d
    2a8a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2a8c:	81 81       	ldd	r24, Z+1	; 0x01
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <vfprintf+0x324>
    2a90:	80 e3       	ldi	r24, 0x30	; 48
    2a92:	f1 e0       	ldi	r31, 0x01	; 1
    2a94:	8f 1a       	sub	r8, r31
    2a96:	91 08       	sbc	r9, r1
    2a98:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a9c:	2f 5f       	subi	r18, 0xFF	; 255
    2a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa0:	2d 87       	std	Y+13, r18	; 0x0d
    2aa2:	3e 87       	std	Y+14, r19	; 0x0e
    2aa4:	80 16       	cp	r8, r16
    2aa6:	91 06       	cpc	r9, r17
    2aa8:	2c f0       	brlt	.+10     	; 0x2ab4 <vfprintf+0x346>
    2aaa:	b7 01       	movw	r22, r14
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2ab2:	d9 cf       	rjmp	.-78     	; 0x2a66 <vfprintf+0x2f8>
    2ab4:	c8 14       	cp	r12, r8
    2ab6:	d9 04       	cpc	r13, r9
    2ab8:	41 f4       	brne	.+16     	; 0x2aca <vfprintf+0x35c>
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	96 33       	cpi	r25, 0x36	; 54
    2abe:	20 f4       	brcc	.+8      	; 0x2ac8 <vfprintf+0x35a>
    2ac0:	95 33       	cpi	r25, 0x35	; 53
    2ac2:	19 f4       	brne	.+6      	; 0x2aca <vfprintf+0x35c>
    2ac4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ac6:	34 ff       	sbrs	r19, 4
    2ac8:	81 e3       	ldi	r24, 0x31	; 49
    2aca:	b7 01       	movw	r22, r14
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	4e c0       	rjmp	.+156    	; 0x2b6c <vfprintf+0x3fe>
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	81 33       	cpi	r24, 0x31	; 49
    2ad4:	19 f0       	breq	.+6      	; 0x2adc <vfprintf+0x36e>
    2ad6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ad8:	9f 7e       	andi	r25, 0xEF	; 239
    2ada:	9c 87       	std	Y+12, r25	; 0x0c
    2adc:	b7 01       	movw	r22, r14
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2ae4:	11 11       	cpse	r17, r1
    2ae6:	05 c0       	rjmp	.+10     	; 0x2af2 <vfprintf+0x384>
    2ae8:	94 fc       	sbrc	r9, 4
    2aea:	18 c0       	rjmp	.+48     	; 0x2b1c <vfprintf+0x3ae>
    2aec:	85 e6       	ldi	r24, 0x65	; 101
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	17 c0       	rjmp	.+46     	; 0x2b20 <vfprintf+0x3b2>
    2af2:	b7 01       	movw	r22, r14
    2af4:	8e e2       	ldi	r24, 0x2E	; 46
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2afc:	1e 5f       	subi	r17, 0xFE	; 254
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	01 e0       	ldi	r16, 0x01	; 1
    2b02:	08 0f       	add	r16, r24
    2b04:	f3 01       	movw	r30, r6
    2b06:	e8 0f       	add	r30, r24
    2b08:	f1 1d       	adc	r31, r1
    2b0a:	80 81       	ld	r24, Z
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2b14:	80 2f       	mov	r24, r16
    2b16:	01 13       	cpse	r16, r17
    2b18:	f3 cf       	rjmp	.-26     	; 0x2b00 <vfprintf+0x392>
    2b1a:	e6 cf       	rjmp	.-52     	; 0x2ae8 <vfprintf+0x37a>
    2b1c:	85 e4       	ldi	r24, 0x45	; 69
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	b7 01       	movw	r22, r14
    2b22:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2b26:	d7 fc       	sbrc	r13, 7
    2b28:	06 c0       	rjmp	.+12     	; 0x2b36 <vfprintf+0x3c8>
    2b2a:	c1 14       	cp	r12, r1
    2b2c:	d1 04       	cpc	r13, r1
    2b2e:	41 f4       	brne	.+16     	; 0x2b40 <vfprintf+0x3d2>
    2b30:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b32:	e4 ff       	sbrs	r30, 4
    2b34:	05 c0       	rjmp	.+10     	; 0x2b40 <vfprintf+0x3d2>
    2b36:	d1 94       	neg	r13
    2b38:	c1 94       	neg	r12
    2b3a:	d1 08       	sbc	r13, r1
    2b3c:	8d e2       	ldi	r24, 0x2D	; 45
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <vfprintf+0x3d4>
    2b40:	8b e2       	ldi	r24, 0x2B	; 43
    2b42:	b7 01       	movw	r22, r14
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2b4a:	80 e3       	ldi	r24, 0x30	; 48
    2b4c:	2a e0       	ldi	r18, 0x0A	; 10
    2b4e:	c2 16       	cp	r12, r18
    2b50:	d1 04       	cpc	r13, r1
    2b52:	2c f0       	brlt	.+10     	; 0x2b5e <vfprintf+0x3f0>
    2b54:	8f 5f       	subi	r24, 0xFF	; 255
    2b56:	fa e0       	ldi	r31, 0x0A	; 10
    2b58:	cf 1a       	sub	r12, r31
    2b5a:	d1 08       	sbc	r13, r1
    2b5c:	f7 cf       	rjmp	.-18     	; 0x2b4c <vfprintf+0x3de>
    2b5e:	b7 01       	movw	r22, r14
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2b66:	b7 01       	movw	r22, r14
    2b68:	c6 01       	movw	r24, r12
    2b6a:	c0 96       	adiw	r24, 0x30	; 48
    2b6c:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2b70:	54 c1       	rjmp	.+680    	; 0x2e1a <vfprintf+0x6ac>
    2b72:	83 36       	cpi	r24, 0x63	; 99
    2b74:	31 f0       	breq	.+12     	; 0x2b82 <vfprintf+0x414>
    2b76:	83 37       	cpi	r24, 0x73	; 115
    2b78:	79 f0       	breq	.+30     	; 0x2b98 <vfprintf+0x42a>
    2b7a:	83 35       	cpi	r24, 0x53	; 83
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <vfprintf+0x412>
    2b7e:	56 c0       	rjmp	.+172    	; 0x2c2c <vfprintf+0x4be>
    2b80:	20 c0       	rjmp	.+64     	; 0x2bc2 <vfprintf+0x454>
    2b82:	56 01       	movw	r10, r12
    2b84:	32 e0       	ldi	r19, 0x02	; 2
    2b86:	a3 0e       	add	r10, r19
    2b88:	b1 1c       	adc	r11, r1
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	80 81       	ld	r24, Z
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	01 e0       	ldi	r16, 0x01	; 1
    2b92:	10 e0       	ldi	r17, 0x00	; 0
    2b94:	63 01       	movw	r12, r6
    2b96:	12 c0       	rjmp	.+36     	; 0x2bbc <vfprintf+0x44e>
    2b98:	56 01       	movw	r10, r12
    2b9a:	f2 e0       	ldi	r31, 0x02	; 2
    2b9c:	af 0e       	add	r10, r31
    2b9e:	b1 1c       	adc	r11, r1
    2ba0:	f6 01       	movw	r30, r12
    2ba2:	c0 80       	ld	r12, Z
    2ba4:	d1 80       	ldd	r13, Z+1	; 0x01
    2ba6:	96 fe       	sbrs	r9, 6
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <vfprintf+0x442>
    2baa:	61 2f       	mov	r22, r17
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <vfprintf+0x446>
    2bb0:	6f ef       	ldi	r22, 0xFF	; 255
    2bb2:	7f ef       	ldi	r23, 0xFF	; 255
    2bb4:	c6 01       	movw	r24, r12
    2bb6:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <strnlen>
    2bba:	8c 01       	movw	r16, r24
    2bbc:	f9 2d       	mov	r31, r9
    2bbe:	ff 77       	andi	r31, 0x7F	; 127
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <vfprintf+0x47c>
    2bc2:	56 01       	movw	r10, r12
    2bc4:	22 e0       	ldi	r18, 0x02	; 2
    2bc6:	a2 0e       	add	r10, r18
    2bc8:	b1 1c       	adc	r11, r1
    2bca:	f6 01       	movw	r30, r12
    2bcc:	c0 80       	ld	r12, Z
    2bce:	d1 80       	ldd	r13, Z+1	; 0x01
    2bd0:	96 fe       	sbrs	r9, 6
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <vfprintf+0x46c>
    2bd4:	61 2f       	mov	r22, r17
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <vfprintf+0x470>
    2bda:	6f ef       	ldi	r22, 0xFF	; 255
    2bdc:	7f ef       	ldi	r23, 0xFF	; 255
    2bde:	c6 01       	movw	r24, r12
    2be0:	0e 94 51 18 	call	0x30a2	; 0x30a2 <strnlen_P>
    2be4:	8c 01       	movw	r16, r24
    2be6:	f9 2d       	mov	r31, r9
    2be8:	f0 68       	ori	r31, 0x80	; 128
    2bea:	9f 2e       	mov	r9, r31
    2bec:	f3 fd       	sbrc	r31, 3
    2bee:	1a c0       	rjmp	.+52     	; 0x2c24 <vfprintf+0x4b6>
    2bf0:	85 2d       	mov	r24, r5
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	08 17       	cp	r16, r24
    2bf6:	19 07       	cpc	r17, r25
    2bf8:	a8 f4       	brcc	.+42     	; 0x2c24 <vfprintf+0x4b6>
    2bfa:	b7 01       	movw	r22, r14
    2bfc:	80 e2       	ldi	r24, 0x20	; 32
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2c04:	5a 94       	dec	r5
    2c06:	f4 cf       	rjmp	.-24     	; 0x2bf0 <vfprintf+0x482>
    2c08:	f6 01       	movw	r30, r12
    2c0a:	97 fc       	sbrc	r9, 7
    2c0c:	85 91       	lpm	r24, Z+
    2c0e:	97 fe       	sbrs	r9, 7
    2c10:	81 91       	ld	r24, Z+
    2c12:	6f 01       	movw	r12, r30
    2c14:	b7 01       	movw	r22, r14
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2c1c:	51 10       	cpse	r5, r1
    2c1e:	5a 94       	dec	r5
    2c20:	01 50       	subi	r16, 0x01	; 1
    2c22:	11 09       	sbc	r17, r1
    2c24:	01 15       	cp	r16, r1
    2c26:	11 05       	cpc	r17, r1
    2c28:	79 f7       	brne	.-34     	; 0x2c08 <vfprintf+0x49a>
    2c2a:	f7 c0       	rjmp	.+494    	; 0x2e1a <vfprintf+0x6ac>
    2c2c:	84 36       	cpi	r24, 0x64	; 100
    2c2e:	11 f0       	breq	.+4      	; 0x2c34 <vfprintf+0x4c6>
    2c30:	89 36       	cpi	r24, 0x69	; 105
    2c32:	61 f5       	brne	.+88     	; 0x2c8c <vfprintf+0x51e>
    2c34:	56 01       	movw	r10, r12
    2c36:	97 fe       	sbrs	r9, 7
    2c38:	09 c0       	rjmp	.+18     	; 0x2c4c <vfprintf+0x4de>
    2c3a:	24 e0       	ldi	r18, 0x04	; 4
    2c3c:	a2 0e       	add	r10, r18
    2c3e:	b1 1c       	adc	r11, r1
    2c40:	f6 01       	movw	r30, r12
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	0a c0       	rjmp	.+20     	; 0x2c60 <vfprintf+0x4f2>
    2c4c:	f2 e0       	ldi	r31, 0x02	; 2
    2c4e:	af 0e       	add	r10, r31
    2c50:	b1 1c       	adc	r11, r1
    2c52:	f6 01       	movw	r30, r12
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	07 2e       	mov	r0, r23
    2c5a:	00 0c       	add	r0, r0
    2c5c:	88 0b       	sbc	r24, r24
    2c5e:	99 0b       	sbc	r25, r25
    2c60:	f9 2d       	mov	r31, r9
    2c62:	ff 76       	andi	r31, 0x6F	; 111
    2c64:	9f 2e       	mov	r9, r31
    2c66:	97 ff       	sbrs	r25, 7
    2c68:	09 c0       	rjmp	.+18     	; 0x2c7c <vfprintf+0x50e>
    2c6a:	90 95       	com	r25
    2c6c:	80 95       	com	r24
    2c6e:	70 95       	com	r23
    2c70:	61 95       	neg	r22
    2c72:	7f 4f       	sbci	r23, 0xFF	; 255
    2c74:	8f 4f       	sbci	r24, 0xFF	; 255
    2c76:	9f 4f       	sbci	r25, 0xFF	; 255
    2c78:	f0 68       	ori	r31, 0x80	; 128
    2c7a:	9f 2e       	mov	r9, r31
    2c7c:	2a e0       	ldi	r18, 0x0A	; 10
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	a3 01       	movw	r20, r6
    2c82:	0e 94 67 19 	call	0x32ce	; 0x32ce <__ultoa_invert>
    2c86:	c8 2e       	mov	r12, r24
    2c88:	c6 18       	sub	r12, r6
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <vfprintf+0x59c>
    2c8c:	09 2d       	mov	r16, r9
    2c8e:	85 37       	cpi	r24, 0x75	; 117
    2c90:	21 f4       	brne	.+8      	; 0x2c9a <vfprintf+0x52c>
    2c92:	0f 7e       	andi	r16, 0xEF	; 239
    2c94:	2a e0       	ldi	r18, 0x0A	; 10
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	1d c0       	rjmp	.+58     	; 0x2cd4 <vfprintf+0x566>
    2c9a:	09 7f       	andi	r16, 0xF9	; 249
    2c9c:	8f 36       	cpi	r24, 0x6F	; 111
    2c9e:	91 f0       	breq	.+36     	; 0x2cc4 <vfprintf+0x556>
    2ca0:	18 f4       	brcc	.+6      	; 0x2ca8 <vfprintf+0x53a>
    2ca2:	88 35       	cpi	r24, 0x58	; 88
    2ca4:	59 f0       	breq	.+22     	; 0x2cbc <vfprintf+0x54e>
    2ca6:	c3 c0       	rjmp	.+390    	; 0x2e2e <vfprintf+0x6c0>
    2ca8:	80 37       	cpi	r24, 0x70	; 112
    2caa:	19 f0       	breq	.+6      	; 0x2cb2 <vfprintf+0x544>
    2cac:	88 37       	cpi	r24, 0x78	; 120
    2cae:	11 f0       	breq	.+4      	; 0x2cb4 <vfprintf+0x546>
    2cb0:	be c0       	rjmp	.+380    	; 0x2e2e <vfprintf+0x6c0>
    2cb2:	00 61       	ori	r16, 0x10	; 16
    2cb4:	04 ff       	sbrs	r16, 4
    2cb6:	09 c0       	rjmp	.+18     	; 0x2cca <vfprintf+0x55c>
    2cb8:	04 60       	ori	r16, 0x04	; 4
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <vfprintf+0x55c>
    2cbc:	94 fe       	sbrs	r9, 4
    2cbe:	08 c0       	rjmp	.+16     	; 0x2cd0 <vfprintf+0x562>
    2cc0:	06 60       	ori	r16, 0x06	; 6
    2cc2:	06 c0       	rjmp	.+12     	; 0x2cd0 <vfprintf+0x562>
    2cc4:	28 e0       	ldi	r18, 0x08	; 8
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	05 c0       	rjmp	.+10     	; 0x2cd4 <vfprintf+0x566>
    2cca:	20 e1       	ldi	r18, 0x10	; 16
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <vfprintf+0x566>
    2cd0:	20 e1       	ldi	r18, 0x10	; 16
    2cd2:	32 e0       	ldi	r19, 0x02	; 2
    2cd4:	56 01       	movw	r10, r12
    2cd6:	07 ff       	sbrs	r16, 7
    2cd8:	09 c0       	rjmp	.+18     	; 0x2cec <vfprintf+0x57e>
    2cda:	84 e0       	ldi	r24, 0x04	; 4
    2cdc:	a8 0e       	add	r10, r24
    2cde:	b1 1c       	adc	r11, r1
    2ce0:	f6 01       	movw	r30, r12
    2ce2:	60 81       	ld	r22, Z
    2ce4:	71 81       	ldd	r23, Z+1	; 0x01
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	93 81       	ldd	r25, Z+3	; 0x03
    2cea:	08 c0       	rjmp	.+16     	; 0x2cfc <vfprintf+0x58e>
    2cec:	f2 e0       	ldi	r31, 0x02	; 2
    2cee:	af 0e       	add	r10, r31
    2cf0:	b1 1c       	adc	r11, r1
    2cf2:	f6 01       	movw	r30, r12
    2cf4:	60 81       	ld	r22, Z
    2cf6:	71 81       	ldd	r23, Z+1	; 0x01
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a3 01       	movw	r20, r6
    2cfe:	0e 94 67 19 	call	0x32ce	; 0x32ce <__ultoa_invert>
    2d02:	c8 2e       	mov	r12, r24
    2d04:	c6 18       	sub	r12, r6
    2d06:	0f 77       	andi	r16, 0x7F	; 127
    2d08:	90 2e       	mov	r9, r16
    2d0a:	96 fe       	sbrs	r9, 6
    2d0c:	0b c0       	rjmp	.+22     	; 0x2d24 <vfprintf+0x5b6>
    2d0e:	09 2d       	mov	r16, r9
    2d10:	0e 7f       	andi	r16, 0xFE	; 254
    2d12:	c1 16       	cp	r12, r17
    2d14:	50 f4       	brcc	.+20     	; 0x2d2a <vfprintf+0x5bc>
    2d16:	94 fe       	sbrs	r9, 4
    2d18:	0a c0       	rjmp	.+20     	; 0x2d2e <vfprintf+0x5c0>
    2d1a:	92 fc       	sbrc	r9, 2
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <vfprintf+0x5c0>
    2d1e:	09 2d       	mov	r16, r9
    2d20:	0e 7e       	andi	r16, 0xEE	; 238
    2d22:	05 c0       	rjmp	.+10     	; 0x2d2e <vfprintf+0x5c0>
    2d24:	dc 2c       	mov	r13, r12
    2d26:	09 2d       	mov	r16, r9
    2d28:	03 c0       	rjmp	.+6      	; 0x2d30 <vfprintf+0x5c2>
    2d2a:	dc 2c       	mov	r13, r12
    2d2c:	01 c0       	rjmp	.+2      	; 0x2d30 <vfprintf+0x5c2>
    2d2e:	d1 2e       	mov	r13, r17
    2d30:	04 ff       	sbrs	r16, 4
    2d32:	0d c0       	rjmp	.+26     	; 0x2d4e <vfprintf+0x5e0>
    2d34:	fe 01       	movw	r30, r28
    2d36:	ec 0d       	add	r30, r12
    2d38:	f1 1d       	adc	r31, r1
    2d3a:	80 81       	ld	r24, Z
    2d3c:	80 33       	cpi	r24, 0x30	; 48
    2d3e:	11 f4       	brne	.+4      	; 0x2d44 <vfprintf+0x5d6>
    2d40:	09 7e       	andi	r16, 0xE9	; 233
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <vfprintf+0x5e8>
    2d44:	02 ff       	sbrs	r16, 2
    2d46:	06 c0       	rjmp	.+12     	; 0x2d54 <vfprintf+0x5e6>
    2d48:	d3 94       	inc	r13
    2d4a:	d3 94       	inc	r13
    2d4c:	04 c0       	rjmp	.+8      	; 0x2d56 <vfprintf+0x5e8>
    2d4e:	80 2f       	mov	r24, r16
    2d50:	86 78       	andi	r24, 0x86	; 134
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <vfprintf+0x5e8>
    2d54:	d3 94       	inc	r13
    2d56:	03 fd       	sbrc	r16, 3
    2d58:	11 c0       	rjmp	.+34     	; 0x2d7c <vfprintf+0x60e>
    2d5a:	00 ff       	sbrs	r16, 0
    2d5c:	06 c0       	rjmp	.+12     	; 0x2d6a <vfprintf+0x5fc>
    2d5e:	1c 2d       	mov	r17, r12
    2d60:	d5 14       	cp	r13, r5
    2d62:	80 f4       	brcc	.+32     	; 0x2d84 <vfprintf+0x616>
    2d64:	15 0d       	add	r17, r5
    2d66:	1d 19       	sub	r17, r13
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <vfprintf+0x616>
    2d6a:	d5 14       	cp	r13, r5
    2d6c:	58 f4       	brcc	.+22     	; 0x2d84 <vfprintf+0x616>
    2d6e:	b7 01       	movw	r22, r14
    2d70:	80 e2       	ldi	r24, 0x20	; 32
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2d78:	d3 94       	inc	r13
    2d7a:	f7 cf       	rjmp	.-18     	; 0x2d6a <vfprintf+0x5fc>
    2d7c:	d5 14       	cp	r13, r5
    2d7e:	10 f4       	brcc	.+4      	; 0x2d84 <vfprintf+0x616>
    2d80:	5d 18       	sub	r5, r13
    2d82:	01 c0       	rjmp	.+2      	; 0x2d86 <vfprintf+0x618>
    2d84:	51 2c       	mov	r5, r1
    2d86:	04 ff       	sbrs	r16, 4
    2d88:	10 c0       	rjmp	.+32     	; 0x2daa <vfprintf+0x63c>
    2d8a:	b7 01       	movw	r22, r14
    2d8c:	80 e3       	ldi	r24, 0x30	; 48
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2d94:	02 ff       	sbrs	r16, 2
    2d96:	17 c0       	rjmp	.+46     	; 0x2dc6 <vfprintf+0x658>
    2d98:	01 fd       	sbrc	r16, 1
    2d9a:	03 c0       	rjmp	.+6      	; 0x2da2 <vfprintf+0x634>
    2d9c:	88 e7       	ldi	r24, 0x78	; 120
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <vfprintf+0x638>
    2da2:	88 e5       	ldi	r24, 0x58	; 88
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	b7 01       	movw	r22, r14
    2da8:	0c c0       	rjmp	.+24     	; 0x2dc2 <vfprintf+0x654>
    2daa:	80 2f       	mov	r24, r16
    2dac:	86 78       	andi	r24, 0x86	; 134
    2dae:	59 f0       	breq	.+22     	; 0x2dc6 <vfprintf+0x658>
    2db0:	01 ff       	sbrs	r16, 1
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <vfprintf+0x64a>
    2db4:	8b e2       	ldi	r24, 0x2B	; 43
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <vfprintf+0x64c>
    2db8:	80 e2       	ldi	r24, 0x20	; 32
    2dba:	07 fd       	sbrc	r16, 7
    2dbc:	8d e2       	ldi	r24, 0x2D	; 45
    2dbe:	b7 01       	movw	r22, r14
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2dc6:	c1 16       	cp	r12, r17
    2dc8:	38 f4       	brcc	.+14     	; 0x2dd8 <vfprintf+0x66a>
    2dca:	b7 01       	movw	r22, r14
    2dcc:	80 e3       	ldi	r24, 0x30	; 48
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2dd4:	11 50       	subi	r17, 0x01	; 1
    2dd6:	f7 cf       	rjmp	.-18     	; 0x2dc6 <vfprintf+0x658>
    2dd8:	ca 94       	dec	r12
    2dda:	f3 01       	movw	r30, r6
    2ddc:	ec 0d       	add	r30, r12
    2dde:	f1 1d       	adc	r31, r1
    2de0:	80 81       	ld	r24, Z
    2de2:	b7 01       	movw	r22, r14
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2dea:	c1 10       	cpse	r12, r1
    2dec:	f5 cf       	rjmp	.-22     	; 0x2dd8 <vfprintf+0x66a>
    2dee:	15 c0       	rjmp	.+42     	; 0x2e1a <vfprintf+0x6ac>
    2df0:	f4 e0       	ldi	r31, 0x04	; 4
    2df2:	f5 15       	cp	r31, r5
    2df4:	60 f5       	brcc	.+88     	; 0x2e4e <vfprintf+0x6e0>
    2df6:	84 e0       	ldi	r24, 0x04	; 4
    2df8:	58 1a       	sub	r5, r24
    2dfa:	93 fe       	sbrs	r9, 3
    2dfc:	1f c0       	rjmp	.+62     	; 0x2e3c <vfprintf+0x6ce>
    2dfe:	01 11       	cpse	r16, r1
    2e00:	27 c0       	rjmp	.+78     	; 0x2e50 <vfprintf+0x6e2>
    2e02:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e04:	23 ff       	sbrs	r18, 3
    2e06:	2a c0       	rjmp	.+84     	; 0x2e5c <vfprintf+0x6ee>
    2e08:	00 e1       	ldi	r16, 0x10	; 16
    2e0a:	12 e0       	ldi	r17, 0x02	; 2
    2e0c:	39 2d       	mov	r19, r9
    2e0e:	30 71       	andi	r19, 0x10	; 16
    2e10:	93 2e       	mov	r9, r19
    2e12:	f8 01       	movw	r30, r16
    2e14:	84 91       	lpm	r24, Z
    2e16:	81 11       	cpse	r24, r1
    2e18:	24 c0       	rjmp	.+72     	; 0x2e62 <vfprintf+0x6f4>
    2e1a:	55 20       	and	r5, r5
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <vfprintf+0x6b2>
    2e1e:	e4 cc       	rjmp	.-1592   	; 0x27e8 <vfprintf+0x7a>
    2e20:	b7 01       	movw	r22, r14
    2e22:	80 e2       	ldi	r24, 0x20	; 32
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2e2a:	5a 94       	dec	r5
    2e2c:	f6 cf       	rjmp	.-20     	; 0x2e1a <vfprintf+0x6ac>
    2e2e:	f7 01       	movw	r30, r14
    2e30:	86 81       	ldd	r24, Z+6	; 0x06
    2e32:	97 81       	ldd	r25, Z+7	; 0x07
    2e34:	26 c0       	rjmp	.+76     	; 0x2e82 <vfprintf+0x714>
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	9f ef       	ldi	r25, 0xFF	; 255
    2e3a:	23 c0       	rjmp	.+70     	; 0x2e82 <vfprintf+0x714>
    2e3c:	b7 01       	movw	r22, r14
    2e3e:	80 e2       	ldi	r24, 0x20	; 32
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2e46:	5a 94       	dec	r5
    2e48:	51 10       	cpse	r5, r1
    2e4a:	f8 cf       	rjmp	.-16     	; 0x2e3c <vfprintf+0x6ce>
    2e4c:	d8 cf       	rjmp	.-80     	; 0x2dfe <vfprintf+0x690>
    2e4e:	51 2c       	mov	r5, r1
    2e50:	b7 01       	movw	r22, r14
    2e52:	80 2f       	mov	r24, r16
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2e5a:	d3 cf       	rjmp	.-90     	; 0x2e02 <vfprintf+0x694>
    2e5c:	04 e1       	ldi	r16, 0x14	; 20
    2e5e:	12 e0       	ldi	r17, 0x02	; 2
    2e60:	d5 cf       	rjmp	.-86     	; 0x2e0c <vfprintf+0x69e>
    2e62:	91 10       	cpse	r9, r1
    2e64:	80 52       	subi	r24, 0x20	; 32
    2e66:	b7 01       	movw	r22, r14
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 87 18 	call	0x310e	; 0x310e <fputc>
    2e6e:	0f 5f       	subi	r16, 0xFF	; 255
    2e70:	1f 4f       	sbci	r17, 0xFF	; 255
    2e72:	cf cf       	rjmp	.-98     	; 0x2e12 <vfprintf+0x6a4>
    2e74:	23 e0       	ldi	r18, 0x03	; 3
    2e76:	25 15       	cp	r18, r5
    2e78:	10 f4       	brcc	.+4      	; 0x2e7e <vfprintf+0x710>
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	bd cf       	rjmp	.-134    	; 0x2df8 <vfprintf+0x68a>
    2e7e:	51 2c       	mov	r5, r1
    2e80:	c0 cf       	rjmp	.-128    	; 0x2e02 <vfprintf+0x694>
    2e82:	60 96       	adiw	r28, 0x10	; 16
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	ef 90       	pop	r14
    2e94:	df 90       	pop	r13
    2e96:	cf 90       	pop	r12
    2e98:	bf 90       	pop	r11
    2e9a:	af 90       	pop	r10
    2e9c:	9f 90       	pop	r9
    2e9e:	8f 90       	pop	r8
    2ea0:	7f 90       	pop	r7
    2ea2:	6f 90       	pop	r6
    2ea4:	5f 90       	pop	r5
    2ea6:	4f 90       	pop	r4
    2ea8:	3f 90       	pop	r3
    2eaa:	2f 90       	pop	r2
    2eac:	08 95       	ret

00002eae <__udivmodsi4>:
    2eae:	a1 e2       	ldi	r26, 0x21	; 33
    2eb0:	1a 2e       	mov	r1, r26
    2eb2:	aa 1b       	sub	r26, r26
    2eb4:	bb 1b       	sub	r27, r27
    2eb6:	fd 01       	movw	r30, r26
    2eb8:	0d c0       	rjmp	.+26     	; 0x2ed4 <__udivmodsi4_ep>

00002eba <__udivmodsi4_loop>:
    2eba:	aa 1f       	adc	r26, r26
    2ebc:	bb 1f       	adc	r27, r27
    2ebe:	ee 1f       	adc	r30, r30
    2ec0:	ff 1f       	adc	r31, r31
    2ec2:	a2 17       	cp	r26, r18
    2ec4:	b3 07       	cpc	r27, r19
    2ec6:	e4 07       	cpc	r30, r20
    2ec8:	f5 07       	cpc	r31, r21
    2eca:	20 f0       	brcs	.+8      	; 0x2ed4 <__udivmodsi4_ep>
    2ecc:	a2 1b       	sub	r26, r18
    2ece:	b3 0b       	sbc	r27, r19
    2ed0:	e4 0b       	sbc	r30, r20
    2ed2:	f5 0b       	sbc	r31, r21

00002ed4 <__udivmodsi4_ep>:
    2ed4:	66 1f       	adc	r22, r22
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	88 1f       	adc	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	1a 94       	dec	r1
    2ede:	69 f7       	brne	.-38     	; 0x2eba <__udivmodsi4_loop>
    2ee0:	60 95       	com	r22
    2ee2:	70 95       	com	r23
    2ee4:	80 95       	com	r24
    2ee6:	90 95       	com	r25
    2ee8:	9b 01       	movw	r18, r22
    2eea:	ac 01       	movw	r20, r24
    2eec:	bd 01       	movw	r22, r26
    2eee:	cf 01       	movw	r24, r30
    2ef0:	08 95       	ret

00002ef2 <__ftoa_engine>:
    2ef2:	28 30       	cpi	r18, 0x08	; 8
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <__ftoa_engine+0x6>
    2ef6:	27 e0       	ldi	r18, 0x07	; 7
    2ef8:	33 27       	eor	r19, r19
    2efa:	da 01       	movw	r26, r20
    2efc:	99 0f       	add	r25, r25
    2efe:	31 1d       	adc	r19, r1
    2f00:	87 fd       	sbrc	r24, 7
    2f02:	91 60       	ori	r25, 0x01	; 1
    2f04:	00 96       	adiw	r24, 0x00	; 0
    2f06:	61 05       	cpc	r22, r1
    2f08:	71 05       	cpc	r23, r1
    2f0a:	39 f4       	brne	.+14     	; 0x2f1a <__ftoa_engine+0x28>
    2f0c:	32 60       	ori	r19, 0x02	; 2
    2f0e:	2e 5f       	subi	r18, 0xFE	; 254
    2f10:	3d 93       	st	X+, r19
    2f12:	30 e3       	ldi	r19, 0x30	; 48
    2f14:	2a 95       	dec	r18
    2f16:	e1 f7       	brne	.-8      	; 0x2f10 <__ftoa_engine+0x1e>
    2f18:	08 95       	ret
    2f1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2f1c:	30 f0       	brcs	.+12     	; 0x2f2a <__ftoa_engine+0x38>
    2f1e:	80 38       	cpi	r24, 0x80	; 128
    2f20:	71 05       	cpc	r23, r1
    2f22:	61 05       	cpc	r22, r1
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <__ftoa_engine+0x36>
    2f26:	3c 5f       	subi	r19, 0xFC	; 252
    2f28:	3c 5f       	subi	r19, 0xFC	; 252
    2f2a:	3d 93       	st	X+, r19
    2f2c:	91 30       	cpi	r25, 0x01	; 1
    2f2e:	08 f0       	brcs	.+2      	; 0x2f32 <__ftoa_engine+0x40>
    2f30:	80 68       	ori	r24, 0x80	; 128
    2f32:	91 1d       	adc	r25, r1
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	1f 93       	push	r17
    2f3a:	0f 93       	push	r16
    2f3c:	ff 92       	push	r15
    2f3e:	ef 92       	push	r14
    2f40:	19 2f       	mov	r17, r25
    2f42:	98 7f       	andi	r25, 0xF8	; 248
    2f44:	96 95       	lsr	r25
    2f46:	e9 2f       	mov	r30, r25
    2f48:	96 95       	lsr	r25
    2f4a:	96 95       	lsr	r25
    2f4c:	e9 0f       	add	r30, r25
    2f4e:	ff 27       	eor	r31, r31
    2f50:	ee 58       	subi	r30, 0x8E	; 142
    2f52:	fd 4f       	sbci	r31, 0xFD	; 253
    2f54:	99 27       	eor	r25, r25
    2f56:	33 27       	eor	r19, r19
    2f58:	ee 24       	eor	r14, r14
    2f5a:	ff 24       	eor	r15, r15
    2f5c:	a7 01       	movw	r20, r14
    2f5e:	e7 01       	movw	r28, r14
    2f60:	05 90       	lpm	r0, Z+
    2f62:	08 94       	sec
    2f64:	07 94       	ror	r0
    2f66:	28 f4       	brcc	.+10     	; 0x2f72 <__ftoa_engine+0x80>
    2f68:	36 0f       	add	r19, r22
    2f6a:	e7 1e       	adc	r14, r23
    2f6c:	f8 1e       	adc	r15, r24
    2f6e:	49 1f       	adc	r20, r25
    2f70:	51 1d       	adc	r21, r1
    2f72:	66 0f       	add	r22, r22
    2f74:	77 1f       	adc	r23, r23
    2f76:	88 1f       	adc	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	06 94       	lsr	r0
    2f7c:	a1 f7       	brne	.-24     	; 0x2f66 <__ftoa_engine+0x74>
    2f7e:	05 90       	lpm	r0, Z+
    2f80:	07 94       	ror	r0
    2f82:	28 f4       	brcc	.+10     	; 0x2f8e <__ftoa_engine+0x9c>
    2f84:	e7 0e       	add	r14, r23
    2f86:	f8 1e       	adc	r15, r24
    2f88:	49 1f       	adc	r20, r25
    2f8a:	56 1f       	adc	r21, r22
    2f8c:	c1 1d       	adc	r28, r1
    2f8e:	77 0f       	add	r23, r23
    2f90:	88 1f       	adc	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	66 1f       	adc	r22, r22
    2f96:	06 94       	lsr	r0
    2f98:	a1 f7       	brne	.-24     	; 0x2f82 <__ftoa_engine+0x90>
    2f9a:	05 90       	lpm	r0, Z+
    2f9c:	07 94       	ror	r0
    2f9e:	28 f4       	brcc	.+10     	; 0x2faa <__ftoa_engine+0xb8>
    2fa0:	f8 0e       	add	r15, r24
    2fa2:	49 1f       	adc	r20, r25
    2fa4:	56 1f       	adc	r21, r22
    2fa6:	c7 1f       	adc	r28, r23
    2fa8:	d1 1d       	adc	r29, r1
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	66 1f       	adc	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	06 94       	lsr	r0
    2fb4:	a1 f7       	brne	.-24     	; 0x2f9e <__ftoa_engine+0xac>
    2fb6:	05 90       	lpm	r0, Z+
    2fb8:	07 94       	ror	r0
    2fba:	20 f4       	brcc	.+8      	; 0x2fc4 <__ftoa_engine+0xd2>
    2fbc:	49 0f       	add	r20, r25
    2fbe:	56 1f       	adc	r21, r22
    2fc0:	c7 1f       	adc	r28, r23
    2fc2:	d8 1f       	adc	r29, r24
    2fc4:	99 0f       	add	r25, r25
    2fc6:	66 1f       	adc	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	88 1f       	adc	r24, r24
    2fcc:	06 94       	lsr	r0
    2fce:	a9 f7       	brne	.-22     	; 0x2fba <__ftoa_engine+0xc8>
    2fd0:	84 91       	lpm	r24, Z
    2fd2:	10 95       	com	r17
    2fd4:	17 70       	andi	r17, 0x07	; 7
    2fd6:	41 f0       	breq	.+16     	; 0x2fe8 <__ftoa_engine+0xf6>
    2fd8:	d6 95       	lsr	r29
    2fda:	c7 95       	ror	r28
    2fdc:	57 95       	ror	r21
    2fde:	47 95       	ror	r20
    2fe0:	f7 94       	ror	r15
    2fe2:	e7 94       	ror	r14
    2fe4:	1a 95       	dec	r17
    2fe6:	c1 f7       	brne	.-16     	; 0x2fd8 <__ftoa_engine+0xe6>
    2fe8:	e8 e1       	ldi	r30, 0x18	; 24
    2fea:	f2 e0       	ldi	r31, 0x02	; 2
    2fec:	68 94       	set
    2fee:	15 90       	lpm	r1, Z+
    2ff0:	15 91       	lpm	r17, Z+
    2ff2:	35 91       	lpm	r19, Z+
    2ff4:	65 91       	lpm	r22, Z+
    2ff6:	95 91       	lpm	r25, Z+
    2ff8:	05 90       	lpm	r0, Z+
    2ffa:	7f e2       	ldi	r23, 0x2F	; 47
    2ffc:	73 95       	inc	r23
    2ffe:	e1 18       	sub	r14, r1
    3000:	f1 0a       	sbc	r15, r17
    3002:	43 0b       	sbc	r20, r19
    3004:	56 0b       	sbc	r21, r22
    3006:	c9 0b       	sbc	r28, r25
    3008:	d0 09       	sbc	r29, r0
    300a:	c0 f7       	brcc	.-16     	; 0x2ffc <__ftoa_engine+0x10a>
    300c:	e1 0c       	add	r14, r1
    300e:	f1 1e       	adc	r15, r17
    3010:	43 1f       	adc	r20, r19
    3012:	56 1f       	adc	r21, r22
    3014:	c9 1f       	adc	r28, r25
    3016:	d0 1d       	adc	r29, r0
    3018:	7e f4       	brtc	.+30     	; 0x3038 <__ftoa_engine+0x146>
    301a:	70 33       	cpi	r23, 0x30	; 48
    301c:	11 f4       	brne	.+4      	; 0x3022 <__ftoa_engine+0x130>
    301e:	8a 95       	dec	r24
    3020:	e6 cf       	rjmp	.-52     	; 0x2fee <__ftoa_engine+0xfc>
    3022:	e8 94       	clt
    3024:	01 50       	subi	r16, 0x01	; 1
    3026:	30 f0       	brcs	.+12     	; 0x3034 <__ftoa_engine+0x142>
    3028:	08 0f       	add	r16, r24
    302a:	0a f4       	brpl	.+2      	; 0x302e <__ftoa_engine+0x13c>
    302c:	00 27       	eor	r16, r16
    302e:	02 17       	cp	r16, r18
    3030:	08 f4       	brcc	.+2      	; 0x3034 <__ftoa_engine+0x142>
    3032:	20 2f       	mov	r18, r16
    3034:	23 95       	inc	r18
    3036:	02 2f       	mov	r16, r18
    3038:	7a 33       	cpi	r23, 0x3A	; 58
    303a:	28 f0       	brcs	.+10     	; 0x3046 <__ftoa_engine+0x154>
    303c:	79 e3       	ldi	r23, 0x39	; 57
    303e:	7d 93       	st	X+, r23
    3040:	2a 95       	dec	r18
    3042:	e9 f7       	brne	.-6      	; 0x303e <__ftoa_engine+0x14c>
    3044:	10 c0       	rjmp	.+32     	; 0x3066 <__ftoa_engine+0x174>
    3046:	7d 93       	st	X+, r23
    3048:	2a 95       	dec	r18
    304a:	89 f6       	brne	.-94     	; 0x2fee <__ftoa_engine+0xfc>
    304c:	06 94       	lsr	r0
    304e:	97 95       	ror	r25
    3050:	67 95       	ror	r22
    3052:	37 95       	ror	r19
    3054:	17 95       	ror	r17
    3056:	17 94       	ror	r1
    3058:	e1 18       	sub	r14, r1
    305a:	f1 0a       	sbc	r15, r17
    305c:	43 0b       	sbc	r20, r19
    305e:	56 0b       	sbc	r21, r22
    3060:	c9 0b       	sbc	r28, r25
    3062:	d0 09       	sbc	r29, r0
    3064:	98 f0       	brcs	.+38     	; 0x308c <__ftoa_engine+0x19a>
    3066:	23 95       	inc	r18
    3068:	7e 91       	ld	r23, -X
    306a:	73 95       	inc	r23
    306c:	7a 33       	cpi	r23, 0x3A	; 58
    306e:	08 f0       	brcs	.+2      	; 0x3072 <__ftoa_engine+0x180>
    3070:	70 e3       	ldi	r23, 0x30	; 48
    3072:	7c 93       	st	X, r23
    3074:	20 13       	cpse	r18, r16
    3076:	b8 f7       	brcc	.-18     	; 0x3066 <__ftoa_engine+0x174>
    3078:	7e 91       	ld	r23, -X
    307a:	70 61       	ori	r23, 0x10	; 16
    307c:	7d 93       	st	X+, r23
    307e:	30 f0       	brcs	.+12     	; 0x308c <__ftoa_engine+0x19a>
    3080:	83 95       	inc	r24
    3082:	71 e3       	ldi	r23, 0x31	; 49
    3084:	7d 93       	st	X+, r23
    3086:	70 e3       	ldi	r23, 0x30	; 48
    3088:	2a 95       	dec	r18
    308a:	e1 f7       	brne	.-8      	; 0x3084 <__ftoa_engine+0x192>
    308c:	11 24       	eor	r1, r1
    308e:	ef 90       	pop	r14
    3090:	ff 90       	pop	r15
    3092:	0f 91       	pop	r16
    3094:	1f 91       	pop	r17
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	99 27       	eor	r25, r25
    309c:	87 fd       	sbrc	r24, 7
    309e:	90 95       	com	r25
    30a0:	08 95       	ret

000030a2 <strnlen_P>:
    30a2:	fc 01       	movw	r30, r24
    30a4:	05 90       	lpm	r0, Z+
    30a6:	61 50       	subi	r22, 0x01	; 1
    30a8:	70 40       	sbci	r23, 0x00	; 0
    30aa:	01 10       	cpse	r0, r1
    30ac:	d8 f7       	brcc	.-10     	; 0x30a4 <strnlen_P+0x2>
    30ae:	80 95       	com	r24
    30b0:	90 95       	com	r25
    30b2:	8e 0f       	add	r24, r30
    30b4:	9f 1f       	adc	r25, r31
    30b6:	08 95       	ret

000030b8 <memcpy>:
    30b8:	fb 01       	movw	r30, r22
    30ba:	dc 01       	movw	r26, r24
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <memcpy+0xa>
    30be:	01 90       	ld	r0, Z+
    30c0:	0d 92       	st	X+, r0
    30c2:	41 50       	subi	r20, 0x01	; 1
    30c4:	50 40       	sbci	r21, 0x00	; 0
    30c6:	d8 f7       	brcc	.-10     	; 0x30be <memcpy+0x6>
    30c8:	08 95       	ret

000030ca <memset>:
    30ca:	dc 01       	movw	r26, r24
    30cc:	01 c0       	rjmp	.+2      	; 0x30d0 <memset+0x6>
    30ce:	6d 93       	st	X+, r22
    30d0:	41 50       	subi	r20, 0x01	; 1
    30d2:	50 40       	sbci	r21, 0x00	; 0
    30d4:	e0 f7       	brcc	.-8      	; 0x30ce <memset+0x4>
    30d6:	08 95       	ret

000030d8 <strcmp>:
    30d8:	fb 01       	movw	r30, r22
    30da:	dc 01       	movw	r26, r24
    30dc:	8d 91       	ld	r24, X+
    30de:	01 90       	ld	r0, Z+
    30e0:	80 19       	sub	r24, r0
    30e2:	01 10       	cpse	r0, r1
    30e4:	d9 f3       	breq	.-10     	; 0x30dc <strcmp+0x4>
    30e6:	99 0b       	sbc	r25, r25
    30e8:	08 95       	ret

000030ea <strcpy>:
    30ea:	fb 01       	movw	r30, r22
    30ec:	dc 01       	movw	r26, r24
    30ee:	01 90       	ld	r0, Z+
    30f0:	0d 92       	st	X+, r0
    30f2:	00 20       	and	r0, r0
    30f4:	e1 f7       	brne	.-8      	; 0x30ee <strcpy+0x4>
    30f6:	08 95       	ret

000030f8 <strnlen>:
    30f8:	fc 01       	movw	r30, r24
    30fa:	61 50       	subi	r22, 0x01	; 1
    30fc:	70 40       	sbci	r23, 0x00	; 0
    30fe:	01 90       	ld	r0, Z+
    3100:	01 10       	cpse	r0, r1
    3102:	d8 f7       	brcc	.-10     	; 0x30fa <strnlen+0x2>
    3104:	80 95       	com	r24
    3106:	90 95       	com	r25
    3108:	8e 0f       	add	r24, r30
    310a:	9f 1f       	adc	r25, r31
    310c:	08 95       	ret

0000310e <fputc>:
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	fb 01       	movw	r30, r22
    3118:	23 81       	ldd	r18, Z+3	; 0x03
    311a:	21 fd       	sbrc	r18, 1
    311c:	03 c0       	rjmp	.+6      	; 0x3124 <fputc+0x16>
    311e:	8f ef       	ldi	r24, 0xFF	; 255
    3120:	9f ef       	ldi	r25, 0xFF	; 255
    3122:	2c c0       	rjmp	.+88     	; 0x317c <fputc+0x6e>
    3124:	22 ff       	sbrs	r18, 2
    3126:	16 c0       	rjmp	.+44     	; 0x3154 <fputc+0x46>
    3128:	46 81       	ldd	r20, Z+6	; 0x06
    312a:	57 81       	ldd	r21, Z+7	; 0x07
    312c:	24 81       	ldd	r18, Z+4	; 0x04
    312e:	35 81       	ldd	r19, Z+5	; 0x05
    3130:	42 17       	cp	r20, r18
    3132:	53 07       	cpc	r21, r19
    3134:	44 f4       	brge	.+16     	; 0x3146 <fputc+0x38>
    3136:	a0 81       	ld	r26, Z
    3138:	b1 81       	ldd	r27, Z+1	; 0x01
    313a:	9d 01       	movw	r18, r26
    313c:	2f 5f       	subi	r18, 0xFF	; 255
    313e:	3f 4f       	sbci	r19, 0xFF	; 255
    3140:	20 83       	st	Z, r18
    3142:	31 83       	std	Z+1, r19	; 0x01
    3144:	8c 93       	st	X, r24
    3146:	26 81       	ldd	r18, Z+6	; 0x06
    3148:	37 81       	ldd	r19, Z+7	; 0x07
    314a:	2f 5f       	subi	r18, 0xFF	; 255
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	26 83       	std	Z+6, r18	; 0x06
    3150:	37 83       	std	Z+7, r19	; 0x07
    3152:	14 c0       	rjmp	.+40     	; 0x317c <fputc+0x6e>
    3154:	8b 01       	movw	r16, r22
    3156:	ec 01       	movw	r28, r24
    3158:	fb 01       	movw	r30, r22
    315a:	00 84       	ldd	r0, Z+8	; 0x08
    315c:	f1 85       	ldd	r31, Z+9	; 0x09
    315e:	e0 2d       	mov	r30, r0
    3160:	19 95       	eicall
    3162:	89 2b       	or	r24, r25
    3164:	e1 f6       	brne	.-72     	; 0x311e <fputc+0x10>
    3166:	d8 01       	movw	r26, r16
    3168:	16 96       	adiw	r26, 0x06	; 6
    316a:	8d 91       	ld	r24, X+
    316c:	9c 91       	ld	r25, X
    316e:	17 97       	sbiw	r26, 0x07	; 7
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	16 96       	adiw	r26, 0x06	; 6
    3174:	8d 93       	st	X+, r24
    3176:	9c 93       	st	X, r25
    3178:	17 97       	sbiw	r26, 0x07	; 7
    317a:	ce 01       	movw	r24, r28
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	08 95       	ret

00003186 <puts>:
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	e0 91 9b 63 	lds	r30, 0x639B	; 0x80639b <__iob+0x2>
    3192:	f0 91 9c 63 	lds	r31, 0x639C	; 0x80639c <__iob+0x3>
    3196:	23 81       	ldd	r18, Z+3	; 0x03
    3198:	21 ff       	sbrs	r18, 1
    319a:	1b c0       	rjmp	.+54     	; 0x31d2 <puts+0x4c>
    319c:	8c 01       	movw	r16, r24
    319e:	d0 e0       	ldi	r29, 0x00	; 0
    31a0:	c0 e0       	ldi	r28, 0x00	; 0
    31a2:	f8 01       	movw	r30, r16
    31a4:	81 91       	ld	r24, Z+
    31a6:	8f 01       	movw	r16, r30
    31a8:	60 91 9b 63 	lds	r22, 0x639B	; 0x80639b <__iob+0x2>
    31ac:	70 91 9c 63 	lds	r23, 0x639C	; 0x80639c <__iob+0x3>
    31b0:	db 01       	movw	r26, r22
    31b2:	18 96       	adiw	r26, 0x08	; 8
    31b4:	ed 91       	ld	r30, X+
    31b6:	fc 91       	ld	r31, X
    31b8:	19 97       	sbiw	r26, 0x09	; 9
    31ba:	88 23       	and	r24, r24
    31bc:	31 f0       	breq	.+12     	; 0x31ca <puts+0x44>
    31be:	19 95       	eicall
    31c0:	89 2b       	or	r24, r25
    31c2:	79 f3       	breq	.-34     	; 0x31a2 <puts+0x1c>
    31c4:	df ef       	ldi	r29, 0xFF	; 255
    31c6:	cf ef       	ldi	r28, 0xFF	; 255
    31c8:	ec cf       	rjmp	.-40     	; 0x31a2 <puts+0x1c>
    31ca:	8a e0       	ldi	r24, 0x0A	; 10
    31cc:	19 95       	eicall
    31ce:	89 2b       	or	r24, r25
    31d0:	19 f0       	breq	.+6      	; 0x31d8 <puts+0x52>
    31d2:	8f ef       	ldi	r24, 0xFF	; 255
    31d4:	9f ef       	ldi	r25, 0xFF	; 255
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <puts+0x56>
    31d8:	8d 2f       	mov	r24, r29
    31da:	9c 2f       	mov	r25, r28
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	08 95       	ret

000031e6 <scanf>:
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	ae 01       	movw	r20, r28
    31f0:	4a 5f       	subi	r20, 0xFA	; 250
    31f2:	5f 4f       	sbci	r21, 0xFF	; 255
    31f4:	fa 01       	movw	r30, r20
    31f6:	61 91       	ld	r22, Z+
    31f8:	71 91       	ld	r23, Z+
    31fa:	af 01       	movw	r20, r30
    31fc:	80 91 99 63 	lds	r24, 0x6399	; 0x806399 <__iob>
    3200:	90 91 9a 63 	lds	r25, 0x639A	; 0x80639a <__iob+0x1>
    3204:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <vfscanf>
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	08 95       	ret

0000320e <snprintf>:
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	2e 97       	sbiw	r28, 0x0e	; 14
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0e 89       	ldd	r16, Y+22	; 0x16
    3222:	1f 89       	ldd	r17, Y+23	; 0x17
    3224:	88 8d       	ldd	r24, Y+24	; 0x18
    3226:	99 8d       	ldd	r25, Y+25	; 0x19
    3228:	26 e0       	ldi	r18, 0x06	; 6
    322a:	2c 83       	std	Y+4, r18	; 0x04
    322c:	09 83       	std	Y+1, r16	; 0x01
    322e:	1a 83       	std	Y+2, r17	; 0x02
    3230:	97 ff       	sbrs	r25, 7
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <snprintf+0x2a>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e8       	ldi	r25, 0x80	; 128
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	9e 83       	std	Y+6, r25	; 0x06
    323e:	ae 01       	movw	r20, r28
    3240:	44 5e       	subi	r20, 0xE4	; 228
    3242:	5f 4f       	sbci	r21, 0xFF	; 255
    3244:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3246:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3248:	ce 01       	movw	r24, r28
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	0e 94 b7 13 	call	0x276e	; 0x276e <vfprintf>
    3250:	4d 81       	ldd	r20, Y+5	; 0x05
    3252:	5e 81       	ldd	r21, Y+6	; 0x06
    3254:	57 fd       	sbrc	r21, 7
    3256:	0a c0       	rjmp	.+20     	; 0x326c <snprintf+0x5e>
    3258:	2f 81       	ldd	r18, Y+7	; 0x07
    325a:	38 85       	ldd	r19, Y+8	; 0x08
    325c:	42 17       	cp	r20, r18
    325e:	53 07       	cpc	r21, r19
    3260:	0c f4       	brge	.+2      	; 0x3264 <snprintf+0x56>
    3262:	9a 01       	movw	r18, r20
    3264:	f8 01       	movw	r30, r16
    3266:	e2 0f       	add	r30, r18
    3268:	f3 1f       	adc	r31, r19
    326a:	10 82       	st	Z, r1
    326c:	2e 96       	adiw	r28, 0x0e	; 14
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <sprintf>:
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	2e 97       	sbiw	r28, 0x0e	; 14
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0e 89       	ldd	r16, Y+22	; 0x16
    3290:	1f 89       	ldd	r17, Y+23	; 0x17
    3292:	86 e0       	ldi	r24, 0x06	; 6
    3294:	8c 83       	std	Y+4, r24	; 0x04
    3296:	09 83       	std	Y+1, r16	; 0x01
    3298:	1a 83       	std	Y+2, r17	; 0x02
    329a:	8f ef       	ldi	r24, 0xFF	; 255
    329c:	9f e7       	ldi	r25, 0x7F	; 127
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	ae 01       	movw	r20, r28
    32a4:	46 5e       	subi	r20, 0xE6	; 230
    32a6:	5f 4f       	sbci	r21, 0xFF	; 255
    32a8:	68 8d       	ldd	r22, Y+24	; 0x18
    32aa:	79 8d       	ldd	r23, Y+25	; 0x19
    32ac:	ce 01       	movw	r24, r28
    32ae:	01 96       	adiw	r24, 0x01	; 1
    32b0:	0e 94 b7 13 	call	0x276e	; 0x276e <vfprintf>
    32b4:	ef 81       	ldd	r30, Y+7	; 0x07
    32b6:	f8 85       	ldd	r31, Y+8	; 0x08
    32b8:	e0 0f       	add	r30, r16
    32ba:	f1 1f       	adc	r31, r17
    32bc:	10 82       	st	Z, r1
    32be:	2e 96       	adiw	r28, 0x0e	; 14
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	08 95       	ret

000032ce <__ultoa_invert>:
    32ce:	fa 01       	movw	r30, r20
    32d0:	aa 27       	eor	r26, r26
    32d2:	28 30       	cpi	r18, 0x08	; 8
    32d4:	51 f1       	breq	.+84     	; 0x332a <__ultoa_invert+0x5c>
    32d6:	20 31       	cpi	r18, 0x10	; 16
    32d8:	81 f1       	breq	.+96     	; 0x333a <__ultoa_invert+0x6c>
    32da:	e8 94       	clt
    32dc:	6f 93       	push	r22
    32de:	6e 7f       	andi	r22, 0xFE	; 254
    32e0:	6e 5f       	subi	r22, 0xFE	; 254
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	8f 4f       	sbci	r24, 0xFF	; 255
    32e6:	9f 4f       	sbci	r25, 0xFF	; 255
    32e8:	af 4f       	sbci	r26, 0xFF	; 255
    32ea:	b1 e0       	ldi	r27, 0x01	; 1
    32ec:	3e d0       	rcall	.+124    	; 0x336a <__ultoa_invert+0x9c>
    32ee:	b4 e0       	ldi	r27, 0x04	; 4
    32f0:	3c d0       	rcall	.+120    	; 0x336a <__ultoa_invert+0x9c>
    32f2:	67 0f       	add	r22, r23
    32f4:	78 1f       	adc	r23, r24
    32f6:	89 1f       	adc	r24, r25
    32f8:	9a 1f       	adc	r25, r26
    32fa:	a1 1d       	adc	r26, r1
    32fc:	68 0f       	add	r22, r24
    32fe:	79 1f       	adc	r23, r25
    3300:	8a 1f       	adc	r24, r26
    3302:	91 1d       	adc	r25, r1
    3304:	a1 1d       	adc	r26, r1
    3306:	6a 0f       	add	r22, r26
    3308:	71 1d       	adc	r23, r1
    330a:	81 1d       	adc	r24, r1
    330c:	91 1d       	adc	r25, r1
    330e:	a1 1d       	adc	r26, r1
    3310:	20 d0       	rcall	.+64     	; 0x3352 <__ultoa_invert+0x84>
    3312:	09 f4       	brne	.+2      	; 0x3316 <__ultoa_invert+0x48>
    3314:	68 94       	set
    3316:	3f 91       	pop	r19
    3318:	2a e0       	ldi	r18, 0x0A	; 10
    331a:	26 9f       	mul	r18, r22
    331c:	11 24       	eor	r1, r1
    331e:	30 19       	sub	r19, r0
    3320:	30 5d       	subi	r19, 0xD0	; 208
    3322:	31 93       	st	Z+, r19
    3324:	de f6       	brtc	.-74     	; 0x32dc <__ultoa_invert+0xe>
    3326:	cf 01       	movw	r24, r30
    3328:	08 95       	ret
    332a:	46 2f       	mov	r20, r22
    332c:	47 70       	andi	r20, 0x07	; 7
    332e:	40 5d       	subi	r20, 0xD0	; 208
    3330:	41 93       	st	Z+, r20
    3332:	b3 e0       	ldi	r27, 0x03	; 3
    3334:	0f d0       	rcall	.+30     	; 0x3354 <__ultoa_invert+0x86>
    3336:	c9 f7       	brne	.-14     	; 0x332a <__ultoa_invert+0x5c>
    3338:	f6 cf       	rjmp	.-20     	; 0x3326 <__ultoa_invert+0x58>
    333a:	46 2f       	mov	r20, r22
    333c:	4f 70       	andi	r20, 0x0F	; 15
    333e:	40 5d       	subi	r20, 0xD0	; 208
    3340:	4a 33       	cpi	r20, 0x3A	; 58
    3342:	18 f0       	brcs	.+6      	; 0x334a <__ultoa_invert+0x7c>
    3344:	49 5d       	subi	r20, 0xD9	; 217
    3346:	31 fd       	sbrc	r19, 1
    3348:	40 52       	subi	r20, 0x20	; 32
    334a:	41 93       	st	Z+, r20
    334c:	02 d0       	rcall	.+4      	; 0x3352 <__ultoa_invert+0x84>
    334e:	a9 f7       	brne	.-22     	; 0x333a <__ultoa_invert+0x6c>
    3350:	ea cf       	rjmp	.-44     	; 0x3326 <__ultoa_invert+0x58>
    3352:	b4 e0       	ldi	r27, 0x04	; 4
    3354:	a6 95       	lsr	r26
    3356:	97 95       	ror	r25
    3358:	87 95       	ror	r24
    335a:	77 95       	ror	r23
    335c:	67 95       	ror	r22
    335e:	ba 95       	dec	r27
    3360:	c9 f7       	brne	.-14     	; 0x3354 <__ultoa_invert+0x86>
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	61 05       	cpc	r22, r1
    3366:	71 05       	cpc	r23, r1
    3368:	08 95       	ret
    336a:	9b 01       	movw	r18, r22
    336c:	ac 01       	movw	r20, r24
    336e:	0a 2e       	mov	r0, r26
    3370:	06 94       	lsr	r0
    3372:	57 95       	ror	r21
    3374:	47 95       	ror	r20
    3376:	37 95       	ror	r19
    3378:	27 95       	ror	r18
    337a:	ba 95       	dec	r27
    337c:	c9 f7       	brne	.-14     	; 0x3370 <__ultoa_invert+0xa2>
    337e:	62 0f       	add	r22, r18
    3380:	73 1f       	adc	r23, r19
    3382:	84 1f       	adc	r24, r20
    3384:	95 1f       	adc	r25, r21
    3386:	a0 1d       	adc	r26, r0
    3388:	08 95       	ret

0000338a <putval>:
    338a:	20 fd       	sbrc	r18, 0
    338c:	09 c0       	rjmp	.+18     	; 0x33a0 <putval+0x16>
    338e:	fc 01       	movw	r30, r24
    3390:	23 fd       	sbrc	r18, 3
    3392:	05 c0       	rjmp	.+10     	; 0x339e <putval+0x14>
    3394:	22 ff       	sbrs	r18, 2
    3396:	02 c0       	rjmp	.+4      	; 0x339c <putval+0x12>
    3398:	73 83       	std	Z+3, r23	; 0x03
    339a:	62 83       	std	Z+2, r22	; 0x02
    339c:	51 83       	std	Z+1, r21	; 0x01
    339e:	40 83       	st	Z, r20
    33a0:	08 95       	ret

000033a2 <mulacc>:
    33a2:	44 fd       	sbrc	r20, 4
    33a4:	17 c0       	rjmp	.+46     	; 0x33d4 <mulacc+0x32>
    33a6:	46 fd       	sbrc	r20, 6
    33a8:	17 c0       	rjmp	.+46     	; 0x33d8 <mulacc+0x36>
    33aa:	ab 01       	movw	r20, r22
    33ac:	bc 01       	movw	r22, r24
    33ae:	da 01       	movw	r26, r20
    33b0:	fb 01       	movw	r30, r22
    33b2:	aa 0f       	add	r26, r26
    33b4:	bb 1f       	adc	r27, r27
    33b6:	ee 1f       	adc	r30, r30
    33b8:	ff 1f       	adc	r31, r31
    33ba:	10 94       	com	r1
    33bc:	d1 f7       	brne	.-12     	; 0x33b2 <mulacc+0x10>
    33be:	4a 0f       	add	r20, r26
    33c0:	5b 1f       	adc	r21, r27
    33c2:	6e 1f       	adc	r22, r30
    33c4:	7f 1f       	adc	r23, r31
    33c6:	cb 01       	movw	r24, r22
    33c8:	ba 01       	movw	r22, r20
    33ca:	66 0f       	add	r22, r22
    33cc:	77 1f       	adc	r23, r23
    33ce:	88 1f       	adc	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	09 c0       	rjmp	.+18     	; 0x33e6 <mulacc+0x44>
    33d4:	33 e0       	ldi	r19, 0x03	; 3
    33d6:	01 c0       	rjmp	.+2      	; 0x33da <mulacc+0x38>
    33d8:	34 e0       	ldi	r19, 0x04	; 4
    33da:	66 0f       	add	r22, r22
    33dc:	77 1f       	adc	r23, r23
    33de:	88 1f       	adc	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	31 50       	subi	r19, 0x01	; 1
    33e4:	d1 f7       	brne	.-12     	; 0x33da <mulacc+0x38>
    33e6:	62 0f       	add	r22, r18
    33e8:	71 1d       	adc	r23, r1
    33ea:	81 1d       	adc	r24, r1
    33ec:	91 1d       	adc	r25, r1
    33ee:	08 95       	ret

000033f0 <skip_spaces>:
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	8c 01       	movw	r16, r24
    33fa:	c8 01       	movw	r24, r16
    33fc:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    3400:	ec 01       	movw	r28, r24
    3402:	97 fd       	sbrc	r25, 7
    3404:	08 c0       	rjmp	.+16     	; 0x3416 <skip_spaces+0x26>
    3406:	0e 94 a3 1c 	call	0x3946	; 0x3946 <isspace>
    340a:	89 2b       	or	r24, r25
    340c:	b1 f7       	brne	.-20     	; 0x33fa <skip_spaces+0xa>
    340e:	b8 01       	movw	r22, r16
    3410:	ce 01       	movw	r24, r28
    3412:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <ungetc>
    3416:	ce 01       	movw	r24, r28
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	08 95       	ret

00003422 <conv_int>:
    3422:	8f 92       	push	r8
    3424:	9f 92       	push	r9
    3426:	af 92       	push	r10
    3428:	bf 92       	push	r11
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	8c 01       	movw	r16, r24
    3438:	d6 2f       	mov	r29, r22
    343a:	7a 01       	movw	r14, r20
    343c:	b2 2e       	mov	r11, r18
    343e:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    3442:	9c 01       	movw	r18, r24
    3444:	33 27       	eor	r19, r19
    3446:	2b 32       	cpi	r18, 0x2B	; 43
    3448:	31 05       	cpc	r19, r1
    344a:	31 f0       	breq	.+12     	; 0x3458 <conv_int+0x36>
    344c:	2d 32       	cpi	r18, 0x2D	; 45
    344e:	31 05       	cpc	r19, r1
    3450:	61 f4       	brne	.+24     	; 0x346a <conv_int+0x48>
    3452:	8b 2d       	mov	r24, r11
    3454:	80 68       	ori	r24, 0x80	; 128
    3456:	b8 2e       	mov	r11, r24
    3458:	d1 50       	subi	r29, 0x01	; 1
    345a:	11 f4       	brne	.+4      	; 0x3460 <conv_int+0x3e>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	68 c0       	rjmp	.+208    	; 0x3530 <conv_int+0x10e>
    3460:	c8 01       	movw	r24, r16
    3462:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    3466:	97 fd       	sbrc	r25, 7
    3468:	f9 cf       	rjmp	.-14     	; 0x345c <conv_int+0x3a>
    346a:	cb 2d       	mov	r28, r11
    346c:	cd 7f       	andi	r28, 0xFD	; 253
    346e:	2b 2d       	mov	r18, r11
    3470:	20 73       	andi	r18, 0x30	; 48
    3472:	09 f5       	brne	.+66     	; 0x34b6 <conv_int+0x94>
    3474:	80 33       	cpi	r24, 0x30	; 48
    3476:	f9 f4       	brne	.+62     	; 0x34b6 <conv_int+0x94>
    3478:	aa 24       	eor	r10, r10
    347a:	aa 94       	dec	r10
    347c:	ad 0e       	add	r10, r29
    347e:	09 f4       	brne	.+2      	; 0x3482 <conv_int+0x60>
    3480:	43 c0       	rjmp	.+134    	; 0x3508 <conv_int+0xe6>
    3482:	c8 01       	movw	r24, r16
    3484:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    3488:	97 fd       	sbrc	r25, 7
    348a:	3e c0       	rjmp	.+124    	; 0x3508 <conv_int+0xe6>
    348c:	9c 01       	movw	r18, r24
    348e:	2f 7d       	andi	r18, 0xDF	; 223
    3490:	33 27       	eor	r19, r19
    3492:	28 35       	cpi	r18, 0x58	; 88
    3494:	31 05       	cpc	r19, r1
    3496:	49 f4       	brne	.+18     	; 0x34aa <conv_int+0x88>
    3498:	c2 64       	ori	r28, 0x42	; 66
    349a:	d2 50       	subi	r29, 0x02	; 2
    349c:	a9 f1       	breq	.+106    	; 0x3508 <conv_int+0xe6>
    349e:	c8 01       	movw	r24, r16
    34a0:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    34a4:	97 ff       	sbrs	r25, 7
    34a6:	07 c0       	rjmp	.+14     	; 0x34b6 <conv_int+0x94>
    34a8:	2f c0       	rjmp	.+94     	; 0x3508 <conv_int+0xe6>
    34aa:	b6 fe       	sbrs	r11, 6
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <conv_int+0x90>
    34ae:	c2 60       	ori	r28, 0x02	; 2
    34b0:	01 c0       	rjmp	.+2      	; 0x34b4 <conv_int+0x92>
    34b2:	c2 61       	ori	r28, 0x12	; 18
    34b4:	da 2d       	mov	r29, r10
    34b6:	81 2c       	mov	r8, r1
    34b8:	91 2c       	mov	r9, r1
    34ba:	54 01       	movw	r10, r8
    34bc:	20 ed       	ldi	r18, 0xD0	; 208
    34be:	28 0f       	add	r18, r24
    34c0:	28 30       	cpi	r18, 0x08	; 8
    34c2:	80 f0       	brcs	.+32     	; 0x34e4 <conv_int+0xc2>
    34c4:	c4 ff       	sbrs	r28, 4
    34c6:	04 c0       	rjmp	.+8      	; 0x34d0 <conv_int+0xae>
    34c8:	b8 01       	movw	r22, r16
    34ca:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <ungetc>
    34ce:	19 c0       	rjmp	.+50     	; 0x3502 <conv_int+0xe0>
    34d0:	2a 30       	cpi	r18, 0x0A	; 10
    34d2:	40 f0       	brcs	.+16     	; 0x34e4 <conv_int+0xc2>
    34d4:	c6 ff       	sbrs	r28, 6
    34d6:	f8 cf       	rjmp	.-16     	; 0x34c8 <conv_int+0xa6>
    34d8:	2f 7d       	andi	r18, 0xDF	; 223
    34da:	3f ee       	ldi	r19, 0xEF	; 239
    34dc:	32 0f       	add	r19, r18
    34de:	36 30       	cpi	r19, 0x06	; 6
    34e0:	98 f7       	brcc	.-26     	; 0x34c8 <conv_int+0xa6>
    34e2:	27 50       	subi	r18, 0x07	; 7
    34e4:	4c 2f       	mov	r20, r28
    34e6:	c5 01       	movw	r24, r10
    34e8:	b4 01       	movw	r22, r8
    34ea:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <mulacc>
    34ee:	4b 01       	movw	r8, r22
    34f0:	5c 01       	movw	r10, r24
    34f2:	c2 60       	ori	r28, 0x02	; 2
    34f4:	d1 50       	subi	r29, 0x01	; 1
    34f6:	59 f0       	breq	.+22     	; 0x350e <conv_int+0xec>
    34f8:	c8 01       	movw	r24, r16
    34fa:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    34fe:	97 ff       	sbrs	r25, 7
    3500:	dd cf       	rjmp	.-70     	; 0x34bc <conv_int+0x9a>
    3502:	c1 fd       	sbrc	r28, 1
    3504:	04 c0       	rjmp	.+8      	; 0x350e <conv_int+0xec>
    3506:	aa cf       	rjmp	.-172    	; 0x345c <conv_int+0x3a>
    3508:	81 2c       	mov	r8, r1
    350a:	91 2c       	mov	r9, r1
    350c:	54 01       	movw	r10, r8
    350e:	c7 ff       	sbrs	r28, 7
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <conv_int+0x100>
    3512:	b0 94       	com	r11
    3514:	a0 94       	com	r10
    3516:	90 94       	com	r9
    3518:	80 94       	com	r8
    351a:	81 1c       	adc	r8, r1
    351c:	91 1c       	adc	r9, r1
    351e:	a1 1c       	adc	r10, r1
    3520:	b1 1c       	adc	r11, r1
    3522:	2c 2f       	mov	r18, r28
    3524:	b5 01       	movw	r22, r10
    3526:	a4 01       	movw	r20, r8
    3528:	c7 01       	movw	r24, r14
    352a:	0e 94 c5 19 	call	0x338a	; 0x338a <putval>
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	df 91       	pop	r29
    3532:	cf 91       	pop	r28
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	ff 90       	pop	r15
    353a:	ef 90       	pop	r14
    353c:	bf 90       	pop	r11
    353e:	af 90       	pop	r10
    3540:	9f 90       	pop	r9
    3542:	8f 90       	pop	r8
    3544:	08 95       	ret

00003546 <conv_brk>:
    3546:	5f 92       	push	r5
    3548:	6f 92       	push	r6
    354a:	7f 92       	push	r7
    354c:	8f 92       	push	r8
    354e:	9f 92       	push	r9
    3550:	af 92       	push	r10
    3552:	bf 92       	push	r11
    3554:	cf 92       	push	r12
    3556:	df 92       	push	r13
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	a0 97       	sbiw	r28, 0x20	; 32
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	5c 01       	movw	r10, r24
    3570:	96 2e       	mov	r9, r22
    3572:	7a 01       	movw	r14, r20
    3574:	f9 01       	movw	r30, r18
    3576:	8e 01       	movw	r16, r28
    3578:	0f 5f       	subi	r16, 0xFF	; 255
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	68 01       	movw	r12, r16
    357e:	80 e2       	ldi	r24, 0x20	; 32
    3580:	d8 01       	movw	r26, r16
    3582:	1d 92       	st	X+, r1
    3584:	8a 95       	dec	r24
    3586:	e9 f7       	brne	.-6      	; 0x3582 <conv_brk+0x3c>
    3588:	d5 01       	movw	r26, r10
    358a:	13 96       	adiw	r26, 0x03	; 3
    358c:	8c 90       	ld	r8, X
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	61 2c       	mov	r6, r1
    3594:	71 2c       	mov	r7, r1
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	61 e0       	ldi	r22, 0x01	; 1
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	83 fc       	sbrc	r8, 3
    359e:	25 91       	lpm	r18, Z+
    35a0:	83 fe       	sbrs	r8, 3
    35a2:	21 91       	ld	r18, Z+
    35a4:	8f 01       	movw	r16, r30
    35a6:	52 2e       	mov	r5, r18
    35a8:	21 11       	cpse	r18, r1
    35aa:	03 c0       	rjmp	.+6      	; 0x35b2 <conv_brk+0x6c>
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	92 c0       	rjmp	.+292    	; 0x36d6 <conv_brk+0x190>
    35b2:	2e 35       	cpi	r18, 0x5E	; 94
    35b4:	11 f4       	brne	.+4      	; 0x35ba <conv_brk+0x74>
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	51 f1       	breq	.+84     	; 0x360e <conv_brk+0xc8>
    35ba:	43 2f       	mov	r20, r19
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	48 17       	cp	r20, r24
    35c0:	59 07       	cpc	r21, r25
    35c2:	3c f4       	brge	.+14     	; 0x35d2 <conv_brk+0x8c>
    35c4:	2d 35       	cpi	r18, 0x5D	; 93
    35c6:	59 f1       	breq	.+86     	; 0x361e <conv_brk+0xd8>
    35c8:	2d 32       	cpi	r18, 0x2D	; 45
    35ca:	19 f4       	brne	.+6      	; 0x35d2 <conv_brk+0x8c>
    35cc:	77 20       	and	r7, r7
    35ce:	09 f1       	breq	.+66     	; 0x3612 <conv_brk+0xcc>
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <conv_brk+0x92>
    35d2:	77 20       	and	r7, r7
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <conv_brk+0x92>
    35d6:	6a c0       	rjmp	.+212    	; 0x36ac <conv_brk+0x166>
    35d8:	45 2d       	mov	r20, r5
    35da:	46 95       	lsr	r20
    35dc:	46 95       	lsr	r20
    35de:	46 95       	lsr	r20
    35e0:	d6 01       	movw	r26, r12
    35e2:	a4 0f       	add	r26, r20
    35e4:	b1 1d       	adc	r27, r1
    35e6:	45 2d       	mov	r20, r5
    35e8:	47 70       	andi	r20, 0x07	; 7
    35ea:	8b 01       	movw	r16, r22
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <conv_brk+0xac>
    35ee:	00 0f       	add	r16, r16
    35f0:	11 1f       	adc	r17, r17
    35f2:	4a 95       	dec	r20
    35f4:	e2 f7       	brpl	.-8      	; 0x35ee <conv_brk+0xa8>
    35f6:	a8 01       	movw	r20, r16
    35f8:	5c 91       	ld	r21, X
    35fa:	45 2b       	or	r20, r21
    35fc:	4c 93       	st	X, r20
    35fe:	65 14       	cp	r6, r5
    3600:	59 f0       	breq	.+22     	; 0x3618 <conv_brk+0xd2>
    3602:	56 14       	cp	r5, r6
    3604:	10 f4       	brcc	.+4      	; 0x360a <conv_brk+0xc4>
    3606:	53 94       	inc	r5
    3608:	e7 cf       	rjmp	.-50     	; 0x35d8 <conv_brk+0x92>
    360a:	5a 94       	dec	r5
    360c:	e5 cf       	rjmp	.-54     	; 0x35d8 <conv_brk+0x92>
    360e:	31 e0       	ldi	r19, 0x01	; 1
    3610:	04 c0       	rjmp	.+8      	; 0x361a <conv_brk+0xd4>
    3612:	77 24       	eor	r7, r7
    3614:	73 94       	inc	r7
    3616:	01 c0       	rjmp	.+2      	; 0x361a <conv_brk+0xd4>
    3618:	71 2c       	mov	r7, r1
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	bf cf       	rjmp	.-130    	; 0x359c <conv_brk+0x56>
    361e:	77 20       	and	r7, r7
    3620:	19 f0       	breq	.+6      	; 0x3628 <conv_brk+0xe2>
    3622:	8e 81       	ldd	r24, Y+6	; 0x06
    3624:	80 62       	ori	r24, 0x20	; 32
    3626:	8e 83       	std	Y+6, r24	; 0x06
    3628:	31 11       	cpse	r19, r1
    362a:	03 c0       	rjmp	.+6      	; 0x3632 <conv_brk+0xec>
    362c:	88 24       	eor	r8, r8
    362e:	83 94       	inc	r8
    3630:	17 c0       	rjmp	.+46     	; 0x3660 <conv_brk+0x11a>
    3632:	f6 01       	movw	r30, r12
    3634:	9e 01       	movw	r18, r28
    3636:	2f 5d       	subi	r18, 0xDF	; 223
    3638:	3f 4f       	sbci	r19, 0xFF	; 255
    363a:	80 81       	ld	r24, Z
    363c:	80 95       	com	r24
    363e:	81 93       	st	Z+, r24
    3640:	2e 17       	cp	r18, r30
    3642:	3f 07       	cpc	r19, r31
    3644:	d1 f7       	brne	.-12     	; 0x363a <conv_brk+0xf4>
    3646:	f2 cf       	rjmp	.-28     	; 0x362c <conv_brk+0xe6>
    3648:	e1 14       	cp	r14, r1
    364a:	f1 04       	cpc	r15, r1
    364c:	29 f0       	breq	.+10     	; 0x3658 <conv_brk+0x112>
    364e:	d7 01       	movw	r26, r14
    3650:	8c 93       	st	X, r24
    3652:	f7 01       	movw	r30, r14
    3654:	31 96       	adiw	r30, 0x01	; 1
    3656:	7f 01       	movw	r14, r30
    3658:	9a 94       	dec	r9
    365a:	81 2c       	mov	r8, r1
    365c:	99 20       	and	r9, r9
    365e:	f9 f0       	breq	.+62     	; 0x369e <conv_brk+0x158>
    3660:	c5 01       	movw	r24, r10
    3662:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    3666:	97 fd       	sbrc	r25, 7
    3668:	18 c0       	rjmp	.+48     	; 0x369a <conv_brk+0x154>
    366a:	fc 01       	movw	r30, r24
    366c:	ff 27       	eor	r31, r31
    366e:	23 e0       	ldi	r18, 0x03	; 3
    3670:	f5 95       	asr	r31
    3672:	e7 95       	ror	r30
    3674:	2a 95       	dec	r18
    3676:	e1 f7       	brne	.-8      	; 0x3670 <conv_brk+0x12a>
    3678:	ec 0d       	add	r30, r12
    367a:	fd 1d       	adc	r31, r13
    367c:	20 81       	ld	r18, Z
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	ac 01       	movw	r20, r24
    3682:	47 70       	andi	r20, 0x07	; 7
    3684:	55 27       	eor	r21, r21
    3686:	02 c0       	rjmp	.+4      	; 0x368c <conv_brk+0x146>
    3688:	35 95       	asr	r19
    368a:	27 95       	ror	r18
    368c:	4a 95       	dec	r20
    368e:	e2 f7       	brpl	.-8      	; 0x3688 <conv_brk+0x142>
    3690:	20 fd       	sbrc	r18, 0
    3692:	da cf       	rjmp	.-76     	; 0x3648 <conv_brk+0x102>
    3694:	b5 01       	movw	r22, r10
    3696:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <ungetc>
    369a:	81 10       	cpse	r8, r1
    369c:	87 cf       	rjmp	.-242    	; 0x35ac <conv_brk+0x66>
    369e:	e1 14       	cp	r14, r1
    36a0:	f1 04       	cpc	r15, r1
    36a2:	11 f0       	breq	.+4      	; 0x36a8 <conv_brk+0x162>
    36a4:	d7 01       	movw	r26, r14
    36a6:	1c 92       	st	X, r1
    36a8:	c8 01       	movw	r24, r16
    36aa:	15 c0       	rjmp	.+42     	; 0x36d6 <conv_brk+0x190>
    36ac:	42 2f       	mov	r20, r18
    36ae:	46 95       	lsr	r20
    36b0:	46 95       	lsr	r20
    36b2:	46 95       	lsr	r20
    36b4:	d6 01       	movw	r26, r12
    36b6:	a4 0f       	add	r26, r20
    36b8:	b1 1d       	adc	r27, r1
    36ba:	42 2f       	mov	r20, r18
    36bc:	47 70       	andi	r20, 0x07	; 7
    36be:	8b 01       	movw	r16, r22
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <conv_brk+0x180>
    36c2:	00 0f       	add	r16, r16
    36c4:	11 1f       	adc	r17, r17
    36c6:	4a 95       	dec	r20
    36c8:	e2 f7       	brpl	.-8      	; 0x36c2 <conv_brk+0x17c>
    36ca:	a8 01       	movw	r20, r16
    36cc:	5c 91       	ld	r21, X
    36ce:	45 2b       	or	r20, r21
    36d0:	4c 93       	st	X, r20
    36d2:	62 2e       	mov	r6, r18
    36d4:	a2 cf       	rjmp	.-188    	; 0x361a <conv_brk+0xd4>
    36d6:	a0 96       	adiw	r28, 0x20	; 32
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	ff 90       	pop	r15
    36e6:	ef 90       	pop	r14
    36e8:	df 90       	pop	r13
    36ea:	cf 90       	pop	r12
    36ec:	bf 90       	pop	r11
    36ee:	af 90       	pop	r10
    36f0:	9f 90       	pop	r9
    36f2:	8f 90       	pop	r8
    36f4:	7f 90       	pop	r7
    36f6:	6f 90       	pop	r6
    36f8:	5f 90       	pop	r5
    36fa:	08 95       	ret

000036fc <vfscanf>:
    36fc:	5f 92       	push	r5
    36fe:	6f 92       	push	r6
    3700:	7f 92       	push	r7
    3702:	8f 92       	push	r8
    3704:	9f 92       	push	r9
    3706:	af 92       	push	r10
    3708:	bf 92       	push	r11
    370a:	cf 92       	push	r12
    370c:	df 92       	push	r13
    370e:	ef 92       	push	r14
    3710:	ff 92       	push	r15
    3712:	0f 93       	push	r16
    3714:	1f 93       	push	r17
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	6c 01       	movw	r12, r24
    371c:	eb 01       	movw	r28, r22
    371e:	5a 01       	movw	r10, r20
    3720:	fc 01       	movw	r30, r24
    3722:	16 82       	std	Z+6, r1	; 0x06
    3724:	17 82       	std	Z+7, r1	; 0x07
    3726:	51 2c       	mov	r5, r1
    3728:	f6 01       	movw	r30, r12
    372a:	e3 80       	ldd	r14, Z+3	; 0x03
    372c:	fe 01       	movw	r30, r28
    372e:	e3 fc       	sbrc	r14, 3
    3730:	85 91       	lpm	r24, Z+
    3732:	e3 fe       	sbrs	r14, 3
    3734:	81 91       	ld	r24, Z+
    3736:	18 2f       	mov	r17, r24
    3738:	ef 01       	movw	r28, r30
    373a:	88 23       	and	r24, r24
    373c:	09 f4       	brne	.+2      	; 0x3740 <vfscanf+0x44>
    373e:	ee c0       	rjmp	.+476    	; 0x391c <vfscanf+0x220>
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 a3 1c 	call	0x3946	; 0x3946 <isspace>
    3746:	89 2b       	or	r24, r25
    3748:	21 f0       	breq	.+8      	; 0x3752 <vfscanf+0x56>
    374a:	c6 01       	movw	r24, r12
    374c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <skip_spaces>
    3750:	eb cf       	rjmp	.-42     	; 0x3728 <vfscanf+0x2c>
    3752:	15 32       	cpi	r17, 0x25	; 37
    3754:	41 f4       	brne	.+16     	; 0x3766 <vfscanf+0x6a>
    3756:	fe 01       	movw	r30, r28
    3758:	e3 fc       	sbrc	r14, 3
    375a:	15 91       	lpm	r17, Z+
    375c:	e3 fe       	sbrs	r14, 3
    375e:	11 91       	ld	r17, Z+
    3760:	ef 01       	movw	r28, r30
    3762:	15 32       	cpi	r17, 0x25	; 37
    3764:	81 f4       	brne	.+32     	; 0x3786 <vfscanf+0x8a>
    3766:	c6 01       	movw	r24, r12
    3768:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    376c:	97 fd       	sbrc	r25, 7
    376e:	d4 c0       	rjmp	.+424    	; 0x3918 <vfscanf+0x21c>
    3770:	41 2f       	mov	r20, r17
    3772:	50 e0       	ldi	r21, 0x00	; 0
    3774:	9c 01       	movw	r18, r24
    3776:	33 27       	eor	r19, r19
    3778:	24 17       	cp	r18, r20
    377a:	35 07       	cpc	r19, r21
    377c:	a9 f2       	breq	.-86     	; 0x3728 <vfscanf+0x2c>
    377e:	b6 01       	movw	r22, r12
    3780:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <ungetc>
    3784:	cb c0       	rjmp	.+406    	; 0x391c <vfscanf+0x220>
    3786:	1a 32       	cpi	r17, 0x2A	; 42
    3788:	39 f4       	brne	.+14     	; 0x3798 <vfscanf+0x9c>
    378a:	e3 fc       	sbrc	r14, 3
    378c:	15 91       	lpm	r17, Z+
    378e:	e3 fe       	sbrs	r14, 3
    3790:	11 91       	ld	r17, Z+
    3792:	ef 01       	movw	r28, r30
    3794:	01 e0       	ldi	r16, 0x01	; 1
    3796:	01 c0       	rjmp	.+2      	; 0x379a <vfscanf+0x9e>
    3798:	00 e0       	ldi	r16, 0x00	; 0
    379a:	f1 2c       	mov	r15, r1
    379c:	20 ed       	ldi	r18, 0xD0	; 208
    379e:	21 0f       	add	r18, r17
    37a0:	2a 30       	cpi	r18, 0x0A	; 10
    37a2:	80 f4       	brcc	.+32     	; 0x37c4 <vfscanf+0xc8>
    37a4:	02 60       	ori	r16, 0x02	; 2
    37a6:	6f 2d       	mov	r22, r15
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	40 e2       	ldi	r20, 0x20	; 32
    37b0:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <mulacc>
    37b4:	f6 2e       	mov	r15, r22
    37b6:	fe 01       	movw	r30, r28
    37b8:	e3 fc       	sbrc	r14, 3
    37ba:	15 91       	lpm	r17, Z+
    37bc:	e3 fe       	sbrs	r14, 3
    37be:	11 91       	ld	r17, Z+
    37c0:	ef 01       	movw	r28, r30
    37c2:	ec cf       	rjmp	.-40     	; 0x379c <vfscanf+0xa0>
    37c4:	01 ff       	sbrs	r16, 1
    37c6:	03 c0       	rjmp	.+6      	; 0x37ce <vfscanf+0xd2>
    37c8:	f1 10       	cpse	r15, r1
    37ca:	03 c0       	rjmp	.+6      	; 0x37d2 <vfscanf+0xd6>
    37cc:	a7 c0       	rjmp	.+334    	; 0x391c <vfscanf+0x220>
    37ce:	ff 24       	eor	r15, r15
    37d0:	fa 94       	dec	r15
    37d2:	18 36       	cpi	r17, 0x68	; 104
    37d4:	19 f0       	breq	.+6      	; 0x37dc <vfscanf+0xe0>
    37d6:	1c 36       	cpi	r17, 0x6C	; 108
    37d8:	51 f0       	breq	.+20     	; 0x37ee <vfscanf+0xf2>
    37da:	10 c0       	rjmp	.+32     	; 0x37fc <vfscanf+0x100>
    37dc:	fe 01       	movw	r30, r28
    37de:	e3 fc       	sbrc	r14, 3
    37e0:	15 91       	lpm	r17, Z+
    37e2:	e3 fe       	sbrs	r14, 3
    37e4:	11 91       	ld	r17, Z+
    37e6:	ef 01       	movw	r28, r30
    37e8:	18 36       	cpi	r17, 0x68	; 104
    37ea:	41 f4       	brne	.+16     	; 0x37fc <vfscanf+0x100>
    37ec:	08 60       	ori	r16, 0x08	; 8
    37ee:	04 60       	ori	r16, 0x04	; 4
    37f0:	fe 01       	movw	r30, r28
    37f2:	e3 fc       	sbrc	r14, 3
    37f4:	15 91       	lpm	r17, Z+
    37f6:	e3 fe       	sbrs	r14, 3
    37f8:	11 91       	ld	r17, Z+
    37fa:	ef 01       	movw	r28, r30
    37fc:	11 23       	and	r17, r17
    37fe:	09 f4       	brne	.+2      	; 0x3802 <vfscanf+0x106>
    3800:	8d c0       	rjmp	.+282    	; 0x391c <vfscanf+0x220>
    3802:	61 2f       	mov	r22, r17
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	82 e1       	ldi	r24, 0x12	; 18
    3808:	93 e0       	ldi	r25, 0x03	; 3
    380a:	0e 94 ac 1c 	call	0x3958	; 0x3958 <strchr_P>
    380e:	89 2b       	or	r24, r25
    3810:	09 f4       	brne	.+2      	; 0x3814 <vfscanf+0x118>
    3812:	84 c0       	rjmp	.+264    	; 0x391c <vfscanf+0x220>
    3814:	00 fd       	sbrc	r16, 0
    3816:	07 c0       	rjmp	.+14     	; 0x3826 <vfscanf+0x12a>
    3818:	f5 01       	movw	r30, r10
    381a:	80 80       	ld	r8, Z
    381c:	91 80       	ldd	r9, Z+1	; 0x01
    381e:	c5 01       	movw	r24, r10
    3820:	02 96       	adiw	r24, 0x02	; 2
    3822:	5c 01       	movw	r10, r24
    3824:	02 c0       	rjmp	.+4      	; 0x382a <vfscanf+0x12e>
    3826:	81 2c       	mov	r8, r1
    3828:	91 2c       	mov	r9, r1
    382a:	1e 36       	cpi	r17, 0x6E	; 110
    382c:	51 f4       	brne	.+20     	; 0x3842 <vfscanf+0x146>
    382e:	f6 01       	movw	r30, r12
    3830:	46 81       	ldd	r20, Z+6	; 0x06
    3832:	57 81       	ldd	r21, Z+7	; 0x07
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	20 2f       	mov	r18, r16
    383a:	c4 01       	movw	r24, r8
    383c:	0e 94 c5 19 	call	0x338a	; 0x338a <putval>
    3840:	73 cf       	rjmp	.-282    	; 0x3728 <vfscanf+0x2c>
    3842:	13 36       	cpi	r17, 0x63	; 99
    3844:	a9 f4       	brne	.+42     	; 0x3870 <vfscanf+0x174>
    3846:	01 fd       	sbrc	r16, 1
    3848:	02 c0       	rjmp	.+4      	; 0x384e <vfscanf+0x152>
    384a:	ff 24       	eor	r15, r15
    384c:	f3 94       	inc	r15
    384e:	c6 01       	movw	r24, r12
    3850:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    3854:	97 fd       	sbrc	r25, 7
    3856:	60 c0       	rjmp	.+192    	; 0x3918 <vfscanf+0x21c>
    3858:	81 14       	cp	r8, r1
    385a:	91 04       	cpc	r9, r1
    385c:	29 f0       	breq	.+10     	; 0x3868 <vfscanf+0x16c>
    385e:	f4 01       	movw	r30, r8
    3860:	80 83       	st	Z, r24
    3862:	c4 01       	movw	r24, r8
    3864:	01 96       	adiw	r24, 0x01	; 1
    3866:	4c 01       	movw	r8, r24
    3868:	fa 94       	dec	r15
    386a:	f1 10       	cpse	r15, r1
    386c:	f0 cf       	rjmp	.-32     	; 0x384e <vfscanf+0x152>
    386e:	50 c0       	rjmp	.+160    	; 0x3910 <vfscanf+0x214>
    3870:	1b 35       	cpi	r17, 0x5B	; 91
    3872:	59 f4       	brne	.+22     	; 0x388a <vfscanf+0x18e>
    3874:	9e 01       	movw	r18, r28
    3876:	a4 01       	movw	r20, r8
    3878:	6f 2d       	mov	r22, r15
    387a:	c6 01       	movw	r24, r12
    387c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <conv_brk>
    3880:	ec 01       	movw	r28, r24
    3882:	89 2b       	or	r24, r25
    3884:	09 f0       	breq	.+2      	; 0x3888 <vfscanf+0x18c>
    3886:	44 c0       	rjmp	.+136    	; 0x3910 <vfscanf+0x214>
    3888:	3e c0       	rjmp	.+124    	; 0x3906 <vfscanf+0x20a>
    388a:	c6 01       	movw	r24, r12
    388c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <skip_spaces>
    3890:	97 fd       	sbrc	r25, 7
    3892:	42 c0       	rjmp	.+132    	; 0x3918 <vfscanf+0x21c>
    3894:	1f 36       	cpi	r17, 0x6F	; 111
    3896:	61 f1       	breq	.+88     	; 0x38f0 <vfscanf+0x1f4>
    3898:	28 f4       	brcc	.+10     	; 0x38a4 <vfscanf+0x1a8>
    389a:	14 36       	cpi	r17, 0x64	; 100
    389c:	39 f1       	breq	.+78     	; 0x38ec <vfscanf+0x1f0>
    389e:	19 36       	cpi	r17, 0x69	; 105
    38a0:	51 f1       	breq	.+84     	; 0x38f6 <vfscanf+0x1fa>
    38a2:	28 c0       	rjmp	.+80     	; 0x38f4 <vfscanf+0x1f8>
    38a4:	13 37       	cpi	r17, 0x73	; 115
    38a6:	71 f0       	breq	.+28     	; 0x38c4 <vfscanf+0x1c8>
    38a8:	15 37       	cpi	r17, 0x75	; 117
    38aa:	01 f1       	breq	.+64     	; 0x38ec <vfscanf+0x1f0>
    38ac:	23 c0       	rjmp	.+70     	; 0x38f4 <vfscanf+0x1f8>
    38ae:	81 14       	cp	r8, r1
    38b0:	91 04       	cpc	r9, r1
    38b2:	29 f0       	breq	.+10     	; 0x38be <vfscanf+0x1c2>
    38b4:	f4 01       	movw	r30, r8
    38b6:	60 82       	st	Z, r6
    38b8:	c4 01       	movw	r24, r8
    38ba:	01 96       	adiw	r24, 0x01	; 1
    38bc:	4c 01       	movw	r8, r24
    38be:	fa 94       	dec	r15
    38c0:	ff 20       	and	r15, r15
    38c2:	71 f0       	breq	.+28     	; 0x38e0 <vfscanf+0x1e4>
    38c4:	c6 01       	movw	r24, r12
    38c6:	0e 94 b7 1c 	call	0x396e	; 0x396e <fgetc>
    38ca:	3c 01       	movw	r6, r24
    38cc:	97 fd       	sbrc	r25, 7
    38ce:	08 c0       	rjmp	.+16     	; 0x38e0 <vfscanf+0x1e4>
    38d0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <isspace>
    38d4:	89 2b       	or	r24, r25
    38d6:	59 f3       	breq	.-42     	; 0x38ae <vfscanf+0x1b2>
    38d8:	b6 01       	movw	r22, r12
    38da:	c3 01       	movw	r24, r6
    38dc:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <ungetc>
    38e0:	81 14       	cp	r8, r1
    38e2:	91 04       	cpc	r9, r1
    38e4:	a9 f0       	breq	.+42     	; 0x3910 <vfscanf+0x214>
    38e6:	f4 01       	movw	r30, r8
    38e8:	10 82       	st	Z, r1
    38ea:	12 c0       	rjmp	.+36     	; 0x3910 <vfscanf+0x214>
    38ec:	00 62       	ori	r16, 0x20	; 32
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <vfscanf+0x1fa>
    38f0:	00 61       	ori	r16, 0x10	; 16
    38f2:	01 c0       	rjmp	.+2      	; 0x38f6 <vfscanf+0x1fa>
    38f4:	00 64       	ori	r16, 0x40	; 64
    38f6:	20 2f       	mov	r18, r16
    38f8:	a4 01       	movw	r20, r8
    38fa:	6f 2d       	mov	r22, r15
    38fc:	c6 01       	movw	r24, r12
    38fe:	0e 94 11 1a 	call	0x3422	; 0x3422 <conv_int>
    3902:	81 11       	cpse	r24, r1
    3904:	05 c0       	rjmp	.+10     	; 0x3910 <vfscanf+0x214>
    3906:	f6 01       	movw	r30, r12
    3908:	83 81       	ldd	r24, Z+3	; 0x03
    390a:	80 73       	andi	r24, 0x30	; 48
    390c:	29 f4       	brne	.+10     	; 0x3918 <vfscanf+0x21c>
    390e:	06 c0       	rjmp	.+12     	; 0x391c <vfscanf+0x220>
    3910:	00 fd       	sbrc	r16, 0
    3912:	0a cf       	rjmp	.-492    	; 0x3728 <vfscanf+0x2c>
    3914:	53 94       	inc	r5
    3916:	08 cf       	rjmp	.-496    	; 0x3728 <vfscanf+0x2c>
    3918:	55 20       	and	r5, r5
    391a:	19 f0       	breq	.+6      	; 0x3922 <vfscanf+0x226>
    391c:	85 2d       	mov	r24, r5
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <vfscanf+0x22a>
    3922:	8f ef       	ldi	r24, 0xFF	; 255
    3924:	9f ef       	ldi	r25, 0xFF	; 255
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	ff 90       	pop	r15
    3930:	ef 90       	pop	r14
    3932:	df 90       	pop	r13
    3934:	cf 90       	pop	r12
    3936:	bf 90       	pop	r11
    3938:	af 90       	pop	r10
    393a:	9f 90       	pop	r9
    393c:	8f 90       	pop	r8
    393e:	7f 90       	pop	r7
    3940:	6f 90       	pop	r6
    3942:	5f 90       	pop	r5
    3944:	08 95       	ret

00003946 <isspace>:
    3946:	91 11       	cpse	r25, r1
    3948:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__ctype_isfalse>
    394c:	80 32       	cpi	r24, 0x20	; 32
    394e:	19 f0       	breq	.+6      	; 0x3956 <isspace+0x10>
    3950:	89 50       	subi	r24, 0x09	; 9
    3952:	85 50       	subi	r24, 0x05	; 5
    3954:	c8 f7       	brcc	.-14     	; 0x3948 <isspace+0x2>
    3956:	08 95       	ret

00003958 <strchr_P>:
    3958:	fc 01       	movw	r30, r24
    395a:	05 90       	lpm	r0, Z+
    395c:	06 16       	cp	r0, r22
    395e:	21 f0       	breq	.+8      	; 0x3968 <strchr_P+0x10>
    3960:	00 20       	and	r0, r0
    3962:	d9 f7       	brne	.-10     	; 0x395a <strchr_P+0x2>
    3964:	c0 01       	movw	r24, r0
    3966:	08 95       	ret
    3968:	31 97       	sbiw	r30, 0x01	; 1
    396a:	cf 01       	movw	r24, r30
    396c:	08 95       	ret

0000396e <fgetc>:
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	ec 01       	movw	r28, r24
    3974:	2b 81       	ldd	r18, Y+3	; 0x03
    3976:	20 ff       	sbrs	r18, 0
    3978:	33 c0       	rjmp	.+102    	; 0x39e0 <fgetc+0x72>
    397a:	26 ff       	sbrs	r18, 6
    397c:	0a c0       	rjmp	.+20     	; 0x3992 <fgetc+0x24>
    397e:	2f 7b       	andi	r18, 0xBF	; 191
    3980:	2b 83       	std	Y+3, r18	; 0x03
    3982:	8e 81       	ldd	r24, Y+6	; 0x06
    3984:	9f 81       	ldd	r25, Y+7	; 0x07
    3986:	01 96       	adiw	r24, 0x01	; 1
    3988:	8e 83       	std	Y+6, r24	; 0x06
    398a:	9f 83       	std	Y+7, r25	; 0x07
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	29 c0       	rjmp	.+82     	; 0x39e4 <fgetc+0x76>
    3992:	22 ff       	sbrs	r18, 2
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <fgetc+0x46>
    3996:	e8 81       	ld	r30, Y
    3998:	f9 81       	ldd	r31, Y+1	; 0x01
    399a:	80 81       	ld	r24, Z
    399c:	08 2e       	mov	r0, r24
    399e:	00 0c       	add	r0, r0
    39a0:	99 0b       	sbc	r25, r25
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	19 f4       	brne	.+6      	; 0x39ac <fgetc+0x3e>
    39a6:	20 62       	ori	r18, 0x20	; 32
    39a8:	2b 83       	std	Y+3, r18	; 0x03
    39aa:	1a c0       	rjmp	.+52     	; 0x39e0 <fgetc+0x72>
    39ac:	31 96       	adiw	r30, 0x01	; 1
    39ae:	e8 83       	st	Y, r30
    39b0:	f9 83       	std	Y+1, r31	; 0x01
    39b2:	0e c0       	rjmp	.+28     	; 0x39d0 <fgetc+0x62>
    39b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    39b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    39b8:	19 95       	eicall
    39ba:	97 ff       	sbrs	r25, 7
    39bc:	09 c0       	rjmp	.+18     	; 0x39d0 <fgetc+0x62>
    39be:	2b 81       	ldd	r18, Y+3	; 0x03
    39c0:	01 96       	adiw	r24, 0x01	; 1
    39c2:	11 f0       	breq	.+4      	; 0x39c8 <fgetc+0x5a>
    39c4:	80 e2       	ldi	r24, 0x20	; 32
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <fgetc+0x5c>
    39c8:	80 e1       	ldi	r24, 0x10	; 16
    39ca:	82 2b       	or	r24, r18
    39cc:	8b 83       	std	Y+3, r24	; 0x03
    39ce:	08 c0       	rjmp	.+16     	; 0x39e0 <fgetc+0x72>
    39d0:	2e 81       	ldd	r18, Y+6	; 0x06
    39d2:	3f 81       	ldd	r19, Y+7	; 0x07
    39d4:	2f 5f       	subi	r18, 0xFF	; 255
    39d6:	3f 4f       	sbci	r19, 0xFF	; 255
    39d8:	2e 83       	std	Y+6, r18	; 0x06
    39da:	3f 83       	std	Y+7, r19	; 0x07
    39dc:	99 27       	eor	r25, r25
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <fgetc+0x76>
    39e0:	8f ef       	ldi	r24, 0xFF	; 255
    39e2:	9f ef       	ldi	r25, 0xFF	; 255
    39e4:	df 91       	pop	r29
    39e6:	cf 91       	pop	r28
    39e8:	08 95       	ret

000039ea <ungetc>:
    39ea:	fb 01       	movw	r30, r22
    39ec:	23 81       	ldd	r18, Z+3	; 0x03
    39ee:	20 ff       	sbrs	r18, 0
    39f0:	12 c0       	rjmp	.+36     	; 0x3a16 <ungetc+0x2c>
    39f2:	26 fd       	sbrc	r18, 6
    39f4:	10 c0       	rjmp	.+32     	; 0x3a16 <ungetc+0x2c>
    39f6:	8f 3f       	cpi	r24, 0xFF	; 255
    39f8:	3f ef       	ldi	r19, 0xFF	; 255
    39fa:	93 07       	cpc	r25, r19
    39fc:	61 f0       	breq	.+24     	; 0x3a16 <ungetc+0x2c>
    39fe:	82 83       	std	Z+2, r24	; 0x02
    3a00:	2f 7d       	andi	r18, 0xDF	; 223
    3a02:	20 64       	ori	r18, 0x40	; 64
    3a04:	23 83       	std	Z+3, r18	; 0x03
    3a06:	26 81       	ldd	r18, Z+6	; 0x06
    3a08:	37 81       	ldd	r19, Z+7	; 0x07
    3a0a:	21 50       	subi	r18, 0x01	; 1
    3a0c:	31 09       	sbc	r19, r1
    3a0e:	26 83       	std	Z+6, r18	; 0x06
    3a10:	37 83       	std	Z+7, r19	; 0x07
    3a12:	99 27       	eor	r25, r25
    3a14:	08 95       	ret
    3a16:	8f ef       	ldi	r24, 0xFF	; 255
    3a18:	9f ef       	ldi	r25, 0xFF	; 255
    3a1a:	08 95       	ret

00003a1c <__ctype_isfalse>:
    3a1c:	99 27       	eor	r25, r25
    3a1e:	88 27       	eor	r24, r24

00003a20 <__ctype_istrue>:
    3a20:	08 95       	ret

00003a22 <_exit>:
    3a22:	f8 94       	cli

00003a24 <__stop_program>:
    3a24:	ff cf       	rjmp	.-2      	; 0x3a24 <__stop_program>
